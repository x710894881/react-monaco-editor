{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './tree.css';\nimport * as TreeDefaults from './treeDefaults.js';\nimport * as Model from './treeModel.js';\nimport * as View from './treeView.js';\nimport { Emitter, Relay } from '../../../common/event.js';\nimport { Color } from '../../../common/color.js';\nimport { mixin } from '../../../common/objects.js';\n\nvar TreeContext =\n/** @class */\nfunction () {\n  function TreeContext(tree, configuration, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.tree = tree;\n    this.configuration = configuration;\n    this.options = options;\n\n    if (!configuration.dataSource) {\n      throw new Error('You must provide a Data Source to the tree.');\n    }\n\n    this.dataSource = configuration.dataSource;\n    this.renderer = configuration.renderer;\n    this.controller = configuration.controller || new TreeDefaults.DefaultController({\n      clickBehavior: 1\n      /* ON_MOUSE_UP */\n      ,\n      keyboardSupport: typeof options.keyboardSupport !== 'boolean' || options.keyboardSupport\n    });\n    this.dnd = configuration.dnd || new TreeDefaults.DefaultDragAndDrop();\n    this.filter = configuration.filter || new TreeDefaults.DefaultFilter();\n    this.sorter = configuration.sorter;\n    this.accessibilityProvider = configuration.accessibilityProvider || new TreeDefaults.DefaultAccessibilityProvider();\n    this.styler = configuration.styler;\n  }\n\n  return TreeContext;\n}();\n\nexport { TreeContext };\nvar defaultStyles = {\n  listFocusBackground: Color.fromHex('#073655'),\n  listActiveSelectionBackground: Color.fromHex('#0E639C'),\n  listActiveSelectionForeground: Color.fromHex('#FFFFFF'),\n  listFocusAndSelectionBackground: Color.fromHex('#094771'),\n  listFocusAndSelectionForeground: Color.fromHex('#FFFFFF'),\n  listInactiveSelectionBackground: Color.fromHex('#3F3F46'),\n  listHoverBackground: Color.fromHex('#2A2D2E'),\n  listDropBackground: Color.fromHex('#383B3D')\n};\n\nvar Tree =\n/** @class */\nfunction () {\n  function Tree(container, configuration, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._onDidChangeFocus = new Relay();\n    this.onDidChangeFocus = this._onDidChangeFocus.event;\n    this._onDidChangeSelection = new Relay();\n    this.onDidChangeSelection = this._onDidChangeSelection.event;\n    this._onHighlightChange = new Relay();\n    this._onDidExpandItem = new Relay();\n    this._onDidCollapseItem = new Relay();\n    this._onDispose = new Emitter();\n    this.onDidDispose = this._onDispose.event;\n    this.container = container;\n    mixin(options, defaultStyles, false);\n    options.twistiePixels = typeof options.twistiePixels === 'number' ? options.twistiePixels : 32;\n    options.showTwistie = options.showTwistie === false ? false : true;\n    options.indentPixels = typeof options.indentPixels === 'number' ? options.indentPixels : 12;\n    options.alwaysFocused = options.alwaysFocused === true ? true : false;\n    options.useShadows = options.useShadows === false ? false : true;\n    options.paddingOnRow = options.paddingOnRow === false ? false : true;\n    options.showLoading = options.showLoading === false ? false : true;\n    this.context = new TreeContext(this, configuration, options);\n    this.model = new Model.TreeModel(this.context);\n    this.view = new View.TreeView(this.context, this.container);\n    this.view.setModel(this.model);\n    this._onDidChangeFocus.input = this.model.onDidFocus;\n    this._onDidChangeSelection.input = this.model.onDidSelect;\n    this._onHighlightChange.input = this.model.onDidHighlight;\n    this._onDidExpandItem.input = this.model.onDidExpandItem;\n    this._onDidCollapseItem.input = this.model.onDidCollapseItem;\n  }\n\n  Tree.prototype.style = function (styles) {\n    this.view.applyStyles(styles);\n  };\n\n  Object.defineProperty(Tree.prototype, \"onDidFocus\", {\n    get: function () {\n      return this.view && this.view.onDOMFocus;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Tree.prototype.getHTMLElement = function () {\n    return this.view.getHTMLElement();\n  };\n\n  Tree.prototype.layout = function (height, width) {\n    this.view.layout(height, width);\n  };\n\n  Tree.prototype.domFocus = function () {\n    this.view.focus();\n  };\n\n  Tree.prototype.isDOMFocused = function () {\n    return this.view.isFocused();\n  };\n\n  Tree.prototype.domBlur = function () {\n    this.view.blur();\n  };\n\n  Tree.prototype.setInput = function (element) {\n    return this.model.setInput(element);\n  };\n\n  Tree.prototype.getInput = function () {\n    return this.model.getInput();\n  };\n\n  Tree.prototype.expand = function (element) {\n    return this.model.expand(element);\n  };\n\n  Tree.prototype.collapse = function (element, recursive) {\n    if (recursive === void 0) {\n      recursive = false;\n    }\n\n    return this.model.collapse(element, recursive);\n  };\n\n  Tree.prototype.toggleExpansion = function (element, recursive) {\n    if (recursive === void 0) {\n      recursive = false;\n    }\n\n    return this.model.toggleExpansion(element, recursive);\n  };\n\n  Tree.prototype.isExpanded = function (element) {\n    return this.model.isExpanded(element);\n  };\n\n  Tree.prototype.reveal = function (element, relativeTop) {\n    if (relativeTop === void 0) {\n      relativeTop = null;\n    }\n\n    return this.model.reveal(element, relativeTop);\n  };\n\n  Tree.prototype.getHighlight = function () {\n    return this.model.getHighlight();\n  };\n\n  Tree.prototype.clearHighlight = function (eventPayload) {\n    this.model.setHighlight(null, eventPayload);\n  };\n\n  Tree.prototype.setSelection = function (elements, eventPayload) {\n    this.model.setSelection(elements, eventPayload);\n  };\n\n  Tree.prototype.getSelection = function () {\n    return this.model.getSelection();\n  };\n\n  Tree.prototype.clearSelection = function (eventPayload) {\n    this.model.setSelection([], eventPayload);\n  };\n\n  Tree.prototype.setFocus = function (element, eventPayload) {\n    this.model.setFocus(element, eventPayload);\n  };\n\n  Tree.prototype.getFocus = function () {\n    return this.model.getFocus();\n  };\n\n  Tree.prototype.focusNext = function (count, eventPayload) {\n    this.model.focusNext(count, eventPayload);\n  };\n\n  Tree.prototype.focusPrevious = function (count, eventPayload) {\n    this.model.focusPrevious(count, eventPayload);\n  };\n\n  Tree.prototype.focusParent = function (eventPayload) {\n    this.model.focusParent(eventPayload);\n  };\n\n  Tree.prototype.focusFirstChild = function (eventPayload) {\n    this.model.focusFirstChild(eventPayload);\n  };\n\n  Tree.prototype.focusFirst = function (eventPayload, from) {\n    this.model.focusFirst(eventPayload, from);\n  };\n\n  Tree.prototype.focusNth = function (index, eventPayload) {\n    this.model.focusNth(index, eventPayload);\n  };\n\n  Tree.prototype.focusLast = function (eventPayload, from) {\n    this.model.focusLast(eventPayload, from);\n  };\n\n  Tree.prototype.focusNextPage = function (eventPayload) {\n    this.view.focusNextPage(eventPayload);\n  };\n\n  Tree.prototype.focusPreviousPage = function (eventPayload) {\n    this.view.focusPreviousPage(eventPayload);\n  };\n\n  Tree.prototype.clearFocus = function (eventPayload) {\n    this.model.setFocus(null, eventPayload);\n  };\n\n  Tree.prototype.dispose = function () {\n    this._onDispose.fire();\n\n    if (this.model !== null) {\n      this.model.dispose();\n      this.model = null; // StrictNullOverride Nulling out ok in dispose\n    }\n\n    if (this.view !== null) {\n      this.view.dispose();\n      this.view = null; // StrictNullOverride Nulling out ok in dispose\n    }\n\n    this._onDidChangeFocus.dispose();\n\n    this._onDidChangeSelection.dispose();\n\n    this._onHighlightChange.dispose();\n\n    this._onDidExpandItem.dispose();\n\n    this._onDidCollapseItem.dispose();\n\n    this._onDispose.dispose();\n  };\n\n  return Tree;\n}();\n\nexport { Tree };","map":null,"metadata":{},"sourceType":"module"}