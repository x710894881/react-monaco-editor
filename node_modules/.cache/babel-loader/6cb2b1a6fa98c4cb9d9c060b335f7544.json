{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\n\nvar OneCursor =\n/** @class */\nfunction () {\n  function OneCursor(context) {\n    this._selTrackedRange = null;\n    this._trackSelection = true;\n\n    this._setState(context, new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0), new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(1, 1), 0));\n  }\n\n  OneCursor.prototype.dispose = function (context) {\n    this._removeTrackedRange(context);\n  };\n\n  OneCursor.prototype.startTrackingSelection = function (context) {\n    this._trackSelection = true;\n\n    this._updateTrackedRange(context);\n  };\n\n  OneCursor.prototype.stopTrackingSelection = function (context) {\n    this._trackSelection = false;\n\n    this._removeTrackedRange(context);\n  };\n\n  OneCursor.prototype._updateTrackedRange = function (context) {\n    if (!this._trackSelection) {\n      // don't track the selection\n      return;\n    }\n\n    this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, this.modelState.selection, 0\n    /* AlwaysGrowsWhenTypingAtEdges */\n    );\n  };\n\n  OneCursor.prototype._removeTrackedRange = function (context) {\n    this._selTrackedRange = context.model._setTrackedRange(this._selTrackedRange, null, 0\n    /* AlwaysGrowsWhenTypingAtEdges */\n    );\n  };\n\n  OneCursor.prototype.asCursorState = function () {\n    return new CursorState(this.modelState, this.viewState);\n  };\n\n  OneCursor.prototype.readSelectionFromMarkers = function (context) {\n    var range = context.model._getTrackedRange(this._selTrackedRange);\n\n    if (this.modelState.selection.getDirection() === 0\n    /* LTR */\n    ) {\n        return new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn);\n      }\n\n    return new Selection(range.endLineNumber, range.endColumn, range.startLineNumber, range.startColumn);\n  };\n\n  OneCursor.prototype.ensureValidState = function (context) {\n    this._setState(context, this.modelState, this.viewState);\n  };\n\n  OneCursor.prototype.setState = function (context, modelState, viewState) {\n    this._setState(context, modelState, viewState);\n  };\n\n  OneCursor.prototype._setState = function (context, modelState, viewState) {\n    if (!modelState) {\n      if (!viewState) {\n        return;\n      } // We only have the view state => compute the model state\n\n\n      var selectionStart = context.model.validateRange(context.convertViewRangeToModelRange(viewState.selectionStart));\n      var position = context.model.validatePosition(context.convertViewPositionToModelPosition(viewState.position.lineNumber, viewState.position.column));\n      modelState = new SingleCursorState(selectionStart, viewState.selectionStartLeftoverVisibleColumns, position, viewState.leftoverVisibleColumns);\n    } else {\n      // Validate new model state\n      var selectionStart = context.model.validateRange(modelState.selectionStart);\n      var selectionStartLeftoverVisibleColumns = modelState.selectionStart.equalsRange(selectionStart) ? modelState.selectionStartLeftoverVisibleColumns : 0;\n      var position = context.model.validatePosition(modelState.position);\n      var leftoverVisibleColumns = modelState.position.equals(position) ? modelState.leftoverVisibleColumns : 0;\n      modelState = new SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns);\n    }\n\n    if (!viewState) {\n      // We only have the model state => compute the view state\n      var viewSelectionStart1 = context.convertModelPositionToViewPosition(new Position(modelState.selectionStart.startLineNumber, modelState.selectionStart.startColumn));\n      var viewSelectionStart2 = context.convertModelPositionToViewPosition(new Position(modelState.selectionStart.endLineNumber, modelState.selectionStart.endColumn));\n      var viewSelectionStart = new Range(viewSelectionStart1.lineNumber, viewSelectionStart1.column, viewSelectionStart2.lineNumber, viewSelectionStart2.column);\n      var viewPosition = context.convertModelPositionToViewPosition(modelState.position);\n      viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n    } else {\n      // Validate new view state\n      var viewSelectionStart = context.validateViewRange(viewState.selectionStart, modelState.selectionStart);\n      var viewPosition = context.validateViewPosition(viewState.position, modelState.position);\n      viewState = new SingleCursorState(viewSelectionStart, modelState.selectionStartLeftoverVisibleColumns, viewPosition, modelState.leftoverVisibleColumns);\n    }\n\n    this.modelState = modelState;\n    this.viewState = viewState;\n\n    this._updateTrackedRange(context);\n  };\n\n  return OneCursor;\n}();\n\nexport { OneCursor };","map":null,"metadata":{},"sourceType":"module"}