{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as platform from '../../../base/common/platform.js';\nimport { EDITOR_FONT_DEFAULTS } from './editorOptions.js';\nimport { EditorZoom } from './editorZoom.js';\n/**\n * Determined from empirical observations.\n * @internal\n */\n\nvar GOLDEN_LINE_HEIGHT_RATIO = platform.isMacintosh ? 1.5 : 1.35;\n/**\n * Font settings maximum and minimum limits\n */\n\nvar MINIMUM_FONT_SIZE = 8;\nvar MAXIMUM_FONT_SIZE = 100;\nvar MINIMUM_LINE_HEIGHT = 8;\nvar MAXIMUM_LINE_HEIGHT = 150;\nvar MINIMUM_LETTER_SPACING = -5;\nvar MAXIMUM_LETTER_SPACING = 20;\n\nfunction safeParseFloat(n, defaultValue) {\n  if (typeof n === 'number') {\n    return n;\n  }\n\n  if (typeof n === 'undefined') {\n    return defaultValue;\n  }\n\n  var r = parseFloat(n);\n\n  if (isNaN(r)) {\n    return defaultValue;\n  }\n\n  return r;\n}\n\nfunction safeParseInt(n, defaultValue) {\n  if (typeof n === 'number') {\n    return Math.round(n);\n  }\n\n  if (typeof n === 'undefined') {\n    return defaultValue;\n  }\n\n  var r = parseInt(n);\n\n  if (isNaN(r)) {\n    return defaultValue;\n  }\n\n  return r;\n}\n\nfunction clamp(n, min, max) {\n  if (n < min) {\n    return min;\n  }\n\n  if (n > max) {\n    return max;\n  }\n\n  return n;\n}\n\nfunction _string(value, defaultValue) {\n  if (typeof value !== 'string') {\n    return defaultValue;\n  }\n\n  return value;\n}\n\nvar BareFontInfo =\n/** @class */\nfunction () {\n  /**\n   * @internal\n   */\n  function BareFontInfo(opts) {\n    this.zoomLevel = opts.zoomLevel;\n    this.fontFamily = String(opts.fontFamily);\n    this.fontWeight = String(opts.fontWeight);\n    this.fontSize = opts.fontSize;\n    this.lineHeight = opts.lineHeight | 0;\n    this.letterSpacing = opts.letterSpacing;\n  }\n  /**\n   * @internal\n   */\n\n\n  BareFontInfo.createFromRawSettings = function (opts, zoomLevel, ignoreEditorZoom) {\n    if (ignoreEditorZoom === void 0) {\n      ignoreEditorZoom = false;\n    }\n\n    var fontFamily = _string(opts.fontFamily, EDITOR_FONT_DEFAULTS.fontFamily);\n\n    var fontWeight = _string(opts.fontWeight, EDITOR_FONT_DEFAULTS.fontWeight);\n\n    var fontSize = safeParseFloat(opts.fontSize, EDITOR_FONT_DEFAULTS.fontSize);\n    fontSize = clamp(fontSize, 0, MAXIMUM_FONT_SIZE);\n\n    if (fontSize === 0) {\n      fontSize = EDITOR_FONT_DEFAULTS.fontSize;\n    } else if (fontSize < MINIMUM_FONT_SIZE) {\n      fontSize = MINIMUM_FONT_SIZE;\n    }\n\n    var lineHeight = safeParseInt(opts.lineHeight, 0);\n    lineHeight = clamp(lineHeight, 0, MAXIMUM_LINE_HEIGHT);\n\n    if (lineHeight === 0) {\n      lineHeight = Math.round(GOLDEN_LINE_HEIGHT_RATIO * fontSize);\n    } else if (lineHeight < MINIMUM_LINE_HEIGHT) {\n      lineHeight = MINIMUM_LINE_HEIGHT;\n    }\n\n    var letterSpacing = safeParseFloat(opts.letterSpacing, 0);\n    letterSpacing = clamp(letterSpacing, MINIMUM_LETTER_SPACING, MAXIMUM_LETTER_SPACING);\n    var editorZoomLevelMultiplier = 1 + (ignoreEditorZoom ? 0 : EditorZoom.getZoomLevel() * 0.1);\n    fontSize *= editorZoomLevelMultiplier;\n    lineHeight *= editorZoomLevelMultiplier;\n    return new BareFontInfo({\n      zoomLevel: zoomLevel,\n      fontFamily: fontFamily,\n      fontWeight: fontWeight,\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      letterSpacing: letterSpacing\n    });\n  };\n  /**\n   * @internal\n   */\n\n\n  BareFontInfo.prototype.getId = function () {\n    return this.zoomLevel + '-' + this.fontFamily + '-' + this.fontWeight + '-' + this.fontSize + '-' + this.lineHeight + '-' + this.letterSpacing;\n  };\n  /**\n   * @internal\n   */\n\n\n  BareFontInfo.prototype.getMassagedFontFamily = function () {\n    if (/[,\"']/.test(this.fontFamily)) {\n      // Looks like the font family might be already escaped\n      return this.fontFamily;\n    }\n\n    if (/[+ ]/.test(this.fontFamily)) {\n      // Wrap a font family using + or <space> with quotes\n      return \"\\\"\" + this.fontFamily + \"\\\"\";\n    }\n\n    return this.fontFamily;\n  };\n\n  return BareFontInfo;\n}();\n\nexport { BareFontInfo };\n\nvar FontInfo =\n/** @class */\nfunction (_super) {\n  __extends(FontInfo, _super);\n  /**\n   * @internal\n   */\n\n\n  function FontInfo(opts, isTrusted) {\n    var _this = _super.call(this, opts) || this;\n\n    _this.isTrusted = isTrusted;\n    _this.isMonospace = opts.isMonospace;\n    _this.typicalHalfwidthCharacterWidth = opts.typicalHalfwidthCharacterWidth;\n    _this.typicalFullwidthCharacterWidth = opts.typicalFullwidthCharacterWidth;\n    _this.canUseHalfwidthRightwardsArrow = opts.canUseHalfwidthRightwardsArrow;\n    _this.spaceWidth = opts.spaceWidth;\n    _this.maxDigitWidth = opts.maxDigitWidth;\n    return _this;\n  }\n  /**\n   * @internal\n   */\n\n\n  FontInfo.prototype.equals = function (other) {\n    return this.fontFamily === other.fontFamily && this.fontWeight === other.fontWeight && this.fontSize === other.fontSize && this.lineHeight === other.lineHeight && this.letterSpacing === other.letterSpacing && this.typicalHalfwidthCharacterWidth === other.typicalHalfwidthCharacterWidth && this.typicalFullwidthCharacterWidth === other.typicalFullwidthCharacterWidth && this.canUseHalfwidthRightwardsArrow === other.canUseHalfwidthRightwardsArrow && this.spaceWidth === other.spaceWidth && this.maxDigitWidth === other.maxDigitWidth;\n  };\n\n  return FontInfo;\n}(BareFontInfo);\n\nexport { FontInfo };","map":null,"metadata":{},"sourceType":"module"}