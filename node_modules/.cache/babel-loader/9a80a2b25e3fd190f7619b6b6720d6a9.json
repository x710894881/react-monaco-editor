{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './findInput.css';\nimport * as nls from '../../../../nls.js';\nimport * as dom from '../../dom.js';\nimport { HistoryInputBox } from '../inputbox/inputBox.js';\nimport { Widget } from '../widget.js';\nimport { Emitter } from '../../../common/event.js';\nimport { CaseSensitiveCheckbox, WholeWordsCheckbox, RegexCheckbox } from './findInputCheckboxes.js';\nvar NLS_DEFAULT_LABEL = nls.localize('defaultLabel', \"input\");\n\nvar FindInput =\n/** @class */\nfunction (_super) {\n  __extends(FindInput, _super);\n\n  function FindInput(parent, contextViewProvider, _showOptionButtons, options) {\n    var _this = _super.call(this) || this;\n\n    _this._showOptionButtons = _showOptionButtons;\n    _this.fixFocusOnOptionClickEnabled = true;\n    _this._onDidOptionChange = _this._register(new Emitter());\n    _this.onDidOptionChange = _this._onDidOptionChange.event;\n    _this._onKeyDown = _this._register(new Emitter());\n    _this.onKeyDown = _this._onKeyDown.event;\n    _this._onMouseDown = _this._register(new Emitter());\n    _this.onMouseDown = _this._onMouseDown.event;\n    _this._onInput = _this._register(new Emitter());\n    _this._onKeyUp = _this._register(new Emitter());\n    _this._onCaseSensitiveKeyDown = _this._register(new Emitter());\n    _this.onCaseSensitiveKeyDown = _this._onCaseSensitiveKeyDown.event;\n    _this._onRegexKeyDown = _this._register(new Emitter());\n    _this.onRegexKeyDown = _this._onRegexKeyDown.event;\n    _this._lastHighlightFindOptions = 0;\n    _this.contextViewProvider = contextViewProvider;\n    _this.placeholder = options.placeholder || '';\n    _this.validation = options.validation;\n    _this.label = options.label || NLS_DEFAULT_LABEL;\n    _this.inputActiveOptionBorder = options.inputActiveOptionBorder;\n    _this.inputActiveOptionBackground = options.inputActiveOptionBackground;\n    _this.inputBackground = options.inputBackground;\n    _this.inputForeground = options.inputForeground;\n    _this.inputBorder = options.inputBorder;\n    _this.inputValidationInfoBorder = options.inputValidationInfoBorder;\n    _this.inputValidationInfoBackground = options.inputValidationInfoBackground;\n    _this.inputValidationInfoForeground = options.inputValidationInfoForeground;\n    _this.inputValidationWarningBorder = options.inputValidationWarningBorder;\n    _this.inputValidationWarningBackground = options.inputValidationWarningBackground;\n    _this.inputValidationWarningForeground = options.inputValidationWarningForeground;\n    _this.inputValidationErrorBorder = options.inputValidationErrorBorder;\n    _this.inputValidationErrorBackground = options.inputValidationErrorBackground;\n    _this.inputValidationErrorForeground = options.inputValidationErrorForeground;\n    var appendCaseSensitiveLabel = options.appendCaseSensitiveLabel || '';\n    var appendWholeWordsLabel = options.appendWholeWordsLabel || '';\n    var appendRegexLabel = options.appendRegexLabel || '';\n    var history = options.history || [];\n    var flexibleHeight = !!options.flexibleHeight;\n    var flexibleWidth = !!options.flexibleWidth;\n    var flexibleMaxHeight = options.flexibleMaxHeight;\n    _this.domNode = document.createElement('div');\n    dom.addClass(_this.domNode, 'monaco-findInput');\n    _this.inputBox = _this._register(new HistoryInputBox(_this.domNode, _this.contextViewProvider, {\n      placeholder: _this.placeholder || '',\n      ariaLabel: _this.label || '',\n      validationOptions: {\n        validation: _this.validation\n      },\n      inputBackground: _this.inputBackground,\n      inputForeground: _this.inputForeground,\n      inputBorder: _this.inputBorder,\n      inputValidationInfoBackground: _this.inputValidationInfoBackground,\n      inputValidationInfoForeground: _this.inputValidationInfoForeground,\n      inputValidationInfoBorder: _this.inputValidationInfoBorder,\n      inputValidationWarningBackground: _this.inputValidationWarningBackground,\n      inputValidationWarningForeground: _this.inputValidationWarningForeground,\n      inputValidationWarningBorder: _this.inputValidationWarningBorder,\n      inputValidationErrorBackground: _this.inputValidationErrorBackground,\n      inputValidationErrorForeground: _this.inputValidationErrorForeground,\n      inputValidationErrorBorder: _this.inputValidationErrorBorder,\n      history: history,\n      flexibleHeight: flexibleHeight,\n      flexibleWidth: flexibleWidth,\n      flexibleMaxHeight: flexibleMaxHeight\n    }));\n    _this.regex = _this._register(new RegexCheckbox({\n      appendTitle: appendRegexLabel,\n      isChecked: false,\n      inputActiveOptionBorder: _this.inputActiveOptionBorder,\n      inputActiveOptionBackground: _this.inputActiveOptionBackground\n    }));\n\n    _this._register(_this.regex.onChange(function (viaKeyboard) {\n      _this._onDidOptionChange.fire(viaKeyboard);\n\n      if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) {\n        _this.inputBox.focus();\n      }\n\n      _this.validate();\n    }));\n\n    _this._register(_this.regex.onKeyDown(function (e) {\n      _this._onRegexKeyDown.fire(e);\n    }));\n\n    _this.wholeWords = _this._register(new WholeWordsCheckbox({\n      appendTitle: appendWholeWordsLabel,\n      isChecked: false,\n      inputActiveOptionBorder: _this.inputActiveOptionBorder,\n      inputActiveOptionBackground: _this.inputActiveOptionBackground\n    }));\n\n    _this._register(_this.wholeWords.onChange(function (viaKeyboard) {\n      _this._onDidOptionChange.fire(viaKeyboard);\n\n      if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) {\n        _this.inputBox.focus();\n      }\n\n      _this.validate();\n    }));\n\n    _this.caseSensitive = _this._register(new CaseSensitiveCheckbox({\n      appendTitle: appendCaseSensitiveLabel,\n      isChecked: false,\n      inputActiveOptionBorder: _this.inputActiveOptionBorder,\n      inputActiveOptionBackground: _this.inputActiveOptionBackground\n    }));\n\n    _this._register(_this.caseSensitive.onChange(function (viaKeyboard) {\n      _this._onDidOptionChange.fire(viaKeyboard);\n\n      if (!viaKeyboard && _this.fixFocusOnOptionClickEnabled) {\n        _this.inputBox.focus();\n      }\n\n      _this.validate();\n    }));\n\n    _this._register(_this.caseSensitive.onKeyDown(function (e) {\n      _this._onCaseSensitiveKeyDown.fire(e);\n    }));\n\n    if (_this._showOptionButtons) {\n      _this.inputBox.paddingRight = _this.caseSensitive.width() + _this.wholeWords.width() + _this.regex.width();\n    } // Arrow-Key support to navigate between options\n\n\n    var indexes = [_this.caseSensitive.domNode, _this.wholeWords.domNode, _this.regex.domNode];\n\n    _this.onkeydown(_this.domNode, function (event) {\n      if (event.equals(15\n      /* LeftArrow */\n      ) || event.equals(17\n      /* RightArrow */\n      ) || event.equals(9\n      /* Escape */\n      )) {\n        var index = indexes.indexOf(document.activeElement);\n\n        if (index >= 0) {\n          var newIndex = -1;\n\n          if (event.equals(17\n          /* RightArrow */\n          )) {\n            newIndex = (index + 1) % indexes.length;\n          } else if (event.equals(15\n          /* LeftArrow */\n          )) {\n            if (index === 0) {\n              newIndex = indexes.length - 1;\n            } else {\n              newIndex = index - 1;\n            }\n          }\n\n          if (event.equals(9\n          /* Escape */\n          )) {\n            indexes[index].blur();\n          } else if (newIndex >= 0) {\n            indexes[newIndex].focus();\n          }\n\n          dom.EventHelper.stop(event, true);\n        }\n      }\n    });\n\n    var controls = document.createElement('div');\n    controls.className = 'controls';\n    controls.style.display = _this._showOptionButtons ? 'block' : 'none';\n    controls.appendChild(_this.caseSensitive.domNode);\n    controls.appendChild(_this.wholeWords.domNode);\n    controls.appendChild(_this.regex.domNode);\n\n    _this.domNode.appendChild(controls);\n\n    if (parent) {\n      parent.appendChild(_this.domNode);\n    }\n\n    _this.onkeydown(_this.inputBox.inputElement, function (e) {\n      return _this._onKeyDown.fire(e);\n    });\n\n    _this.onkeyup(_this.inputBox.inputElement, function (e) {\n      return _this._onKeyUp.fire(e);\n    });\n\n    _this.oninput(_this.inputBox.inputElement, function (e) {\n      return _this._onInput.fire();\n    });\n\n    _this.onmousedown(_this.inputBox.inputElement, function (e) {\n      return _this._onMouseDown.fire(e);\n    });\n\n    return _this;\n  }\n\n  FindInput.prototype.enable = function () {\n    dom.removeClass(this.domNode, 'disabled');\n    this.inputBox.enable();\n    this.regex.enable();\n    this.wholeWords.enable();\n    this.caseSensitive.enable();\n  };\n\n  FindInput.prototype.disable = function () {\n    dom.addClass(this.domNode, 'disabled');\n    this.inputBox.disable();\n    this.regex.disable();\n    this.wholeWords.disable();\n    this.caseSensitive.disable();\n  };\n\n  FindInput.prototype.setFocusInputOnOptionClick = function (value) {\n    this.fixFocusOnOptionClickEnabled = value;\n  };\n\n  FindInput.prototype.setEnabled = function (enabled) {\n    if (enabled) {\n      this.enable();\n    } else {\n      this.disable();\n    }\n  };\n\n  FindInput.prototype.getValue = function () {\n    return this.inputBox.value;\n  };\n\n  FindInput.prototype.setValue = function (value) {\n    if (this.inputBox.value !== value) {\n      this.inputBox.value = value;\n    }\n  };\n\n  FindInput.prototype.style = function (styles) {\n    this.inputActiveOptionBorder = styles.inputActiveOptionBorder;\n    this.inputActiveOptionBackground = styles.inputActiveOptionBackground;\n    this.inputBackground = styles.inputBackground;\n    this.inputForeground = styles.inputForeground;\n    this.inputBorder = styles.inputBorder;\n    this.inputValidationInfoBackground = styles.inputValidationInfoBackground;\n    this.inputValidationInfoForeground = styles.inputValidationInfoForeground;\n    this.inputValidationInfoBorder = styles.inputValidationInfoBorder;\n    this.inputValidationWarningBackground = styles.inputValidationWarningBackground;\n    this.inputValidationWarningForeground = styles.inputValidationWarningForeground;\n    this.inputValidationWarningBorder = styles.inputValidationWarningBorder;\n    this.inputValidationErrorBackground = styles.inputValidationErrorBackground;\n    this.inputValidationErrorForeground = styles.inputValidationErrorForeground;\n    this.inputValidationErrorBorder = styles.inputValidationErrorBorder;\n    this.applyStyles();\n  };\n\n  FindInput.prototype.applyStyles = function () {\n    if (this.domNode) {\n      var checkBoxStyles = {\n        inputActiveOptionBorder: this.inputActiveOptionBorder,\n        inputActiveOptionBackground: this.inputActiveOptionBackground\n      };\n      this.regex.style(checkBoxStyles);\n      this.wholeWords.style(checkBoxStyles);\n      this.caseSensitive.style(checkBoxStyles);\n      var inputBoxStyles = {\n        inputBackground: this.inputBackground,\n        inputForeground: this.inputForeground,\n        inputBorder: this.inputBorder,\n        inputValidationInfoBackground: this.inputValidationInfoBackground,\n        inputValidationInfoForeground: this.inputValidationInfoForeground,\n        inputValidationInfoBorder: this.inputValidationInfoBorder,\n        inputValidationWarningBackground: this.inputValidationWarningBackground,\n        inputValidationWarningForeground: this.inputValidationWarningForeground,\n        inputValidationWarningBorder: this.inputValidationWarningBorder,\n        inputValidationErrorBackground: this.inputValidationErrorBackground,\n        inputValidationErrorForeground: this.inputValidationErrorForeground,\n        inputValidationErrorBorder: this.inputValidationErrorBorder\n      };\n      this.inputBox.style(inputBoxStyles);\n    }\n  };\n\n  FindInput.prototype.select = function () {\n    this.inputBox.select();\n  };\n\n  FindInput.prototype.focus = function () {\n    this.inputBox.focus();\n  };\n\n  FindInput.prototype.getCaseSensitive = function () {\n    return this.caseSensitive.checked;\n  };\n\n  FindInput.prototype.setCaseSensitive = function (value) {\n    this.caseSensitive.checked = value;\n  };\n\n  FindInput.prototype.getWholeWords = function () {\n    return this.wholeWords.checked;\n  };\n\n  FindInput.prototype.setWholeWords = function (value) {\n    this.wholeWords.checked = value;\n  };\n\n  FindInput.prototype.getRegex = function () {\n    return this.regex.checked;\n  };\n\n  FindInput.prototype.setRegex = function (value) {\n    this.regex.checked = value;\n    this.validate();\n  };\n\n  FindInput.prototype.focusOnCaseSensitive = function () {\n    this.caseSensitive.focus();\n  };\n\n  FindInput.prototype.highlightFindOptions = function () {\n    dom.removeClass(this.domNode, 'highlight-' + this._lastHighlightFindOptions);\n    this._lastHighlightFindOptions = 1 - this._lastHighlightFindOptions;\n    dom.addClass(this.domNode, 'highlight-' + this._lastHighlightFindOptions);\n  };\n\n  FindInput.prototype.validate = function () {\n    if (this.inputBox) {\n      this.inputBox.validate();\n    }\n  };\n\n  FindInput.prototype.clearMessage = function () {\n    if (this.inputBox) {\n      this.inputBox.hideMessage();\n    }\n  };\n\n  FindInput.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n\n  return FindInput;\n}(Widget);\n\nexport { FindInput };","map":null,"metadata":{},"sourceType":"module"}