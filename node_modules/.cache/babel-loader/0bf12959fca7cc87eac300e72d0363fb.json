{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './marginDecorations.css';\nimport { DecorationToRender, DedupOverlay } from '../glyphMargin/glyphMargin.js';\n\nvar MarginViewLineDecorationsOverlay =\n/** @class */\nfunction (_super) {\n  __extends(MarginViewLineDecorationsOverlay, _super);\n\n  function MarginViewLineDecorationsOverlay(context) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  MarginViewLineDecorationsOverlay.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  MarginViewLineDecorationsOverlay.prototype.onConfigurationChanged = function (e) {\n    return true;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.onDecorationsChanged = function (e) {\n    return true;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.onLinesChanged = function (e) {\n    return true;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.onZonesChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n\n\n  MarginViewLineDecorationsOverlay.prototype._getDecorations = function (ctx) {\n    var decorations = ctx.getDecorationsInViewport();\n    var r = [],\n        rLen = 0;\n\n    for (var i = 0, len = decorations.length; i < len; i++) {\n      var d = decorations[i];\n      var marginClassName = d.options.marginClassName;\n\n      if (marginClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, marginClassName);\n      }\n    }\n\n    return r;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.prepareRender = function (ctx) {\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    var toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n    var output = [];\n\n    for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      var lineIndex = lineNumber - visibleStartLineNumber;\n      var classNames = toRender[lineIndex];\n      var lineOutput = '';\n\n      for (var i = 0, len = classNames.length; i < len; i++) {\n        lineOutput += '<div class=\"cmdr ' + classNames[i] + '\" style=\"\"></div>';\n      }\n\n      output[lineIndex] = lineOutput;\n    }\n\n    this._renderResult = output;\n  };\n\n  MarginViewLineDecorationsOverlay.prototype.render = function (startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    return this._renderResult[lineNumber - startLineNumber];\n  };\n\n  return MarginViewLineDecorationsOverlay;\n}(DedupOverlay);\n\nexport { MarginViewLineDecorationsOverlay };","map":null,"metadata":{},"sourceType":"module"}