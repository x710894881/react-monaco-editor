{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { IMarkerService, MarkerSeverity } from '../../../platform/markers/common/markers.js';\nimport { Disposable, toDisposable } from '../../../base/common/lifecycle.js';\nimport { OverviewRulerLane } from '../model.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\nimport { overviewRulerWarning, overviewRulerInfo, overviewRulerError } from '../view/editorColorRegistry.js';\nimport { IModelService } from './modelService.js';\nimport { Range } from '../core/range.js';\nimport { keys } from '../../../base/common/map.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { withUndefinedAsNull } from '../../../base/common/types.js';\n\nfunction MODEL_ID(resource) {\n  return resource.toString();\n}\n\nvar MarkerDecorations =\n/** @class */\nfunction (_super) {\n  __extends(MarkerDecorations, _super);\n\n  function MarkerDecorations(model) {\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    _this._markersData = new Map();\n\n    _this._register(toDisposable(function () {\n      _this.model.deltaDecorations(keys(_this._markersData), []);\n\n      _this._markersData.clear();\n    }));\n\n    return _this;\n  }\n\n  MarkerDecorations.prototype.update = function (markers, newDecorations) {\n    var ids = this.model.deltaDecorations(keys(this._markersData), newDecorations);\n\n    for (var index = 0; index < ids.length; index++) {\n      this._markersData.set(ids[index], markers[index]);\n    }\n  };\n\n  MarkerDecorations.prototype.getMarker = function (decoration) {\n    return this._markersData.get(decoration.id);\n  };\n\n  return MarkerDecorations;\n}(Disposable);\n\nvar MarkerDecorationsService =\n/** @class */\nfunction (_super) {\n  __extends(MarkerDecorationsService, _super);\n\n  function MarkerDecorationsService(modelService, _markerService) {\n    var _this = _super.call(this) || this;\n\n    _this._markerService = _markerService;\n    _this._onDidChangeMarker = _this._register(new Emitter());\n    _this._markerDecorations = new Map();\n    modelService.getModels().forEach(function (model) {\n      return _this._onModelAdded(model);\n    });\n\n    _this._register(modelService.onModelAdded(_this._onModelAdded, _this));\n\n    _this._register(modelService.onModelRemoved(_this._onModelRemoved, _this));\n\n    _this._register(_this._markerService.onMarkerChanged(_this._handleMarkerChange, _this));\n\n    return _this;\n  }\n\n  MarkerDecorationsService.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._markerDecorations.forEach(function (value) {\n      return value.dispose();\n    });\n\n    this._markerDecorations.clear();\n  };\n\n  MarkerDecorationsService.prototype.getMarker = function (model, decoration) {\n    var markerDecorations = this._markerDecorations.get(MODEL_ID(model.uri));\n\n    return markerDecorations ? withUndefinedAsNull(markerDecorations.getMarker(decoration)) : null;\n  };\n\n  MarkerDecorationsService.prototype._handleMarkerChange = function (changedResources) {\n    var _this = this;\n\n    changedResources.forEach(function (resource) {\n      var markerDecorations = _this._markerDecorations.get(MODEL_ID(resource));\n\n      if (markerDecorations) {\n        _this._updateDecorations(markerDecorations);\n      }\n    });\n  };\n\n  MarkerDecorationsService.prototype._onModelAdded = function (model) {\n    var markerDecorations = new MarkerDecorations(model);\n\n    this._markerDecorations.set(MODEL_ID(model.uri), markerDecorations);\n\n    this._updateDecorations(markerDecorations);\n  };\n\n  MarkerDecorationsService.prototype._onModelRemoved = function (model) {\n    var _this = this;\n\n    var markerDecorations = this._markerDecorations.get(MODEL_ID(model.uri));\n\n    if (markerDecorations) {\n      markerDecorations.dispose();\n\n      this._markerDecorations.delete(MODEL_ID(model.uri));\n    } // clean up markers for internal, transient models\n\n\n    if (model.uri.scheme === Schemas.inMemory || model.uri.scheme === Schemas.internal || model.uri.scheme === Schemas.vscode) {\n      if (this._markerService) {\n        this._markerService.read({\n          resource: model.uri\n        }).map(function (marker) {\n          return marker.owner;\n        }).forEach(function (owner) {\n          return _this._markerService.remove(owner, [model.uri]);\n        });\n      }\n    }\n  };\n\n  MarkerDecorationsService.prototype._updateDecorations = function (markerDecorations) {\n    var _this = this; // Limit to the first 500 errors/warnings\n\n\n    var markers = this._markerService.read({\n      resource: markerDecorations.model.uri,\n      take: 500\n    });\n\n    var newModelDecorations = markers.map(function (marker) {\n      return {\n        range: _this._createDecorationRange(markerDecorations.model, marker),\n        options: _this._createDecorationOption(marker)\n      };\n    });\n    markerDecorations.update(markers, newModelDecorations);\n\n    this._onDidChangeMarker.fire(markerDecorations.model);\n  };\n\n  MarkerDecorationsService.prototype._createDecorationRange = function (model, rawMarker) {\n    var ret = Range.lift(rawMarker);\n\n    if (rawMarker.severity === MarkerSeverity.Hint) {\n      if (!rawMarker.tags || rawMarker.tags.indexOf(1\n      /* Unnecessary */\n      ) === -1) {\n        // * never render hints on multiple lines\n        // * make enough space for three dots\n        ret = ret.setEndPosition(ret.startLineNumber, ret.startColumn + 2);\n      }\n    }\n\n    ret = model.validateRange(ret);\n\n    if (ret.isEmpty()) {\n      var word = model.getWordAtPosition(ret.getStartPosition());\n\n      if (word) {\n        ret = new Range(ret.startLineNumber, word.startColumn, ret.endLineNumber, word.endColumn);\n      } else {\n        var maxColumn = model.getLineLastNonWhitespaceColumn(ret.startLineNumber) || model.getLineMaxColumn(ret.startLineNumber);\n\n        if (maxColumn === 1) {// empty line\n          // console.warn('marker on empty line:', marker);\n        } else if (ret.endColumn >= maxColumn) {\n          // behind eol\n          ret = new Range(ret.startLineNumber, maxColumn - 1, ret.endLineNumber, maxColumn);\n        } else {\n          // extend marker to width = 1\n          ret = new Range(ret.startLineNumber, ret.startColumn, ret.endLineNumber, ret.endColumn + 1);\n        }\n      }\n    } else if (rawMarker.endColumn === Number.MAX_VALUE && rawMarker.startColumn === 1 && ret.startLineNumber === ret.endLineNumber) {\n      var minColumn = model.getLineFirstNonWhitespaceColumn(rawMarker.startLineNumber);\n\n      if (minColumn < ret.endColumn) {\n        ret = new Range(ret.startLineNumber, minColumn, ret.endLineNumber, ret.endColumn);\n        rawMarker.startColumn = minColumn;\n      }\n    }\n\n    return ret;\n  };\n\n  MarkerDecorationsService.prototype._createDecorationOption = function (marker) {\n    var className;\n    var color = undefined;\n    var zIndex;\n    var inlineClassName = undefined;\n\n    switch (marker.severity) {\n      case MarkerSeverity.Hint:\n        if (marker.tags && marker.tags.indexOf(1\n        /* Unnecessary */\n        ) >= 0) {\n          className = \"squiggly-unnecessary\"\n          /* EditorUnnecessaryDecoration */\n          ;\n        } else {\n          className = \"squiggly-hint\"\n          /* EditorHintDecoration */\n          ;\n        }\n\n        zIndex = 0;\n        break;\n\n      case MarkerSeverity.Warning:\n        className = \"squiggly-warning\"\n        /* EditorWarningDecoration */\n        ;\n        color = themeColorFromId(overviewRulerWarning);\n        zIndex = 20;\n        break;\n\n      case MarkerSeverity.Info:\n        className = \"squiggly-info\"\n        /* EditorInfoDecoration */\n        ;\n        color = themeColorFromId(overviewRulerInfo);\n        zIndex = 10;\n        break;\n\n      case MarkerSeverity.Error:\n      default:\n        className = \"squiggly-error\"\n        /* EditorErrorDecoration */\n        ;\n        color = themeColorFromId(overviewRulerError);\n        zIndex = 30;\n        break;\n    }\n\n    if (marker.tags) {\n      if (marker.tags.indexOf(1\n      /* Unnecessary */\n      ) !== -1) {\n        inlineClassName = \"squiggly-inline-unnecessary\"\n        /* EditorUnnecessaryInlineDecoration */\n        ;\n      }\n\n      if (marker.tags.indexOf(2\n      /* Deprecated */\n      ) !== -1) {\n        inlineClassName = \"squiggly-inline-deprecated\"\n        /* EditorDeprecatedInlineDecoration */\n        ;\n      }\n    }\n\n    return {\n      stickiness: 1\n      /* NeverGrowsWhenTypingAtEdges */\n      ,\n      className: className,\n      showIfCollapsed: true,\n      overviewRuler: {\n        color: color,\n        position: OverviewRulerLane.Right\n      },\n      zIndex: zIndex,\n      inlineClassName: inlineClassName\n    };\n  };\n\n  MarkerDecorationsService = __decorate([__param(0, IModelService), __param(1, IMarkerService)], MarkerDecorationsService);\n  return MarkerDecorationsService;\n}(Disposable);\n\nexport { MarkerDecorationsService };","map":null,"metadata":{},"sourceType":"module"}