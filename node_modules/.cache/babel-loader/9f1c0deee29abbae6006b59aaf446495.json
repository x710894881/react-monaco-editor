{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createScanner } from '../parser/htmlScanner.js';\nimport { MarkedString } from '../../vscode-languageserver-types/main.js';\nimport { TokenType } from '../htmlLanguageTypes.js';\nimport { getAllDataProviders } from '../languageFacts/builtinDataProviders.js';\nexport function doHover(document, position, htmlDocument) {\n  var offset = document.offsetAt(position);\n  var node = htmlDocument.findNodeAt(offset);\n\n  if (!node || !node.tag) {\n    return null;\n  }\n\n  var dataProviders = getAllDataProviders().filter(function (p) {\n    return p.isApplicable(document.languageId);\n  });\n\n  function getTagHover(currTag, range, open) {\n    currTag = currTag.toLowerCase();\n\n    var _loop_1 = function (provider) {\n      var hover = null;\n      provider.provideTags().forEach(function (tag) {\n        if (tag.name.toLowerCase() === currTag.toLowerCase()) {\n          var tagLabel = open ? '<' + currTag + '>' : '</' + currTag + '>';\n          var tagDescription = tag.description || '';\n          hover = {\n            contents: [{\n              language: 'html',\n              value: tagLabel\n            }, MarkedString.fromPlainText(tagDescription)],\n            range: range\n          };\n        }\n      });\n\n      if (hover) {\n        return {\n          value: hover\n        };\n      }\n    };\n\n    for (var _i = 0, dataProviders_1 = dataProviders; _i < dataProviders_1.length; _i++) {\n      var provider = dataProviders_1[_i];\n\n      var state_1 = _loop_1(provider);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n\n    return null;\n  }\n\n  function getTagNameRange(tokenType, startOffset) {\n    var scanner = createScanner(document.getText(), startOffset);\n    var token = scanner.scan();\n\n    while (token !== TokenType.EOS && (scanner.getTokenEnd() < offset || scanner.getTokenEnd() === offset && token !== tokenType)) {\n      token = scanner.scan();\n    }\n\n    if (token === tokenType && offset <= scanner.getTokenEnd()) {\n      return {\n        start: document.positionAt(scanner.getTokenOffset()),\n        end: document.positionAt(scanner.getTokenEnd())\n      };\n    }\n\n    return null;\n  }\n\n  if (node.endTagStart && offset >= node.endTagStart) {\n    var tagRange_1 = getTagNameRange(TokenType.EndTag, node.endTagStart);\n\n    if (tagRange_1) {\n      return getTagHover(node.tag, tagRange_1, false);\n    }\n\n    return null;\n  }\n\n  var tagRange = getTagNameRange(TokenType.StartTag, node.start);\n\n  if (tagRange) {\n    return getTagHover(node.tag, tagRange, true);\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}