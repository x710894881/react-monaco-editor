{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as dom from '../dom.js';\nimport { StandardKeyboardEvent } from '../keyboardEvent.js';\nimport { StandardMouseEvent } from '../mouseEvent.js';\nimport { Disposable } from '../../common/lifecycle.js';\n\nvar Widget =\n/** @class */\nfunction (_super) {\n  __extends(Widget, _super);\n\n  function Widget() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Widget.prototype.onclick = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.CLICK, function (e) {\n      return listener(new StandardMouseEvent(e));\n    }));\n  };\n\n  Widget.prototype.onmousedown = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.MOUSE_DOWN, function (e) {\n      return listener(new StandardMouseEvent(e));\n    }));\n  };\n\n  Widget.prototype.onmouseover = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.MOUSE_OVER, function (e) {\n      return listener(new StandardMouseEvent(e));\n    }));\n  };\n\n  Widget.prototype.onnonbubblingmouseout = function (domNode, listener) {\n    this._register(dom.addDisposableNonBubblingMouseOutListener(domNode, function (e) {\n      return listener(new StandardMouseEvent(e));\n    }));\n  };\n\n  Widget.prototype.onkeydown = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.KEY_DOWN, function (e) {\n      return listener(new StandardKeyboardEvent(e));\n    }));\n  };\n\n  Widget.prototype.onkeyup = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.KEY_UP, function (e) {\n      return listener(new StandardKeyboardEvent(e));\n    }));\n  };\n\n  Widget.prototype.oninput = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.INPUT, listener));\n  };\n\n  Widget.prototype.onblur = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.BLUR, listener));\n  };\n\n  Widget.prototype.onfocus = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.FOCUS, listener));\n  };\n\n  Widget.prototype.onchange = function (domNode, listener) {\n    this._register(dom.addDisposableListener(domNode, dom.EventType.CHANGE, listener));\n  };\n\n  return Widget;\n}(Disposable);\n\nexport { Widget };","map":null,"metadata":{},"sourceType":"module"}