{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { FrankensteinMode } from '../modes/abstractMode.js';\nimport { NULL_LANGUAGE_IDENTIFIER } from '../modes/nullMode.js';\nimport { LanguagesRegistry } from './languagesRegistry.js';\n\nvar LanguageSelection =\n/** @class */\nfunction (_super) {\n  __extends(LanguageSelection, _super);\n\n  function LanguageSelection(onLanguagesMaybeChanged, selector) {\n    var _this = _super.call(this) || this;\n\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._selector = selector;\n    _this.languageIdentifier = _this._selector();\n\n    _this._register(onLanguagesMaybeChanged(function () {\n      return _this._evaluate();\n    }));\n\n    return _this;\n  }\n\n  LanguageSelection.prototype._evaluate = function () {\n    var languageIdentifier = this._selector();\n\n    if (languageIdentifier.id === this.languageIdentifier.id) {\n      // no change\n      return;\n    }\n\n    this.languageIdentifier = languageIdentifier;\n\n    this._onDidChange.fire(this.languageIdentifier);\n  };\n\n  return LanguageSelection;\n}(Disposable);\n\nvar ModeServiceImpl =\n/** @class */\nfunction () {\n  function ModeServiceImpl(warnOnOverwrite) {\n    var _this = this;\n\n    if (warnOnOverwrite === void 0) {\n      warnOnOverwrite = false;\n    }\n\n    this._onDidCreateMode = new Emitter();\n    this.onDidCreateMode = this._onDidCreateMode.event;\n    this._onLanguagesMaybeChanged = new Emitter();\n    this.onLanguagesMaybeChanged = this._onLanguagesMaybeChanged.event;\n    this._instantiatedModes = {};\n    this._registry = new LanguagesRegistry(true, warnOnOverwrite);\n\n    this._registry.onDidChange(function () {\n      return _this._onLanguagesMaybeChanged.fire();\n    });\n  }\n\n  ModeServiceImpl.prototype.isRegisteredMode = function (mimetypeOrModeId) {\n    return this._registry.isRegisteredMode(mimetypeOrModeId);\n  };\n\n  ModeServiceImpl.prototype.getModeIdForLanguageName = function (alias) {\n    return this._registry.getModeIdForLanguageNameLowercase(alias);\n  };\n\n  ModeServiceImpl.prototype.getModeIdByFilepathOrFirstLine = function (resource, firstLine) {\n    var modeIds = this._registry.getModeIdsFromFilepathOrFirstLine(resource, firstLine);\n\n    if (modeIds.length > 0) {\n      return modeIds[0];\n    }\n\n    return null;\n  };\n\n  ModeServiceImpl.prototype.getModeId = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\n    var modeIds = this._registry.extractModeIds(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n    if (modeIds.length > 0) {\n      return modeIds[0];\n    }\n\n    return null;\n  };\n\n  ModeServiceImpl.prototype.getLanguageIdentifier = function (modeId) {\n    return this._registry.getLanguageIdentifier(modeId);\n  }; // --- instantiation\n\n\n  ModeServiceImpl.prototype.create = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\n    var _this = this;\n\n    return new LanguageSelection(this.onLanguagesMaybeChanged, function () {\n      var modeId = _this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds);\n\n      return _this._createModeAndGetLanguageIdentifier(modeId);\n    });\n  };\n\n  ModeServiceImpl.prototype.createByFilepathOrFirstLine = function (resource, firstLine) {\n    var _this = this;\n\n    return new LanguageSelection(this.onLanguagesMaybeChanged, function () {\n      var modeId = _this.getModeIdByFilepathOrFirstLine(resource, firstLine);\n\n      return _this._createModeAndGetLanguageIdentifier(modeId);\n    });\n  };\n\n  ModeServiceImpl.prototype._createModeAndGetLanguageIdentifier = function (modeId) {\n    // Fall back to plain text if no mode was found\n    var languageIdentifier = this.getLanguageIdentifier(modeId || 'plaintext') || NULL_LANGUAGE_IDENTIFIER;\n\n    this._getOrCreateMode(languageIdentifier.language);\n\n    return languageIdentifier;\n  };\n\n  ModeServiceImpl.prototype.triggerMode = function (commaSeparatedMimetypesOrCommaSeparatedIds) {\n    var modeId = this.getModeId(commaSeparatedMimetypesOrCommaSeparatedIds); // Fall back to plain text if no mode was found\n\n    this._getOrCreateMode(modeId || 'plaintext');\n  };\n\n  ModeServiceImpl.prototype._getOrCreateMode = function (modeId) {\n    if (!this._instantiatedModes.hasOwnProperty(modeId)) {\n      var languageIdentifier = this.getLanguageIdentifier(modeId) || NULL_LANGUAGE_IDENTIFIER;\n      this._instantiatedModes[modeId] = new FrankensteinMode(languageIdentifier);\n\n      this._onDidCreateMode.fire(this._instantiatedModes[modeId]);\n    }\n\n    return this._instantiatedModes[modeId];\n  };\n\n  return ModeServiceImpl;\n}();\n\nexport { ModeServiceImpl };","map":null,"metadata":{},"sourceType":"module"}