{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Event, PauseableEmitter } from '../../../base/common/event.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { keys } from '../../../base/common/map.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { IConfigurationService } from '../../configuration/common/configuration.js';\nimport { IContextKeyService, SET_CONTEXT_COMMAND_ID } from '../common/contextkey.js';\nimport { KeybindingResolver } from '../../keybinding/common/keybindingResolver.js';\nvar KEYBINDING_CONTEXT_ATTR = 'data-keybinding-context';\n\nvar Context =\n/** @class */\nfunction () {\n  function Context(id, parent) {\n    this._id = id;\n    this._parent = parent;\n    this._value = Object.create(null);\n    this._value['_contextId'] = id;\n  }\n\n  Context.prototype.setValue = function (key, value) {\n    // console.log('SET ' + key + ' = ' + value + ' ON ' + this._id);\n    if (this._value[key] !== value) {\n      this._value[key] = value;\n      return true;\n    }\n\n    return false;\n  };\n\n  Context.prototype.removeValue = function (key) {\n    // console.log('REMOVE ' + key + ' FROM ' + this._id);\n    if (key in this._value) {\n      delete this._value[key];\n      return true;\n    }\n\n    return false;\n  };\n\n  Context.prototype.getValue = function (key) {\n    var ret = this._value[key];\n\n    if (typeof ret === 'undefined' && this._parent) {\n      return this._parent.getValue(key);\n    }\n\n    return ret;\n  };\n\n  return Context;\n}();\n\nexport { Context };\n\nvar NullContext =\n/** @class */\nfunction (_super) {\n  __extends(NullContext, _super);\n\n  function NullContext() {\n    return _super.call(this, -1, null) || this;\n  }\n\n  NullContext.prototype.setValue = function (key, value) {\n    return false;\n  };\n\n  NullContext.prototype.removeValue = function (key) {\n    return false;\n  };\n\n  NullContext.prototype.getValue = function (key) {\n    return undefined;\n  };\n\n  NullContext.INSTANCE = new NullContext();\n  return NullContext;\n}(Context);\n\nvar ConfigAwareContextValuesContainer =\n/** @class */\nfunction (_super) {\n  __extends(ConfigAwareContextValuesContainer, _super);\n\n  function ConfigAwareContextValuesContainer(id, _configurationService, emitter) {\n    var _this = _super.call(this, id, null) || this;\n\n    _this._configurationService = _configurationService;\n    _this._values = new Map();\n    _this._listener = _this._configurationService.onDidChangeConfiguration(function (event) {\n      if (event.source === 6\n      /* DEFAULT */\n      ) {\n          // new setting, reset everything\n          var allKeys = keys(_this._values);\n\n          _this._values.clear();\n\n          emitter.fire(new ArrayContextKeyChangeEvent(allKeys));\n        } else {\n        var changedKeys = [];\n\n        for (var _i = 0, _a = event.affectedKeys; _i < _a.length; _i++) {\n          var configKey = _a[_i];\n          var contextKey = \"config.\" + configKey;\n\n          if (_this._values.has(contextKey)) {\n            _this._values.delete(contextKey);\n\n            changedKeys.push(contextKey);\n          }\n        }\n\n        emitter.fire(new ArrayContextKeyChangeEvent(changedKeys));\n      }\n    });\n    return _this;\n  }\n\n  ConfigAwareContextValuesContainer.prototype.dispose = function () {\n    this._listener.dispose();\n  };\n\n  ConfigAwareContextValuesContainer.prototype.getValue = function (key) {\n    if (key.indexOf(ConfigAwareContextValuesContainer._keyPrefix) !== 0) {\n      return _super.prototype.getValue.call(this, key);\n    }\n\n    if (this._values.has(key)) {\n      return this._values.get(key);\n    }\n\n    var configKey = key.substr(ConfigAwareContextValuesContainer._keyPrefix.length);\n\n    var configValue = this._configurationService.getValue(configKey);\n\n    var value = undefined;\n\n    switch (typeof configValue) {\n      case 'number':\n      case 'boolean':\n      case 'string':\n        value = configValue;\n        break;\n    }\n\n    this._values.set(key, value);\n\n    return value;\n  };\n\n  ConfigAwareContextValuesContainer.prototype.setValue = function (key, value) {\n    return _super.prototype.setValue.call(this, key, value);\n  };\n\n  ConfigAwareContextValuesContainer.prototype.removeValue = function (key) {\n    return _super.prototype.removeValue.call(this, key);\n  };\n\n  ConfigAwareContextValuesContainer._keyPrefix = 'config.';\n  return ConfigAwareContextValuesContainer;\n}(Context);\n\nvar ContextKey =\n/** @class */\nfunction () {\n  function ContextKey(service, key, defaultValue) {\n    this._service = service;\n    this._key = key;\n    this._defaultValue = defaultValue;\n    this.reset();\n  }\n\n  ContextKey.prototype.set = function (value) {\n    this._service.setContext(this._key, value);\n  };\n\n  ContextKey.prototype.reset = function () {\n    if (typeof this._defaultValue === 'undefined') {\n      this._service.removeContext(this._key);\n    } else {\n      this._service.setContext(this._key, this._defaultValue);\n    }\n  };\n\n  ContextKey.prototype.get = function () {\n    return this._service.getContextKeyValue(this._key);\n  };\n\n  return ContextKey;\n}();\n\nvar SimpleContextKeyChangeEvent =\n/** @class */\nfunction () {\n  function SimpleContextKeyChangeEvent(key) {\n    this.key = key;\n  }\n\n  SimpleContextKeyChangeEvent.prototype.affectsSome = function (keys) {\n    return keys.has(this.key);\n  };\n\n  return SimpleContextKeyChangeEvent;\n}();\n\nvar ArrayContextKeyChangeEvent =\n/** @class */\nfunction () {\n  function ArrayContextKeyChangeEvent(keys) {\n    this.keys = keys;\n  }\n\n  ArrayContextKeyChangeEvent.prototype.affectsSome = function (keys) {\n    for (var _i = 0, _a = this.keys; _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (keys.has(key)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return ArrayContextKeyChangeEvent;\n}();\n\nvar CompositeContextKeyChangeEvent =\n/** @class */\nfunction () {\n  function CompositeContextKeyChangeEvent(events) {\n    this.events = events;\n  }\n\n  CompositeContextKeyChangeEvent.prototype.affectsSome = function (keys) {\n    for (var _i = 0, _a = this.events; _i < _a.length; _i++) {\n      var e = _a[_i];\n\n      if (e.affectsSome(keys)) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return CompositeContextKeyChangeEvent;\n}();\n\nvar AbstractContextKeyService =\n/** @class */\nfunction () {\n  function AbstractContextKeyService(myContextId) {\n    this._onDidChangeContext = new PauseableEmitter({\n      merge: function (input) {\n        return new CompositeContextKeyChangeEvent(input);\n      }\n    });\n    this._isDisposed = false;\n    this._myContextId = myContextId;\n  }\n\n  AbstractContextKeyService.prototype.createKey = function (key, defaultValue) {\n    if (this._isDisposed) {\n      throw new Error(\"AbstractContextKeyService has been disposed\");\n    }\n\n    return new ContextKey(this, key, defaultValue);\n  };\n\n  Object.defineProperty(AbstractContextKeyService.prototype, \"onDidChangeContext\", {\n    get: function () {\n      return this._onDidChangeContext.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  AbstractContextKeyService.prototype.bufferChangeEvents = function (callback) {\n    this._onDidChangeContext.pause();\n\n    try {\n      callback();\n    } finally {\n      this._onDidChangeContext.resume();\n    }\n  };\n\n  AbstractContextKeyService.prototype.createScoped = function (domNode) {\n    if (this._isDisposed) {\n      throw new Error(\"AbstractContextKeyService has been disposed\");\n    }\n\n    return new ScopedContextKeyService(this, domNode);\n  };\n\n  AbstractContextKeyService.prototype.contextMatchesRules = function (rules) {\n    if (this._isDisposed) {\n      throw new Error(\"AbstractContextKeyService has been disposed\");\n    }\n\n    var context = this.getContextValuesContainer(this._myContextId);\n    var result = KeybindingResolver.contextMatchesRules(context, rules); // console.group(rules.serialize() + ' -> ' + result);\n    // rules.keys().forEach(key => { console.log(key, ctx[key]); });\n    // console.groupEnd();\n\n    return result;\n  };\n\n  AbstractContextKeyService.prototype.getContextKeyValue = function (key) {\n    if (this._isDisposed) {\n      return undefined;\n    }\n\n    return this.getContextValuesContainer(this._myContextId).getValue(key);\n  };\n\n  AbstractContextKeyService.prototype.setContext = function (key, value) {\n    if (this._isDisposed) {\n      return;\n    }\n\n    var myContext = this.getContextValuesContainer(this._myContextId);\n\n    if (!myContext) {\n      return;\n    }\n\n    if (myContext.setValue(key, value)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  };\n\n  AbstractContextKeyService.prototype.removeContext = function (key) {\n    if (this._isDisposed) {\n      return;\n    }\n\n    if (this.getContextValuesContainer(this._myContextId).removeValue(key)) {\n      this._onDidChangeContext.fire(new SimpleContextKeyChangeEvent(key));\n    }\n  };\n\n  AbstractContextKeyService.prototype.getContext = function (target) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n\n    return this.getContextValuesContainer(findContextAttr(target));\n  };\n\n  return AbstractContextKeyService;\n}();\n\nexport { AbstractContextKeyService };\n\nvar ContextKeyService =\n/** @class */\nfunction (_super) {\n  __extends(ContextKeyService, _super);\n\n  function ContextKeyService(configurationService) {\n    var _this = _super.call(this, 0) || this;\n\n    _this._contexts = new Map();\n    _this._toDispose = new DisposableStore();\n    _this._lastContextId = 0;\n    var myContext = new ConfigAwareContextValuesContainer(_this._myContextId, configurationService, _this._onDidChangeContext);\n\n    _this._contexts.set(_this._myContextId, myContext);\n\n    _this._toDispose.add(myContext);\n\n    return _this; // Uncomment this to see the contexts continuously logged\n    // let lastLoggedValue: string | null = null;\n    // setInterval(() => {\n    // \tlet values = Object.keys(this._contexts).map((key) => this._contexts[key]);\n    // \tlet logValue = values.map(v => JSON.stringify(v._value, null, '\\t')).join('\\n');\n    // \tif (lastLoggedValue !== logValue) {\n    // \t\tlastLoggedValue = logValue;\n    // \t\tconsole.log(lastLoggedValue);\n    // \t}\n    // }, 2000);\n  }\n\n  ContextKeyService.prototype.dispose = function () {\n    this._isDisposed = true;\n\n    this._toDispose.dispose();\n  };\n\n  ContextKeyService.prototype.getContextValuesContainer = function (contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n\n    return this._contexts.get(contextId) || NullContext.INSTANCE;\n  };\n\n  ContextKeyService.prototype.createChildContext = function (parentContextId) {\n    if (parentContextId === void 0) {\n      parentContextId = this._myContextId;\n    }\n\n    if (this._isDisposed) {\n      throw new Error(\"ContextKeyService has been disposed\");\n    }\n\n    var id = ++this._lastContextId;\n\n    this._contexts.set(id, new Context(id, this.getContextValuesContainer(parentContextId)));\n\n    return id;\n  };\n\n  ContextKeyService.prototype.disposeContext = function (contextId) {\n    if (!this._isDisposed) {\n      this._contexts.delete(contextId);\n    }\n  };\n\n  ContextKeyService = __decorate([__param(0, IConfigurationService)], ContextKeyService);\n  return ContextKeyService;\n}(AbstractContextKeyService);\n\nexport { ContextKeyService };\n\nvar ScopedContextKeyService =\n/** @class */\nfunction (_super) {\n  __extends(ScopedContextKeyService, _super);\n\n  function ScopedContextKeyService(parent, domNode) {\n    var _this = _super.call(this, parent.createChildContext()) || this;\n\n    _this._parent = parent;\n\n    if (domNode) {\n      _this._domNode = domNode;\n\n      _this._domNode.setAttribute(KEYBINDING_CONTEXT_ATTR, String(_this._myContextId));\n    }\n\n    return _this;\n  }\n\n  ScopedContextKeyService.prototype.dispose = function () {\n    this._isDisposed = true;\n\n    this._parent.disposeContext(this._myContextId);\n\n    if (this._domNode) {\n      this._domNode.removeAttribute(KEYBINDING_CONTEXT_ATTR);\n\n      this._domNode = undefined;\n    }\n  };\n\n  Object.defineProperty(ScopedContextKeyService.prototype, \"onDidChangeContext\", {\n    get: function () {\n      return Event.any(this._parent.onDidChangeContext, this._onDidChangeContext.event);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScopedContextKeyService.prototype.getContextValuesContainer = function (contextId) {\n    if (this._isDisposed) {\n      return NullContext.INSTANCE;\n    }\n\n    return this._parent.getContextValuesContainer(contextId);\n  };\n\n  ScopedContextKeyService.prototype.createChildContext = function (parentContextId) {\n    if (parentContextId === void 0) {\n      parentContextId = this._myContextId;\n    }\n\n    if (this._isDisposed) {\n      throw new Error(\"ScopedContextKeyService has been disposed\");\n    }\n\n    return this._parent.createChildContext(parentContextId);\n  };\n\n  ScopedContextKeyService.prototype.disposeContext = function (contextId) {\n    if (this._isDisposed) {\n      return;\n    }\n\n    this._parent.disposeContext(contextId);\n  };\n\n  return ScopedContextKeyService;\n}(AbstractContextKeyService);\n\nfunction findContextAttr(domNode) {\n  while (domNode) {\n    if (domNode.hasAttribute(KEYBINDING_CONTEXT_ATTR)) {\n      var attr = domNode.getAttribute(KEYBINDING_CONTEXT_ATTR);\n\n      if (attr) {\n        return parseInt(attr, 10);\n      }\n\n      return NaN;\n    }\n\n    domNode = domNode.parentElement;\n  }\n\n  return 0;\n}\n\nCommandsRegistry.registerCommand(SET_CONTEXT_COMMAND_ID, function (accessor, contextKey, contextValue) {\n  accessor.get(IContextKeyService).createKey(String(contextKey), contextValue);\n});","map":null,"metadata":{},"sourceType":"module"}