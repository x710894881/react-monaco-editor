{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var MAX_FOLDING_REGIONS = 0xFFFF;\nexport var MAX_LINE_NUMBER = 0xFFFFFF;\nvar MASK_INDENT = 0xFF000000;\n\nvar FoldingRegions =\n/** @class */\nfunction () {\n  function FoldingRegions(startIndexes, endIndexes, types) {\n    if (startIndexes.length !== endIndexes.length || startIndexes.length > MAX_FOLDING_REGIONS) {\n      throw new Error('invalid startIndexes or endIndexes size');\n    }\n\n    this._startIndexes = startIndexes;\n    this._endIndexes = endIndexes;\n    this._collapseStates = new Uint32Array(Math.ceil(startIndexes.length / 32));\n    this._types = types;\n    this._parentsComputed = false;\n  }\n\n  FoldingRegions.prototype.ensureParentIndices = function () {\n    var _this = this;\n\n    if (!this._parentsComputed) {\n      this._parentsComputed = true;\n      var parentIndexes_1 = [];\n\n      var isInsideLast = function (startLineNumber, endLineNumber) {\n        var index = parentIndexes_1[parentIndexes_1.length - 1];\n        return _this.getStartLineNumber(index) <= startLineNumber && _this.getEndLineNumber(index) >= endLineNumber;\n      };\n\n      for (var i = 0, len = this._startIndexes.length; i < len; i++) {\n        var startLineNumber = this._startIndexes[i];\n        var endLineNumber = this._endIndexes[i];\n\n        if (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n          throw new Error('startLineNumber or endLineNumber must not exceed ' + MAX_LINE_NUMBER);\n        }\n\n        while (parentIndexes_1.length > 0 && !isInsideLast(startLineNumber, endLineNumber)) {\n          parentIndexes_1.pop();\n        }\n\n        var parentIndex = parentIndexes_1.length > 0 ? parentIndexes_1[parentIndexes_1.length - 1] : -1;\n        parentIndexes_1.push(i);\n        this._startIndexes[i] = startLineNumber + ((parentIndex & 0xFF) << 24);\n        this._endIndexes[i] = endLineNumber + ((parentIndex & 0xFF00) << 16);\n      }\n    }\n  };\n\n  Object.defineProperty(FoldingRegions.prototype, \"length\", {\n    get: function () {\n      return this._startIndexes.length;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FoldingRegions.prototype.getStartLineNumber = function (index) {\n    return this._startIndexes[index] & MAX_LINE_NUMBER;\n  };\n\n  FoldingRegions.prototype.getEndLineNumber = function (index) {\n    return this._endIndexes[index] & MAX_LINE_NUMBER;\n  };\n\n  FoldingRegions.prototype.getType = function (index) {\n    return this._types ? this._types[index] : undefined;\n  };\n\n  FoldingRegions.prototype.hasTypes = function () {\n    return !!this._types;\n  };\n\n  FoldingRegions.prototype.isCollapsed = function (index) {\n    var arrayIndex = index / 32 | 0;\n    var bit = index % 32;\n    return (this._collapseStates[arrayIndex] & 1 << bit) !== 0;\n  };\n\n  FoldingRegions.prototype.setCollapsed = function (index, newState) {\n    var arrayIndex = index / 32 | 0;\n    var bit = index % 32;\n    var value = this._collapseStates[arrayIndex];\n\n    if (newState) {\n      this._collapseStates[arrayIndex] = value | 1 << bit;\n    } else {\n      this._collapseStates[arrayIndex] = value & ~(1 << bit);\n    }\n  };\n\n  FoldingRegions.prototype.toRegion = function (index) {\n    return new FoldingRegion(this, index);\n  };\n\n  FoldingRegions.prototype.getParentIndex = function (index) {\n    this.ensureParentIndices();\n    var parent = ((this._startIndexes[index] & MASK_INDENT) >>> 24) + ((this._endIndexes[index] & MASK_INDENT) >>> 16);\n\n    if (parent === MAX_FOLDING_REGIONS) {\n      return -1;\n    }\n\n    return parent;\n  };\n\n  FoldingRegions.prototype.contains = function (index, line) {\n    return this.getStartLineNumber(index) <= line && this.getEndLineNumber(index) >= line;\n  };\n\n  FoldingRegions.prototype.findIndex = function (line) {\n    var low = 0,\n        high = this._startIndexes.length;\n\n    if (high === 0) {\n      return -1; // no children\n    }\n\n    while (low < high) {\n      var mid = Math.floor((low + high) / 2);\n\n      if (line < this.getStartLineNumber(mid)) {\n        high = mid;\n      } else {\n        low = mid + 1;\n      }\n    }\n\n    return low - 1;\n  };\n\n  FoldingRegions.prototype.findRange = function (line) {\n    var index = this.findIndex(line);\n\n    if (index >= 0) {\n      var endLineNumber = this.getEndLineNumber(index);\n\n      if (endLineNumber >= line) {\n        return index;\n      }\n\n      index = this.getParentIndex(index);\n\n      while (index !== -1) {\n        if (this.contains(index, line)) {\n          return index;\n        }\n\n        index = this.getParentIndex(index);\n      }\n    }\n\n    return -1;\n  };\n\n  FoldingRegions.prototype.toString = function () {\n    var res = [];\n\n    for (var i = 0; i < this.length; i++) {\n      res[i] = \"[\" + (this.isCollapsed(i) ? '+' : '-') + \"] \" + this.getStartLineNumber(i) + \"/\" + this.getEndLineNumber(i);\n    }\n\n    return res.join(', ');\n  };\n\n  return FoldingRegions;\n}();\n\nexport { FoldingRegions };\n\nvar FoldingRegion =\n/** @class */\nfunction () {\n  function FoldingRegion(ranges, index) {\n    this.ranges = ranges;\n    this.index = index;\n  }\n\n  Object.defineProperty(FoldingRegion.prototype, \"startLineNumber\", {\n    get: function () {\n      return this.ranges.getStartLineNumber(this.index);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FoldingRegion.prototype, \"endLineNumber\", {\n    get: function () {\n      return this.ranges.getEndLineNumber(this.index);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FoldingRegion.prototype, \"regionIndex\", {\n    get: function () {\n      return this.index;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FoldingRegion.prototype, \"parentIndex\", {\n    get: function () {\n      return this.ranges.getParentIndex(this.index);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FoldingRegion.prototype, \"isCollapsed\", {\n    get: function () {\n      return this.ranges.isCollapsed(this.index);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FoldingRegion.prototype.containedBy = function (range) {\n    return range.startLineNumber <= this.startLineNumber && range.endLineNumber >= this.endLineNumber;\n  };\n\n  FoldingRegion.prototype.containsLine = function (lineNumber) {\n    return this.startLineNumber <= lineNumber && lineNumber <= this.endLineNumber;\n  };\n\n  return FoldingRegion;\n}();\n\nexport { FoldingRegion };","map":null,"metadata":{},"sourceType":"module"}