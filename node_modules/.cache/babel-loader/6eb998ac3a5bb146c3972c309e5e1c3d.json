{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { StringBuffer, createLineStarts, createLineStartsFast } from './pieceTreeBase.js';\nimport { PieceTreeTextBuffer } from './pieceTreeTextBuffer.js';\n\nvar PieceTreeTextBufferFactory =\n/** @class */\nfunction () {\n  function PieceTreeTextBufferFactory(_chunks, _bom, _cr, _lf, _crlf, _containsRTL, _isBasicASCII, _normalizeEOL) {\n    this._chunks = _chunks;\n    this._bom = _bom;\n    this._cr = _cr;\n    this._lf = _lf;\n    this._crlf = _crlf;\n    this._containsRTL = _containsRTL;\n    this._isBasicASCII = _isBasicASCII;\n    this._normalizeEOL = _normalizeEOL;\n  }\n\n  PieceTreeTextBufferFactory.prototype._getEOL = function (defaultEOL) {\n    var totalEOLCount = this._cr + this._lf + this._crlf;\n    var totalCRCount = this._cr + this._crlf;\n\n    if (totalEOLCount === 0) {\n      // This is an empty file or a file with precisely one line\n      return defaultEOL === 1\n      /* LF */\n      ? '\\n' : '\\r\\n';\n    }\n\n    if (totalCRCount > totalEOLCount / 2) {\n      // More than half of the file contains \\r\\n ending lines\n      return '\\r\\n';\n    } // At least one line more ends in \\n\n\n\n    return '\\n';\n  };\n\n  PieceTreeTextBufferFactory.prototype.create = function (defaultEOL) {\n    var eol = this._getEOL(defaultEOL);\n\n    var chunks = this._chunks;\n\n    if (this._normalizeEOL && (eol === '\\r\\n' && (this._cr > 0 || this._lf > 0) || eol === '\\n' && (this._cr > 0 || this._crlf > 0))) {\n      // Normalize pieces\n      for (var i = 0, len = chunks.length; i < len; i++) {\n        var str = chunks[i].buffer.replace(/\\r\\n|\\r|\\n/g, eol);\n        var newLineStart = createLineStartsFast(str);\n        chunks[i] = new StringBuffer(str, newLineStart);\n      }\n    }\n\n    return new PieceTreeTextBuffer(chunks, this._bom, eol, this._containsRTL, this._isBasicASCII, this._normalizeEOL);\n  };\n\n  return PieceTreeTextBufferFactory;\n}();\n\nexport { PieceTreeTextBufferFactory };\n\nvar PieceTreeTextBufferBuilder =\n/** @class */\nfunction () {\n  function PieceTreeTextBufferBuilder() {\n    this.chunks = [];\n    this.BOM = '';\n    this._hasPreviousChar = false;\n    this._previousChar = 0;\n    this._tmpLineStarts = [];\n    this.cr = 0;\n    this.lf = 0;\n    this.crlf = 0;\n    this.containsRTL = false;\n    this.isBasicASCII = true;\n  }\n\n  PieceTreeTextBufferBuilder.prototype.acceptChunk = function (chunk) {\n    if (chunk.length === 0) {\n      return;\n    }\n\n    if (this.chunks.length === 0) {\n      if (strings.startsWithUTF8BOM(chunk)) {\n        this.BOM = strings.UTF8_BOM_CHARACTER;\n        chunk = chunk.substr(1);\n      }\n    }\n\n    var lastChar = chunk.charCodeAt(chunk.length - 1);\n\n    if (lastChar === 13\n    /* CarriageReturn */\n    || lastChar >= 0xD800 && lastChar <= 0xDBFF) {\n      // last character is \\r or a high surrogate => keep it back\n      this._acceptChunk1(chunk.substr(0, chunk.length - 1), false);\n\n      this._hasPreviousChar = true;\n      this._previousChar = lastChar;\n    } else {\n      this._acceptChunk1(chunk, false);\n\n      this._hasPreviousChar = false;\n      this._previousChar = lastChar;\n    }\n  };\n\n  PieceTreeTextBufferBuilder.prototype._acceptChunk1 = function (chunk, allowEmptyStrings) {\n    if (!allowEmptyStrings && chunk.length === 0) {\n      // Nothing to do\n      return;\n    }\n\n    if (this._hasPreviousChar) {\n      this._acceptChunk2(String.fromCharCode(this._previousChar) + chunk);\n    } else {\n      this._acceptChunk2(chunk);\n    }\n  };\n\n  PieceTreeTextBufferBuilder.prototype._acceptChunk2 = function (chunk) {\n    var lineStarts = createLineStarts(this._tmpLineStarts, chunk);\n    this.chunks.push(new StringBuffer(chunk, lineStarts.lineStarts));\n    this.cr += lineStarts.cr;\n    this.lf += lineStarts.lf;\n    this.crlf += lineStarts.crlf;\n\n    if (this.isBasicASCII) {\n      this.isBasicASCII = lineStarts.isBasicASCII;\n    }\n\n    if (!this.isBasicASCII && !this.containsRTL) {\n      // No need to check if is basic ASCII\n      this.containsRTL = strings.containsRTL(chunk);\n    }\n  };\n\n  PieceTreeTextBufferBuilder.prototype.finish = function (normalizeEOL) {\n    if (normalizeEOL === void 0) {\n      normalizeEOL = true;\n    }\n\n    this._finish();\n\n    return new PieceTreeTextBufferFactory(this.chunks, this.BOM, this.cr, this.lf, this.crlf, this.containsRTL, this.isBasicASCII, normalizeEOL);\n  };\n\n  PieceTreeTextBufferBuilder.prototype._finish = function () {\n    if (this.chunks.length === 0) {\n      this._acceptChunk1('', true);\n    }\n\n    if (this._hasPreviousChar) {\n      this._hasPreviousChar = false; // recreate last chunk\n\n      var lastChunk = this.chunks[this.chunks.length - 1];\n      lastChunk.buffer += String.fromCharCode(this._previousChar);\n      var newLineStarts = createLineStartsFast(lastChunk.buffer);\n      lastChunk.lineStarts = newLineStarts;\n\n      if (this._previousChar === 13\n      /* CarriageReturn */\n      ) {\n          this.cr++;\n        }\n    }\n  };\n\n  return PieceTreeTextBufferBuilder;\n}();\n\nexport { PieceTreeTextBufferBuilder };","map":null,"metadata":{},"sourceType":"module"}