{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { CodeLensModel } from './codelens.js';\nimport { LRUCache, values } from '../../../base/common/map.js';\nimport { IStorageService, WillSaveStateReason } from '../../../platform/storage/common/storage.js';\nimport { Range } from '../../common/core/range.js';\nimport { runWhenIdle } from '../../../base/common/async.js';\nimport { once } from '../../../base/common/functional.js';\nexport var ICodeLensCache = createDecorator('ICodeLensCache');\n\nvar CacheItem =\n/** @class */\nfunction () {\n  function CacheItem(lineCount, data) {\n    this.lineCount = lineCount;\n    this.data = data;\n  }\n\n  return CacheItem;\n}();\n\nvar CodeLensCache =\n/** @class */\nfunction () {\n  function CodeLensCache(storageService) {\n    var _this = this;\n\n    this._fakeProvider = new (\n    /** @class */\n    function () {\n      function class_1() {}\n\n      class_1.prototype.provideCodeLenses = function () {\n        throw new Error('not supported');\n      };\n\n      return class_1;\n    }())();\n    this._cache = new LRUCache(20, 0.75); // remove old data\n\n    var oldkey = 'codelens/cache';\n    runWhenIdle(function () {\n      return storageService.remove(oldkey, 1\n      /* WORKSPACE */\n      );\n    }); // restore lens data on start\n\n    var key = 'codelens/cache2';\n    var raw = storageService.get(key, 1\n    /* WORKSPACE */\n    , '{}');\n\n    this._deserialize(raw); // store lens data on shutdown\n\n\n    once(storageService.onWillSaveState)(function (e) {\n      if (e.reason === WillSaveStateReason.SHUTDOWN) {\n        storageService.store(key, _this._serialize(), 1\n        /* WORKSPACE */\n        );\n      }\n    });\n  }\n\n  CodeLensCache.prototype.put = function (model, data) {\n    var lensModel = new CodeLensModel();\n    lensModel.add({\n      lenses: data.lenses.map(function (v) {\n        return v.symbol;\n      }),\n      dispose: function () {}\n    }, this._fakeProvider);\n    var item = new CacheItem(model.getLineCount(), lensModel);\n\n    this._cache.set(model.uri.toString(), item);\n  };\n\n  CodeLensCache.prototype.get = function (model) {\n    var item = this._cache.get(model.uri.toString());\n\n    return item && item.lineCount === model.getLineCount() ? item.data : undefined;\n  };\n\n  CodeLensCache.prototype.delete = function (model) {\n    this._cache.delete(model.uri.toString());\n  }; // --- persistence\n\n\n  CodeLensCache.prototype._serialize = function () {\n    var data = Object.create(null);\n\n    this._cache.forEach(function (value, key) {\n      var lines = new Set();\n\n      for (var _i = 0, _a = value.data.lenses; _i < _a.length; _i++) {\n        var d = _a[_i];\n        lines.add(d.symbol.range.startLineNumber);\n      }\n\n      data[key] = {\n        lineCount: value.lineCount,\n        lines: values(lines)\n      };\n    });\n\n    return JSON.stringify(data);\n  };\n\n  CodeLensCache.prototype._deserialize = function (raw) {\n    try {\n      var data = JSON.parse(raw);\n\n      for (var key in data) {\n        var element = data[key];\n        var lenses = [];\n\n        for (var _i = 0, _a = element.lines; _i < _a.length; _i++) {\n          var line = _a[_i];\n          lenses.push({\n            range: new Range(line, 1, line, 11)\n          });\n        }\n\n        var model = new CodeLensModel();\n        model.add({\n          lenses: lenses,\n          dispose: function () {}\n        }, this._fakeProvider);\n\n        this._cache.set(key, new CacheItem(element.lineCount, model));\n      }\n    } catch (_b) {// ignore...\n    }\n  };\n\n  CodeLensCache = __decorate([__param(0, IStorageService)], CodeLensCache);\n  return CodeLensCache;\n}();\n\nexport { CodeLensCache };\nregisterSingleton(ICodeLensCache, CodeLensCache);","map":null,"metadata":{},"sourceType":"module"}