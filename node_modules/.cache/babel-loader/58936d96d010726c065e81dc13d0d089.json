{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar RestrictedRenderingContext =\n/** @class */\nfunction () {\n  function RestrictedRenderingContext(viewLayout, viewportData) {\n    this._viewLayout = viewLayout;\n    this.viewportData = viewportData;\n    this.scrollWidth = this._viewLayout.getScrollWidth();\n    this.scrollHeight = this._viewLayout.getScrollHeight();\n    this.visibleRange = this.viewportData.visibleRange;\n    this.bigNumbersDelta = this.viewportData.bigNumbersDelta;\n\n    var vInfo = this._viewLayout.getCurrentViewport();\n\n    this.scrollTop = vInfo.top;\n    this.scrollLeft = vInfo.left;\n    this.viewportWidth = vInfo.width;\n    this.viewportHeight = vInfo.height;\n  }\n\n  RestrictedRenderingContext.prototype.getScrolledTopFromAbsoluteTop = function (absoluteTop) {\n    return absoluteTop - this.scrollTop;\n  };\n\n  RestrictedRenderingContext.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n    return this._viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n  };\n\n  RestrictedRenderingContext.prototype.getDecorationsInViewport = function () {\n    return this.viewportData.getDecorationsInViewport();\n  };\n\n  return RestrictedRenderingContext;\n}();\n\nexport { RestrictedRenderingContext };\n\nvar RenderingContext =\n/** @class */\nfunction (_super) {\n  __extends(RenderingContext, _super);\n\n  function RenderingContext(viewLayout, viewportData, viewLines) {\n    var _this = _super.call(this, viewLayout, viewportData) || this;\n\n    _this._viewLines = viewLines;\n    return _this;\n  }\n\n  RenderingContext.prototype.linesVisibleRangesForRange = function (range, includeNewLines) {\n    return this._viewLines.linesVisibleRangesForRange(range, includeNewLines);\n  };\n\n  RenderingContext.prototype.visibleRangeForPosition = function (position) {\n    return this._viewLines.visibleRangeForPosition(position);\n  };\n\n  return RenderingContext;\n}(RestrictedRenderingContext);\n\nexport { RenderingContext };\n\nvar LineVisibleRanges =\n/** @class */\nfunction () {\n  function LineVisibleRanges(lineNumber, ranges) {\n    this.lineNumber = lineNumber;\n    this.ranges = ranges;\n  }\n\n  return LineVisibleRanges;\n}();\n\nexport { LineVisibleRanges };\n\nvar HorizontalRange =\n/** @class */\nfunction () {\n  function HorizontalRange(left, width) {\n    this.left = Math.round(left);\n    this.width = Math.round(width);\n  }\n\n  HorizontalRange.prototype.toString = function () {\n    return \"[\" + this.left + \",\" + this.width + \"]\";\n  };\n\n  return HorizontalRange;\n}();\n\nexport { HorizontalRange };","map":null,"metadata":{},"sourceType":"module"}