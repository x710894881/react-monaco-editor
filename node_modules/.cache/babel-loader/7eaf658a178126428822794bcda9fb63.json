{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../../common/core/selection.js';\nimport { Range } from '../../common/core/range.js';\n\nvar DragAndDropCommand =\n/** @class */\nfunction () {\n  function DragAndDropCommand(selection, targetPosition, copy) {\n    this.selection = selection;\n    this.targetPosition = targetPosition;\n    this.copy = copy;\n    this.targetSelection = null;\n  }\n\n  DragAndDropCommand.prototype.getEditOperations = function (model, builder) {\n    var text = model.getValueInRange(this.selection);\n\n    if (!this.copy) {\n      builder.addEditOperation(this.selection, null);\n    }\n\n    builder.addEditOperation(new Range(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column), text);\n\n    if (this.selection.containsPosition(this.targetPosition) && !(this.copy && (this.selection.getEndPosition().equals(this.targetPosition) || this.selection.getStartPosition().equals(this.targetPosition)) // we allow users to paste content beside the selection\n    )) {\n      this.targetSelection = this.selection;\n      return;\n    }\n\n    if (this.copy) {\n      this.targetSelection = new Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.selection.endLineNumber - this.selection.startLineNumber + this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);\n      return;\n    }\n\n    if (this.targetPosition.lineNumber > this.selection.endLineNumber) {\n      // Drag the selection downwards\n      this.targetSelection = new Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);\n      return;\n    }\n\n    if (this.targetPosition.lineNumber < this.selection.endLineNumber) {\n      // Drag the selection upwards\n      this.targetSelection = new Selection(this.targetPosition.lineNumber, this.targetPosition.column, this.targetPosition.lineNumber + this.selection.endLineNumber - this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column + this.selection.endColumn - this.selection.startColumn : this.selection.endColumn);\n      return;\n    } // The target position is at the same line as the selection's end position.\n\n\n    if (this.selection.endColumn <= this.targetPosition.column) {\n      // The target position is after the selection's end position\n      this.targetSelection = new Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column - this.selection.endColumn + this.selection.startColumn : this.targetPosition.column - this.selection.endColumn + this.selection.startColumn, this.targetPosition.lineNumber, this.selection.startLineNumber === this.selection.endLineNumber ? this.targetPosition.column : this.selection.endColumn);\n    } else {\n      // The target position is before the selection's end position. Since the selection doesn't contain the target position, the selection is one-line and target position is before this selection.\n      this.targetSelection = new Selection(this.targetPosition.lineNumber - this.selection.endLineNumber + this.selection.startLineNumber, this.targetPosition.column, this.targetPosition.lineNumber, this.targetPosition.column + this.selection.endColumn - this.selection.startColumn);\n    }\n  };\n\n  DragAndDropCommand.prototype.computeCursorState = function (model, helper) {\n    return this.targetSelection;\n  };\n\n  return DragAndDropCommand;\n}();\n\nexport { DragAndDropCommand };","map":null,"metadata":{},"sourceType":"module"}