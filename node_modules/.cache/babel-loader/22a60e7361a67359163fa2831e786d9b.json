{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nimport { createElement } from './formattedTextRenderer.js';\nimport { onUnexpectedError } from '../common/errors.js';\nimport { parseHrefAndDimensions, removeMarkdownEscapes } from '../common/htmlContent.js';\nimport { defaultGenerator } from '../common/idGenerator.js';\nimport * as marked from '../common/marked/marked.js';\nimport { insane } from '../common/insane/insane.js';\nimport { parse } from '../common/marshalling.js';\nimport { cloneAndChange } from '../common/objects.js';\nimport { escape } from '../common/strings.js';\nimport { URI } from '../common/uri.js';\n/**\n * Create html nodes for the given content element.\n */\n\nexport function renderMarkdown(markdown, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var element = createElement(options);\n\n  var _uriMassage = function (part) {\n    var data;\n\n    try {\n      data = parse(decodeURIComponent(part));\n    } catch (e) {// ignore\n    }\n\n    if (!data) {\n      return part;\n    }\n\n    data = cloneAndChange(data, function (value) {\n      if (markdown.uris && markdown.uris[value]) {\n        return URI.revive(markdown.uris[value]);\n      } else {\n        return undefined;\n      }\n    });\n    return encodeURIComponent(JSON.stringify(data));\n  };\n\n  var _href = function (href, isDomUri) {\n    var data = markdown.uris && markdown.uris[href];\n\n    if (!data) {\n      return href;\n    }\n\n    var uri = URI.revive(data);\n\n    if (isDomUri) {\n      uri = DOM.asDomUri(uri);\n    }\n\n    if (uri.query) {\n      uri = uri.with({\n        query: _uriMassage(uri.query)\n      });\n    }\n\n    if (data) {\n      href = uri.toString(true);\n    }\n\n    return href;\n  }; // signal to code-block render that the\n  // element has been created\n\n\n  var signalInnerHTML;\n  var withInnerHTML = new Promise(function (c) {\n    return signalInnerHTML = c;\n  });\n  var renderer = new marked.Renderer();\n\n  renderer.image = function (href, title, text) {\n    var _a;\n\n    var dimensions = [];\n    var attributes = [];\n\n    if (href) {\n      _a = parseHrefAndDimensions(href), href = _a.href, dimensions = _a.dimensions;\n      href = _href(href, true);\n      attributes.push(\"src=\\\"\" + href + \"\\\"\");\n    }\n\n    if (text) {\n      attributes.push(\"alt=\\\"\" + text + \"\\\"\");\n    }\n\n    if (title) {\n      attributes.push(\"title=\\\"\" + title + \"\\\"\");\n    }\n\n    if (dimensions.length) {\n      attributes = attributes.concat(dimensions);\n    }\n\n    return '<img ' + attributes.join(' ') + '>';\n  };\n\n  renderer.link = function (href, title, text) {\n    // Remove markdown escapes. Workaround for https://github.com/chjj/marked/issues/829\n    if (href === text) {\n      // raw link case\n      text = removeMarkdownEscapes(text);\n    }\n\n    href = _href(href, false);\n    title = removeMarkdownEscapes(title);\n    href = removeMarkdownEscapes(href);\n\n    if (!href || href.match(/^data:|javascript:/i) || href.match(/^command:/i) && !markdown.isTrusted || href.match(/^command:(\\/\\/\\/)?_workbench\\.downloadResource/i)) {\n      // drop the link\n      return text;\n    } else {\n      // HTML Encode href\n      href = href.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n      return \"<a href=\\\"#\\\" data-href=\\\"\" + href + \"\\\" title=\\\"\" + (title || href) + \"\\\">\" + text + \"</a>\";\n    }\n  };\n\n  renderer.paragraph = function (text) {\n    return \"<p>\" + text + \"</p>\";\n  };\n\n  if (options.codeBlockRenderer) {\n    renderer.code = function (code, lang) {\n      var value = options.codeBlockRenderer(lang, code); // when code-block rendering is async we return sync\n      // but update the node with the real result later.\n\n      var id = defaultGenerator.nextId();\n      var promise = Promise.all([value, withInnerHTML]).then(function (values) {\n        var strValue = values[0];\n        var span = element.querySelector(\"div[data-code=\\\"\" + id + \"\\\"]\");\n\n        if (span) {\n          span.innerHTML = strValue;\n        }\n      }).catch(function (err) {// ignore\n      });\n\n      if (options.codeBlockRenderCallback) {\n        promise.then(options.codeBlockRenderCallback);\n      }\n\n      return \"<div class=\\\"code\\\" data-code=\\\"\" + id + \"\\\">\" + escape(code) + \"</div>\";\n    };\n  }\n\n  var actionHandler = options.actionHandler;\n\n  if (actionHandler) {\n    actionHandler.disposeables.add(DOM.addStandardDisposableListener(element, 'click', function (event) {\n      var target = event.target;\n\n      if (target.tagName !== 'A') {\n        target = target.parentElement;\n\n        if (!target || target.tagName !== 'A') {\n          return;\n        }\n      }\n\n      try {\n        var href = target.dataset['href'];\n\n        if (href) {\n          actionHandler.callback(href, event);\n        }\n      } catch (err) {\n        onUnexpectedError(err);\n      } finally {\n        event.preventDefault();\n      }\n    }));\n  }\n\n  var markedOptions = {\n    sanitize: true,\n    renderer: renderer\n  };\n  var allowedSchemes = ['http', 'https', 'mailto', 'data'];\n\n  if (markdown.isTrusted) {\n    allowedSchemes.push('command');\n  }\n\n  var renderedMarkdown = marked.parse(markdown.value, markedOptions);\n  element.innerHTML = insane(renderedMarkdown, {\n    allowedSchemes: allowedSchemes,\n    allowedAttributes: {\n      'a': ['href', 'name', 'target', 'data-href'],\n      'iframe': ['allowfullscreen', 'frameborder', 'src'],\n      'img': ['src', 'title', 'alt', 'width', 'height'],\n      'div': ['class', 'data-code']\n    }\n  });\n  signalInnerHTML();\n  return element;\n}","map":null,"metadata":{},"sourceType":"module"}