{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { mergeSort } from '../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { illegalArgument, onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { registerLanguageCommand } from '../../browser/editorExtensions.js';\nimport { CodeLensProviderRegistry } from '../../common/modes.js';\nimport { IModelService } from '../../common/services/modelService.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\n\nvar CodeLensModel =\n/** @class */\nfunction () {\n  function CodeLensModel() {\n    this.lenses = [];\n    this._dispoables = new DisposableStore();\n  }\n\n  CodeLensModel.prototype.dispose = function () {\n    this._dispoables.dispose();\n  };\n\n  CodeLensModel.prototype.add = function (list, provider) {\n    this._dispoables.add(list);\n\n    for (var _i = 0, _a = list.lenses; _i < _a.length; _i++) {\n      var symbol = _a[_i];\n      this.lenses.push({\n        symbol: symbol,\n        provider: provider\n      });\n    }\n  };\n\n  return CodeLensModel;\n}();\n\nexport { CodeLensModel };\nexport function getCodeLensData(model, token) {\n  var provider = CodeLensProviderRegistry.ordered(model);\n  var providerRanks = new Map();\n  var result = new CodeLensModel();\n  var promises = provider.map(function (provider, i) {\n    providerRanks.set(provider, i);\n    return Promise.resolve(provider.provideCodeLenses(model, token)).then(function (list) {\n      return list && result.add(list, provider);\n    }).catch(onUnexpectedExternalError);\n  });\n  return Promise.all(promises).then(function () {\n    result.lenses = mergeSort(result.lenses, function (a, b) {\n      // sort by lineNumber, provider-rank, and column\n      if (a.symbol.range.startLineNumber < b.symbol.range.startLineNumber) {\n        return -1;\n      } else if (a.symbol.range.startLineNumber > b.symbol.range.startLineNumber) {\n        return 1;\n      } else if (providerRanks.get(a.provider) < providerRanks.get(b.provider)) {\n        return -1;\n      } else if (providerRanks.get(a.provider) > providerRanks.get(b.provider)) {\n        return 1;\n      } else if (a.symbol.range.startColumn < b.symbol.range.startColumn) {\n        return -1;\n      } else if (a.symbol.range.startColumn > b.symbol.range.startColumn) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n    return result;\n  });\n}\nregisterLanguageCommand('_executeCodeLensProvider', function (accessor, args) {\n  var resource = args.resource,\n      itemResolveCount = args.itemResolveCount;\n\n  if (!(resource instanceof URI)) {\n    throw illegalArgument();\n  }\n\n  var model = accessor.get(IModelService).getModel(resource);\n\n  if (!model) {\n    throw illegalArgument();\n  }\n\n  var result = [];\n  var disposables = new DisposableStore();\n  return getCodeLensData(model, CancellationToken.None).then(function (value) {\n    disposables.add(value);\n    var resolve = [];\n\n    var _loop_1 = function (item) {\n      if (typeof itemResolveCount === 'undefined' || Boolean(item.symbol.command)) {\n        result.push(item.symbol);\n      } else if (itemResolveCount-- > 0 && item.provider.resolveCodeLens) {\n        resolve.push(Promise.resolve(item.provider.resolveCodeLens(model, item.symbol, CancellationToken.None)).then(function (symbol) {\n          return result.push(symbol || item.symbol);\n        }));\n      }\n    };\n\n    for (var _i = 0, _a = value.lenses; _i < _a.length; _i++) {\n      var item = _a[_i];\n\n      _loop_1(item);\n    }\n\n    return Promise.all(resolve);\n  }).then(function () {\n    return result;\n  }).finally(function () {\n    // make sure to return results, then (on next tick)\n    // dispose the results\n    setTimeout(function () {\n      return disposables.dispose();\n    }, 100);\n  });\n});","map":null,"metadata":{},"sourceType":"module"}