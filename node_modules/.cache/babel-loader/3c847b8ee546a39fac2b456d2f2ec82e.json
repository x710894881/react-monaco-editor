{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './dnd.css';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isMacintosh } from '../../../base/common/platform.js';\nimport { registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { DragAndDropCommand } from './dragAndDropCommand.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\n\nfunction hasTriggerModifier(e) {\n  if (isMacintosh) {\n    return e.altKey;\n  } else {\n    return e.ctrlKey;\n  }\n}\n\nvar DragAndDropController =\n/** @class */\nfunction (_super) {\n  __extends(DragAndDropController, _super);\n\n  function DragAndDropController(editor) {\n    var _this = _super.call(this) || this;\n\n    _this._editor = editor;\n\n    _this._register(_this._editor.onMouseDown(function (e) {\n      return _this._onEditorMouseDown(e);\n    }));\n\n    _this._register(_this._editor.onMouseUp(function (e) {\n      return _this._onEditorMouseUp(e);\n    }));\n\n    _this._register(_this._editor.onMouseDrag(function (e) {\n      return _this._onEditorMouseDrag(e);\n    }));\n\n    _this._register(_this._editor.onMouseDrop(function (e) {\n      return _this._onEditorMouseDrop(e);\n    }));\n\n    _this._register(_this._editor.onKeyDown(function (e) {\n      return _this.onEditorKeyDown(e);\n    }));\n\n    _this._register(_this._editor.onKeyUp(function (e) {\n      return _this.onEditorKeyUp(e);\n    }));\n\n    _this._register(_this._editor.onDidBlurEditorWidget(function () {\n      return _this.onEditorBlur();\n    }));\n\n    _this._dndDecorationIds = [];\n    _this._mouseDown = false;\n    _this._modifierPressed = false;\n    _this._dragSelection = null;\n    return _this;\n  }\n\n  DragAndDropController.prototype.onEditorBlur = function () {\n    this._removeDecoration();\n\n    this._dragSelection = null;\n    this._mouseDown = false;\n    this._modifierPressed = false;\n  };\n\n  DragAndDropController.prototype.onEditorKeyDown = function (e) {\n    if (!this._editor.getConfiguration().dragAndDrop) {\n      return;\n    }\n\n    if (hasTriggerModifier(e)) {\n      this._modifierPressed = true;\n    }\n\n    if (this._mouseDown && hasTriggerModifier(e)) {\n      this._editor.updateOptions({\n        mouseStyle: 'copy'\n      });\n    }\n  };\n\n  DragAndDropController.prototype.onEditorKeyUp = function (e) {\n    if (!this._editor.getConfiguration().dragAndDrop) {\n      return;\n    }\n\n    if (hasTriggerModifier(e)) {\n      this._modifierPressed = false;\n    }\n\n    if (this._mouseDown && e.keyCode === DragAndDropController.TRIGGER_KEY_VALUE) {\n      this._editor.updateOptions({\n        mouseStyle: 'default'\n      });\n    }\n  };\n\n  DragAndDropController.prototype._onEditorMouseDown = function (mouseEvent) {\n    this._mouseDown = true;\n  };\n\n  DragAndDropController.prototype._onEditorMouseUp = function (mouseEvent) {\n    this._mouseDown = false; // Whenever users release the mouse, the drag and drop operation should finish and the cursor should revert to text.\n\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n  };\n\n  DragAndDropController.prototype._onEditorMouseDrag = function (mouseEvent) {\n    var target = mouseEvent.target;\n\n    if (this._dragSelection === null) {\n      var selections = this._editor.getSelections() || [];\n      var possibleSelections = selections.filter(function (selection) {\n        return target.position && selection.containsPosition(target.position);\n      });\n\n      if (possibleSelections.length === 1) {\n        this._dragSelection = possibleSelections[0];\n      } else {\n        return;\n      }\n    }\n\n    if (hasTriggerModifier(mouseEvent.event)) {\n      this._editor.updateOptions({\n        mouseStyle: 'copy'\n      });\n    } else {\n      this._editor.updateOptions({\n        mouseStyle: 'default'\n      });\n    }\n\n    if (target.position) {\n      if (this._dragSelection.containsPosition(target.position)) {\n        this._removeDecoration();\n      } else {\n        this.showAt(target.position);\n      }\n    }\n  };\n\n  DragAndDropController.prototype._onEditorMouseDrop = function (mouseEvent) {\n    if (mouseEvent.target && (this._hitContent(mouseEvent.target) || this._hitMargin(mouseEvent.target)) && mouseEvent.target.position) {\n      var newCursorPosition_1 = new Position(mouseEvent.target.position.lineNumber, mouseEvent.target.position.column);\n\n      if (this._dragSelection === null) {\n        var newSelections = null;\n\n        if (mouseEvent.event.shiftKey) {\n          var primarySelection = this._editor.getSelection();\n\n          if (primarySelection) {\n            var selectionStartLineNumber = primarySelection.selectionStartLineNumber,\n                selectionStartColumn = primarySelection.selectionStartColumn;\n            newSelections = [new Selection(selectionStartLineNumber, selectionStartColumn, newCursorPosition_1.lineNumber, newCursorPosition_1.column)];\n          }\n        } else {\n          newSelections = (this._editor.getSelections() || []).map(function (selection) {\n            if (selection.containsPosition(newCursorPosition_1)) {\n              return new Selection(newCursorPosition_1.lineNumber, newCursorPosition_1.column, newCursorPosition_1.lineNumber, newCursorPosition_1.column);\n            } else {\n              return selection;\n            }\n          });\n        } // Use `mouse` as the source instead of `api`.\n\n\n        this._editor.setSelections(newSelections || [], 'mouse');\n      } else if (!this._dragSelection.containsPosition(newCursorPosition_1) || (hasTriggerModifier(mouseEvent.event) || this._modifierPressed) && (this._dragSelection.getEndPosition().equals(newCursorPosition_1) || this._dragSelection.getStartPosition().equals(newCursorPosition_1)) // we allow users to paste content beside the selection\n      ) {\n        this._editor.pushUndoStop();\n\n        this._editor.executeCommand(DragAndDropController.ID, new DragAndDropCommand(this._dragSelection, newCursorPosition_1, hasTriggerModifier(mouseEvent.event) || this._modifierPressed));\n\n        this._editor.pushUndoStop();\n      }\n    }\n\n    this._editor.updateOptions({\n      mouseStyle: 'text'\n    });\n\n    this._removeDecoration();\n\n    this._dragSelection = null;\n    this._mouseDown = false;\n  };\n\n  DragAndDropController.prototype.showAt = function (position) {\n    var newDecorations = [{\n      range: new Range(position.lineNumber, position.column, position.lineNumber, position.column),\n      options: DragAndDropController._DECORATION_OPTIONS\n    }];\n    this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, newDecorations);\n\n    this._editor.revealPosition(position, 1\n    /* Immediate */\n    );\n  };\n\n  DragAndDropController.prototype._removeDecoration = function () {\n    this._dndDecorationIds = this._editor.deltaDecorations(this._dndDecorationIds, []);\n  };\n\n  DragAndDropController.prototype._hitContent = function (target) {\n    return target.type === 6\n    /* CONTENT_TEXT */\n    || target.type === 7\n    /* CONTENT_EMPTY */\n    ;\n  };\n\n  DragAndDropController.prototype._hitMargin = function (target) {\n    return target.type === 2\n    /* GUTTER_GLYPH_MARGIN */\n    || target.type === 3\n    /* GUTTER_LINE_NUMBERS */\n    || target.type === 4\n    /* GUTTER_LINE_DECORATIONS */\n    ;\n  };\n\n  DragAndDropController.prototype.getId = function () {\n    return DragAndDropController.ID;\n  };\n\n  DragAndDropController.prototype.dispose = function () {\n    this._removeDecoration();\n\n    this._dragSelection = null;\n    this._mouseDown = false;\n    this._modifierPressed = false;\n\n    _super.prototype.dispose.call(this);\n  };\n\n  DragAndDropController.ID = 'editor.contrib.dragAndDrop';\n  DragAndDropController.TRIGGER_KEY_VALUE = isMacintosh ? 6\n  /* Alt */\n  : 5\n  /* Ctrl */\n  ;\n  DragAndDropController._DECORATION_OPTIONS = ModelDecorationOptions.register({\n    className: 'dnd-target'\n  });\n  return DragAndDropController;\n}(Disposable);\n\nexport { DragAndDropController };\nregisterEditorContribution(DragAndDropController);","map":null,"metadata":{},"sourceType":"module"}