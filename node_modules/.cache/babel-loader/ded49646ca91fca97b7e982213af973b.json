{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from './dom.js';\nimport { IframeUtils } from './iframe.js';\nimport { StandardMouseEvent } from './mouseEvent.js';\nimport { DisposableStore } from '../common/lifecycle.js';\nexport function standardMouseMoveMerger(lastEvent, currentEvent) {\n  var ev = new StandardMouseEvent(currentEvent);\n  ev.preventDefault();\n  return {\n    leftButton: ev.leftButton,\n    posx: ev.posx,\n    posy: ev.posy\n  };\n}\n\nvar GlobalMouseMoveMonitor =\n/** @class */\nfunction () {\n  function GlobalMouseMoveMonitor() {\n    this.hooks = new DisposableStore();\n    this.mouseMoveEventMerger = null;\n    this.mouseMoveCallback = null;\n    this.onStopCallback = null;\n  }\n\n  GlobalMouseMoveMonitor.prototype.dispose = function () {\n    this.stopMonitoring(false);\n    this.hooks.dispose();\n  };\n\n  GlobalMouseMoveMonitor.prototype.stopMonitoring = function (invokeStopCallback) {\n    if (!this.isMonitoring()) {\n      // Not monitoring\n      return;\n    } // Unhook\n\n\n    this.hooks.clear();\n    this.mouseMoveEventMerger = null;\n    this.mouseMoveCallback = null;\n    var onStopCallback = this.onStopCallback;\n    this.onStopCallback = null;\n\n    if (invokeStopCallback && onStopCallback) {\n      onStopCallback();\n    }\n  };\n\n  GlobalMouseMoveMonitor.prototype.isMonitoring = function () {\n    return !!this.mouseMoveEventMerger;\n  };\n\n  GlobalMouseMoveMonitor.prototype.startMonitoring = function (mouseMoveEventMerger, mouseMoveCallback, onStopCallback) {\n    var _this = this;\n\n    if (this.isMonitoring()) {\n      // I am already hooked\n      return;\n    }\n\n    this.mouseMoveEventMerger = mouseMoveEventMerger;\n    this.mouseMoveCallback = mouseMoveCallback;\n    this.onStopCallback = onStopCallback;\n    var windowChain = IframeUtils.getSameOriginWindowChain();\n\n    for (var _i = 0, windowChain_1 = windowChain; _i < windowChain_1.length; _i++) {\n      var element = windowChain_1[_i];\n      this.hooks.add(dom.addDisposableThrottledListener(element.window.document, 'mousemove', function (data) {\n        return _this.mouseMoveCallback(data);\n      }, function (lastEvent, currentEvent) {\n        return _this.mouseMoveEventMerger(lastEvent, currentEvent);\n      }));\n      this.hooks.add(dom.addDisposableListener(element.window.document, 'mouseup', function (e) {\n        return _this.stopMonitoring(true);\n      }));\n    }\n\n    if (IframeUtils.hasDifferentOriginAncestor()) {\n      var lastSameOriginAncestor = windowChain[windowChain.length - 1]; // We might miss a mouse up if it happens outside the iframe\n      // This one is for Chrome\n\n      this.hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document, 'mouseout', function (browserEvent) {\n        var e = new StandardMouseEvent(browserEvent);\n\n        if (e.target.tagName.toLowerCase() === 'html') {\n          _this.stopMonitoring(true);\n        }\n      })); // This one is for FF\n\n      this.hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document, 'mouseover', function (browserEvent) {\n        var e = new StandardMouseEvent(browserEvent);\n\n        if (e.target.tagName.toLowerCase() === 'html') {\n          _this.stopMonitoring(true);\n        }\n      })); // This one is for IE\n\n      this.hooks.add(dom.addDisposableListener(lastSameOriginAncestor.window.document.body, 'mouseleave', function (browserEvent) {\n        _this.stopMonitoring(true);\n      }));\n    }\n  };\n\n  return GlobalMouseMoveMonitor;\n}();\n\nexport { GlobalMouseMoveMonitor };","map":null,"metadata":{},"sourceType":"module"}