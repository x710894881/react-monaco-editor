{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './clipboard.css';\nimport * as nls from '../../../nls.js';\nimport * as browser from '../../../base/browser/browser.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { CopyOptions } from '../../browser/controller/textAreaInput.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nvar CLIPBOARD_CONTEXT_MENU_GROUP = '9_cutcopypaste';\nvar supportsCut = platform.isNative || document.queryCommandSupported('cut');\nvar supportsCopy = platform.isNative || document.queryCommandSupported('copy'); // IE and Edge have trouble with setting html content in clipboard\n\nvar supportsCopyWithSyntaxHighlighting = supportsCopy && !browser.isEdgeOrIE; // Chrome incorrectly returns true for document.queryCommandSupported('paste')\n// when the paste feature is available but the calling script has insufficient\n// privileges to actually perform the action\n\nvar supportsPaste = platform.isNative || !browser.isChrome && document.queryCommandSupported('paste');\n\nvar ExecCommandAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandAction, _super);\n\n  function ExecCommandAction(browserCommand, opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this.browserCommand = browserCommand;\n    return _this;\n  }\n\n  ExecCommandAction.prototype.runCommand = function (accessor, args) {\n    var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor(); // Only if editor text focus (i.e. not if editor has widget focus).\n\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      focusedEditor.trigger('keyboard', this.id, args);\n      return;\n    }\n\n    document.execCommand(this.browserCommand);\n  };\n\n  ExecCommandAction.prototype.run = function (accessor, editor) {\n    editor.focus();\n    document.execCommand(this.browserCommand);\n  };\n\n  return ExecCommandAction;\n}(EditorAction);\n\nvar ExecCommandCutAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandCutAction, _super);\n\n  function ExecCommandCutAction() {\n    var _this = this;\n\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 54\n      /* KEY_X */\n      ,\n      win: {\n        primary: 2048\n        /* CtrlCmd */\n        | 54\n        /* KEY_X */\n        ,\n        secondary: [1024\n        /* Shift */\n        | 20\n        /* Delete */\n        ]\n      },\n      weight: 100\n      /* EditorContrib */\n\n    }; // Do not bind cut keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n\n    _this = _super.call(this, 'cut', {\n      id: 'editor.action.clipboardCutAction',\n      label: nls.localize('actions.clipboard.cutLabel', \"Cut\"),\n      alias: 'Cut',\n      precondition: EditorContextKeys.writable,\n      kbOpts: kbOpts,\n      menuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 1\n      },\n      menubarOpts: {\n        menuId: 14\n        /* MenubarEditMenu */\n        ,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miCut',\n          comment: ['&& denotes a mnemonic']\n        }, \"Cu&&t\"),\n        order: 1\n      }\n    }) || this;\n    return _this;\n  }\n\n  ExecCommandCutAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    _super.prototype.run.call(this, accessor, editor);\n  };\n\n  return ExecCommandCutAction;\n}(ExecCommandAction);\n\nvar ExecCommandCopyAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandCopyAction, _super);\n\n  function ExecCommandCopyAction() {\n    var _this = this;\n\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 33\n      /* KEY_C */\n      ,\n      win: {\n        primary: 2048\n        /* CtrlCmd */\n        | 33\n        /* KEY_C */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 19\n        /* Insert */\n        ]\n      },\n      weight: 100\n      /* EditorContrib */\n\n    }; // Do not bind copy keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n\n    _this = _super.call(this, 'copy', {\n      id: 'editor.action.clipboardCopyAction',\n      label: nls.localize('actions.clipboard.copyLabel', \"Copy\"),\n      alias: 'Copy',\n      precondition: undefined,\n      kbOpts: kbOpts,\n      menuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 2\n      },\n      menubarOpts: {\n        menuId: 14\n        /* MenubarEditMenu */\n        ,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miCopy',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Copy\"),\n        order: 2\n      }\n    }) || this;\n    return _this;\n  }\n\n  ExecCommandCopyAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    _super.prototype.run.call(this, accessor, editor);\n  };\n\n  return ExecCommandCopyAction;\n}(ExecCommandAction);\n\nvar ExecCommandPasteAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandPasteAction, _super);\n\n  function ExecCommandPasteAction() {\n    var _this = this;\n\n    var kbOpts = {\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 52\n      /* KEY_V */\n      ,\n      win: {\n        primary: 2048\n        /* CtrlCmd */\n        | 52\n        /* KEY_V */\n        ,\n        secondary: [1024\n        /* Shift */\n        | 19\n        /* Insert */\n        ]\n      },\n      weight: 100\n      /* EditorContrib */\n\n    }; // Do not bind paste keybindings in the browser,\n    // since browsers do that for us and it avoids security prompts\n\n    if (!platform.isNative) {\n      kbOpts = undefined;\n    }\n\n    _this = _super.call(this, 'paste', {\n      id: 'editor.action.clipboardPasteAction',\n      label: nls.localize('actions.clipboard.pasteLabel', \"Paste\"),\n      alias: 'Paste',\n      precondition: EditorContextKeys.writable,\n      kbOpts: kbOpts,\n      menuOpts: {\n        group: CLIPBOARD_CONTEXT_MENU_GROUP,\n        order: 3\n      },\n      menubarOpts: {\n        menuId: 14\n        /* MenubarEditMenu */\n        ,\n        group: '2_ccp',\n        title: nls.localize({\n          key: 'miPaste',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Paste\"),\n        order: 3\n      }\n    }) || this;\n    return _this;\n  }\n\n  return ExecCommandPasteAction;\n}(ExecCommandAction);\n\nvar ExecCommandCopyWithSyntaxHighlightingAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecCommandCopyWithSyntaxHighlightingAction, _super);\n\n  function ExecCommandCopyWithSyntaxHighlightingAction() {\n    return _super.call(this, 'copy', {\n      id: 'editor.action.clipboardCopyWithSyntaxHighlightingAction',\n      label: nls.localize('actions.clipboard.copyWithSyntaxHighlightingLabel', \"Copy With Syntax Highlighting\"),\n      alias: 'Copy With Syntax Highlighting',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  ExecCommandCopyWithSyntaxHighlightingAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var emptySelectionClipboard = editor.getConfiguration().emptySelectionClipboard;\n\n    if (!emptySelectionClipboard && editor.getSelection().isEmpty()) {\n      return;\n    }\n\n    CopyOptions.forceCopyWithSyntaxHighlighting = true;\n\n    _super.prototype.run.call(this, accessor, editor);\n\n    CopyOptions.forceCopyWithSyntaxHighlighting = false;\n  };\n\n  return ExecCommandCopyWithSyntaxHighlightingAction;\n}(ExecCommandAction);\n\nif (supportsCut) {\n  registerEditorAction(ExecCommandCutAction);\n}\n\nif (supportsCopy) {\n  registerEditorAction(ExecCommandCopyAction);\n}\n\nif (supportsPaste) {\n  registerEditorAction(ExecCommandPasteAction);\n}\n\nif (supportsCopyWithSyntaxHighlighting) {\n  registerEditorAction(ExecCommandCopyWithSyntaxHighlightingAction);\n}","map":null,"metadata":{},"sourceType":"module"}