{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as assert from '../../../base/common/assert.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Range } from '../../common/core/range.js';\nvar defaultOptions = {\n  followsCaret: true,\n  ignoreCharChanges: true,\n  alwaysRevealFirst: true\n};\n/**\n * Create a new diff navigator for the provided diff editor.\n */\n\nvar DiffNavigator =\n/** @class */\nfunction (_super) {\n  __extends(DiffNavigator, _super);\n\n  function DiffNavigator(editor, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._onDidUpdate = _this._register(new Emitter());\n    _this._editor = editor;\n    _this._options = objects.mixin(options, defaultOptions, false);\n    _this.disposed = false;\n    _this.nextIdx = -1;\n    _this.ranges = [];\n    _this.ignoreSelectionChange = false;\n    _this.revealFirst = Boolean(_this._options.alwaysRevealFirst); // hook up to diff editor for diff, disposal, and caret move\n\n    _this._register(_this._editor.onDidDispose(function () {\n      return _this.dispose();\n    }));\n\n    _this._register(_this._editor.onDidUpdateDiff(function () {\n      return _this._onDiffUpdated();\n    }));\n\n    if (_this._options.followsCaret) {\n      _this._register(_this._editor.getModifiedEditor().onDidChangeCursorPosition(function (e) {\n        if (_this.ignoreSelectionChange) {\n          return;\n        }\n\n        _this.nextIdx = -1;\n      }));\n    }\n\n    if (_this._options.alwaysRevealFirst) {\n      _this._register(_this._editor.getModifiedEditor().onDidChangeModel(function (e) {\n        _this.revealFirst = true;\n      }));\n    } // init things\n\n\n    _this._init();\n\n    return _this;\n  }\n\n  DiffNavigator.prototype._init = function () {\n    var changes = this._editor.getLineChanges();\n\n    if (!changes) {\n      return;\n    }\n  };\n\n  DiffNavigator.prototype._onDiffUpdated = function () {\n    this._init();\n\n    this._compute(this._editor.getLineChanges());\n\n    if (this.revealFirst) {\n      // Only reveal first on first non-null changes\n      if (this._editor.getLineChanges() !== null) {\n        this.revealFirst = false;\n        this.nextIdx = -1;\n        this.next(1\n        /* Immediate */\n        );\n      }\n    }\n  };\n\n  DiffNavigator.prototype._compute = function (lineChanges) {\n    var _this = this; // new ranges\n\n\n    this.ranges = [];\n\n    if (lineChanges) {\n      // create ranges from changes\n      lineChanges.forEach(function (lineChange) {\n        if (!_this._options.ignoreCharChanges && lineChange.charChanges) {\n          lineChange.charChanges.forEach(function (charChange) {\n            _this.ranges.push({\n              rhs: true,\n              range: new Range(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn)\n            });\n          });\n        } else {\n          _this.ranges.push({\n            rhs: true,\n            range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedStartLineNumber, 1)\n          });\n        }\n      });\n    } // sort\n\n\n    this.ranges.sort(function (left, right) {\n      if (left.range.getStartPosition().isBeforeOrEqual(right.range.getStartPosition())) {\n        return -1;\n      } else if (right.range.getStartPosition().isBeforeOrEqual(left.range.getStartPosition())) {\n        return 1;\n      } else {\n        return 0;\n      }\n    });\n\n    this._onDidUpdate.fire(this);\n  };\n\n  DiffNavigator.prototype._initIdx = function (fwd) {\n    var found = false;\n\n    var position = this._editor.getPosition();\n\n    if (!position) {\n      this.nextIdx = 0;\n      return;\n    }\n\n    for (var i = 0, len = this.ranges.length; i < len && !found; i++) {\n      var range = this.ranges[i].range;\n\n      if (position.isBeforeOrEqual(range.getStartPosition())) {\n        this.nextIdx = i + (fwd ? 0 : -1);\n        found = true;\n      }\n    }\n\n    if (!found) {\n      // after the last change\n      this.nextIdx = fwd ? 0 : this.ranges.length - 1;\n    }\n\n    if (this.nextIdx < 0) {\n      this.nextIdx = this.ranges.length - 1;\n    }\n  };\n\n  DiffNavigator.prototype._move = function (fwd, scrollType) {\n    assert.ok(!this.disposed, 'Illegal State - diff navigator has been disposed');\n\n    if (!this.canNavigate()) {\n      return;\n    }\n\n    if (this.nextIdx === -1) {\n      this._initIdx(fwd);\n    } else if (fwd) {\n      this.nextIdx += 1;\n\n      if (this.nextIdx >= this.ranges.length) {\n        this.nextIdx = 0;\n      }\n    } else {\n      this.nextIdx -= 1;\n\n      if (this.nextIdx < 0) {\n        this.nextIdx = this.ranges.length - 1;\n      }\n    }\n\n    var info = this.ranges[this.nextIdx];\n    this.ignoreSelectionChange = true;\n\n    try {\n      var pos = info.range.getStartPosition();\n\n      this._editor.setPosition(pos);\n\n      this._editor.revealPositionInCenter(pos, scrollType);\n    } finally {\n      this.ignoreSelectionChange = false;\n    }\n  };\n\n  DiffNavigator.prototype.canNavigate = function () {\n    return this.ranges && this.ranges.length > 0;\n  };\n\n  DiffNavigator.prototype.next = function (scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._move(true, scrollType);\n  };\n\n  DiffNavigator.prototype.previous = function (scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._move(false, scrollType);\n  };\n\n  DiffNavigator.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.ranges = [];\n    this.disposed = true;\n  };\n\n  return DiffNavigator;\n}(Disposable);\n\nexport { DiffNavigator };","map":null,"metadata":{},"sourceType":"module"}