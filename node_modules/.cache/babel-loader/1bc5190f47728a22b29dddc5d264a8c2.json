{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './renameInputField.css';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { localize } from '../../../nls.js';\nimport { RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { inputBackground, inputBorder, inputForeground, widgetShadow } from '../../../platform/theme/common/colorRegistry.js';\nexport var CONTEXT_RENAME_INPUT_VISIBLE = new RawContextKey('renameInputVisible', false);\n\nvar RenameInputField =\n/** @class */\nfunction () {\n  function RenameInputField(editor, themeService, contextKeyService) {\n    var _this = this;\n\n    this.themeService = themeService;\n    this._disposables = new DisposableStore(); // Editor.IContentWidget.allowEditorOverflow\n\n    this.allowEditorOverflow = true;\n    this._currentAcceptInput = null;\n    this._currentCancelInput = null;\n    this._visibleContextKey = CONTEXT_RENAME_INPUT_VISIBLE.bindTo(contextKeyService);\n    this._editor = editor;\n\n    this._editor.addContentWidget(this);\n\n    this._disposables.add(editor.onDidChangeConfiguration(function (e) {\n      if (e.fontInfo) {\n        _this.updateFont();\n      }\n    }));\n\n    this._disposables.add(themeService.onThemeChange(function (theme) {\n      return _this.onThemeChange(theme);\n    }));\n  }\n\n  RenameInputField.prototype.onThemeChange = function (theme) {\n    this.updateStyles(theme);\n  };\n\n  RenameInputField.prototype.dispose = function () {\n    this._disposables.dispose();\n\n    this._editor.removeContentWidget(this);\n  };\n\n  RenameInputField.prototype.getId = function () {\n    return '__renameInputWidget';\n  };\n\n  RenameInputField.prototype.getDomNode = function () {\n    if (!this._domNode) {\n      this._inputField = document.createElement('input');\n      this._inputField.className = 'rename-input';\n      this._inputField.type = 'text';\n\n      this._inputField.setAttribute('aria-label', localize('renameAriaLabel', \"Rename input. Type new name and press Enter to commit.\"));\n\n      this._domNode = document.createElement('div');\n      this._domNode.style.height = this._editor.getConfiguration().lineHeight + \"px\";\n      this._domNode.className = 'monaco-editor rename-box';\n\n      this._domNode.appendChild(this._inputField);\n\n      this.updateFont();\n      this.updateStyles(this.themeService.getTheme());\n    }\n\n    return this._domNode;\n  };\n\n  RenameInputField.prototype.updateStyles = function (theme) {\n    if (!this._inputField) {\n      return;\n    }\n\n    var background = theme.getColor(inputBackground);\n    var foreground = theme.getColor(inputForeground);\n    var widgetShadowColor = theme.getColor(widgetShadow);\n    var border = theme.getColor(inputBorder);\n    this._inputField.style.backgroundColor = background ? background.toString() : null;\n    this._inputField.style.color = foreground ? foreground.toString() : null;\n    this._inputField.style.borderWidth = border ? '1px' : '0px';\n    this._inputField.style.borderStyle = border ? 'solid' : 'none';\n    this._inputField.style.borderColor = border ? border.toString() : 'none';\n    this._domNode.style.boxShadow = widgetShadowColor ? \" 0 2px 8px \" + widgetShadowColor : null;\n  };\n\n  RenameInputField.prototype.updateFont = function () {\n    if (!this._inputField) {\n      return;\n    }\n\n    var fontInfo = this._editor.getConfiguration().fontInfo;\n\n    this._inputField.style.fontFamily = fontInfo.fontFamily;\n    this._inputField.style.fontWeight = fontInfo.fontWeight;\n    this._inputField.style.fontSize = fontInfo.fontSize + \"px\";\n  };\n\n  RenameInputField.prototype.getPosition = function () {\n    return this._visible ? {\n      position: this._position,\n      preference: [2\n      /* BELOW */\n      , 1\n      /* ABOVE */\n      ]\n    } : null;\n  };\n\n  RenameInputField.prototype.acceptInput = function () {\n    if (this._currentAcceptInput) {\n      this._currentAcceptInput();\n    }\n  };\n\n  RenameInputField.prototype.cancelInput = function (focusEditor) {\n    if (this._currentCancelInput) {\n      this._currentCancelInput(focusEditor);\n    }\n  };\n\n  RenameInputField.prototype.getInput = function (where, value, selectionStart, selectionEnd) {\n    var _this = this;\n\n    this._position = new Position(where.startLineNumber, where.startColumn);\n    this._inputField.value = value;\n\n    this._inputField.setAttribute('selectionStart', selectionStart.toString());\n\n    this._inputField.setAttribute('selectionEnd', selectionEnd.toString());\n\n    this._inputField.size = Math.max((where.endColumn - where.startColumn) * 1.1, 20);\n    var disposeOnDone = new DisposableStore();\n\n    var always = function () {\n      disposeOnDone.dispose();\n\n      _this._hide();\n    };\n\n    return new Promise(function (resolve) {\n      _this._currentCancelInput = function (focusEditor) {\n        _this._currentAcceptInput = null;\n        _this._currentCancelInput = null;\n        resolve(focusEditor);\n        return true;\n      };\n\n      _this._currentAcceptInput = function () {\n        if (_this._inputField.value.trim().length === 0 || _this._inputField.value === value) {\n          // empty or whitespace only or not changed\n          _this.cancelInput(true);\n\n          return;\n        }\n\n        _this._currentAcceptInput = null;\n        _this._currentCancelInput = null;\n        resolve(_this._inputField.value);\n      };\n\n      var onCursorChanged = function () {\n        var editorPosition = _this._editor.getPosition();\n\n        if (!editorPosition || !Range.containsPosition(where, editorPosition)) {\n          _this.cancelInput(true);\n        }\n      };\n\n      disposeOnDone.add(_this._editor.onDidChangeCursorSelection(onCursorChanged));\n      disposeOnDone.add(_this._editor.onDidBlurEditorWidget(function () {\n        return _this.cancelInput(false);\n      }));\n\n      _this._show();\n    }).then(function (newValue) {\n      always();\n      return newValue;\n    }, function (err) {\n      always();\n      return Promise.reject(err);\n    });\n  };\n\n  RenameInputField.prototype._show = function () {\n    var _this = this;\n\n    this._editor.revealLineInCenterIfOutsideViewport(this._position.lineNumber, 0\n    /* Smooth */\n    );\n\n    this._visible = true;\n\n    this._visibleContextKey.set(true);\n\n    this._editor.layoutContentWidget(this);\n\n    setTimeout(function () {\n      _this._inputField.focus();\n\n      _this._inputField.setSelectionRange(parseInt(_this._inputField.getAttribute('selectionStart')), parseInt(_this._inputField.getAttribute('selectionEnd')));\n    }, 100);\n  };\n\n  RenameInputField.prototype._hide = function () {\n    this._visible = false;\n\n    this._visibleContextKey.reset();\n\n    this._editor.layoutContentWidget(this);\n  };\n\n  return RenameInputField;\n}();\n\nexport { RenameInputField };","map":null,"metadata":{},"sourceType":"module"}