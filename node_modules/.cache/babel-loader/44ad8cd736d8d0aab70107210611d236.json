{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CoreNavigationCommands } from '../controller/coreCommands.js';\nimport { Position } from '../../common/core/position.js';\n\nvar ViewController =\n/** @class */\nfunction () {\n  function ViewController(configuration, viewModel, outgoingEvents, commandDelegate) {\n    this.configuration = configuration;\n    this.viewModel = viewModel;\n    this.outgoingEvents = outgoingEvents;\n    this.commandDelegate = commandDelegate;\n  }\n\n  ViewController.prototype._execMouseCommand = function (editorCommand, args) {\n    args.source = 'mouse';\n    this.commandDelegate.executeEditorCommand(editorCommand, args);\n  };\n\n  ViewController.prototype.paste = function (source, text, pasteOnNewLine, multicursorText) {\n    this.commandDelegate.paste(source, text, pasteOnNewLine, multicursorText);\n  };\n\n  ViewController.prototype.type = function (source, text) {\n    this.commandDelegate.type(source, text);\n  };\n\n  ViewController.prototype.replacePreviousChar = function (source, text, replaceCharCnt) {\n    this.commandDelegate.replacePreviousChar(source, text, replaceCharCnt);\n  };\n\n  ViewController.prototype.compositionStart = function (source) {\n    this.commandDelegate.compositionStart(source);\n  };\n\n  ViewController.prototype.compositionEnd = function (source) {\n    this.commandDelegate.compositionEnd(source);\n  };\n\n  ViewController.prototype.cut = function (source) {\n    this.commandDelegate.cut(source);\n  };\n\n  ViewController.prototype.setSelection = function (source, modelSelection) {\n    this.commandDelegate.executeEditorCommand(CoreNavigationCommands.SetSelection, {\n      source: source,\n      selection: modelSelection\n    });\n  };\n\n  ViewController.prototype._validateViewColumn = function (viewPosition) {\n    var minColumn = this.viewModel.getLineMinColumn(viewPosition.lineNumber);\n\n    if (viewPosition.column < minColumn) {\n      return new Position(viewPosition.lineNumber, minColumn);\n    }\n\n    return viewPosition;\n  };\n\n  ViewController.prototype._hasMulticursorModifier = function (data) {\n    switch (this.configuration.editor.multiCursorModifier) {\n      case 'altKey':\n        return data.altKey;\n\n      case 'ctrlKey':\n        return data.ctrlKey;\n\n      case 'metaKey':\n        return data.metaKey;\n    }\n\n    return false;\n  };\n\n  ViewController.prototype._hasNonMulticursorModifier = function (data) {\n    switch (this.configuration.editor.multiCursorModifier) {\n      case 'altKey':\n        return data.ctrlKey || data.metaKey;\n\n      case 'ctrlKey':\n        return data.altKey || data.metaKey;\n\n      case 'metaKey':\n        return data.ctrlKey || data.altKey;\n    }\n\n    return false;\n  };\n\n  ViewController.prototype.dispatchMouse = function (data) {\n    if (data.middleButton) {\n      if (data.inSelectionMode) {\n        this._columnSelect(data.position, data.mouseColumn, true);\n      } else {\n        this.moveTo(data.position);\n      }\n    } else if (data.startedOnLineNumbers) {\n      // If the dragging started on the gutter, then have operations work on the entire line\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelect(data.position);\n        } else {\n          this._createCursor(data.position, true);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount >= 4) {\n      this._selectAll();\n    } else if (data.mouseDownCount === 3) {\n      if (this._hasMulticursorModifier(data)) {\n        if (data.inSelectionMode) {\n          this._lastCursorLineSelectDrag(data.position);\n        } else {\n          this._lastCursorLineSelect(data.position);\n        }\n      } else {\n        if (data.inSelectionMode) {\n          this._lineSelectDrag(data.position);\n        } else {\n          this._lineSelect(data.position);\n        }\n      }\n    } else if (data.mouseDownCount === 2) {\n      if (this._hasMulticursorModifier(data)) {\n        this._lastCursorWordSelect(data.position);\n      } else {\n        if (data.inSelectionMode) {\n          this._wordSelectDrag(data.position);\n        } else {\n          this._wordSelect(data.position);\n        }\n      }\n    } else {\n      if (this._hasMulticursorModifier(data)) {\n        if (!this._hasNonMulticursorModifier(data)) {\n          if (data.shiftKey) {\n            this._columnSelect(data.position, data.mouseColumn, false);\n          } else {\n            // Do multi-cursor operations only when purely alt is pressed\n            if (data.inSelectionMode) {\n              this._lastCursorMoveToSelect(data.position);\n            } else {\n              this._createCursor(data.position, false);\n            }\n          }\n        }\n      } else {\n        if (data.inSelectionMode) {\n          if (data.altKey) {\n            this._columnSelect(data.position, data.mouseColumn, true);\n          } else {\n            this._moveToSelect(data.position);\n          }\n        } else {\n          this.moveTo(data.position);\n        }\n      }\n    }\n  };\n\n  ViewController.prototype._usualArgs = function (viewPosition) {\n    viewPosition = this._validateViewColumn(viewPosition);\n    return {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition\n    };\n  };\n\n  ViewController.prototype.moveTo = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.MoveTo, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._moveToSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.MoveToSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._columnSelect = function (viewPosition, mouseColumn, setAnchorIfNotSet) {\n    viewPosition = this._validateViewColumn(viewPosition);\n\n    this._execMouseCommand(CoreNavigationCommands.ColumnSelect, {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      mouseColumn: mouseColumn,\n      setAnchorIfNotSet: setAnchorIfNotSet\n    });\n  };\n\n  ViewController.prototype._createCursor = function (viewPosition, wholeLine) {\n    viewPosition = this._validateViewColumn(viewPosition);\n\n    this._execMouseCommand(CoreNavigationCommands.CreateCursor, {\n      position: this._convertViewToModelPosition(viewPosition),\n      viewPosition: viewPosition,\n      wholeLine: wholeLine\n    });\n  };\n\n  ViewController.prototype._lastCursorMoveToSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorMoveToSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._wordSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.WordSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._wordSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.WordSelectDrag, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lastCursorWordSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorWordSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lineSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LineSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lineSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LineSelectDrag, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lastCursorLineSelect = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelect, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._lastCursorLineSelectDrag = function (viewPosition) {\n    this._execMouseCommand(CoreNavigationCommands.LastCursorLineSelectDrag, this._usualArgs(viewPosition));\n  };\n\n  ViewController.prototype._selectAll = function () {\n    this._execMouseCommand(CoreNavigationCommands.SelectAll, {});\n  }; // ----------------------\n\n\n  ViewController.prototype._convertViewToModelPosition = function (viewPosition) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(viewPosition);\n  };\n\n  ViewController.prototype.emitKeyDown = function (e) {\n    this.outgoingEvents.emitKeyDown(e);\n  };\n\n  ViewController.prototype.emitKeyUp = function (e) {\n    this.outgoingEvents.emitKeyUp(e);\n  };\n\n  ViewController.prototype.emitContextMenu = function (e) {\n    this.outgoingEvents.emitContextMenu(e);\n  };\n\n  ViewController.prototype.emitMouseMove = function (e) {\n    this.outgoingEvents.emitMouseMove(e);\n  };\n\n  ViewController.prototype.emitMouseLeave = function (e) {\n    this.outgoingEvents.emitMouseLeave(e);\n  };\n\n  ViewController.prototype.emitMouseUp = function (e) {\n    this.outgoingEvents.emitMouseUp(e);\n  };\n\n  ViewController.prototype.emitMouseDown = function (e) {\n    this.outgoingEvents.emitMouseDown(e);\n  };\n\n  ViewController.prototype.emitMouseDrag = function (e) {\n    this.outgoingEvents.emitMouseDrag(e);\n  };\n\n  ViewController.prototype.emitMouseDrop = function (e) {\n    this.outgoingEvents.emitMouseDrop(e);\n  };\n\n  ViewController.prototype.emitMouseWheel = function (e) {\n    this.outgoingEvents.emitMouseWheel(e);\n  };\n\n  return ViewController;\n}();\n\nexport { ViewController };","map":null,"metadata":{},"sourceType":"module"}