{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as browser from './browser.js';\nimport { KeyCodeUtils, SimpleKeybinding } from '../common/keyCodes.js';\nimport * as platform from '../common/platform.js';\nvar KEY_CODE_MAP = new Array(230);\nvar INVERSE_KEY_CODE_MAP = new Array(112\n/* MAX_VALUE */\n);\n\n(function () {\n  for (var i = 0; i < INVERSE_KEY_CODE_MAP.length; i++) {\n    INVERSE_KEY_CODE_MAP[i] = -1;\n  }\n\n  function define(code, keyCode) {\n    KEY_CODE_MAP[code] = keyCode;\n    INVERSE_KEY_CODE_MAP[keyCode] = code;\n  }\n\n  define(3, 7\n  /* PauseBreak */\n  ); // VK_CANCEL 0x03 Control-break processing\n\n  define(8, 1\n  /* Backspace */\n  );\n  define(9, 2\n  /* Tab */\n  );\n  define(13, 3\n  /* Enter */\n  );\n  define(16, 4\n  /* Shift */\n  );\n  define(17, 5\n  /* Ctrl */\n  );\n  define(18, 6\n  /* Alt */\n  );\n  define(19, 7\n  /* PauseBreak */\n  );\n  define(20, 8\n  /* CapsLock */\n  );\n  define(27, 9\n  /* Escape */\n  );\n  define(32, 10\n  /* Space */\n  );\n  define(33, 11\n  /* PageUp */\n  );\n  define(34, 12\n  /* PageDown */\n  );\n  define(35, 13\n  /* End */\n  );\n  define(36, 14\n  /* Home */\n  );\n  define(37, 15\n  /* LeftArrow */\n  );\n  define(38, 16\n  /* UpArrow */\n  );\n  define(39, 17\n  /* RightArrow */\n  );\n  define(40, 18\n  /* DownArrow */\n  );\n  define(45, 19\n  /* Insert */\n  );\n  define(46, 20\n  /* Delete */\n  );\n  define(48, 21\n  /* KEY_0 */\n  );\n  define(49, 22\n  /* KEY_1 */\n  );\n  define(50, 23\n  /* KEY_2 */\n  );\n  define(51, 24\n  /* KEY_3 */\n  );\n  define(52, 25\n  /* KEY_4 */\n  );\n  define(53, 26\n  /* KEY_5 */\n  );\n  define(54, 27\n  /* KEY_6 */\n  );\n  define(55, 28\n  /* KEY_7 */\n  );\n  define(56, 29\n  /* KEY_8 */\n  );\n  define(57, 30\n  /* KEY_9 */\n  );\n  define(65, 31\n  /* KEY_A */\n  );\n  define(66, 32\n  /* KEY_B */\n  );\n  define(67, 33\n  /* KEY_C */\n  );\n  define(68, 34\n  /* KEY_D */\n  );\n  define(69, 35\n  /* KEY_E */\n  );\n  define(70, 36\n  /* KEY_F */\n  );\n  define(71, 37\n  /* KEY_G */\n  );\n  define(72, 38\n  /* KEY_H */\n  );\n  define(73, 39\n  /* KEY_I */\n  );\n  define(74, 40\n  /* KEY_J */\n  );\n  define(75, 41\n  /* KEY_K */\n  );\n  define(76, 42\n  /* KEY_L */\n  );\n  define(77, 43\n  /* KEY_M */\n  );\n  define(78, 44\n  /* KEY_N */\n  );\n  define(79, 45\n  /* KEY_O */\n  );\n  define(80, 46\n  /* KEY_P */\n  );\n  define(81, 47\n  /* KEY_Q */\n  );\n  define(82, 48\n  /* KEY_R */\n  );\n  define(83, 49\n  /* KEY_S */\n  );\n  define(84, 50\n  /* KEY_T */\n  );\n  define(85, 51\n  /* KEY_U */\n  );\n  define(86, 52\n  /* KEY_V */\n  );\n  define(87, 53\n  /* KEY_W */\n  );\n  define(88, 54\n  /* KEY_X */\n  );\n  define(89, 55\n  /* KEY_Y */\n  );\n  define(90, 56\n  /* KEY_Z */\n  );\n  define(93, 58\n  /* ContextMenu */\n  );\n  define(96, 93\n  /* NUMPAD_0 */\n  );\n  define(97, 94\n  /* NUMPAD_1 */\n  );\n  define(98, 95\n  /* NUMPAD_2 */\n  );\n  define(99, 96\n  /* NUMPAD_3 */\n  );\n  define(100, 97\n  /* NUMPAD_4 */\n  );\n  define(101, 98\n  /* NUMPAD_5 */\n  );\n  define(102, 99\n  /* NUMPAD_6 */\n  );\n  define(103, 100\n  /* NUMPAD_7 */\n  );\n  define(104, 101\n  /* NUMPAD_8 */\n  );\n  define(105, 102\n  /* NUMPAD_9 */\n  );\n  define(106, 103\n  /* NUMPAD_MULTIPLY */\n  );\n  define(107, 104\n  /* NUMPAD_ADD */\n  );\n  define(108, 105\n  /* NUMPAD_SEPARATOR */\n  );\n  define(109, 106\n  /* NUMPAD_SUBTRACT */\n  );\n  define(110, 107\n  /* NUMPAD_DECIMAL */\n  );\n  define(111, 108\n  /* NUMPAD_DIVIDE */\n  );\n  define(112, 59\n  /* F1 */\n  );\n  define(113, 60\n  /* F2 */\n  );\n  define(114, 61\n  /* F3 */\n  );\n  define(115, 62\n  /* F4 */\n  );\n  define(116, 63\n  /* F5 */\n  );\n  define(117, 64\n  /* F6 */\n  );\n  define(118, 65\n  /* F7 */\n  );\n  define(119, 66\n  /* F8 */\n  );\n  define(120, 67\n  /* F9 */\n  );\n  define(121, 68\n  /* F10 */\n  );\n  define(122, 69\n  /* F11 */\n  );\n  define(123, 70\n  /* F12 */\n  );\n  define(124, 71\n  /* F13 */\n  );\n  define(125, 72\n  /* F14 */\n  );\n  define(126, 73\n  /* F15 */\n  );\n  define(127, 74\n  /* F16 */\n  );\n  define(128, 75\n  /* F17 */\n  );\n  define(129, 76\n  /* F18 */\n  );\n  define(130, 77\n  /* F19 */\n  );\n  define(144, 78\n  /* NumLock */\n  );\n  define(145, 79\n  /* ScrollLock */\n  );\n  define(186, 80\n  /* US_SEMICOLON */\n  );\n  define(187, 81\n  /* US_EQUAL */\n  );\n  define(188, 82\n  /* US_COMMA */\n  );\n  define(189, 83\n  /* US_MINUS */\n  );\n  define(190, 84\n  /* US_DOT */\n  );\n  define(191, 85\n  /* US_SLASH */\n  );\n  define(192, 86\n  /* US_BACKTICK */\n  );\n  define(193, 110\n  /* ABNT_C1 */\n  );\n  define(194, 111\n  /* ABNT_C2 */\n  );\n  define(219, 87\n  /* US_OPEN_SQUARE_BRACKET */\n  );\n  define(220, 88\n  /* US_BACKSLASH */\n  );\n  define(221, 89\n  /* US_CLOSE_SQUARE_BRACKET */\n  );\n  define(222, 90\n  /* US_QUOTE */\n  );\n  define(223, 91\n  /* OEM_8 */\n  );\n  define(226, 92\n  /* OEM_102 */\n  );\n  /**\n   * https://lists.w3.org/Archives/Public/www-dom/2010JulSep/att-0182/keyCode-spec.html\n   * If an Input Method Editor is processing key input and the event is keydown, return 229.\n   */\n\n  define(229, 109\n  /* KEY_IN_COMPOSITION */\n  );\n\n  if (browser.isIE) {\n    define(91, 57\n    /* Meta */\n    );\n  } else if (browser.isFirefox) {\n    define(59, 80\n    /* US_SEMICOLON */\n    );\n    define(107, 81\n    /* US_EQUAL */\n    );\n    define(109, 83\n    /* US_MINUS */\n    );\n\n    if (platform.isMacintosh) {\n      define(224, 57\n      /* Meta */\n      );\n    }\n  } else if (browser.isWebKit) {\n    define(91, 57\n    /* Meta */\n    );\n\n    if (platform.isMacintosh) {\n      // the two meta keys in the Mac have different key codes (91 and 93)\n      define(93, 57\n      /* Meta */\n      );\n    } else {\n      define(92, 57\n      /* Meta */\n      );\n    }\n  }\n})();\n\nfunction extractKeyCode(e) {\n  if (e.charCode) {\n    // \"keypress\" events mostly\n    var char = String.fromCharCode(e.charCode).toUpperCase();\n    return KeyCodeUtils.fromString(char);\n  }\n\n  return KEY_CODE_MAP[e.keyCode] || 0\n  /* Unknown */\n  ;\n}\n\nvar ctrlKeyMod = platform.isMacintosh ? 256\n/* WinCtrl */\n: 2048\n/* CtrlCmd */\n;\nvar altKeyMod = 512\n/* Alt */\n;\nvar shiftKeyMod = 1024\n/* Shift */\n;\nvar metaKeyMod = platform.isMacintosh ? 2048\n/* CtrlCmd */\n: 256\n/* WinCtrl */\n;\n\nvar StandardKeyboardEvent =\n/** @class */\nfunction () {\n  function StandardKeyboardEvent(source) {\n    this._standardKeyboardEventBrand = true;\n    var e = source;\n    this.browserEvent = e;\n    this.target = e.target;\n    this.ctrlKey = e.ctrlKey;\n    this.shiftKey = e.shiftKey;\n    this.altKey = e.altKey;\n    this.metaKey = e.metaKey;\n    this.keyCode = extractKeyCode(e);\n    this.code = e.code; // console.info(e.type + \": keyCode: \" + e.keyCode + \", which: \" + e.which + \", charCode: \" + e.charCode + \", detail: \" + e.detail + \" ====> \" + this.keyCode + ' -- ' + KeyCode[this.keyCode]);\n\n    this.ctrlKey = this.ctrlKey || this.keyCode === 5\n    /* Ctrl */\n    ;\n    this.altKey = this.altKey || this.keyCode === 6\n    /* Alt */\n    ;\n    this.shiftKey = this.shiftKey || this.keyCode === 4\n    /* Shift */\n    ;\n    this.metaKey = this.metaKey || this.keyCode === 57\n    /* Meta */\n    ;\n    this._asKeybinding = this._computeKeybinding();\n    this._asRuntimeKeybinding = this._computeRuntimeKeybinding(); // console.log(`code: ${e.code}, keyCode: ${e.keyCode}, key: ${e.key}`);\n  }\n\n  StandardKeyboardEvent.prototype.preventDefault = function () {\n    if (this.browserEvent && this.browserEvent.preventDefault) {\n      this.browserEvent.preventDefault();\n    }\n  };\n\n  StandardKeyboardEvent.prototype.stopPropagation = function () {\n    if (this.browserEvent && this.browserEvent.stopPropagation) {\n      this.browserEvent.stopPropagation();\n    }\n  };\n\n  StandardKeyboardEvent.prototype.toKeybinding = function () {\n    return this._asRuntimeKeybinding;\n  };\n\n  StandardKeyboardEvent.prototype.equals = function (other) {\n    return this._asKeybinding === other;\n  };\n\n  StandardKeyboardEvent.prototype._computeKeybinding = function () {\n    var key = 0\n    /* Unknown */\n    ;\n\n    if (this.keyCode !== 5\n    /* Ctrl */\n    && this.keyCode !== 4\n    /* Shift */\n    && this.keyCode !== 6\n    /* Alt */\n    && this.keyCode !== 57\n    /* Meta */\n    ) {\n        key = this.keyCode;\n      }\n\n    var result = 0;\n\n    if (this.ctrlKey) {\n      result |= ctrlKeyMod;\n    }\n\n    if (this.altKey) {\n      result |= altKeyMod;\n    }\n\n    if (this.shiftKey) {\n      result |= shiftKeyMod;\n    }\n\n    if (this.metaKey) {\n      result |= metaKeyMod;\n    }\n\n    result |= key;\n    return result;\n  };\n\n  StandardKeyboardEvent.prototype._computeRuntimeKeybinding = function () {\n    var key = 0\n    /* Unknown */\n    ;\n\n    if (this.keyCode !== 5\n    /* Ctrl */\n    && this.keyCode !== 4\n    /* Shift */\n    && this.keyCode !== 6\n    /* Alt */\n    && this.keyCode !== 57\n    /* Meta */\n    ) {\n        key = this.keyCode;\n      }\n\n    return new SimpleKeybinding(this.ctrlKey, this.shiftKey, this.altKey, this.metaKey, key);\n  };\n\n  return StandardKeyboardEvent;\n}();\n\nexport { StandardKeyboardEvent };","map":null,"metadata":{},"sourceType":"module"}