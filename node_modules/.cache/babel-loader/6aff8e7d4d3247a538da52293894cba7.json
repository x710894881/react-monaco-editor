{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nls from '../../../../nls.js';\nimport * as types from '../../../common/types.js';\nimport { IconLabel } from '../../../browser/ui/iconLabel/iconLabel.js';\nimport { ActionBar } from '../../../browser/ui/actionbar/actionbar.js';\nimport { HighlightedLabel } from '../../../browser/ui/highlightedlabel/highlightedLabel.js';\nimport * as DOM from '../../../browser/dom.js';\nimport { KeybindingLabel } from '../../../browser/ui/keybindingLabel/keybindingLabel.js';\nimport { OS } from '../../../common/platform.js';\nimport { coalesce } from '../../../common/arrays.js';\nvar IDS = 0;\n\nvar QuickOpenEntry =\n/** @class */\nfunction () {\n  function QuickOpenEntry(highlights) {\n    if (highlights === void 0) {\n      highlights = [];\n    }\n\n    this.id = (IDS++).toString();\n    this.labelHighlights = highlights;\n    this.descriptionHighlights = [];\n  }\n  /**\n   * A unique identifier for the entry\n   */\n\n\n  QuickOpenEntry.prototype.getId = function () {\n    return this.id;\n  };\n  /**\n   * The label of the entry to identify it from others in the list\n   */\n\n\n  QuickOpenEntry.prototype.getLabel = function () {\n    return undefined;\n  };\n  /**\n   * The options for the label to use for this entry\n   */\n\n\n  QuickOpenEntry.prototype.getLabelOptions = function () {\n    return undefined;\n  };\n  /**\n   * The label of the entry to use when a screen reader wants to read about the entry\n   */\n\n\n  QuickOpenEntry.prototype.getAriaLabel = function () {\n    return coalesce([this.getLabel(), this.getDescription(), this.getDetail()]).join(', ');\n  };\n  /**\n   * Detail information about the entry that is optional and can be shown below the label\n   */\n\n\n  QuickOpenEntry.prototype.getDetail = function () {\n    return undefined;\n  };\n  /**\n   * The icon of the entry to identify it from others in the list\n   */\n\n\n  QuickOpenEntry.prototype.getIcon = function () {\n    return undefined;\n  };\n  /**\n   * A secondary description that is optional and can be shown right to the label\n   */\n\n\n  QuickOpenEntry.prototype.getDescription = function () {\n    return undefined;\n  };\n  /**\n   * A tooltip to show when hovering over the entry.\n   */\n\n\n  QuickOpenEntry.prototype.getTooltip = function () {\n    return undefined;\n  };\n  /**\n   * A tooltip to show when hovering over the description portion of the entry.\n   */\n\n\n  QuickOpenEntry.prototype.getDescriptionTooltip = function () {\n    return undefined;\n  };\n  /**\n   * An optional keybinding to show for an entry.\n   */\n\n\n  QuickOpenEntry.prototype.getKeybinding = function () {\n    return undefined;\n  };\n  /**\n   * Allows to reuse the same model while filtering. Hidden entries will not show up in the viewer.\n   */\n\n\n  QuickOpenEntry.prototype.isHidden = function () {\n    return !!this.hidden;\n  };\n  /**\n   * Allows to set highlight ranges that should show up for the entry label and optionally description if set.\n   */\n\n\n  QuickOpenEntry.prototype.setHighlights = function (labelHighlights, descriptionHighlights, detailHighlights) {\n    this.labelHighlights = labelHighlights;\n    this.descriptionHighlights = descriptionHighlights;\n    this.detailHighlights = detailHighlights;\n  };\n  /**\n   * Allows to return highlight ranges that should show up for the entry label and description.\n   */\n\n\n  QuickOpenEntry.prototype.getHighlights = function () {\n    return [this.labelHighlights, this.descriptionHighlights, this.detailHighlights];\n  };\n  /**\n   * Called when the entry is selected for opening. Returns a boolean value indicating if an action was performed or not.\n   * The mode parameter gives an indication if the element is previewed (using arrow keys) or opened.\n   *\n   * The context parameter provides additional context information how the run was triggered.\n   */\n\n\n  QuickOpenEntry.prototype.run = function (mode, context) {\n    return false;\n  };\n\n  return QuickOpenEntry;\n}();\n\nexport { QuickOpenEntry };\n\nvar QuickOpenEntryGroup =\n/** @class */\nfunction (_super) {\n  __extends(QuickOpenEntryGroup, _super);\n\n  function QuickOpenEntryGroup(entry, groupLabel, withBorder) {\n    var _this = _super.call(this) || this;\n\n    _this.entry = entry;\n    _this.groupLabel = groupLabel;\n    _this.withBorder = withBorder;\n    return _this;\n  }\n  /**\n   * The label of the group or null if none.\n   */\n\n\n  QuickOpenEntryGroup.prototype.getGroupLabel = function () {\n    return this.groupLabel;\n  };\n\n  QuickOpenEntryGroup.prototype.setGroupLabel = function (groupLabel) {\n    this.groupLabel = groupLabel;\n  };\n  /**\n   * Whether to show a border on top of the group entry or not.\n   */\n\n\n  QuickOpenEntryGroup.prototype.showBorder = function () {\n    return !!this.withBorder;\n  };\n\n  QuickOpenEntryGroup.prototype.setShowBorder = function (showBorder) {\n    this.withBorder = showBorder;\n  };\n\n  QuickOpenEntryGroup.prototype.getLabel = function () {\n    return this.entry ? this.entry.getLabel() : _super.prototype.getLabel.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.getLabelOptions = function () {\n    return this.entry ? this.entry.getLabelOptions() : _super.prototype.getLabelOptions.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.getAriaLabel = function () {\n    return this.entry ? this.entry.getAriaLabel() : _super.prototype.getAriaLabel.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.getDetail = function () {\n    return this.entry ? this.entry.getDetail() : _super.prototype.getDetail.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.getIcon = function () {\n    return this.entry ? this.entry.getIcon() : _super.prototype.getIcon.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.getDescription = function () {\n    return this.entry ? this.entry.getDescription() : _super.prototype.getDescription.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.getHighlights = function () {\n    return this.entry ? this.entry.getHighlights() : _super.prototype.getHighlights.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.isHidden = function () {\n    return this.entry ? this.entry.isHidden() : _super.prototype.isHidden.call(this);\n  };\n\n  QuickOpenEntryGroup.prototype.setHighlights = function (labelHighlights, descriptionHighlights, detailHighlights) {\n    this.entry ? this.entry.setHighlights(labelHighlights, descriptionHighlights, detailHighlights) : _super.prototype.setHighlights.call(this, labelHighlights, descriptionHighlights, detailHighlights);\n  };\n\n  QuickOpenEntryGroup.prototype.run = function (mode, context) {\n    return this.entry ? this.entry.run(mode, context) : _super.prototype.run.call(this, mode, context);\n  };\n\n  return QuickOpenEntryGroup;\n}(QuickOpenEntry);\n\nexport { QuickOpenEntryGroup };\n\nvar NoActionProvider =\n/** @class */\nfunction () {\n  function NoActionProvider() {}\n\n  NoActionProvider.prototype.hasActions = function (tree, element) {\n    return false;\n  };\n\n  NoActionProvider.prototype.getActions = function (tree, element) {\n    return null;\n  };\n\n  return NoActionProvider;\n}();\n\nvar templateEntry = 'quickOpenEntry';\nvar templateEntryGroup = 'quickOpenEntryGroup';\n\nvar Renderer =\n/** @class */\nfunction () {\n  function Renderer(actionProvider, actionRunner) {\n    if (actionProvider === void 0) {\n      actionProvider = new NoActionProvider();\n    }\n\n    this.actionProvider = actionProvider;\n    this.actionRunner = actionRunner;\n  }\n\n  Renderer.prototype.getHeight = function (entry) {\n    if (entry.getDetail()) {\n      return 44;\n    }\n\n    return 22;\n  };\n\n  Renderer.prototype.getTemplateId = function (entry) {\n    if (entry instanceof QuickOpenEntryGroup) {\n      return templateEntryGroup;\n    }\n\n    return templateEntry;\n  };\n\n  Renderer.prototype.renderTemplate = function (templateId, container, styles) {\n    var entryContainer = document.createElement('div');\n    DOM.addClass(entryContainer, 'sub-content');\n    container.appendChild(entryContainer); // Entry\n\n    var row1 = DOM.$('.quick-open-row');\n    var row2 = DOM.$('.quick-open-row');\n    var entry = DOM.$('.quick-open-entry', undefined, row1, row2);\n    entryContainer.appendChild(entry); // Icon\n\n    var icon = document.createElement('span');\n    row1.appendChild(icon); // Label\n\n    var label = new IconLabel(row1, {\n      supportHighlights: true,\n      supportDescriptionHighlights: true,\n      supportOcticons: true\n    }); // Keybinding\n\n    var keybindingContainer = document.createElement('span');\n    row1.appendChild(keybindingContainer);\n    DOM.addClass(keybindingContainer, 'quick-open-entry-keybinding');\n    var keybinding = new KeybindingLabel(keybindingContainer, OS); // Detail\n\n    var detailContainer = document.createElement('div');\n    row2.appendChild(detailContainer);\n    DOM.addClass(detailContainer, 'quick-open-entry-meta');\n    var detail = new HighlightedLabel(detailContainer, true); // Entry Group\n\n    var group;\n\n    if (templateId === templateEntryGroup) {\n      group = document.createElement('div');\n      DOM.addClass(group, 'results-group');\n      container.appendChild(group);\n    } // Actions\n\n\n    DOM.addClass(container, 'actions');\n    var actionBarContainer = document.createElement('div');\n    DOM.addClass(actionBarContainer, 'primary-action-bar');\n    container.appendChild(actionBarContainer);\n    var actionBar = new ActionBar(actionBarContainer, {\n      actionRunner: this.actionRunner\n    });\n    return {\n      container: container,\n      entry: entry,\n      icon: icon,\n      label: label,\n      detail: detail,\n      keybinding: keybinding,\n      group: group,\n      actionBar: actionBar\n    };\n  };\n\n  Renderer.prototype.renderElement = function (entry, templateId, data, styles) {\n    // Action Bar\n    if (this.actionProvider.hasActions(null, entry)) {\n      DOM.addClass(data.container, 'has-actions');\n    } else {\n      DOM.removeClass(data.container, 'has-actions');\n    }\n\n    data.actionBar.context = entry; // make sure the context is the current element\n\n    var actions = this.actionProvider.getActions(null, entry);\n\n    if (data.actionBar.isEmpty() && actions && actions.length > 0) {\n      data.actionBar.push(actions, {\n        icon: true,\n        label: false\n      });\n    } else if (!data.actionBar.isEmpty() && (!actions || actions.length === 0)) {\n      data.actionBar.clear();\n    } // Entry group class\n\n\n    if (entry instanceof QuickOpenEntryGroup && entry.getGroupLabel()) {\n      DOM.addClass(data.container, 'has-group-label');\n    } else {\n      DOM.removeClass(data.container, 'has-group-label');\n    } // Entry group\n\n\n    if (entry instanceof QuickOpenEntryGroup) {\n      var group = entry;\n      var groupData = data; // Border\n\n      if (group.showBorder()) {\n        DOM.addClass(groupData.container, 'results-group-separator');\n\n        if (styles.pickerGroupBorder) {\n          groupData.container.style.borderTopColor = styles.pickerGroupBorder.toString();\n        }\n      } else {\n        DOM.removeClass(groupData.container, 'results-group-separator');\n        groupData.container.style.borderTopColor = null;\n      } // Group Label\n\n\n      var groupLabel = group.getGroupLabel() || '';\n\n      if (groupData.group) {\n        groupData.group.textContent = groupLabel;\n\n        if (styles.pickerGroupForeground) {\n          groupData.group.style.color = styles.pickerGroupForeground.toString();\n        }\n      }\n    } // Normal Entry\n\n\n    if (entry instanceof QuickOpenEntry) {\n      var _a = entry.getHighlights(),\n          labelHighlights = _a[0],\n          descriptionHighlights = _a[1],\n          detailHighlights = _a[2]; // Icon\n\n\n      var iconClass = entry.getIcon() ? 'quick-open-entry-icon ' + entry.getIcon() : '';\n      data.icon.className = iconClass; // Label\n\n      var options = entry.getLabelOptions() || Object.create(null);\n      options.matches = labelHighlights || [];\n      options.title = entry.getTooltip();\n      options.descriptionTitle = entry.getDescriptionTooltip() || entry.getDescription(); // tooltip over description because it could overflow\n\n      options.descriptionMatches = descriptionHighlights || [];\n      data.label.setLabel(types.withNullAsUndefined(entry.getLabel()), entry.getDescription(), options); // Meta\n\n      data.detail.set(entry.getDetail(), detailHighlights); // Keybinding\n\n      data.keybinding.set(entry.getKeybinding());\n    }\n  };\n\n  Renderer.prototype.disposeTemplate = function (templateId, templateData) {\n    templateData.actionBar.dispose();\n    templateData.actionBar = null;\n    templateData.container = null;\n    templateData.entry = null;\n    templateData.keybinding = null;\n    templateData.detail = null;\n    templateData.group = null;\n    templateData.icon = null;\n    templateData.label.dispose();\n    templateData.label = null;\n  };\n\n  return Renderer;\n}();\n\nvar QuickOpenModel =\n/** @class */\nfunction () {\n  function QuickOpenModel(entries, actionProvider) {\n    if (entries === void 0) {\n      entries = [];\n    }\n\n    if (actionProvider === void 0) {\n      actionProvider = new NoActionProvider();\n    }\n\n    this._entries = entries;\n    this._dataSource = this;\n    this._renderer = new Renderer(actionProvider);\n    this._filter = this;\n    this._runner = this;\n    this._accessibilityProvider = this;\n  }\n\n  Object.defineProperty(QuickOpenModel.prototype, \"entries\", {\n    get: function () {\n      return this._entries;\n    },\n    set: function (entries) {\n      this._entries = entries;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(QuickOpenModel.prototype, \"dataSource\", {\n    get: function () {\n      return this._dataSource;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(QuickOpenModel.prototype, \"renderer\", {\n    get: function () {\n      return this._renderer;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(QuickOpenModel.prototype, \"filter\", {\n    get: function () {\n      return this._filter;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(QuickOpenModel.prototype, \"runner\", {\n    get: function () {\n      return this._runner;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(QuickOpenModel.prototype, \"accessibilityProvider\", {\n    get: function () {\n      return this._accessibilityProvider;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  QuickOpenModel.prototype.getId = function (entry) {\n    return entry.getId();\n  };\n\n  QuickOpenModel.prototype.getLabel = function (entry) {\n    return types.withUndefinedAsNull(entry.getLabel());\n  };\n\n  QuickOpenModel.prototype.getAriaLabel = function (entry) {\n    var ariaLabel = entry.getAriaLabel();\n\n    if (ariaLabel) {\n      return nls.localize('quickOpenAriaLabelEntry', \"{0}, picker\", entry.getAriaLabel());\n    }\n\n    return nls.localize('quickOpenAriaLabel', \"picker\");\n  };\n\n  QuickOpenModel.prototype.isVisible = function (entry) {\n    return !entry.isHidden();\n  };\n\n  QuickOpenModel.prototype.run = function (entry, mode, context) {\n    return entry.run(mode, context);\n  };\n\n  return QuickOpenModel;\n}();\n\nexport { QuickOpenModel };","map":null,"metadata":{},"sourceType":"module"}