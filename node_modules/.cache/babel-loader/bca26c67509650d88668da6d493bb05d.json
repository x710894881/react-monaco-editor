{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './media/gotoErrorWidget.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { dispose, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { MarkerSeverity } from '../../../platform/markers/common/markers.js';\nimport { Range } from '../../common/core/range.js';\nimport { registerColor, oneOf, textLinkForeground, editorErrorForeground, editorErrorBorder, editorWarningForeground, editorWarningBorder, editorInfoForeground, editorInfoBorder } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport { Color } from '../../../base/common/color.js';\nimport { ScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { getBaseLabel, getPathLabel } from '../../../base/common/labels.js';\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { PeekViewWidget } from '../referenceSearch/peekViewWidget.js';\nimport { basename } from '../../../base/common/resources.js';\nimport { peekViewTitleForeground, peekViewTitleInfoForeground } from '../referenceSearch/referencesWidget.js';\nimport { SeverityIcon } from '../../../platform/severityIcon/common/severityIcon.js';\n\nvar MessageWidget =\n/** @class */\nfunction () {\n  function MessageWidget(parent, editor, onRelatedInformation) {\n    var _this = this;\n\n    this._lines = 0;\n    this._longestLineLength = 0;\n    this._relatedDiagnostics = new WeakMap();\n    this._disposables = [];\n    this._editor = editor;\n    var domNode = document.createElement('div');\n    domNode.className = 'descriptioncontainer';\n    domNode.setAttribute('aria-live', 'assertive');\n    domNode.setAttribute('role', 'alert');\n    this._messageBlock = document.createElement('div');\n    dom.addClass(this._messageBlock, 'message');\n    domNode.appendChild(this._messageBlock);\n    this._relatedBlock = document.createElement('div');\n    domNode.appendChild(this._relatedBlock);\n\n    this._disposables.push(dom.addStandardDisposableListener(this._relatedBlock, 'click', function (event) {\n      event.preventDefault();\n\n      var related = _this._relatedDiagnostics.get(event.target);\n\n      if (related) {\n        onRelatedInformation(related);\n      }\n    }));\n\n    this._scrollable = new ScrollableElement(domNode, {\n      horizontal: 1\n      /* Auto */\n      ,\n      vertical: 1\n      /* Auto */\n      ,\n      useShadows: false,\n      horizontalScrollbarSize: 3,\n      verticalScrollbarSize: 3\n    });\n    parent.appendChild(this._scrollable.getDomNode());\n\n    this._disposables.push(this._scrollable.onScroll(function (e) {\n      domNode.style.left = \"-\" + e.scrollLeft + \"px\";\n      domNode.style.top = \"-\" + e.scrollTop + \"px\";\n    }));\n\n    this._disposables.push(this._scrollable);\n  }\n\n  MessageWidget.prototype.dispose = function () {\n    dispose(this._disposables);\n  };\n\n  MessageWidget.prototype.update = function (_a) {\n    var source = _a.source,\n        message = _a.message,\n        relatedInformation = _a.relatedInformation,\n        code = _a.code;\n    var lines = message.split(/\\r\\n|\\r|\\n/g);\n    this._lines = lines.length;\n    this._longestLineLength = 0;\n\n    for (var _i = 0, lines_1 = lines; _i < lines_1.length; _i++) {\n      var line = lines_1[_i];\n      this._longestLineLength = Math.max(line.length, this._longestLineLength);\n    }\n\n    dom.clearNode(this._messageBlock);\n\n    this._editor.applyFontInfo(this._messageBlock);\n\n    var lastLineElement = this._messageBlock;\n\n    for (var _b = 0, lines_2 = lines; _b < lines_2.length; _b++) {\n      var line = lines_2[_b];\n      lastLineElement = document.createElement('div');\n      lastLineElement.innerText = line;\n\n      if (line === '') {\n        lastLineElement.style.height = this._messageBlock.style.lineHeight;\n      }\n\n      this._messageBlock.appendChild(lastLineElement);\n    }\n\n    if (source || code) {\n      var detailsElement = document.createElement('span');\n      dom.addClass(detailsElement, 'details');\n      lastLineElement.appendChild(detailsElement);\n\n      if (source) {\n        var sourceElement = document.createElement('span');\n        sourceElement.innerText = source;\n        dom.addClass(sourceElement, 'source');\n        detailsElement.appendChild(sourceElement);\n      }\n\n      if (code) {\n        var codeElement = document.createElement('span');\n        codeElement.innerText = \"(\" + code + \")\";\n        dom.addClass(codeElement, 'code');\n        detailsElement.appendChild(codeElement);\n      }\n    }\n\n    dom.clearNode(this._relatedBlock);\n\n    this._editor.applyFontInfo(this._relatedBlock);\n\n    if (isNonEmptyArray(relatedInformation)) {\n      var relatedInformationNode = this._relatedBlock.appendChild(document.createElement('div'));\n\n      relatedInformationNode.style.paddingTop = Math.floor(this._editor.getConfiguration().lineHeight * 0.66) + \"px\";\n      this._lines += 1;\n\n      for (var _c = 0, relatedInformation_1 = relatedInformation; _c < relatedInformation_1.length; _c++) {\n        var related = relatedInformation_1[_c];\n        var container = document.createElement('div');\n        var relatedResource = document.createElement('a');\n        dom.addClass(relatedResource, 'filename');\n        relatedResource.innerHTML = getBaseLabel(related.resource) + \"(\" + related.startLineNumber + \", \" + related.startColumn + \"): \";\n        relatedResource.title = getPathLabel(related.resource, undefined);\n\n        this._relatedDiagnostics.set(relatedResource, related);\n\n        var relatedMessage = document.createElement('span');\n        relatedMessage.innerText = related.message;\n        container.appendChild(relatedResource);\n        container.appendChild(relatedMessage);\n        this._lines += 1;\n        relatedInformationNode.appendChild(container);\n      }\n    }\n\n    var fontInfo = this._editor.getConfiguration().fontInfo;\n\n    var scrollWidth = Math.ceil(fontInfo.typicalFullwidthCharacterWidth * this._longestLineLength * 0.75);\n    var scrollHeight = fontInfo.lineHeight * this._lines;\n\n    this._scrollable.setScrollDimensions({\n      scrollWidth: scrollWidth,\n      scrollHeight: scrollHeight\n    });\n  };\n\n  MessageWidget.prototype.layout = function (height, width) {\n    this._scrollable.getDomNode().style.height = height + \"px\";\n    this._scrollable.getDomNode().style.width = width + \"px\";\n\n    this._scrollable.setScrollDimensions({\n      width: width,\n      height: height\n    });\n  };\n\n  MessageWidget.prototype.getHeightInLines = function () {\n    return Math.min(17, this._lines);\n  };\n\n  return MessageWidget;\n}();\n\nvar MarkerNavigationWidget =\n/** @class */\nfunction (_super) {\n  __extends(MarkerNavigationWidget, _super);\n\n  function MarkerNavigationWidget(editor, actions, _themeService) {\n    var _this = _super.call(this, editor, {\n      showArrow: true,\n      showFrame: true,\n      isAccessible: true\n    }) || this;\n\n    _this.actions = actions;\n    _this._themeService = _themeService;\n    _this._callOnDispose = new DisposableStore();\n    _this._onDidSelectRelatedInformation = new Emitter();\n    _this.onDidSelectRelatedInformation = _this._onDidSelectRelatedInformation.event;\n    _this._severity = MarkerSeverity.Warning;\n    _this._backgroundColor = Color.white;\n\n    _this._applyTheme(_themeService.getTheme());\n\n    _this._callOnDispose.add(_themeService.onThemeChange(_this._applyTheme.bind(_this)));\n\n    _this.create();\n\n    return _this;\n  }\n\n  MarkerNavigationWidget.prototype._applyTheme = function (theme) {\n    this._backgroundColor = theme.getColor(editorMarkerNavigationBackground);\n    var colorId = editorMarkerNavigationError;\n\n    if (this._severity === MarkerSeverity.Warning) {\n      colorId = editorMarkerNavigationWarning;\n    } else if (this._severity === MarkerSeverity.Info) {\n      colorId = editorMarkerNavigationInfo;\n    }\n\n    var frameColor = theme.getColor(colorId);\n    this.style({\n      arrowColor: frameColor,\n      frameColor: frameColor,\n      headerBackgroundColor: this._backgroundColor,\n      primaryHeadingColor: theme.getColor(peekViewTitleForeground),\n      secondaryHeadingColor: theme.getColor(peekViewTitleInfoForeground)\n    }); // style() will trigger _applyStyles\n  };\n\n  MarkerNavigationWidget.prototype._applyStyles = function () {\n    if (this._parentContainer) {\n      this._parentContainer.style.backgroundColor = this._backgroundColor ? this._backgroundColor.toString() : '';\n    }\n\n    _super.prototype._applyStyles.call(this);\n  };\n\n  MarkerNavigationWidget.prototype.dispose = function () {\n    this._callOnDispose.dispose();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  MarkerNavigationWidget.prototype._fillHead = function (container) {\n    _super.prototype._fillHead.call(this, container);\n\n    this._actionbarWidget.push(this.actions, {\n      label: false,\n      icon: true\n    });\n  };\n\n  MarkerNavigationWidget.prototype._fillTitleIcon = function (container) {\n    this._icon = dom.append(container, dom.$(''));\n  };\n\n  MarkerNavigationWidget.prototype._getActionBarOptions = function () {\n    return {\n      orientation: 1\n      /* HORIZONTAL_REVERSE */\n\n    };\n  };\n\n  MarkerNavigationWidget.prototype._fillBody = function (container) {\n    var _this = this;\n\n    this._parentContainer = container;\n    dom.addClass(container, 'marker-widget');\n    this._parentContainer.tabIndex = 0;\n\n    this._parentContainer.setAttribute('role', 'tooltip');\n\n    this._container = document.createElement('div');\n    container.appendChild(this._container);\n    this._message = new MessageWidget(this._container, this.editor, function (related) {\n      return _this._onDidSelectRelatedInformation.fire(related);\n    });\n\n    this._disposables.add(this._message);\n  };\n\n  MarkerNavigationWidget.prototype.show = function (where, heightInLines) {\n    throw new Error('call showAtMarker');\n  };\n\n  MarkerNavigationWidget.prototype.showAtMarker = function (marker, markerIdx, markerCount) {\n    // update:\n    // * title\n    // * message\n    this._container.classList.remove('stale');\n\n    this._message.update(marker); // update frame color (only applied on 'show')\n\n\n    this._severity = marker.severity;\n\n    this._applyTheme(this._themeService.getTheme()); // show\n\n\n    var range = Range.lift(marker);\n    var editorPosition = this.editor.getPosition();\n    var position = editorPosition && range.containsPosition(editorPosition) ? editorPosition : range.getStartPosition();\n\n    _super.prototype.show.call(this, position, this.computeRequiredHeight());\n\n    var model = this.editor.getModel();\n\n    if (model) {\n      var detail = markerCount > 1 ? nls.localize('problems', \"{0} of {1} problems\", markerIdx, markerCount) : nls.localize('change', \"{0} of {1} problem\", markerIdx, markerCount);\n      this.setTitle(basename(model.uri), detail);\n    }\n\n    this._icon.className = SeverityIcon.className(MarkerSeverity.toSeverity(this._severity));\n    this.editor.revealPositionInCenter(position, 0\n    /* Smooth */\n    );\n  };\n\n  MarkerNavigationWidget.prototype.updateMarker = function (marker) {\n    this._container.classList.remove('stale');\n\n    this._message.update(marker);\n  };\n\n  MarkerNavigationWidget.prototype.showStale = function () {\n    this._container.classList.add('stale');\n\n    this._relayout();\n  };\n\n  MarkerNavigationWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {\n    _super.prototype._doLayoutBody.call(this, heightInPixel, widthInPixel);\n\n    this._heightInPixel = heightInPixel;\n\n    this._message.layout(heightInPixel, widthInPixel);\n\n    this._container.style.height = heightInPixel + \"px\";\n  };\n\n  MarkerNavigationWidget.prototype._onWidth = function (widthInPixel) {\n    this._message.layout(this._heightInPixel, widthInPixel);\n  };\n\n  MarkerNavigationWidget.prototype._relayout = function () {\n    _super.prototype._relayout.call(this, this.computeRequiredHeight());\n  };\n\n  MarkerNavigationWidget.prototype.computeRequiredHeight = function () {\n    return 3 + this._message.getHeightInLines();\n  };\n\n  return MarkerNavigationWidget;\n}(PeekViewWidget);\n\nexport { MarkerNavigationWidget }; // theming\n\nvar errorDefault = oneOf(editorErrorForeground, editorErrorBorder);\nvar warningDefault = oneOf(editorWarningForeground, editorWarningBorder);\nvar infoDefault = oneOf(editorInfoForeground, editorInfoBorder);\nexport var editorMarkerNavigationError = registerColor('editorMarkerNavigationError.background', {\n  dark: errorDefault,\n  light: errorDefault,\n  hc: errorDefault\n}, nls.localize('editorMarkerNavigationError', 'Editor marker navigation widget error color.'));\nexport var editorMarkerNavigationWarning = registerColor('editorMarkerNavigationWarning.background', {\n  dark: warningDefault,\n  light: warningDefault,\n  hc: warningDefault\n}, nls.localize('editorMarkerNavigationWarning', 'Editor marker navigation widget warning color.'));\nexport var editorMarkerNavigationInfo = registerColor('editorMarkerNavigationInfo.background', {\n  dark: infoDefault,\n  light: infoDefault,\n  hc: infoDefault\n}, nls.localize('editorMarkerNavigationInfo', 'Editor marker navigation widget info color.'));\nexport var editorMarkerNavigationBackground = registerColor('editorMarkerNavigation.background', {\n  dark: '#2D2D30',\n  light: Color.white,\n  hc: '#0C141F'\n}, nls.localize('editorMarkerNavigationBackground', 'Editor marker navigation widget background.'));\nregisterThemingParticipant(function (theme, collector) {\n  var link = theme.getColor(textLinkForeground);\n\n  if (link) {\n    collector.addRule(\".monaco-editor .marker-widget a { color: \" + link + \"; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}