{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar CharWidthRequest =\n/** @class */\nfunction () {\n  function CharWidthRequest(chr, type) {\n    this.chr = chr;\n    this.type = type;\n    this.width = 0;\n  }\n\n  CharWidthRequest.prototype.fulfill = function (width) {\n    this.width = width;\n  };\n\n  return CharWidthRequest;\n}();\n\nexport { CharWidthRequest };\n\nvar DomCharWidthReader =\n/** @class */\nfunction () {\n  function DomCharWidthReader(bareFontInfo, requests) {\n    this._bareFontInfo = bareFontInfo;\n    this._requests = requests;\n    this._container = null;\n    this._testElements = null;\n  }\n\n  DomCharWidthReader.prototype.read = function () {\n    // Create a test container with all these test elements\n    this._createDomElements(); // Add the container to the DOM\n\n\n    document.body.appendChild(this._container); // Read character widths\n\n    this._readFromDomElements(); // Remove the container from the DOM\n\n\n    document.body.removeChild(this._container);\n    this._container = null;\n    this._testElements = null;\n  };\n\n  DomCharWidthReader.prototype._createDomElements = function () {\n    var container = document.createElement('div');\n    container.style.position = 'absolute';\n    container.style.top = '-50000px';\n    container.style.width = '50000px';\n    var regularDomNode = document.createElement('div');\n    regularDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    regularDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    regularDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    regularDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    regularDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(regularDomNode);\n    var boldDomNode = document.createElement('div');\n    boldDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    boldDomNode.style.fontWeight = 'bold';\n    boldDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    boldDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    boldDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    container.appendChild(boldDomNode);\n    var italicDomNode = document.createElement('div');\n    italicDomNode.style.fontFamily = this._bareFontInfo.getMassagedFontFamily();\n    italicDomNode.style.fontWeight = this._bareFontInfo.fontWeight;\n    italicDomNode.style.fontSize = this._bareFontInfo.fontSize + 'px';\n    italicDomNode.style.lineHeight = this._bareFontInfo.lineHeight + 'px';\n    italicDomNode.style.letterSpacing = this._bareFontInfo.letterSpacing + 'px';\n    italicDomNode.style.fontStyle = 'italic';\n    container.appendChild(italicDomNode);\n    var testElements = [];\n\n    for (var i = 0, len = this._requests.length; i < len; i++) {\n      var request = this._requests[i];\n      var parent_1 = void 0;\n\n      if (request.type === 0\n      /* Regular */\n      ) {\n          parent_1 = regularDomNode;\n        }\n\n      if (request.type === 2\n      /* Bold */\n      ) {\n          parent_1 = boldDomNode;\n        }\n\n      if (request.type === 1\n      /* Italic */\n      ) {\n          parent_1 = italicDomNode;\n        }\n\n      parent_1.appendChild(document.createElement('br'));\n      var testElement = document.createElement('span');\n\n      DomCharWidthReader._render(testElement, request);\n\n      parent_1.appendChild(testElement);\n      testElements[i] = testElement;\n    }\n\n    this._container = container;\n    this._testElements = testElements;\n  };\n\n  DomCharWidthReader._render = function (testElement, request) {\n    if (request.chr === ' ') {\n      var htmlString = '&nbsp;'; // Repeat character 256 (2^8) times\n\n      for (var i = 0; i < 8; i++) {\n        htmlString += htmlString;\n      }\n\n      testElement.innerHTML = htmlString;\n    } else {\n      var testString = request.chr; // Repeat character 256 (2^8) times\n\n      for (var i = 0; i < 8; i++) {\n        testString += testString;\n      }\n\n      testElement.textContent = testString;\n    }\n  };\n\n  DomCharWidthReader.prototype._readFromDomElements = function () {\n    for (var i = 0, len = this._requests.length; i < len; i++) {\n      var request = this._requests[i];\n      var testElement = this._testElements[i];\n      request.fulfill(testElement.offsetWidth / 256);\n    }\n  };\n\n  return DomCharWidthReader;\n}();\n\nexport function readCharWidths(bareFontInfo, requests) {\n  var reader = new DomCharWidthReader(bareFontInfo, requests);\n  reader.read();\n}","map":null,"metadata":{},"sourceType":"module"}