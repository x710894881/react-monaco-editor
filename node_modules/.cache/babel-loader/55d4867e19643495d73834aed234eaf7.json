{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { registerEditorCommand } from '../../browser/editorExtensions.js';\nimport { WordPartOperations } from '../../common/controller/cursorWordOperations.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { DeleteWordCommand, MoveWordCommand } from '../wordOperations/wordOperations.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\n\nvar DeleteWordPartLeft =\n/** @class */\nfunction (_super) {\n  __extends(DeleteWordPartLeft, _super);\n\n  function DeleteWordPartLeft() {\n    return _super.call(this, {\n      whitespaceHeuristics: true,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'deleteWordPartLeft',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 512\n          /* Alt */\n          | 1\n          /* Backspace */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  DeleteWordPartLeft.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n    var r = WordPartOperations.deleteWordPartLeft(wordSeparators, model, selection, whitespaceHeuristics);\n\n    if (r) {\n      return r;\n    }\n\n    return new Range(1, 1, 1, 1);\n  };\n\n  return DeleteWordPartLeft;\n}(DeleteWordCommand);\n\nexport { DeleteWordPartLeft };\n\nvar DeleteWordPartRight =\n/** @class */\nfunction (_super) {\n  __extends(DeleteWordPartRight, _super);\n\n  function DeleteWordPartRight() {\n    return _super.call(this, {\n      whitespaceHeuristics: true,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'deleteWordPartRight',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 512\n          /* Alt */\n          | 20\n          /* Delete */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  DeleteWordPartRight.prototype._delete = function (wordSeparators, model, selection, whitespaceHeuristics, wordNavigationType) {\n    var r = WordPartOperations.deleteWordPartRight(wordSeparators, model, selection, whitespaceHeuristics);\n\n    if (r) {\n      return r;\n    }\n\n    var lineCount = model.getLineCount();\n    var maxColumn = model.getLineMaxColumn(lineCount);\n    return new Range(lineCount, maxColumn, lineCount, maxColumn);\n  };\n\n  return DeleteWordPartRight;\n}(DeleteWordCommand);\n\nexport { DeleteWordPartRight };\n\nvar WordPartLeftCommand =\n/** @class */\nfunction (_super) {\n  __extends(WordPartLeftCommand, _super);\n\n  function WordPartLeftCommand() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  WordPartLeftCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {\n    return WordPartOperations.moveWordPartLeft(wordSeparators, model, position);\n  };\n\n  return WordPartLeftCommand;\n}(MoveWordCommand);\n\nexport { WordPartLeftCommand };\n\nvar CursorWordPartLeft =\n/** @class */\nfunction (_super) {\n  __extends(CursorWordPartLeft, _super);\n\n  function CursorWordPartLeft() {\n    return _super.call(this, {\n      inSelectionMode: false,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'cursorWordPartLeft',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 512\n          /* Alt */\n          | 15\n          /* LeftArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return CursorWordPartLeft;\n}(WordPartLeftCommand);\n\nexport { CursorWordPartLeft }; // Register previous id for compatibility purposes\n\nCommandsRegistry.registerCommandAlias('cursorWordPartStartLeft', 'cursorWordPartLeft');\n\nvar CursorWordPartLeftSelect =\n/** @class */\nfunction (_super) {\n  __extends(CursorWordPartLeftSelect, _super);\n\n  function CursorWordPartLeftSelect() {\n    return _super.call(this, {\n      inSelectionMode: true,\n      wordNavigationType: 0\n      /* WordStart */\n      ,\n      id: 'cursorWordPartLeftSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 512\n          /* Alt */\n          | 1024\n          /* Shift */\n          | 15\n          /* LeftArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return CursorWordPartLeftSelect;\n}(WordPartLeftCommand);\n\nexport { CursorWordPartLeftSelect }; // Register previous id for compatibility purposes\n\nCommandsRegistry.registerCommandAlias('cursorWordPartStartLeftSelect', 'cursorWordPartLeftSelect');\n\nvar WordPartRightCommand =\n/** @class */\nfunction (_super) {\n  __extends(WordPartRightCommand, _super);\n\n  function WordPartRightCommand() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  WordPartRightCommand.prototype._move = function (wordSeparators, model, position, wordNavigationType) {\n    return WordPartOperations.moveWordPartRight(wordSeparators, model, position);\n  };\n\n  return WordPartRightCommand;\n}(MoveWordCommand);\n\nexport { WordPartRightCommand };\n\nvar CursorWordPartRight =\n/** @class */\nfunction (_super) {\n  __extends(CursorWordPartRight, _super);\n\n  function CursorWordPartRight() {\n    return _super.call(this, {\n      inSelectionMode: false,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordPartRight',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 512\n          /* Alt */\n          | 17\n          /* RightArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return CursorWordPartRight;\n}(WordPartRightCommand);\n\nexport { CursorWordPartRight };\n\nvar CursorWordPartRightSelect =\n/** @class */\nfunction (_super) {\n  __extends(CursorWordPartRightSelect, _super);\n\n  function CursorWordPartRightSelect() {\n    return _super.call(this, {\n      inSelectionMode: true,\n      wordNavigationType: 2\n      /* WordEnd */\n      ,\n      id: 'cursorWordPartRightSelect',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 0,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 512\n          /* Alt */\n          | 1024\n          /* Shift */\n          | 17\n          /* RightArrow */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return CursorWordPartRightSelect;\n}(WordPartRightCommand);\n\nexport { CursorWordPartRightSelect };\nregisterEditorCommand(new DeleteWordPartLeft());\nregisterEditorCommand(new DeleteWordPartRight());\nregisterEditorCommand(new CursorWordPartLeft());\nregisterEditorCommand(new CursorWordPartLeftSelect());\nregisterEditorCommand(new CursorWordPartRight());\nregisterEditorCommand(new CursorWordPartRightSelect());","map":null,"metadata":{},"sourceType":"module"}