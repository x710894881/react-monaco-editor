{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './inputBox.css';\nimport * as nls from '../../../../nls.js';\nimport * as Bal from '../../browser.js';\nimport * as dom from '../../dom.js';\nimport { renderFormattedText, renderText } from '../../formattedTextRenderer.js';\nimport * as aria from '../aria/aria.js';\nimport { ActionBar } from '../actionbar/actionbar.js';\nimport { Event, Emitter } from '../../../common/event.js';\nimport { Widget } from '../widget.js';\nimport { Color } from '../../../common/color.js';\nimport { mixin } from '../../../common/objects.js';\nimport { HistoryNavigator } from '../../../common/history.js';\nimport { ScrollableElement } from '../scrollbar/scrollableElement.js';\nimport { domEvent } from '../../event.js';\nvar $ = dom.$;\nvar defaultOpts = {\n  inputBackground: Color.fromHex('#3C3C3C'),\n  inputForeground: Color.fromHex('#CCCCCC'),\n  inputValidationInfoBorder: Color.fromHex('#55AAFF'),\n  inputValidationInfoBackground: Color.fromHex('#063B49'),\n  inputValidationWarningBorder: Color.fromHex('#B89500'),\n  inputValidationWarningBackground: Color.fromHex('#352A05'),\n  inputValidationErrorBorder: Color.fromHex('#BE1100'),\n  inputValidationErrorBackground: Color.fromHex('#5A1D1D')\n};\n\nvar InputBox =\n/** @class */\nfunction (_super) {\n  __extends(InputBox, _super);\n\n  function InputBox(container, contextViewProvider, options) {\n    var _this = _super.call(this) || this;\n\n    _this.state = 'idle';\n    _this.maxHeight = Number.POSITIVE_INFINITY;\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._onDidHeightChange = _this._register(new Emitter());\n    _this.onDidHeightChange = _this._onDidHeightChange.event;\n    _this.contextViewProvider = contextViewProvider;\n    _this.options = options || Object.create(null);\n    mixin(_this.options, defaultOpts, false);\n    _this.message = null;\n    _this.placeholder = _this.options.placeholder || '';\n    _this.ariaLabel = _this.options.ariaLabel || '';\n    _this.inputBackground = _this.options.inputBackground;\n    _this.inputForeground = _this.options.inputForeground;\n    _this.inputBorder = _this.options.inputBorder;\n    _this.inputValidationInfoBorder = _this.options.inputValidationInfoBorder;\n    _this.inputValidationInfoBackground = _this.options.inputValidationInfoBackground;\n    _this.inputValidationInfoForeground = _this.options.inputValidationInfoForeground;\n    _this.inputValidationWarningBorder = _this.options.inputValidationWarningBorder;\n    _this.inputValidationWarningBackground = _this.options.inputValidationWarningBackground;\n    _this.inputValidationWarningForeground = _this.options.inputValidationWarningForeground;\n    _this.inputValidationErrorBorder = _this.options.inputValidationErrorBorder;\n    _this.inputValidationErrorBackground = _this.options.inputValidationErrorBackground;\n    _this.inputValidationErrorForeground = _this.options.inputValidationErrorForeground;\n\n    if (_this.options.validationOptions) {\n      _this.validation = _this.options.validationOptions.validation;\n    }\n\n    _this.element = dom.append(container, $('.monaco-inputbox.idle'));\n    var tagName = _this.options.flexibleHeight ? 'textarea' : 'input';\n    var wrapper = dom.append(_this.element, $('.wrapper'));\n    _this.input = dom.append(wrapper, $(tagName + '.input'));\n\n    _this.input.setAttribute('autocorrect', 'off');\n\n    _this.input.setAttribute('autocapitalize', 'off');\n\n    _this.input.setAttribute('spellcheck', 'false');\n\n    _this.onfocus(_this.input, function () {\n      return dom.addClass(_this.element, 'synthetic-focus');\n    });\n\n    _this.onblur(_this.input, function () {\n      return dom.removeClass(_this.element, 'synthetic-focus');\n    });\n\n    if (_this.options.flexibleHeight) {\n      _this.maxHeight = typeof _this.options.flexibleMaxHeight === 'number' ? _this.options.flexibleMaxHeight : Number.POSITIVE_INFINITY;\n      _this.mirror = dom.append(wrapper, $('div.mirror'));\n      _this.mirror.innerHTML = '&nbsp;';\n      _this.scrollableElement = new ScrollableElement(_this.element, {\n        vertical: 1\n        /* Auto */\n\n      });\n\n      if (_this.options.flexibleWidth) {\n        _this.input.setAttribute('wrap', 'off');\n\n        _this.mirror.style.whiteSpace = 'pre';\n        _this.mirror.style.wordWrap = 'initial';\n      }\n\n      dom.append(container, _this.scrollableElement.getDomNode());\n\n      _this._register(_this.scrollableElement); // from ScrollableElement to DOM\n\n\n      _this._register(_this.scrollableElement.onScroll(function (e) {\n        return _this.input.scrollTop = e.scrollTop;\n      }));\n\n      var onSelectionChange = Event.filter(domEvent(document, 'selectionchange'), function () {\n        var selection = document.getSelection();\n        return !!selection && selection.anchorNode === wrapper;\n      }); // from DOM to ScrollableElement\n\n      _this._register(onSelectionChange(_this.updateScrollDimensions, _this));\n\n      _this._register(_this.onDidHeightChange(_this.updateScrollDimensions, _this));\n    } else {\n      _this.input.type = _this.options.type || 'text';\n\n      _this.input.setAttribute('wrap', 'off');\n    }\n\n    if (_this.ariaLabel) {\n      _this.input.setAttribute('aria-label', _this.ariaLabel);\n    }\n\n    if (_this.placeholder) {\n      _this.setPlaceHolder(_this.placeholder);\n    }\n\n    _this.oninput(_this.input, function () {\n      return _this.onValueChange();\n    });\n\n    _this.onblur(_this.input, function () {\n      return _this.onBlur();\n    });\n\n    _this.onfocus(_this.input, function () {\n      return _this.onFocus();\n    }); // Add placeholder shim for IE because IE decides to hide the placeholder on focus (we dont want that!)\n\n\n    if (_this.placeholder && Bal.isIE) {\n      _this.onclick(_this.input, function (e) {\n        dom.EventHelper.stop(e, true);\n\n        _this.input.focus();\n      });\n    }\n\n    setTimeout(function () {\n      if (!_this.input) {\n        return;\n      }\n\n      _this.updateMirror();\n    }, 0); // Support actions\n\n    if (_this.options.actions) {\n      _this.actionbar = _this._register(new ActionBar(_this.element));\n\n      _this.actionbar.push(_this.options.actions, {\n        icon: true,\n        label: false\n      });\n    }\n\n    _this.applyStyles();\n\n    return _this;\n  }\n\n  InputBox.prototype.onBlur = function () {\n    this._hideMessage();\n  };\n\n  InputBox.prototype.onFocus = function () {\n    this._showMessage();\n  };\n\n  InputBox.prototype.setPlaceHolder = function (placeHolder) {\n    if (this.input) {\n      this.input.setAttribute('placeholder', placeHolder);\n      this.input.title = placeHolder;\n    }\n  };\n\n  InputBox.prototype.setAriaLabel = function (label) {\n    this.ariaLabel = label;\n\n    if (this.input) {\n      if (label) {\n        this.input.setAttribute('aria-label', this.ariaLabel);\n      } else {\n        this.input.removeAttribute('aria-label');\n      }\n    }\n  };\n\n  Object.defineProperty(InputBox.prototype, \"inputElement\", {\n    get: function () {\n      return this.input;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InputBox.prototype, \"value\", {\n    get: function () {\n      return this.input.value;\n    },\n    set: function (newValue) {\n      if (this.input.value !== newValue) {\n        this.input.value = newValue;\n        this.onValueChange();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InputBox.prototype, \"height\", {\n    get: function () {\n      return typeof this.cachedHeight === 'number' ? this.cachedHeight : dom.getTotalHeight(this.element);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  InputBox.prototype.focus = function () {\n    this.input.focus();\n  };\n\n  InputBox.prototype.blur = function () {\n    this.input.blur();\n  };\n\n  InputBox.prototype.hasFocus = function () {\n    return document.activeElement === this.input;\n  };\n\n  InputBox.prototype.select = function (range) {\n    if (range === void 0) {\n      range = null;\n    }\n\n    this.input.select();\n\n    if (range) {\n      this.input.setSelectionRange(range.start, range.end);\n    }\n  };\n\n  InputBox.prototype.enable = function () {\n    this.input.removeAttribute('disabled');\n  };\n\n  InputBox.prototype.disable = function () {\n    this.input.disabled = true;\n\n    this._hideMessage();\n  };\n\n  Object.defineProperty(InputBox.prototype, \"width\", {\n    get: function () {\n      return dom.getTotalWidth(this.input);\n    },\n    set: function (width) {\n      if (this.options.flexibleHeight && this.options.flexibleWidth) {\n        // textarea with horizontal scrolling\n        var horizontalPadding = 0;\n\n        if (this.mirror) {\n          var paddingLeft = parseFloat(this.mirror.style.paddingLeft || '') || 0;\n          var paddingRight = parseFloat(this.mirror.style.paddingRight || '') || 0;\n          horizontalPadding = paddingLeft + paddingRight;\n        }\n\n        this.input.style.width = width - horizontalPadding + 'px';\n      } else {\n        this.input.style.width = width + 'px';\n      }\n\n      if (this.mirror) {\n        this.mirror.style.width = width + 'px';\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(InputBox.prototype, \"paddingRight\", {\n    set: function (paddingRight) {\n      if (this.options.flexibleHeight && this.options.flexibleWidth) {\n        this.input.style.width = \"calc(100% - \" + paddingRight + \"px)\";\n      } else {\n        this.input.style.paddingRight = paddingRight + 'px';\n      }\n\n      if (this.mirror) {\n        this.mirror.style.paddingRight = paddingRight + 'px';\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  InputBox.prototype.updateScrollDimensions = function () {\n    if (typeof this.cachedContentHeight !== 'number' || typeof this.cachedHeight !== 'number') {\n      return;\n    }\n\n    var scrollHeight = this.cachedContentHeight;\n    var height = this.cachedHeight;\n    var scrollTop = this.input.scrollTop;\n    this.scrollableElement.setScrollDimensions({\n      scrollHeight: scrollHeight,\n      height: height\n    });\n    this.scrollableElement.setScrollPosition({\n      scrollTop: scrollTop\n    });\n  };\n\n  InputBox.prototype.showMessage = function (message, force) {\n    this.message = message;\n    dom.removeClass(this.element, 'idle');\n    dom.removeClass(this.element, 'info');\n    dom.removeClass(this.element, 'warning');\n    dom.removeClass(this.element, 'error');\n    dom.addClass(this.element, this.classForType(message.type));\n    var styles = this.stylesForType(this.message.type);\n    this.element.style.border = styles.border ? \"1px solid \" + styles.border : null; // ARIA Support\n\n    var alertText;\n\n    if (message.type === 3\n    /* ERROR */\n    ) {\n        alertText = nls.localize('alertErrorMessage', \"Error: {0}\", message.content);\n      } else if (message.type === 2\n    /* WARNING */\n    ) {\n        alertText = nls.localize('alertWarningMessage', \"Warning: {0}\", message.content);\n      } else {\n      alertText = nls.localize('alertInfoMessage', \"Info: {0}\", message.content);\n    }\n\n    aria.alert(alertText);\n\n    if (this.hasFocus() || force) {\n      this._showMessage();\n    }\n  };\n\n  InputBox.prototype.hideMessage = function () {\n    this.message = null;\n    dom.removeClass(this.element, 'info');\n    dom.removeClass(this.element, 'warning');\n    dom.removeClass(this.element, 'error');\n    dom.addClass(this.element, 'idle');\n\n    this._hideMessage();\n\n    this.applyStyles();\n  };\n\n  InputBox.prototype.validate = function () {\n    var errorMsg = null;\n\n    if (this.validation) {\n      errorMsg = this.validation(this.value);\n\n      if (errorMsg) {\n        this.inputElement.setAttribute('aria-invalid', 'true');\n        this.showMessage(errorMsg);\n      } else if (this.inputElement.hasAttribute('aria-invalid')) {\n        this.inputElement.removeAttribute('aria-invalid');\n        this.hideMessage();\n      }\n    }\n\n    return !errorMsg;\n  };\n\n  InputBox.prototype.stylesForType = function (type) {\n    switch (type) {\n      case 1\n      /* INFO */\n      :\n        return {\n          border: this.inputValidationInfoBorder,\n          background: this.inputValidationInfoBackground,\n          foreground: this.inputValidationInfoForeground\n        };\n\n      case 2\n      /* WARNING */\n      :\n        return {\n          border: this.inputValidationWarningBorder,\n          background: this.inputValidationWarningBackground,\n          foreground: this.inputValidationWarningForeground\n        };\n\n      default:\n        return {\n          border: this.inputValidationErrorBorder,\n          background: this.inputValidationErrorBackground,\n          foreground: this.inputValidationErrorForeground\n        };\n    }\n  };\n\n  InputBox.prototype.classForType = function (type) {\n    switch (type) {\n      case 1\n      /* INFO */\n      :\n        return 'info';\n\n      case 2\n      /* WARNING */\n      :\n        return 'warning';\n\n      default:\n        return 'error';\n    }\n  };\n\n  InputBox.prototype._showMessage = function () {\n    var _this = this;\n\n    if (!this.contextViewProvider || !this.message) {\n      return;\n    }\n\n    var div;\n\n    var layout = function () {\n      return div.style.width = dom.getTotalWidth(_this.element) + 'px';\n    };\n\n    this.contextViewProvider.showContextView({\n      getAnchor: function () {\n        return _this.element;\n      },\n      anchorAlignment: 1\n      /* RIGHT */\n      ,\n      render: function (container) {\n        if (!_this.message) {\n          return null;\n        }\n\n        div = dom.append(container, $('.monaco-inputbox-container'));\n        layout();\n        var renderOptions = {\n          inline: true,\n          className: 'monaco-inputbox-message'\n        };\n        var spanElement = _this.message.formatContent ? renderFormattedText(_this.message.content, renderOptions) : renderText(_this.message.content, renderOptions);\n        dom.addClass(spanElement, _this.classForType(_this.message.type));\n\n        var styles = _this.stylesForType(_this.message.type);\n\n        spanElement.style.backgroundColor = styles.background ? styles.background.toString() : null;\n        spanElement.style.color = styles.foreground ? styles.foreground.toString() : null;\n        spanElement.style.border = styles.border ? \"1px solid \" + styles.border : null;\n        dom.append(div, spanElement);\n        return null;\n      },\n      onHide: function () {\n        _this.state = 'closed';\n      },\n      layout: layout\n    });\n    this.state = 'open';\n  };\n\n  InputBox.prototype._hideMessage = function () {\n    if (!this.contextViewProvider) {\n      return;\n    }\n\n    if (this.state === 'open') {\n      this.contextViewProvider.hideContextView();\n    }\n\n    this.state = 'idle';\n  };\n\n  InputBox.prototype.onValueChange = function () {\n    this._onDidChange.fire(this.value);\n\n    this.validate();\n    this.updateMirror();\n\n    if (this.state === 'open' && this.contextViewProvider) {\n      this.contextViewProvider.layout();\n    }\n  };\n\n  InputBox.prototype.updateMirror = function () {\n    if (!this.mirror) {\n      return;\n    }\n\n    var value = this.value || this.placeholder;\n    var lastCharCode = value.charCodeAt(value.length - 1);\n    var suffix = lastCharCode === 10 ? ' ' : '';\n    var mirrorTextContent = value + suffix;\n\n    if (mirrorTextContent) {\n      this.mirror.textContent = value + suffix;\n    } else {\n      this.mirror.innerHTML = '&nbsp;';\n    }\n\n    this.layout();\n  };\n\n  InputBox.prototype.style = function (styles) {\n    this.inputBackground = styles.inputBackground;\n    this.inputForeground = styles.inputForeground;\n    this.inputBorder = styles.inputBorder;\n    this.inputValidationInfoBackground = styles.inputValidationInfoBackground;\n    this.inputValidationInfoForeground = styles.inputValidationInfoForeground;\n    this.inputValidationInfoBorder = styles.inputValidationInfoBorder;\n    this.inputValidationWarningBackground = styles.inputValidationWarningBackground;\n    this.inputValidationWarningForeground = styles.inputValidationWarningForeground;\n    this.inputValidationWarningBorder = styles.inputValidationWarningBorder;\n    this.inputValidationErrorBackground = styles.inputValidationErrorBackground;\n    this.inputValidationErrorForeground = styles.inputValidationErrorForeground;\n    this.inputValidationErrorBorder = styles.inputValidationErrorBorder;\n    this.applyStyles();\n  };\n\n  InputBox.prototype.applyStyles = function () {\n    if (this.element) {\n      var background = this.inputBackground ? this.inputBackground.toString() : null;\n      var foreground = this.inputForeground ? this.inputForeground.toString() : null;\n      var border = this.inputBorder ? this.inputBorder.toString() : null;\n      this.element.style.backgroundColor = background;\n      this.element.style.color = foreground;\n      this.input.style.backgroundColor = background;\n      this.input.style.color = foreground;\n      this.element.style.borderWidth = border ? '1px' : null;\n      this.element.style.borderStyle = border ? 'solid' : null;\n      this.element.style.borderColor = border;\n    }\n  };\n\n  InputBox.prototype.layout = function () {\n    if (!this.mirror) {\n      return;\n    }\n\n    var previousHeight = this.cachedContentHeight;\n    this.cachedContentHeight = dom.getTotalHeight(this.mirror);\n\n    if (previousHeight !== this.cachedContentHeight) {\n      this.cachedHeight = Math.min(this.cachedContentHeight, this.maxHeight);\n      this.input.style.height = this.cachedHeight + 'px';\n\n      this._onDidHeightChange.fire(this.cachedContentHeight);\n    }\n  };\n\n  InputBox.prototype.dispose = function () {\n    this._hideMessage();\n\n    this.element = null; // StrictNullOverride: nulling out ok in dispose\n\n    this.input = null; // StrictNullOverride: nulling out ok in dispose\n\n    this.contextViewProvider = undefined;\n    this.message = null;\n    this.validation = undefined;\n    this.state = null; // StrictNullOverride: nulling out ok in dispose\n\n    this.actionbar = undefined;\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return InputBox;\n}(Widget);\n\nexport { InputBox };\n\nvar HistoryInputBox =\n/** @class */\nfunction (_super) {\n  __extends(HistoryInputBox, _super);\n\n  function HistoryInputBox(container, contextViewProvider, options) {\n    var _this = _super.call(this, container, contextViewProvider, options) || this;\n\n    _this.history = new HistoryNavigator(options.history, 100);\n    return _this;\n  }\n\n  HistoryInputBox.prototype.addToHistory = function () {\n    if (this.value && this.value !== this.getCurrentValue()) {\n      this.history.add(this.value);\n    }\n  };\n\n  HistoryInputBox.prototype.showNextValue = function () {\n    if (!this.history.has(this.value)) {\n      this.addToHistory();\n    }\n\n    var next = this.getNextValue();\n\n    if (next) {\n      next = next === this.value ? this.getNextValue() : next;\n    }\n\n    if (next) {\n      this.value = next;\n      aria.status(this.value);\n    }\n  };\n\n  HistoryInputBox.prototype.showPreviousValue = function () {\n    if (!this.history.has(this.value)) {\n      this.addToHistory();\n    }\n\n    var previous = this.getPreviousValue();\n\n    if (previous) {\n      previous = previous === this.value ? this.getPreviousValue() : previous;\n    }\n\n    if (previous) {\n      this.value = previous;\n      aria.status(this.value);\n    }\n  };\n\n  HistoryInputBox.prototype.getCurrentValue = function () {\n    var currentValue = this.history.current();\n\n    if (!currentValue) {\n      currentValue = this.history.last();\n      this.history.next();\n    }\n\n    return currentValue;\n  };\n\n  HistoryInputBox.prototype.getPreviousValue = function () {\n    return this.history.previous() || this.history.first();\n  };\n\n  HistoryInputBox.prototype.getNextValue = function () {\n    return this.history.next() || this.history.last();\n  };\n\n  return HistoryInputBox;\n}(InputBox);\n\nexport { HistoryInputBox };","map":null,"metadata":{},"sourceType":"module"}