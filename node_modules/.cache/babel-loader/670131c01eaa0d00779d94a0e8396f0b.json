{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Action } from '../../../base/common/actions.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { Emitter } from '../../../base/common/event.js';\nexport function isIMenuItem(item) {\n  return item.command !== undefined;\n}\nexport var IMenuService = createDecorator('menuService');\nexport var MenuRegistry = new (\n/** @class */\nfunction () {\n  function class_1() {\n    this._commands = new Map();\n    this._menuItems = new Map();\n    this._onDidChangeMenu = new Emitter();\n    this.onDidChangeMenu = this._onDidChangeMenu.event;\n  }\n\n  class_1.prototype.addCommand = function (command) {\n    var _this = this;\n\n    this._commands.set(command.id, command);\n\n    this._onDidChangeMenu.fire(0\n    /* CommandPalette */\n    );\n\n    return {\n      dispose: function () {\n        if (_this._commands.delete(command.id)) {\n          _this._onDidChangeMenu.fire(0\n          /* CommandPalette */\n          );\n        }\n      }\n    };\n  };\n\n  class_1.prototype.getCommand = function (id) {\n    return this._commands.get(id);\n  };\n\n  class_1.prototype.getCommands = function () {\n    var map = new Map();\n\n    this._commands.forEach(function (value, key) {\n      return map.set(key, value);\n    });\n\n    return map;\n  };\n\n  class_1.prototype.appendMenuItem = function (id, item) {\n    var _this = this;\n\n    var array = this._menuItems.get(id);\n\n    if (!array) {\n      array = [item];\n\n      this._menuItems.set(id, array);\n    } else {\n      array.push(item);\n    }\n\n    this._onDidChangeMenu.fire(id);\n\n    return {\n      dispose: function () {\n        var idx = array.indexOf(item);\n\n        if (idx >= 0) {\n          array.splice(idx, 1);\n\n          _this._onDidChangeMenu.fire(id);\n        }\n      }\n    };\n  };\n\n  class_1.prototype.getMenuItems = function (id) {\n    var result = (this._menuItems.get(id) || []).slice(0);\n\n    if (id === 0\n    /* CommandPalette */\n    ) {\n        // CommandPalette is special because it shows\n        // all commands by default\n        this._appendImplicitItems(result);\n      }\n\n    return result;\n  };\n\n  class_1.prototype._appendImplicitItems = function (result) {\n    var set = new Set();\n    var temp = result.filter(function (item) {\n      return isIMenuItem(item);\n    });\n\n    for (var _i = 0, temp_1 = temp; _i < temp_1.length; _i++) {\n      var _a = temp_1[_i],\n          command = _a.command,\n          alt = _a.alt;\n      set.add(command.id);\n\n      if (alt) {\n        set.add(alt.id);\n      }\n    }\n\n    this._commands.forEach(function (command, id) {\n      if (!set.has(id)) {\n        result.push({\n          command: command\n        });\n      }\n    });\n  };\n\n  return class_1;\n}())();\n\nvar ExecuteCommandAction =\n/** @class */\nfunction (_super) {\n  __extends(ExecuteCommandAction, _super);\n\n  function ExecuteCommandAction(id, label, _commandService) {\n    var _this = _super.call(this, id, label) || this;\n\n    _this._commandService = _commandService;\n    return _this;\n  }\n\n  ExecuteCommandAction.prototype.run = function () {\n    var _a;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    return (_a = this._commandService).executeCommand.apply(_a, [this.id].concat(args));\n  };\n\n  ExecuteCommandAction = __decorate([__param(2, ICommandService)], ExecuteCommandAction);\n  return ExecuteCommandAction;\n}(Action);\n\nexport { ExecuteCommandAction };\n\nvar SubmenuItemAction =\n/** @class */\nfunction (_super) {\n  __extends(SubmenuItemAction, _super);\n\n  function SubmenuItemAction(item) {\n    var _this = this;\n\n    typeof item.title === 'string' ? _this = _super.call(this, '', item.title, 'submenu') || this : _this = _super.call(this, '', item.title.value, 'submenu') || this;\n    _this.item = item;\n    return _this;\n  }\n\n  return SubmenuItemAction;\n}(Action);\n\nexport { SubmenuItemAction };\n\nvar MenuItemAction =\n/** @class */\nfunction (_super) {\n  __extends(MenuItemAction, _super);\n\n  function MenuItemAction(item, alt, options, contextKeyService, commandService) {\n    var _this = this;\n\n    typeof item.title === 'string' ? _this = _super.call(this, item.id, item.title, commandService) || this : _this = _super.call(this, item.id, item.title.value, commandService) || this;\n    _this._cssClass = undefined;\n    _this._enabled = !item.precondition || contextKeyService.contextMatchesRules(item.precondition);\n    _this._checked = Boolean(item.toggled && contextKeyService.contextMatchesRules(item.toggled));\n    _this._options = options || {};\n    _this.item = item;\n    _this.alt = alt ? new MenuItemAction(alt, undefined, _this._options, contextKeyService, commandService) : undefined;\n    return _this;\n  }\n\n  MenuItemAction.prototype.dispose = function () {\n    if (this.alt) {\n      this.alt.dispose();\n    }\n\n    _super.prototype.dispose.call(this);\n  };\n\n  MenuItemAction.prototype.run = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var runArgs = [];\n\n    if (this._options.arg) {\n      runArgs = runArgs.concat([this._options.arg]);\n    }\n\n    if (this._options.shouldForwardArgs) {\n      runArgs = runArgs.concat(args);\n    }\n\n    return _super.prototype.run.apply(this, runArgs);\n  };\n\n  MenuItemAction = __decorate([__param(3, IContextKeyService), __param(4, ICommandService)], MenuItemAction);\n  return MenuItemAction;\n}(ExecuteCommandAction);\n\nexport { MenuItemAction };","map":null,"metadata":{},"sourceType":"module"}