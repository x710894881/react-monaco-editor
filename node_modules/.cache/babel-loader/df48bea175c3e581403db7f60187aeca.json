{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../base/browser/dom.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { TokenizationRegistry } from '../../common/modes.js';\nimport { TokenTheme, generateTokensCSSForColorMap } from '../../common/modes/supports/tokenization.js';\nimport { hc_black, vs, vs_dark } from '../common/themes.js';\nimport { Registry } from '../../../platform/registry/common/platform.js';\nimport { Extensions } from '../../../platform/theme/common/colorRegistry.js';\nimport { Extensions as ThemingExtensions } from '../../../platform/theme/common/themeService.js';\nvar VS_THEME_NAME = 'vs';\nvar VS_DARK_THEME_NAME = 'vs-dark';\nvar HC_BLACK_THEME_NAME = 'hc-black';\nvar colorRegistry = Registry.as(Extensions.ColorContribution);\nvar themingRegistry = Registry.as(ThemingExtensions.ThemingContribution);\n\nvar StandaloneTheme =\n/** @class */\nfunction () {\n  function StandaloneTheme(name, standaloneThemeData) {\n    this.themeData = standaloneThemeData;\n    var base = standaloneThemeData.base;\n\n    if (name.length > 0) {\n      this.id = base + ' ' + name;\n      this.themeName = name;\n    } else {\n      this.id = base;\n      this.themeName = base;\n    }\n\n    this.colors = null;\n    this.defaultColors = Object.create(null);\n    this._tokenTheme = null;\n  }\n\n  Object.defineProperty(StandaloneTheme.prototype, \"base\", {\n    get: function () {\n      return this.themeData.base;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StandaloneTheme.prototype.notifyBaseUpdated = function () {\n    if (this.themeData.inherit) {\n      this.colors = null;\n      this._tokenTheme = null;\n    }\n  };\n\n  StandaloneTheme.prototype.getColors = function () {\n    if (!this.colors) {\n      var colors = new Map();\n\n      for (var id in this.themeData.colors) {\n        colors.set(id, Color.fromHex(this.themeData.colors[id]));\n      }\n\n      if (this.themeData.inherit) {\n        var baseData = getBuiltinRules(this.themeData.base);\n\n        for (var id in baseData.colors) {\n          if (!colors.has(id)) {\n            colors.set(id, Color.fromHex(baseData.colors[id]));\n          }\n        }\n      }\n\n      this.colors = colors;\n    }\n\n    return this.colors;\n  };\n\n  StandaloneTheme.prototype.getColor = function (colorId, useDefault) {\n    var color = this.getColors().get(colorId);\n\n    if (color) {\n      return color;\n    }\n\n    if (useDefault !== false) {\n      return this.getDefault(colorId);\n    }\n\n    return undefined;\n  };\n\n  StandaloneTheme.prototype.getDefault = function (colorId) {\n    var color = this.defaultColors[colorId];\n\n    if (color) {\n      return color;\n    }\n\n    color = colorRegistry.resolveDefaultColor(colorId, this);\n    this.defaultColors[colorId] = color;\n    return color;\n  };\n\n  StandaloneTheme.prototype.defines = function (colorId) {\n    return Object.prototype.hasOwnProperty.call(this.getColors(), colorId);\n  };\n\n  Object.defineProperty(StandaloneTheme.prototype, \"type\", {\n    get: function () {\n      switch (this.base) {\n        case VS_THEME_NAME:\n          return 'light';\n\n        case HC_BLACK_THEME_NAME:\n          return 'hc';\n\n        default:\n          return 'dark';\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(StandaloneTheme.prototype, \"tokenTheme\", {\n    get: function () {\n      if (!this._tokenTheme) {\n        var rules = [];\n        var encodedTokensColors = [];\n\n        if (this.themeData.inherit) {\n          var baseData = getBuiltinRules(this.themeData.base);\n          rules = baseData.rules;\n\n          if (baseData.encodedTokensColors) {\n            encodedTokensColors = baseData.encodedTokensColors;\n          }\n        }\n\n        rules = rules.concat(this.themeData.rules);\n\n        if (this.themeData.encodedTokensColors) {\n          encodedTokensColors = this.themeData.encodedTokensColors;\n        }\n\n        this._tokenTheme = TokenTheme.createFromRawTokenTheme(rules, encodedTokensColors);\n      }\n\n      return this._tokenTheme;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return StandaloneTheme;\n}();\n\nfunction isBuiltinTheme(themeName) {\n  return themeName === VS_THEME_NAME || themeName === VS_DARK_THEME_NAME || themeName === HC_BLACK_THEME_NAME;\n}\n\nfunction getBuiltinRules(builtinTheme) {\n  switch (builtinTheme) {\n    case VS_THEME_NAME:\n      return vs;\n\n    case VS_DARK_THEME_NAME:\n      return vs_dark;\n\n    case HC_BLACK_THEME_NAME:\n      return hc_black;\n  }\n}\n\nfunction newBuiltInTheme(builtinTheme) {\n  var themeData = getBuiltinRules(builtinTheme);\n  return new StandaloneTheme(builtinTheme, themeData);\n}\n\nvar StandaloneThemeServiceImpl =\n/** @class */\nfunction () {\n  function StandaloneThemeServiceImpl() {\n    this.environment = Object.create(null);\n    this._onThemeChange = new Emitter();\n    this._onIconThemeChange = new Emitter();\n    this._knownThemes = new Map();\n\n    this._knownThemes.set(VS_THEME_NAME, newBuiltInTheme(VS_THEME_NAME));\n\n    this._knownThemes.set(VS_DARK_THEME_NAME, newBuiltInTheme(VS_DARK_THEME_NAME));\n\n    this._knownThemes.set(HC_BLACK_THEME_NAME, newBuiltInTheme(HC_BLACK_THEME_NAME));\n\n    this._styleElement = dom.createStyleSheet();\n    this._styleElement.className = 'monaco-colors';\n    this.setTheme(VS_THEME_NAME);\n  }\n\n  Object.defineProperty(StandaloneThemeServiceImpl.prototype, \"onThemeChange\", {\n    get: function () {\n      return this._onThemeChange.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  StandaloneThemeServiceImpl.prototype.defineTheme = function (themeName, themeData) {\n    if (!/^[a-z0-9\\-]+$/i.test(themeName)) {\n      throw new Error('Illegal theme name!');\n    }\n\n    if (!isBuiltinTheme(themeData.base) && !isBuiltinTheme(themeName)) {\n      throw new Error('Illegal theme base!');\n    } // set or replace theme\n\n\n    this._knownThemes.set(themeName, new StandaloneTheme(themeName, themeData));\n\n    if (isBuiltinTheme(themeName)) {\n      this._knownThemes.forEach(function (theme) {\n        if (theme.base === themeName) {\n          theme.notifyBaseUpdated();\n        }\n      });\n    }\n\n    if (this._theme && this._theme.themeName === themeName) {\n      this.setTheme(themeName); // refresh theme\n    }\n  };\n\n  StandaloneThemeServiceImpl.prototype.getTheme = function () {\n    return this._theme;\n  };\n\n  StandaloneThemeServiceImpl.prototype.setTheme = function (themeName) {\n    var _this = this;\n\n    var theme;\n\n    if (this._knownThemes.has(themeName)) {\n      theme = this._knownThemes.get(themeName);\n    } else {\n      theme = this._knownThemes.get(VS_THEME_NAME);\n    }\n\n    if (this._theme === theme) {\n      // Nothing to do\n      return theme.id;\n    }\n\n    this._theme = theme;\n    var cssRules = [];\n    var hasRule = {};\n    var ruleCollector = {\n      addRule: function (rule) {\n        if (!hasRule[rule]) {\n          cssRules.push(rule);\n          hasRule[rule] = true;\n        }\n      }\n    };\n    themingRegistry.getThemingParticipants().forEach(function (p) {\n      return p(theme, ruleCollector, _this.environment);\n    });\n    var tokenTheme = theme.tokenTheme;\n    var colorMap = tokenTheme.getColorMap();\n    ruleCollector.addRule(generateTokensCSSForColorMap(colorMap));\n    this._styleElement.innerHTML = cssRules.join('\\n');\n    TokenizationRegistry.setColorMap(colorMap);\n\n    this._onThemeChange.fire(theme);\n\n    return theme.id;\n  };\n\n  StandaloneThemeServiceImpl.prototype.getIconTheme = function () {\n    return {\n      hasFileIcons: false,\n      hasFolderIcons: false,\n      hidesExplorerArrows: false\n    };\n  };\n\n  return StandaloneThemeServiceImpl;\n}();\n\nexport { StandaloneThemeServiceImpl };","map":null,"metadata":{},"sourceType":"module"}