{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { startsWith } from '../../../base/common/strings.js';\n\nvar CodeActionKind =\n/** @class */\nfunction () {\n  function CodeActionKind(value) {\n    this.value = value;\n  }\n\n  CodeActionKind.prototype.equals = function (other) {\n    return this.value === other.value;\n  };\n\n  CodeActionKind.prototype.contains = function (other) {\n    return this.equals(other) || startsWith(other.value, this.value + CodeActionKind.sep);\n  };\n\n  CodeActionKind.prototype.intersects = function (other) {\n    return this.contains(other) || other.contains(this);\n  };\n\n  CodeActionKind.sep = '.';\n  CodeActionKind.Empty = new CodeActionKind('');\n  CodeActionKind.QuickFix = new CodeActionKind('quickfix');\n  CodeActionKind.Refactor = new CodeActionKind('refactor');\n  CodeActionKind.Source = new CodeActionKind('source');\n  CodeActionKind.SourceOrganizeImports = new CodeActionKind('source.organizeImports');\n  CodeActionKind.SourceFixAll = new CodeActionKind('source.fixAll');\n  return CodeActionKind;\n}();\n\nexport { CodeActionKind };\nexport function mayIncludeActionsOfKind(filter, providedKind) {\n  // A provided kind may be a subset or superset of our filtered kind.\n  if (filter.kind && !filter.kind.intersects(providedKind)) {\n    return false;\n  } // Don't return source actions unless they are explicitly requested\n\n\n  if (CodeActionKind.Source.contains(providedKind) && !filter.includeSourceActions) {\n    return false;\n  }\n\n  return true;\n}\nexport function filtersAction(filter, action) {\n  var actionKind = action.kind ? new CodeActionKind(action.kind) : undefined; // Filter out actions by kind\n\n  if (filter.kind) {\n    if (!actionKind || !filter.kind.contains(actionKind)) {\n      return false;\n    }\n  } // Don't return source actions unless they are explicitly requested\n\n\n  if (!filter.includeSourceActions) {\n    if (actionKind && CodeActionKind.Source.contains(actionKind)) {\n      return false;\n    }\n  }\n\n  if (filter.onlyIncludePreferredActions) {\n    if (!action.isPreferred) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}