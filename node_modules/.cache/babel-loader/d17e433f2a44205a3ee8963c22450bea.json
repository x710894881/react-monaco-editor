{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { illegalArgument } from '../../../base/common/errors.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { registerLanguageCommand } from '../../browser/editorExtensions.js';\nimport { Range } from '../../common/core/range.js';\nimport { ColorProviderRegistry } from '../../common/modes.js';\nimport { IModelService } from '../../common/services/modelService.js';\nexport function getColors(model, token) {\n  var colors = [];\n  var providers = ColorProviderRegistry.ordered(model).reverse();\n  var promises = providers.map(function (provider) {\n    return Promise.resolve(provider.provideDocumentColors(model, token)).then(function (result) {\n      if (Array.isArray(result)) {\n        for (var _i = 0, result_1 = result; _i < result_1.length; _i++) {\n          var colorInfo = result_1[_i];\n          colors.push({\n            colorInfo: colorInfo,\n            provider: provider\n          });\n        }\n      }\n    });\n  });\n  return Promise.all(promises).then(function () {\n    return colors;\n  });\n}\nexport function getColorPresentations(model, colorInfo, provider, token) {\n  return Promise.resolve(provider.provideColorPresentations(model, colorInfo, token));\n}\nregisterLanguageCommand('_executeDocumentColorProvider', function (accessor, args) {\n  var resource = args.resource;\n\n  if (!(resource instanceof URI)) {\n    throw illegalArgument();\n  }\n\n  var model = accessor.get(IModelService).getModel(resource);\n\n  if (!model) {\n    throw illegalArgument();\n  }\n\n  var rawCIs = [];\n  var providers = ColorProviderRegistry.ordered(model).reverse();\n  var promises = providers.map(function (provider) {\n    return Promise.resolve(provider.provideDocumentColors(model, CancellationToken.None)).then(function (result) {\n      if (Array.isArray(result)) {\n        for (var _i = 0, result_2 = result; _i < result_2.length; _i++) {\n          var ci = result_2[_i];\n          rawCIs.push({\n            range: ci.range,\n            color: [ci.color.red, ci.color.green, ci.color.blue, ci.color.alpha]\n          });\n        }\n      }\n    });\n  });\n  return Promise.all(promises).then(function () {\n    return rawCIs;\n  });\n});\nregisterLanguageCommand('_executeColorPresentationProvider', function (accessor, args) {\n  var resource = args.resource,\n      color = args.color,\n      range = args.range;\n\n  if (!(resource instanceof URI) || !Array.isArray(color) || color.length !== 4 || !Range.isIRange(range)) {\n    throw illegalArgument();\n  }\n\n  var red = color[0],\n      green = color[1],\n      blue = color[2],\n      alpha = color[3];\n  var model = accessor.get(IModelService).getModel(resource);\n\n  if (!model) {\n    throw illegalArgument();\n  }\n\n  var colorInfo = {\n    range: range,\n    color: {\n      red: red,\n      green: green,\n      blue: blue,\n      alpha: alpha\n    }\n  };\n  var presentations = [];\n  var providers = ColorProviderRegistry.ordered(model).reverse();\n  var promises = providers.map(function (provider) {\n    return Promise.resolve(provider.provideColorPresentations(model, colorInfo, CancellationToken.None)).then(function (result) {\n      if (Array.isArray(result)) {\n        presentations.push.apply(presentations, result);\n      }\n    });\n  });\n  return Promise.all(promises).then(function () {\n    return presentations;\n  });\n});","map":null,"metadata":{},"sourceType":"module"}