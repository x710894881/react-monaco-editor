{"ast":null,"code":"/**\n * **!Do not construct directly!**\n *\n * **!Only static methods because it gets serialized!**\n *\n * This represents the \"canonical\" version for an extension identifier. Extension ids\n * have to be case-insensitive (due to the marketplace), but we must ensure case\n * preservation because the extension API is already public at this time.\n *\n * For example, given an extension with the publisher `\"Hello\"` and the name `\"World\"`,\n * its canonical extension identifier is `\"Hello.World\"`. This extension could be\n * referenced in some other extension's dependencies using the string `\"hello.world\"`.\n *\n * To make matters more complicated, an extension can optionally have an UUID. When two\n * extensions have the same UUID, they are considered equal even if their identifier is different.\n */\nvar ExtensionIdentifier =\n/** @class */\nfunction () {\n  function ExtensionIdentifier(value) {\n    this.value = value;\n    this._lower = value.toLowerCase();\n  }\n  /**\n   * Gives the value by which to index (for equality).\n   */\n\n\n  ExtensionIdentifier.toKey = function (id) {\n    if (typeof id === 'string') {\n      return id.toLowerCase();\n    }\n\n    return id._lower;\n  };\n\n  return ExtensionIdentifier;\n}();\n\nexport { ExtensionIdentifier };","map":null,"metadata":{},"sourceType":"module"}