{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CancellationTokenSource } from './cancellation.js';\nimport * as errors from './errors.js';\nimport { toDisposable } from './lifecycle.js';\nexport function isThenable(obj) {\n  return obj && typeof obj.then === 'function';\n}\nexport function createCancelablePromise(callback) {\n  var source = new CancellationTokenSource();\n  var thenable = callback(source.token);\n  var promise = new Promise(function (resolve, reject) {\n    source.token.onCancellationRequested(function () {\n      reject(errors.canceled());\n    });\n    Promise.resolve(thenable).then(function (value) {\n      source.dispose();\n      resolve(value);\n    }, function (err) {\n      source.dispose();\n      reject(err);\n    });\n  });\n  return new (\n  /** @class */\n  function () {\n    function class_1() {}\n\n    class_1.prototype.cancel = function () {\n      source.cancel();\n    };\n\n    class_1.prototype.then = function (resolve, reject) {\n      return promise.then(resolve, reject);\n    };\n\n    class_1.prototype.catch = function (reject) {\n      return this.then(undefined, reject);\n    };\n\n    class_1.prototype.finally = function (onfinally) {\n      return promise.finally(onfinally);\n    };\n\n    return class_1;\n  }())();\n}\nexport function raceCancellation(promise, token, defaultValue) {\n  return Promise.race([promise, new Promise(function (resolve) {\n    return token.onCancellationRequested(function () {\n      return resolve(defaultValue);\n    });\n  })]);\n}\n/**\n * A helper to delay execution of a task that is being requested often.\n *\n * Following the throttler, now imagine the mail man wants to optimize the number of\n * trips proactively. The trip itself can be long, so he decides not to make the trip\n * as soon as a letter is submitted. Instead he waits a while, in case more\n * letters are submitted. After said waiting period, if no letters were submitted, he\n * decides to make the trip. Imagine that N more letters were submitted after the first\n * one, all within a short period of time between each other. Even though N+1\n * submissions occurred, only 1 delivery was made.\n *\n * The delayer offers this behavior via the trigger() method, into which both the task\n * to be executed and the waiting period (delay) must be passed in as arguments. Following\n * the example:\n *\n * \t\tconst delayer = new Delayer(WAITING_PERIOD);\n * \t\tconst letters = [];\n *\n * \t\tfunction letterReceived(l) {\n * \t\t\tletters.push(l);\n * \t\t\tdelayer.trigger(() => { return makeTheTrip(); });\n * \t\t}\n */\n\nvar Delayer =\n/** @class */\nfunction () {\n  function Delayer(defaultDelay) {\n    this.defaultDelay = defaultDelay;\n    this.timeout = null;\n    this.completionPromise = null;\n    this.doResolve = null;\n    this.task = null;\n  }\n\n  Delayer.prototype.trigger = function (task, delay) {\n    var _this = this;\n\n    if (delay === void 0) {\n      delay = this.defaultDelay;\n    }\n\n    this.task = task;\n    this.cancelTimeout();\n\n    if (!this.completionPromise) {\n      this.completionPromise = new Promise(function (c, e) {\n        _this.doResolve = c;\n        _this.doReject = e;\n      }).then(function () {\n        _this.completionPromise = null;\n        _this.doResolve = null;\n        var task = _this.task;\n        _this.task = null;\n        return task();\n      });\n    }\n\n    this.timeout = setTimeout(function () {\n      _this.timeout = null;\n\n      _this.doResolve(null);\n    }, delay);\n    return this.completionPromise;\n  };\n\n  Delayer.prototype.isTriggered = function () {\n    return this.timeout !== null;\n  };\n\n  Delayer.prototype.cancel = function () {\n    this.cancelTimeout();\n\n    if (this.completionPromise) {\n      this.doReject(errors.canceled());\n      this.completionPromise = null;\n    }\n  };\n\n  Delayer.prototype.cancelTimeout = function () {\n    if (this.timeout !== null) {\n      clearTimeout(this.timeout);\n      this.timeout = null;\n    }\n  };\n\n  Delayer.prototype.dispose = function () {\n    this.cancelTimeout();\n  };\n\n  return Delayer;\n}();\n\nexport { Delayer };\nexport function timeout(millis, token) {\n  if (!token) {\n    return createCancelablePromise(function (token) {\n      return timeout(millis, token);\n    });\n  }\n\n  return new Promise(function (resolve, reject) {\n    var handle = setTimeout(resolve, millis);\n    token.onCancellationRequested(function () {\n      clearTimeout(handle);\n      reject(errors.canceled());\n    });\n  });\n}\nexport function disposableTimeout(handler, timeout) {\n  if (timeout === void 0) {\n    timeout = 0;\n  }\n\n  var timer = setTimeout(handler, timeout);\n  return toDisposable(function () {\n    return clearTimeout(timer);\n  });\n}\nexport function first(promiseFactories, shouldStop, defaultValue) {\n  if (shouldStop === void 0) {\n    shouldStop = function (t) {\n      return !!t;\n    };\n  }\n\n  if (defaultValue === void 0) {\n    defaultValue = null;\n  }\n\n  var index = 0;\n  var len = promiseFactories.length;\n\n  var loop = function () {\n    if (index >= len) {\n      return Promise.resolve(defaultValue);\n    }\n\n    var factory = promiseFactories[index++];\n    var promise = Promise.resolve(factory());\n    return promise.then(function (result) {\n      if (shouldStop(result)) {\n        return Promise.resolve(result);\n      }\n\n      return loop();\n    });\n  };\n\n  return loop();\n}\n\nvar TimeoutTimer =\n/** @class */\nfunction () {\n  function TimeoutTimer(runner, timeout) {\n    this._token = -1;\n\n    if (typeof runner === 'function' && typeof timeout === 'number') {\n      this.setIfNotSet(runner, timeout);\n    }\n  }\n\n  TimeoutTimer.prototype.dispose = function () {\n    this.cancel();\n  };\n\n  TimeoutTimer.prototype.cancel = function () {\n    if (this._token !== -1) {\n      clearTimeout(this._token);\n      this._token = -1;\n    }\n  };\n\n  TimeoutTimer.prototype.cancelAndSet = function (runner, timeout) {\n    var _this = this;\n\n    this.cancel();\n    this._token = setTimeout(function () {\n      _this._token = -1;\n      runner();\n    }, timeout);\n  };\n\n  TimeoutTimer.prototype.setIfNotSet = function (runner, timeout) {\n    var _this = this;\n\n    if (this._token !== -1) {\n      // timer is already set\n      return;\n    }\n\n    this._token = setTimeout(function () {\n      _this._token = -1;\n      runner();\n    }, timeout);\n  };\n\n  return TimeoutTimer;\n}();\n\nexport { TimeoutTimer };\n\nvar IntervalTimer =\n/** @class */\nfunction () {\n  function IntervalTimer() {\n    this._token = -1;\n  }\n\n  IntervalTimer.prototype.dispose = function () {\n    this.cancel();\n  };\n\n  IntervalTimer.prototype.cancel = function () {\n    if (this._token !== -1) {\n      clearInterval(this._token);\n      this._token = -1;\n    }\n  };\n\n  IntervalTimer.prototype.cancelAndSet = function (runner, interval) {\n    this.cancel();\n    this._token = setInterval(function () {\n      runner();\n    }, interval);\n  };\n\n  return IntervalTimer;\n}();\n\nexport { IntervalTimer };\n\nvar RunOnceScheduler =\n/** @class */\nfunction () {\n  function RunOnceScheduler(runner, timeout) {\n    this.timeoutToken = -1;\n    this.runner = runner;\n    this.timeout = timeout;\n    this.timeoutHandler = this.onTimeout.bind(this);\n  }\n  /**\n   * Dispose RunOnceScheduler\n   */\n\n\n  RunOnceScheduler.prototype.dispose = function () {\n    this.cancel();\n    this.runner = null;\n  };\n  /**\n   * Cancel current scheduled runner (if any).\n   */\n\n\n  RunOnceScheduler.prototype.cancel = function () {\n    if (this.isScheduled()) {\n      clearTimeout(this.timeoutToken);\n      this.timeoutToken = -1;\n    }\n  };\n  /**\n   * Cancel previous runner (if any) & schedule a new runner.\n   */\n\n\n  RunOnceScheduler.prototype.schedule = function (delay) {\n    if (delay === void 0) {\n      delay = this.timeout;\n    }\n\n    this.cancel();\n    this.timeoutToken = setTimeout(this.timeoutHandler, delay);\n  };\n  /**\n   * Returns true if scheduled.\n   */\n\n\n  RunOnceScheduler.prototype.isScheduled = function () {\n    return this.timeoutToken !== -1;\n  };\n\n  RunOnceScheduler.prototype.onTimeout = function () {\n    this.timeoutToken = -1;\n\n    if (this.runner) {\n      this.doRun();\n    }\n  };\n\n  RunOnceScheduler.prototype.doRun = function () {\n    if (this.runner) {\n      this.runner();\n    }\n  };\n\n  return RunOnceScheduler;\n}();\n\nexport { RunOnceScheduler };\n/**\n * Execute the callback the next time the browser is idle\n */\n\nexport var runWhenIdle;\n\n(function () {\n  if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {\n    var dummyIdle_1 = Object.freeze({\n      didTimeout: true,\n      timeRemaining: function () {\n        return 15;\n      }\n    });\n\n    runWhenIdle = function (runner) {\n      var handle = setTimeout(function () {\n        return runner(dummyIdle_1);\n      });\n      var disposed = false;\n      return {\n        dispose: function () {\n          if (disposed) {\n            return;\n          }\n\n          disposed = true;\n          clearTimeout(handle);\n        }\n      };\n    };\n  } else {\n    runWhenIdle = function (runner, timeout) {\n      var handle = requestIdleCallback(runner, typeof timeout === 'number' ? {\n        timeout: timeout\n      } : undefined);\n      var disposed = false;\n      return {\n        dispose: function () {\n          if (disposed) {\n            return;\n          }\n\n          disposed = true;\n          cancelIdleCallback(handle);\n        }\n      };\n    };\n  }\n})();\n/**\n * An implementation of the \"idle-until-urgent\"-strategy as introduced\n * here: https://philipwalton.com/articles/idle-until-urgent/\n */\n\n\nvar IdleValue =\n/** @class */\nfunction () {\n  function IdleValue(executor) {\n    var _this = this;\n\n    this._didRun = false;\n\n    this._executor = function () {\n      try {\n        _this._value = executor();\n      } catch (err) {\n        _this._error = err;\n      } finally {\n        _this._didRun = true;\n      }\n    };\n\n    this._handle = runWhenIdle(function () {\n      return _this._executor();\n    });\n  }\n\n  IdleValue.prototype.dispose = function () {\n    this._handle.dispose();\n  };\n\n  IdleValue.prototype.getValue = function () {\n    if (!this._didRun) {\n      this._handle.dispose();\n\n      this._executor();\n    }\n\n    if (this._error) {\n      throw this._error;\n    }\n\n    return this._value;\n  };\n\n  return IdleValue;\n}();\n\nexport { IdleValue };","map":null,"metadata":{},"sourceType":"module"}