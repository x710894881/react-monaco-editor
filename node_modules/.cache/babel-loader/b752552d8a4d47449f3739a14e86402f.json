{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { globals } from '../common/platform.js';\nimport { logOnceWebWorkerWarning } from '../common/worker/simpleWorker.js';\n\nfunction getWorker(workerId, label) {\n  // Option for hosts to overwrite the worker script (used in the standalone editor)\n  if (globals.MonacoEnvironment) {\n    if (typeof globals.MonacoEnvironment.getWorker === 'function') {\n      return globals.MonacoEnvironment.getWorker(workerId, label);\n    }\n\n    if (typeof globals.MonacoEnvironment.getWorkerUrl === 'function') {\n      return new Worker(globals.MonacoEnvironment.getWorkerUrl(workerId, label));\n    }\n  } // ESM-comment-begin\n  // \tif (typeof require === 'function') {\n  // \t\t// check if the JS lives on a different origin\n  // \t\tconst workerMain = require.toUrl('./' + workerId);\n  // \t\tconst workerUrl = getWorkerBootstrapUrl(workerMain, label);\n  // \t\treturn new Worker(workerUrl, { name: label });\n  // \t}\n  // ESM-comment-end\n\n\n  throw new Error(\"You must define a function MonacoEnvironment.getWorkerUrl or MonacoEnvironment.getWorker\");\n} // ESM-comment-begin\n// export function getWorkerBootstrapUrl(scriptPath: string, label: string): string {\n// \tif (/^(http:)|(https:)|(file:)/.test(scriptPath)) {\n// \t\tconst currentUrl = String(window.location);\n// \t\tconst currentOrigin = currentUrl.substr(0, currentUrl.length - window.location.hash.length - window.location.search.length - window.location.pathname.length);\n// \t\tif (scriptPath.substring(0, currentOrigin.length) !== currentOrigin) {\n// \t\t\t// this is the cross-origin case\n// \t\t\t// i.e. the webpage is running at a different origin than where the scripts are loaded from\n// \t\t\tconst myPath = 'vs/base/worker/defaultWorkerFactory.js';\n// \t\t\tconst workerBaseUrl = require.toUrl(myPath).slice(0, -myPath.length);\n// \t\t\tconst js = `/*${label}*/self.MonacoEnvironment={baseUrl: '${workerBaseUrl}'};importScripts('${scriptPath}');/*${label}*/`;\n// \t\t\tconst url = `data:text/javascript;charset=utf-8,${encodeURIComponent(js)}`;\n// \t\t\treturn url;\n// \t\t}\n// \t}\n// \treturn scriptPath + '#' + label;\n// }\n// ESM-comment-end\n\n\nfunction isPromiseLike(obj) {\n  if (typeof obj.then === 'function') {\n    return true;\n  }\n\n  return false;\n}\n/**\n * A worker that uses HTML5 web workers so that is has\n * its own global scope and its own thread.\n */\n\n\nvar WebWorker =\n/** @class */\nfunction () {\n  function WebWorker(moduleId, id, label, onMessageCallback, onErrorCallback) {\n    this.id = id;\n    var workerOrPromise = getWorker('workerMain.js', label);\n\n    if (isPromiseLike(workerOrPromise)) {\n      this.worker = workerOrPromise;\n    } else {\n      this.worker = Promise.resolve(workerOrPromise);\n    }\n\n    this.postMessage(moduleId, []);\n    this.worker.then(function (w) {\n      w.onmessage = function (ev) {\n        onMessageCallback(ev.data);\n      };\n\n      w.onmessageerror = onErrorCallback;\n\n      if (typeof w.addEventListener === 'function') {\n        w.addEventListener('error', onErrorCallback);\n      }\n    });\n  }\n\n  WebWorker.prototype.getId = function () {\n    return this.id;\n  };\n\n  WebWorker.prototype.postMessage = function (message, transfer) {\n    if (this.worker) {\n      this.worker.then(function (w) {\n        return w.postMessage(message, transfer);\n      });\n    }\n  };\n\n  WebWorker.prototype.dispose = function () {\n    if (this.worker) {\n      this.worker.then(function (w) {\n        return w.terminate();\n      });\n    }\n\n    this.worker = null;\n  };\n\n  return WebWorker;\n}();\n\nvar DefaultWorkerFactory =\n/** @class */\nfunction () {\n  function DefaultWorkerFactory(label) {\n    this._label = label;\n    this._webWorkerFailedBeforeError = false;\n  }\n\n  DefaultWorkerFactory.prototype.create = function (moduleId, onMessageCallback, onErrorCallback) {\n    var _this = this;\n\n    var workerId = ++DefaultWorkerFactory.LAST_WORKER_ID;\n\n    if (this._webWorkerFailedBeforeError) {\n      throw this._webWorkerFailedBeforeError;\n    }\n\n    return new WebWorker(moduleId, workerId, this._label || 'anonymous' + workerId, onMessageCallback, function (err) {\n      logOnceWebWorkerWarning(err);\n      _this._webWorkerFailedBeforeError = err;\n      onErrorCallback(err);\n    });\n  };\n\n  DefaultWorkerFactory.LAST_WORKER_ID = 0;\n  return DefaultWorkerFactory;\n}();\n\nexport { DefaultWorkerFactory };","map":null,"metadata":{},"sourceType":"module"}