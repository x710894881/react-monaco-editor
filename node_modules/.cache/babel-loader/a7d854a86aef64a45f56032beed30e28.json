{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Range } from '../../common/core/range.js';\n\nvar FormattingEdit =\n/** @class */\nfunction () {\n  function FormattingEdit() {}\n\n  FormattingEdit._handleEolEdits = function (editor, edits) {\n    var newEol = undefined;\n    var singleEdits = [];\n\n    for (var _i = 0, edits_1 = edits; _i < edits_1.length; _i++) {\n      var edit = edits_1[_i];\n\n      if (typeof edit.eol === 'number') {\n        newEol = edit.eol;\n      }\n\n      if (edit.range && typeof edit.text === 'string') {\n        singleEdits.push(edit);\n      }\n    }\n\n    if (typeof newEol === 'number') {\n      if (editor.hasModel()) {\n        editor.getModel().pushEOL(newEol);\n      }\n    }\n\n    return singleEdits;\n  };\n\n  FormattingEdit._isFullModelReplaceEdit = function (editor, edit) {\n    if (!editor.hasModel()) {\n      return false;\n    }\n\n    var model = editor.getModel();\n    var editRange = model.validateRange(edit.range);\n    var fullModelRange = model.getFullModelRange();\n    return fullModelRange.equalsRange(editRange);\n  };\n\n  FormattingEdit.execute = function (editor, _edits) {\n    editor.pushUndoStop();\n\n    var edits = FormattingEdit._handleEolEdits(editor, _edits);\n\n    if (edits.length === 1 && FormattingEdit._isFullModelReplaceEdit(editor, edits[0])) {\n      // We use replace semantics and hope that markers stay put...\n      editor.executeEdits('formatEditsCommand', edits.map(function (edit) {\n        return EditOperation.replace(Range.lift(edit.range), edit.text);\n      }));\n    } else {\n      editor.executeEdits('formatEditsCommand', edits.map(function (edit) {\n        return EditOperation.replaceMove(Range.lift(edit.range), edit.text);\n      }));\n    }\n\n    editor.pushUndoStop();\n  };\n\n  return FormattingEdit;\n}();\n\nexport { FormattingEdit };","map":null,"metadata":{},"sourceType":"module"}