{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as dom from '../../../base/browser/dom.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Color } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as strings from '../../../base/common/strings.js';\nimport './media/peekViewWidget.css';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { EmbeddedCodeEditorWidget } from '../../browser/widget/embeddedCodeEditorWidget.js';\nimport { ZoneWidget } from '../zoneWidget/zoneWidget.js';\nimport * as nls from '../../../nls.js';\nimport { RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nexport var IPeekViewService = createDecorator('IPeekViewService');\nregisterSingleton(IPeekViewService,\n/** @class */\nfunction () {\n  function class_1() {\n    this._widgets = new Map();\n  }\n\n  class_1.prototype.addExclusiveWidget = function (editor, widget) {\n    var _this = this;\n\n    var existing = this._widgets.get(editor);\n\n    if (existing) {\n      existing.listener.dispose();\n      existing.widget.dispose();\n    }\n\n    var remove = function () {\n      var data = _this._widgets.get(editor);\n\n      if (data && data.widget === widget) {\n        data.listener.dispose();\n\n        _this._widgets.delete(editor);\n      }\n    };\n\n    this._widgets.set(editor, {\n      widget: widget,\n      listener: widget.onDidClose(remove)\n    });\n  };\n\n  return class_1;\n}());\nexport var PeekContext;\n\n(function (PeekContext) {\n  PeekContext.inPeekEditor = new RawContextKey('inReferenceSearchEditor', true);\n  PeekContext.notInPeekEditor = PeekContext.inPeekEditor.toNegated();\n})(PeekContext || (PeekContext = {}));\n\nexport function getOuterEditor(accessor) {\n  var editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n  if (editor instanceof EmbeddedCodeEditorWidget) {\n    return editor.getParentEditor();\n  }\n\n  return editor;\n}\nvar defaultOptions = {\n  headerBackgroundColor: Color.white,\n  primaryHeadingColor: Color.fromHex('#333333'),\n  secondaryHeadingColor: Color.fromHex('#6c6c6cb3')\n};\n\nvar PeekViewWidget =\n/** @class */\nfunction (_super) {\n  __extends(PeekViewWidget, _super);\n\n  function PeekViewWidget(editor, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, editor, options) || this;\n\n    _this._onDidClose = new Emitter();\n    objects.mixin(_this.options, defaultOptions, false);\n    return _this;\n  }\n\n  PeekViewWidget.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._onDidClose.fire(this);\n  };\n\n  Object.defineProperty(PeekViewWidget.prototype, \"onDidClose\", {\n    get: function () {\n      return this._onDidClose.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  PeekViewWidget.prototype.style = function (styles) {\n    var options = this.options;\n\n    if (styles.headerBackgroundColor) {\n      options.headerBackgroundColor = styles.headerBackgroundColor;\n    }\n\n    if (styles.primaryHeadingColor) {\n      options.primaryHeadingColor = styles.primaryHeadingColor;\n    }\n\n    if (styles.secondaryHeadingColor) {\n      options.secondaryHeadingColor = styles.secondaryHeadingColor;\n    }\n\n    _super.prototype.style.call(this, styles);\n  };\n\n  PeekViewWidget.prototype._applyStyles = function () {\n    _super.prototype._applyStyles.call(this);\n\n    var options = this.options;\n\n    if (this._headElement && options.headerBackgroundColor) {\n      this._headElement.style.backgroundColor = options.headerBackgroundColor.toString();\n    }\n\n    if (this._primaryHeading && options.primaryHeadingColor) {\n      this._primaryHeading.style.color = options.primaryHeadingColor.toString();\n    }\n\n    if (this._secondaryHeading && options.secondaryHeadingColor) {\n      this._secondaryHeading.style.color = options.secondaryHeadingColor.toString();\n    }\n\n    if (this._bodyElement && options.frameColor) {\n      this._bodyElement.style.borderColor = options.frameColor.toString();\n    }\n  };\n\n  PeekViewWidget.prototype._fillContainer = function (container) {\n    this.setCssClass('peekview-widget');\n    this._headElement = dom.$('.head');\n    this._bodyElement = dom.$('.body');\n\n    this._fillHead(this._headElement);\n\n    this._fillBody(this._bodyElement);\n\n    container.appendChild(this._headElement);\n    container.appendChild(this._bodyElement);\n  };\n\n  PeekViewWidget.prototype._fillHead = function (container) {\n    var _this = this;\n\n    var titleElement = dom.$('.peekview-title');\n    dom.append(this._headElement, titleElement);\n    dom.addStandardDisposableListener(titleElement, 'click', function (event) {\n      return _this._onTitleClick(event);\n    });\n\n    this._fillTitleIcon(titleElement);\n\n    this._primaryHeading = dom.$('span.filename');\n    this._secondaryHeading = dom.$('span.dirname');\n    this._metaHeading = dom.$('span.meta');\n    dom.append(titleElement, this._primaryHeading, this._secondaryHeading, this._metaHeading);\n    var actionsContainer = dom.$('.peekview-actions');\n    dom.append(this._headElement, actionsContainer);\n\n    var actionBarOptions = this._getActionBarOptions();\n\n    this._actionbarWidget = new ActionBar(actionsContainer, actionBarOptions);\n\n    this._disposables.add(this._actionbarWidget);\n\n    this._actionbarWidget.push(new Action('peekview.close', nls.localize('label.close', \"Close\"), 'close-peekview-action', true, function () {\n      _this.dispose();\n\n      return Promise.resolve();\n    }), {\n      label: false,\n      icon: true\n    });\n  };\n\n  PeekViewWidget.prototype._fillTitleIcon = function (container) {};\n\n  PeekViewWidget.prototype._getActionBarOptions = function () {\n    return {};\n  };\n\n  PeekViewWidget.prototype._onTitleClick = function (event) {// implement me\n  };\n\n  PeekViewWidget.prototype.setTitle = function (primaryHeading, secondaryHeading) {\n    if (this._primaryHeading && this._secondaryHeading) {\n      this._primaryHeading.innerHTML = strings.escape(primaryHeading);\n\n      this._primaryHeading.setAttribute('aria-label', primaryHeading);\n\n      if (secondaryHeading) {\n        this._secondaryHeading.innerHTML = strings.escape(secondaryHeading);\n      } else {\n        dom.clearNode(this._secondaryHeading);\n      }\n    }\n  };\n\n  PeekViewWidget.prototype.setMetaTitle = function (value) {\n    if (this._metaHeading) {\n      if (value) {\n        this._metaHeading.innerHTML = strings.escape(value);\n      } else {\n        dom.clearNode(this._metaHeading);\n      }\n    }\n  };\n\n  PeekViewWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {\n    if (!this._isShowing && heightInPixel < 0) {\n      // Looks like the view zone got folded away!\n      this.dispose();\n      return;\n    }\n\n    var headHeight = Math.ceil(this.editor.getConfiguration().lineHeight * 1.2);\n    var bodyHeight = heightInPixel - (headHeight + 2\n    /* the border-top/bottom width*/\n    );\n\n    this._doLayoutHead(headHeight, widthInPixel);\n\n    this._doLayoutBody(bodyHeight, widthInPixel);\n  };\n\n  PeekViewWidget.prototype._doLayoutHead = function (heightInPixel, widthInPixel) {\n    if (this._headElement) {\n      this._headElement.style.height = heightInPixel + \"px\";\n      this._headElement.style.lineHeight = this._headElement.style.height;\n    }\n  };\n\n  PeekViewWidget.prototype._doLayoutBody = function (heightInPixel, widthInPixel) {\n    if (this._bodyElement) {\n      this._bodyElement.style.height = heightInPixel + \"px\";\n    }\n  };\n\n  return PeekViewWidget;\n}(ZoneWidget);\n\nexport { PeekViewWidget };","map":null,"metadata":{},"sourceType":"module"}