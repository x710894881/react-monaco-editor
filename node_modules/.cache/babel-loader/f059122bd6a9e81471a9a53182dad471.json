{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './indentGuides.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveIndentGuides, editorIndentGuides } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\n\nvar IndentGuidesOverlay =\n/** @class */\nfunction (_super) {\n  __extends(IndentGuidesOverlay, _super);\n\n  function IndentGuidesOverlay(context) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n    _this._primaryLineNumber = 0;\n    _this._lineHeight = _this._context.configuration.editor.lineHeight;\n    _this._spaceWidth = _this._context.configuration.editor.fontInfo.spaceWidth;\n    _this._enabled = _this._context.configuration.editor.viewInfo.renderIndentGuides;\n    _this._activeIndentEnabled = _this._context.configuration.editor.viewInfo.highlightActiveIndentGuide;\n    var wrappingColumn = _this._context.configuration.editor.wrappingInfo.wrappingColumn;\n    _this._maxIndentLeft = wrappingColumn === -1 ? -1 : wrappingColumn * _this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  IndentGuidesOverlay.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  IndentGuidesOverlay.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._lineHeight = this._context.configuration.editor.lineHeight;\n    }\n\n    if (e.fontInfo) {\n      this._spaceWidth = this._context.configuration.editor.fontInfo.spaceWidth;\n    }\n\n    if (e.viewInfo) {\n      this._enabled = this._context.configuration.editor.viewInfo.renderIndentGuides;\n      this._activeIndentEnabled = this._context.configuration.editor.viewInfo.highlightActiveIndentGuide;\n    }\n\n    if (e.wrappingInfo || e.fontInfo) {\n      var wrappingColumn = this._context.configuration.editor.wrappingInfo.wrappingColumn;\n      this._maxIndentLeft = wrappingColumn === -1 ? -1 : wrappingColumn * this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n    }\n\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onCursorStateChanged = function (e) {\n    var selection = e.selections[0];\n    var newPrimaryLineNumber = selection.isEmpty() ? selection.positionLineNumber : 0;\n\n    if (this._primaryLineNumber !== newPrimaryLineNumber) {\n      this._primaryLineNumber = newPrimaryLineNumber;\n      return true;\n    }\n\n    return false;\n  };\n\n  IndentGuidesOverlay.prototype.onDecorationsChanged = function (e) {\n    // true for inline decorations\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLinesChanged = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged; // || e.scrollWidthChanged;\n  };\n\n  IndentGuidesOverlay.prototype.onZonesChanged = function (e) {\n    return true;\n  };\n\n  IndentGuidesOverlay.prototype.onLanguageConfigurationChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n\n\n  IndentGuidesOverlay.prototype.prepareRender = function (ctx) {\n    if (!this._enabled) {\n      this._renderResult = null;\n      return;\n    }\n\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    var indentSize = this._context.model.getOptions().indentSize;\n\n    var indentWidth = indentSize * this._spaceWidth;\n    var scrollWidth = ctx.scrollWidth;\n    var lineHeight = this._lineHeight;\n\n    var indents = this._context.model.getLinesIndentGuides(visibleStartLineNumber, visibleEndLineNumber);\n\n    var activeIndentStartLineNumber = 0;\n    var activeIndentEndLineNumber = 0;\n    var activeIndentLevel = 0;\n\n    if (this._activeIndentEnabled && this._primaryLineNumber) {\n      var activeIndentInfo = this._context.model.getActiveIndentGuide(this._primaryLineNumber, visibleStartLineNumber, visibleEndLineNumber);\n\n      activeIndentStartLineNumber = activeIndentInfo.startLineNumber;\n      activeIndentEndLineNumber = activeIndentInfo.endLineNumber;\n      activeIndentLevel = activeIndentInfo.indent;\n    }\n\n    var output = [];\n\n    for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      var containsActiveIndentGuide = activeIndentStartLineNumber <= lineNumber && lineNumber <= activeIndentEndLineNumber;\n      var lineIndex = lineNumber - visibleStartLineNumber;\n      var indent = indents[lineIndex];\n      var result = '';\n      var leftMostVisiblePosition = ctx.visibleRangeForPosition(new Position(lineNumber, 1));\n      var left = leftMostVisiblePosition ? leftMostVisiblePosition.left : 0;\n\n      for (var i = 1; i <= indent; i++) {\n        var className = containsActiveIndentGuide && i === activeIndentLevel ? 'cigra' : 'cigr';\n        result += \"<div class=\\\"\" + className + \"\\\" style=\\\"left:\" + left + \"px;height:\" + lineHeight + \"px;width:\" + indentWidth + \"px\\\"></div>\";\n        left += indentWidth;\n\n        if (left > scrollWidth || this._maxIndentLeft > 0 && left > this._maxIndentLeft) {\n          break;\n        }\n      }\n\n      output[lineIndex] = result;\n    }\n\n    this._renderResult = output;\n  };\n\n  IndentGuidesOverlay.prototype.render = function (startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    var lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  };\n\n  return IndentGuidesOverlay;\n}(DynamicViewOverlay);\n\nexport { IndentGuidesOverlay };\nregisterThemingParticipant(function (theme, collector) {\n  var editorIndentGuidesColor = theme.getColor(editorIndentGuides);\n\n  if (editorIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigr { box-shadow: 1px 0 0 0 \" + editorIndentGuidesColor + \" inset; }\");\n  }\n\n  var editorActiveIndentGuidesColor = theme.getColor(editorActiveIndentGuides) || editorIndentGuidesColor;\n\n  if (editorActiveIndentGuidesColor) {\n    collector.addRule(\".monaco-editor .lines-content .cigra { box-shadow: 1px 0 0 0 \" + editorActiveIndentGuidesColor + \" inset; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}