{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nodes from '../parser/cssNodes.js';\nimport { Scanner } from '../parser/cssScanner.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\n\nvar Element =\n/** @class */\nfunction () {\n  function Element() {}\n\n  Element.prototype.findAttribute = function (name) {\n    if (this.attributes) {\n      for (var _i = 0, _a = this.attributes; _i < _a.length; _i++) {\n        var attribute = _a[_i];\n\n        if (attribute.name === name) {\n          return attribute.value;\n        }\n      }\n    }\n\n    return null;\n  };\n\n  Element.prototype.addChild = function (child) {\n    if (child instanceof Element) {\n      child.parent = this;\n    }\n\n    if (!this.children) {\n      this.children = [];\n    }\n\n    this.children.push(child);\n  };\n\n  Element.prototype.append = function (text) {\n    if (this.attributes) {\n      var last = this.attributes[this.attributes.length - 1];\n      last.value = last.value + text;\n    }\n  };\n\n  Element.prototype.prepend = function (text) {\n    if (this.attributes) {\n      var first = this.attributes[0];\n      first.value = text + first.value;\n    }\n  };\n\n  Element.prototype.findRoot = function () {\n    var curr = this;\n\n    while (curr.parent && !(curr.parent instanceof RootElement)) {\n      curr = curr.parent;\n    }\n\n    return curr;\n  };\n\n  Element.prototype.removeChild = function (child) {\n    if (this.children) {\n      var index = this.children.indexOf(child);\n\n      if (index !== -1) {\n        this.children.splice(index, 1);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Element.prototype.addAttr = function (name, value) {\n    if (!this.attributes) {\n      this.attributes = [];\n    }\n\n    for (var _i = 0, _a = this.attributes; _i < _a.length; _i++) {\n      var attribute = _a[_i];\n\n      if (attribute.name === name) {\n        attribute.value += ' ' + value;\n        return;\n      }\n    }\n\n    this.attributes.push({\n      name: name,\n      value: value\n    });\n  };\n\n  Element.prototype.clone = function (cloneChildren) {\n    if (cloneChildren === void 0) {\n      cloneChildren = true;\n    }\n\n    var elem = new Element();\n\n    if (this.attributes) {\n      elem.attributes = [];\n\n      for (var _i = 0, _a = this.attributes; _i < _a.length; _i++) {\n        var attribute = _a[_i];\n        elem.addAttr(attribute.name, attribute.value);\n      }\n    }\n\n    if (cloneChildren && this.children) {\n      elem.children = [];\n\n      for (var index = 0; index < this.children.length; index++) {\n        elem.addChild(this.children[index].clone());\n      }\n    }\n\n    return elem;\n  };\n\n  Element.prototype.cloneWithParent = function () {\n    var clone = this.clone(false);\n\n    if (this.parent && !(this.parent instanceof RootElement)) {\n      var parentClone = this.parent.cloneWithParent();\n      parentClone.addChild(clone);\n    }\n\n    return clone;\n  };\n\n  return Element;\n}();\n\nexport { Element };\n\nvar RootElement =\n/** @class */\nfunction (_super) {\n  __extends(RootElement, _super);\n\n  function RootElement() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return RootElement;\n}(Element);\n\nexport { RootElement };\n\nvar LabelElement =\n/** @class */\nfunction (_super) {\n  __extends(LabelElement, _super);\n\n  function LabelElement(label) {\n    var _this = _super.call(this) || this;\n\n    _this.addAttr('name', label);\n\n    return _this;\n  }\n\n  return LabelElement;\n}(Element);\n\nexport { LabelElement };\n\nvar MarkedStringPrinter =\n/** @class */\nfunction () {\n  function MarkedStringPrinter(quote) {\n    this.quote = quote; // empty\n  }\n\n  MarkedStringPrinter.prototype.print = function (element) {\n    this.result = [];\n\n    if (element instanceof RootElement) {\n      this.doPrint(element.children, 0);\n    } else {\n      this.doPrint([element], 0);\n    }\n\n    var value = this.result.join('\\n');\n    return [{\n      language: 'html',\n      value: value\n    }];\n  };\n\n  MarkedStringPrinter.prototype.doPrint = function (elements, indent) {\n    for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n      var element = elements_1[_i];\n      this.doPrintElement(element, indent);\n\n      if (element.children) {\n        this.doPrint(element.children, indent + 1);\n      }\n    }\n  };\n\n  MarkedStringPrinter.prototype.writeLine = function (level, content) {\n    var indent = new Array(level + 1).join('  ');\n    this.result.push(indent + content);\n  };\n\n  MarkedStringPrinter.prototype.doPrintElement = function (element, indent) {\n    var name = element.findAttribute('name'); // special case: a simple label\n\n    if (element instanceof LabelElement || name === '\\u2026') {\n      this.writeLine(indent, name);\n      return;\n    } // the real deal\n\n\n    var content = ['<']; // element name\n\n    if (name) {\n      content.push(name);\n    } else {\n      content.push('element');\n    } // attributes\n\n\n    if (element.attributes) {\n      for (var _i = 0, _a = element.attributes; _i < _a.length; _i++) {\n        var attr = _a[_i];\n\n        if (attr.name !== 'name') {\n          content.push(' ');\n          content.push(attr.name);\n          var value = attr.value;\n\n          if (value) {\n            content.push('=');\n            content.push(quotes.ensure(value, this.quote));\n          }\n        }\n      }\n    }\n\n    content.push('>');\n    this.writeLine(indent, content.join(''));\n  };\n\n  return MarkedStringPrinter;\n}();\n\nvar quotes;\n\n(function (quotes) {\n  function ensure(value, which) {\n    return which + remove(value) + which;\n  }\n\n  quotes.ensure = ensure;\n\n  function remove(value) {\n    var match = value.match(/^['\"](.*)[\"']$/);\n\n    if (match) {\n      return match[1];\n    }\n\n    return value;\n  }\n\n  quotes.remove = remove;\n})(quotes || (quotes = {}));\n\nexport function toElement(node, parentElement) {\n  var result = new Element();\n\n  for (var _i = 0, _a = node.getChildren(); _i < _a.length; _i++) {\n    var child = _a[_i];\n\n    switch (child.type) {\n      case nodes.NodeType.SelectorCombinator:\n        if (parentElement) {\n          var segments = child.getText().split('&');\n\n          if (segments.length === 1) {\n            // should not happen\n            result.addAttr('name', segments[0]);\n            break;\n          }\n\n          result = parentElement.cloneWithParent();\n\n          if (segments[0]) {\n            var root = result.findRoot();\n            root.prepend(segments[0]);\n          }\n\n          for (var i = 1; i < segments.length; i++) {\n            if (i > 1) {\n              var clone = parentElement.cloneWithParent();\n              result.addChild(clone.findRoot());\n              result = clone;\n            }\n\n            result.append(segments[i]);\n          }\n        }\n\n        break;\n\n      case nodes.NodeType.SelectorPlaceholder:\n        if (child.getText() === '@at-root') {\n          return result;\n        }\n\n      // fall through\n\n      case nodes.NodeType.ElementNameSelector:\n        var text = child.getText();\n        result.addAttr('name', text === '*' ? 'element' : unescape(text));\n        break;\n\n      case nodes.NodeType.ClassSelector:\n        result.addAttr('class', unescape(child.getText().substring(1)));\n        break;\n\n      case nodes.NodeType.IdentifierSelector:\n        result.addAttr('id', unescape(child.getText().substring(1)));\n        break;\n\n      case nodes.NodeType.MixinDeclaration:\n        result.addAttr('class', child.getName());\n        break;\n\n      case nodes.NodeType.PseudoSelector:\n        result.addAttr(unescape(child.getText()), '');\n        break;\n\n      case nodes.NodeType.AttributeSelector:\n        var selector = child;\n        var identifuer = selector.getIdentifier();\n\n        if (identifuer) {\n          var expression = selector.getValue();\n          var operator = selector.getOperator();\n          var value = void 0;\n\n          if (expression) {\n            switch (unescape(operator.getText())) {\n              case '|=':\n                // excatly or followed by -words\n                value = quotes.remove(unescape(expression.getText())) + \"-\\u2026\";\n                break;\n\n              case '^=':\n                // prefix\n                value = quotes.remove(unescape(expression.getText())) + \"\\u2026\";\n                break;\n\n              case '$=':\n                // suffix\n                value = \"\\u2026\" + quotes.remove(unescape(expression.getText()));\n                break;\n\n              case '~=':\n                // one of a list of words\n                value = \" \\u2026 \" + quotes.remove(unescape(expression.getText())) + \" \\u2026 \";\n                break;\n\n              case '*=':\n                // substring\n                value = \"\\u2026\" + quotes.remove(unescape(expression.getText())) + \"\\u2026\";\n                break;\n\n              default:\n                value = quotes.remove(unescape(expression.getText()));\n                break;\n            }\n          }\n\n          result.addAttr(unescape(identifuer.getText()), value);\n        }\n\n        break;\n    }\n  }\n\n  return result;\n}\n\nfunction unescape(content) {\n  var scanner = new Scanner();\n  scanner.setSource(content);\n  var token = scanner.scanUnquotedString();\n\n  if (token) {\n    return token.text;\n  }\n\n  return content;\n}\n\nfunction selectorToSpecificityMarkedString(node) {\n  //https://www.w3.org/TR/selectors-3/#specificity\n  function calculateScore(node) {\n    node.getChildren().forEach(function (element) {\n      switch (element.type) {\n        case nodes.NodeType.IdentifierSelector:\n          specificity[0] += 1; //a\n\n          break;\n\n        case nodes.NodeType.ClassSelector:\n        case nodes.NodeType.AttributeSelector:\n          specificity[1] += 1; //b\n\n          break;\n\n        case nodes.NodeType.ElementNameSelector:\n          //ignore universal selector\n          if (element.getText() === \"*\") {\n            break;\n          }\n\n          specificity[2] += 1; //c\n\n          break;\n\n        case nodes.NodeType.PseudoSelector:\n          if (element.getText().match(/^::/)) {\n            specificity[2] += 1; //c (pseudo element)\n          } else {\n            //ignore psuedo class NOT\n            if (element.getText().match(/^:not/i)) {\n              break;\n            }\n\n            specificity[1] += 1; //b (pseudo class)\n          }\n\n          break;\n      }\n\n      if (element.getChildren().length > 0) {\n        calculateScore(element);\n      }\n    });\n  }\n\n  var specificity = [0, 0, 0]; //a,b,c\n\n  calculateScore(node);\n  return localize.apply(void 0, ['specificity', \"[Selector Specificity](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity): ({0}, {1}, {2})\"].concat(specificity));\n}\n\nexport function selectorToMarkedString(node) {\n  var root = selectorToElement(node);\n  var markedStrings = new MarkedStringPrinter('\"').print(root);\n  markedStrings.push(selectorToSpecificityMarkedString(node));\n  return markedStrings;\n}\nexport function simpleSelectorToMarkedString(node) {\n  var element = toElement(node);\n  var markedStrings = new MarkedStringPrinter('\"').print(element);\n  markedStrings.push(selectorToSpecificityMarkedString(node));\n  return markedStrings;\n}\n\nvar SelectorElementBuilder =\n/** @class */\nfunction () {\n  function SelectorElementBuilder(element) {\n    this.prev = null;\n    this.element = element;\n  }\n\n  SelectorElementBuilder.prototype.processSelector = function (selector) {\n    var parentElement = null;\n\n    if (!(this.element instanceof RootElement)) {\n      if (selector.getChildren().some(function (c) {\n        return c.hasChildren() && c.getChild(0).type === nodes.NodeType.SelectorCombinator;\n      })) {\n        var curr = this.element.findRoot();\n\n        if (curr.parent instanceof RootElement) {\n          parentElement = this.element;\n          this.element = curr.parent;\n          this.element.removeChild(curr);\n          this.prev = null;\n        }\n      }\n    }\n\n    for (var _i = 0, _a = selector.getChildren(); _i < _a.length; _i++) {\n      var selectorChild = _a[_i];\n\n      if (selectorChild instanceof nodes.SimpleSelector) {\n        if (this.prev instanceof nodes.SimpleSelector) {\n          var labelElement = new LabelElement('\\u2026');\n          this.element.addChild(labelElement);\n          this.element = labelElement;\n        } else if (this.prev && (this.prev.matches('+') || this.prev.matches('~')) && this.element.parent) {\n          this.element = this.element.parent;\n        }\n\n        if (this.prev && this.prev.matches('~')) {\n          this.element.addChild(toElement(selectorChild));\n          this.element.addChild(new LabelElement('\\u22EE'));\n        }\n\n        var thisElement = toElement(selectorChild, parentElement);\n        var root = thisElement.findRoot();\n        this.element.addChild(root);\n        this.element = thisElement;\n      }\n\n      if (selectorChild instanceof nodes.SimpleSelector || selectorChild.type === nodes.NodeType.SelectorCombinatorParent || selectorChild.type === nodes.NodeType.SelectorCombinatorShadowPiercingDescendant || selectorChild.type === nodes.NodeType.SelectorCombinatorSibling || selectorChild.type === nodes.NodeType.SelectorCombinatorAllSiblings) {\n        this.prev = selectorChild;\n      }\n    }\n  };\n\n  return SelectorElementBuilder;\n}();\n\nfunction isNewSelectorContext(node) {\n  switch (node.type) {\n    case nodes.NodeType.MixinDeclaration:\n    case nodes.NodeType.Stylesheet:\n      return true;\n  }\n\n  return false;\n}\n\nexport function selectorToElement(node) {\n  if (node.matches('@at-root')) {\n    return null;\n  }\n\n  var root = new RootElement();\n  var parentRuleSets = [];\n\n  if (node.getParent() instanceof nodes.RuleSet) {\n    var parent = node.getParent().getParent(); // parent of the selector's ruleset\n\n    while (parent && !isNewSelectorContext(parent)) {\n      if (parent instanceof nodes.RuleSet) {\n        if (parent.getSelectors().matches('@at-root')) {\n          break;\n        }\n\n        parentRuleSets.push(parent);\n      }\n\n      parent = parent.getParent();\n    }\n  }\n\n  var builder = new SelectorElementBuilder(root);\n\n  for (var i = parentRuleSets.length - 1; i >= 0; i--) {\n    var selector = parentRuleSets[i].getSelectors().getChild(0);\n\n    if (selector) {\n      builder.processSelector(selector);\n    }\n  }\n\n  builder.processSelector(node);\n  return root;\n}","map":null,"metadata":{},"sourceType":"module"}