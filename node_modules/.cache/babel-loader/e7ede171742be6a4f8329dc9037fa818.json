{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Color } from '../../../../base/common/color.js';\n\nvar ParsedTokenThemeRule =\n/** @class */\nfunction () {\n  function ParsedTokenThemeRule(token, index, fontStyle, foreground, background) {\n    this.token = token;\n    this.index = index;\n    this.fontStyle = fontStyle;\n    this.foreground = foreground;\n    this.background = background;\n  }\n\n  return ParsedTokenThemeRule;\n}();\n\nexport { ParsedTokenThemeRule };\n/**\n * Parse a raw theme into rules.\n */\n\nexport function parseTokenTheme(source) {\n  if (!source || !Array.isArray(source)) {\n    return [];\n  }\n\n  var result = [],\n      resultLen = 0;\n\n  for (var i = 0, len = source.length; i < len; i++) {\n    var entry = source[i];\n    var fontStyle = -1\n    /* NotSet */\n    ;\n\n    if (typeof entry.fontStyle === 'string') {\n      fontStyle = 0\n      /* None */\n      ;\n      var segments = entry.fontStyle.split(' ');\n\n      for (var j = 0, lenJ = segments.length; j < lenJ; j++) {\n        var segment = segments[j];\n\n        switch (segment) {\n          case 'italic':\n            fontStyle = fontStyle | 1\n            /* Italic */\n            ;\n            break;\n\n          case 'bold':\n            fontStyle = fontStyle | 2\n            /* Bold */\n            ;\n            break;\n\n          case 'underline':\n            fontStyle = fontStyle | 4\n            /* Underline */\n            ;\n            break;\n        }\n      }\n    }\n\n    var foreground = null;\n\n    if (typeof entry.foreground === 'string') {\n      foreground = entry.foreground;\n    }\n\n    var background = null;\n\n    if (typeof entry.background === 'string') {\n      background = entry.background;\n    }\n\n    result[resultLen++] = new ParsedTokenThemeRule(entry.token || '', i, fontStyle, foreground, background);\n  }\n\n  return result;\n}\n/**\n * Resolve rules (i.e. inheritance).\n */\n\nfunction resolveParsedTokenThemeRules(parsedThemeRules, customTokenColors) {\n  // Sort rules lexicographically, and then by index if necessary\n  parsedThemeRules.sort(function (a, b) {\n    var r = strcmp(a.token, b.token);\n\n    if (r !== 0) {\n      return r;\n    }\n\n    return a.index - b.index;\n  }); // Determine defaults\n\n  var defaultFontStyle = 0\n  /* None */\n  ;\n  var defaultForeground = '000000';\n  var defaultBackground = 'ffffff';\n\n  while (parsedThemeRules.length >= 1 && parsedThemeRules[0].token === '') {\n    var incomingDefaults = parsedThemeRules.shift();\n\n    if (incomingDefaults.fontStyle !== -1\n    /* NotSet */\n    ) {\n        defaultFontStyle = incomingDefaults.fontStyle;\n      }\n\n    if (incomingDefaults.foreground !== null) {\n      defaultForeground = incomingDefaults.foreground;\n    }\n\n    if (incomingDefaults.background !== null) {\n      defaultBackground = incomingDefaults.background;\n    }\n  }\n\n  var colorMap = new ColorMap(); // start with token colors from custom token themes\n\n  for (var _i = 0, customTokenColors_1 = customTokenColors; _i < customTokenColors_1.length; _i++) {\n    var color = customTokenColors_1[_i];\n    colorMap.getId(color);\n  }\n\n  var foregroundColorId = colorMap.getId(defaultForeground);\n  var backgroundColorId = colorMap.getId(defaultBackground);\n  var defaults = new ThemeTrieElementRule(defaultFontStyle, foregroundColorId, backgroundColorId);\n  var root = new ThemeTrieElement(defaults);\n\n  for (var i = 0, len = parsedThemeRules.length; i < len; i++) {\n    var rule = parsedThemeRules[i];\n    root.insert(rule.token, rule.fontStyle, colorMap.getId(rule.foreground), colorMap.getId(rule.background));\n  }\n\n  return new TokenTheme(colorMap, root);\n}\n\nvar colorRegExp = /^#?([0-9A-Fa-f]{6})([0-9A-Fa-f]{2})?$/;\n\nvar ColorMap =\n/** @class */\nfunction () {\n  function ColorMap() {\n    this._lastColorId = 0;\n    this._id2color = [];\n    this._color2id = new Map();\n  }\n\n  ColorMap.prototype.getId = function (color) {\n    if (color === null) {\n      return 0;\n    }\n\n    var match = color.match(colorRegExp);\n\n    if (!match) {\n      throw new Error('Illegal value for token color: ' + color);\n    }\n\n    color = match[1].toUpperCase();\n\n    var value = this._color2id.get(color);\n\n    if (value) {\n      return value;\n    }\n\n    value = ++this._lastColorId;\n\n    this._color2id.set(color, value);\n\n    this._id2color[value] = Color.fromHex('#' + color);\n    return value;\n  };\n\n  ColorMap.prototype.getColorMap = function () {\n    return this._id2color.slice(0);\n  };\n\n  return ColorMap;\n}();\n\nexport { ColorMap };\n\nvar TokenTheme =\n/** @class */\nfunction () {\n  function TokenTheme(colorMap, root) {\n    this._colorMap = colorMap;\n    this._root = root;\n    this._cache = new Map();\n  }\n\n  TokenTheme.createFromRawTokenTheme = function (source, customTokenColors) {\n    return this.createFromParsedTokenTheme(parseTokenTheme(source), customTokenColors);\n  };\n\n  TokenTheme.createFromParsedTokenTheme = function (source, customTokenColors) {\n    return resolveParsedTokenThemeRules(source, customTokenColors);\n  };\n\n  TokenTheme.prototype.getColorMap = function () {\n    return this._colorMap.getColorMap();\n  };\n\n  TokenTheme.prototype._match = function (token) {\n    return this._root.match(token);\n  };\n\n  TokenTheme.prototype.match = function (languageId, token) {\n    // The cache contains the metadata without the language bits set.\n    var result = this._cache.get(token);\n\n    if (typeof result === 'undefined') {\n      var rule = this._match(token);\n\n      var standardToken = toStandardTokenType(token);\n      result = (rule.metadata | standardToken << 8\n      /* TOKEN_TYPE_OFFSET */\n      ) >>> 0;\n\n      this._cache.set(token, result);\n    }\n\n    return (result | languageId << 0\n    /* LANGUAGEID_OFFSET */\n    ) >>> 0;\n  };\n\n  return TokenTheme;\n}();\n\nexport { TokenTheme };\nvar STANDARD_TOKEN_TYPE_REGEXP = /\\b(comment|string|regex|regexp)\\b/;\nexport function toStandardTokenType(tokenType) {\n  var m = tokenType.match(STANDARD_TOKEN_TYPE_REGEXP);\n\n  if (!m) {\n    return 0\n    /* Other */\n    ;\n  }\n\n  switch (m[1]) {\n    case 'comment':\n      return 1\n      /* Comment */\n      ;\n\n    case 'string':\n      return 2\n      /* String */\n      ;\n\n    case 'regex':\n      return 4\n      /* RegEx */\n      ;\n\n    case 'regexp':\n      return 4\n      /* RegEx */\n      ;\n  }\n\n  throw new Error('Unexpected match for standard token type!');\n}\nexport function strcmp(a, b) {\n  if (a < b) {\n    return -1;\n  }\n\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n}\n\nvar ThemeTrieElementRule =\n/** @class */\nfunction () {\n  function ThemeTrieElementRule(fontStyle, foreground, background) {\n    this._fontStyle = fontStyle;\n    this._foreground = foreground;\n    this._background = background;\n    this.metadata = (this._fontStyle << 11\n    /* FONT_STYLE_OFFSET */\n    | this._foreground << 14\n    /* FOREGROUND_OFFSET */\n    | this._background << 23\n    /* BACKGROUND_OFFSET */\n    ) >>> 0;\n  }\n\n  ThemeTrieElementRule.prototype.clone = function () {\n    return new ThemeTrieElementRule(this._fontStyle, this._foreground, this._background);\n  };\n\n  ThemeTrieElementRule.prototype.acceptOverwrite = function (fontStyle, foreground, background) {\n    if (fontStyle !== -1\n    /* NotSet */\n    ) {\n        this._fontStyle = fontStyle;\n      }\n\n    if (foreground !== 0\n    /* None */\n    ) {\n        this._foreground = foreground;\n      }\n\n    if (background !== 0\n    /* None */\n    ) {\n        this._background = background;\n      }\n\n    this.metadata = (this._fontStyle << 11\n    /* FONT_STYLE_OFFSET */\n    | this._foreground << 14\n    /* FOREGROUND_OFFSET */\n    | this._background << 23\n    /* BACKGROUND_OFFSET */\n    ) >>> 0;\n  };\n\n  return ThemeTrieElementRule;\n}();\n\nexport { ThemeTrieElementRule };\n\nvar ThemeTrieElement =\n/** @class */\nfunction () {\n  function ThemeTrieElement(mainRule) {\n    this._mainRule = mainRule;\n    this._children = new Map();\n  }\n\n  ThemeTrieElement.prototype.match = function (token) {\n    if (token === '') {\n      return this._mainRule;\n    }\n\n    var dotIndex = token.indexOf('.');\n    var head;\n    var tail;\n\n    if (dotIndex === -1) {\n      head = token;\n      tail = '';\n    } else {\n      head = token.substring(0, dotIndex);\n      tail = token.substring(dotIndex + 1);\n    }\n\n    var child = this._children.get(head);\n\n    if (typeof child !== 'undefined') {\n      return child.match(tail);\n    }\n\n    return this._mainRule;\n  };\n\n  ThemeTrieElement.prototype.insert = function (token, fontStyle, foreground, background) {\n    if (token === '') {\n      // Merge into the main rule\n      this._mainRule.acceptOverwrite(fontStyle, foreground, background);\n\n      return;\n    }\n\n    var dotIndex = token.indexOf('.');\n    var head;\n    var tail;\n\n    if (dotIndex === -1) {\n      head = token;\n      tail = '';\n    } else {\n      head = token.substring(0, dotIndex);\n      tail = token.substring(dotIndex + 1);\n    }\n\n    var child = this._children.get(head);\n\n    if (typeof child === 'undefined') {\n      child = new ThemeTrieElement(this._mainRule.clone());\n\n      this._children.set(head, child);\n    }\n\n    child.insert(tail, fontStyle, foreground, background);\n  };\n\n  return ThemeTrieElement;\n}();\n\nexport { ThemeTrieElement };\nexport function generateTokensCSSForColorMap(colorMap) {\n  var rules = [];\n\n  for (var i = 1, len = colorMap.length; i < len; i++) {\n    var color = colorMap[i];\n    rules[i] = \".mtk\" + i + \" { color: \" + color + \"; }\";\n  }\n\n  rules.push('.mtki { font-style: italic; }');\n  rules.push('.mtkb { font-weight: bold; }');\n  rules.push('.mtku { text-decoration: underline; text-underline-position: under; }');\n  return rules.join('\\n');\n}","map":null,"metadata":{},"sourceType":"module"}