{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { sanitizeRanges } from './syntaxRangeProvider.js';\nexport var ID_INIT_PROVIDER = 'init';\n\nvar InitializingRangeProvider =\n/** @class */\nfunction () {\n  function InitializingRangeProvider(editorModel, initialRanges, onTimeout, timeoutTime) {\n    this.editorModel = editorModel;\n    this.id = ID_INIT_PROVIDER;\n\n    if (initialRanges.length) {\n      var toDecorationRange = function (range) {\n        return {\n          range: {\n            startLineNumber: range.startLineNumber,\n            startColumn: 0,\n            endLineNumber: range.endLineNumber,\n            endColumn: editorModel.getLineLength(range.endLineNumber)\n          },\n          options: {\n            stickiness: 1\n            /* NeverGrowsWhenTypingAtEdges */\n\n          }\n        };\n      };\n\n      this.decorationIds = editorModel.deltaDecorations([], initialRanges.map(toDecorationRange));\n      this.timeout = setTimeout(onTimeout, timeoutTime);\n    }\n  }\n\n  InitializingRangeProvider.prototype.dispose = function () {\n    if (this.decorationIds) {\n      this.editorModel.deltaDecorations(this.decorationIds, []);\n      this.decorationIds = undefined;\n    }\n\n    if (typeof this.timeout === 'number') {\n      clearTimeout(this.timeout);\n      this.timeout = undefined;\n    }\n  };\n\n  InitializingRangeProvider.prototype.compute = function (cancelationToken) {\n    var foldingRangeData = [];\n\n    if (this.decorationIds) {\n      for (var _i = 0, _a = this.decorationIds; _i < _a.length; _i++) {\n        var id = _a[_i];\n        var range = this.editorModel.getDecorationRange(id);\n\n        if (range) {\n          foldingRangeData.push({\n            start: range.startLineNumber,\n            end: range.endLineNumber,\n            rank: 1\n          });\n        }\n      }\n    }\n\n    return Promise.resolve(sanitizeRanges(foldingRangeData, Number.MAX_VALUE));\n  };\n\n  return InitializingRangeProvider;\n}();\n\nexport { InitializingRangeProvider };","map":null,"metadata":{},"sourceType":"module"}