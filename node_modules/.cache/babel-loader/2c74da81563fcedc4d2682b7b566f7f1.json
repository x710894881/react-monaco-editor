{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//',\n    blockComment: ['/*', '*/']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }]\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.objective-c',\n  keywords: ['#import', '#include', '#define', '#else', '#endif', '#if', '#ifdef', '#ifndef', '#ident', '#undef', '@class', '@defs', '@dynamic', '@encode', '@end', '@implementation', '@interface', '@package', '@private', '@protected', '@property', '@protocol', '@public', '@selector', '@synthesize', '__declspec', 'assign', 'auto', 'BOOL', 'break', 'bycopy', 'byref', 'case', 'char', 'Class', 'const', 'copy', 'continue', 'default', 'do', 'double', 'else', 'enum', 'extern', 'FALSE', 'false', 'float', 'for', 'goto', 'if', 'in', 'int', 'id', 'inout', 'IMP', 'long', 'nil', 'nonatomic', 'NULL', 'oneway', 'out', 'private', 'public', 'protected', 'readwrite', 'readonly', 'register', 'return', 'SEL', 'self', 'short', 'signed', 'sizeof', 'static', 'struct', 'super', 'switch', 'typedef', 'TRUE', 'true', 'union', 'unsigned', 'volatile', 'void', 'while'],\n  decpart: /\\d(_?\\d)*/,\n  decimal: /0|@decpart/,\n  tokenizer: {\n    root: [{\n      include: '@comments'\n    }, {\n      include: '@whitespace'\n    }, {\n      include: '@numbers'\n    }, {\n      include: '@strings'\n    }, [/[,:;]/, 'delimiter'], [/[{}\\[\\]()<>]/, '@brackets'], [/[a-zA-Z@#]\\w*/, {\n      cases: {\n        '@keywords': 'keyword',\n        '@default': 'identifier'\n      }\n    }], [/[<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,]|and\\\\b|or\\\\b|not\\\\b]/, 'operator']],\n    whitespace: [[/\\s+/, 'white']],\n    comments: [['\\\\/\\\\*', 'comment', '@comment'], ['\\\\/\\\\/+.*', 'comment']],\n    comment: [['\\\\*\\\\/', 'comment', '@pop'], ['.', 'comment']],\n    numbers: [[/0[xX][0-9a-fA-F]*(_?[0-9a-fA-F])*/, 'number.hex'], [/@decimal((\\.@decpart)?([eE][\\-+]?@decpart)?)[fF]*/, {\n      cases: {\n        '(\\\\d)*': 'number',\n        '$0': 'number.float'\n      }\n    }]],\n    // Recognize strings, including those broken across lines with \\ (but not without)\n    strings: [[/'$/, 'string.escape', '@popall'], [/'/, 'string.escape', '@stringBody'], [/\"$/, 'string.escape', '@popall'], [/\"/, 'string.escape', '@dblStringBody']],\n    stringBody: [[/[^\\\\']+$/, 'string', '@popall'], [/[^\\\\']+/, 'string'], [/\\\\./, 'string'], [/'/, 'string.escape', '@popall'], [/\\\\$/, 'string']],\n    dblStringBody: [[/[^\\\\\"]+$/, 'string', '@popall'], [/[^\\\\\"]+/, 'string'], [/\\\\./, 'string'], [/\"/, 'string.escape', '@popall'], [/\\\\$/, 'string']]\n  }\n};","map":null,"metadata":{},"sourceType":"module"}