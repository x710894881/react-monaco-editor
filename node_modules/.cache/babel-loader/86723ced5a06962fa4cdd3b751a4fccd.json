{"ast":null,"code":"export function memoize(target, key, descriptor) {\n  var fnKey = null;\n  var fn = null;\n\n  if (typeof descriptor.value === 'function') {\n    fnKey = 'value';\n    fn = descriptor.value;\n\n    if (fn.length !== 0) {\n      console.warn('Memoize should only be used in functions with zero parameters');\n    }\n  } else if (typeof descriptor.get === 'function') {\n    fnKey = 'get';\n    fn = descriptor.get;\n  }\n\n  if (!fn) {\n    throw new Error('not supported');\n  }\n\n  var memoizeKey = \"$memoize$\" + key;\n\n  descriptor[fnKey] = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    if (!this.hasOwnProperty(memoizeKey)) {\n      Object.defineProperty(this, memoizeKey, {\n        configurable: false,\n        enumerable: false,\n        writable: false,\n        value: fn.apply(this, args)\n      });\n    }\n\n    return this[memoizeKey];\n  };\n}","map":null,"metadata":{},"sourceType":"module"}