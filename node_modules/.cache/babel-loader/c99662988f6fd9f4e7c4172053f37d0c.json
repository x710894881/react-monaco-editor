{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Registry } from '../../registry/common/platform.js';\nimport * as types from '../../../base/common/types.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nexport var Extensions = {\n  Configuration: 'base.contributions.configuration'\n};\nexport var allSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var applicationSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var machineOverridableSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var windowSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var resourceSettings = {\n  properties: {},\n  patternProperties: {}\n};\nexport var editorConfigurationSchemaId = 'vscode://schemas/settings/editor';\nvar contributionRegistry = Registry.as(JSONExtensions.JSONContribution);\n\nvar ConfigurationRegistry =\n/** @class */\nfunction () {\n  function ConfigurationRegistry() {\n    this.overrideIdentifiers = [];\n    this._onDidSchemaChange = new Emitter();\n    this._onDidUpdateConfiguration = new Emitter();\n    this.defaultOverridesConfigurationNode = {\n      id: 'defaultOverrides',\n      title: nls.localize('defaultConfigurations.title', \"Default Configuration Overrides\"),\n      properties: {}\n    };\n    this.configurationContributors = [this.defaultOverridesConfigurationNode];\n    this.editorConfigurationSchema = {\n      properties: {},\n      patternProperties: {},\n      additionalProperties: false,\n      errorMessage: 'Unknown editor configuration setting',\n      allowsTrailingCommas: true,\n      allowComments: true\n    };\n    this.configurationProperties = {};\n    this.excludedConfigurationProperties = {};\n    this.computeOverridePropertyPattern();\n    contributionRegistry.registerSchema(editorConfigurationSchemaId, this.editorConfigurationSchema);\n  }\n\n  ConfigurationRegistry.prototype.registerConfiguration = function (configuration, validate) {\n    if (validate === void 0) {\n      validate = true;\n    }\n\n    this.registerConfigurations([configuration], validate);\n  };\n\n  ConfigurationRegistry.prototype.registerConfigurations = function (configurations, validate) {\n    var _this = this;\n\n    if (validate === void 0) {\n      validate = true;\n    }\n\n    var properties = [];\n    configurations.forEach(function (configuration) {\n      properties.push.apply(properties, _this.validateAndRegisterProperties(configuration, validate)); // fills in defaults\n\n      _this.configurationContributors.push(configuration);\n\n      _this.registerJSONConfiguration(configuration);\n\n      _this.updateSchemaForOverrideSettingsConfiguration(configuration);\n    });\n\n    this._onDidSchemaChange.fire();\n\n    this._onDidUpdateConfiguration.fire(properties);\n  };\n\n  ConfigurationRegistry.prototype.registerOverrideIdentifiers = function (overrideIdentifiers) {\n    var _a;\n\n    (_a = this.overrideIdentifiers).push.apply(_a, overrideIdentifiers);\n\n    this.updateOverridePropertyPatternKey();\n  };\n\n  ConfigurationRegistry.prototype.validateAndRegisterProperties = function (configuration, validate, scope, overridable) {\n    if (validate === void 0) {\n      validate = true;\n    }\n\n    if (scope === void 0) {\n      scope = 3\n      /* WINDOW */\n      ;\n    }\n\n    if (overridable === void 0) {\n      overridable = false;\n    }\n\n    scope = types.isUndefinedOrNull(configuration.scope) ? scope : configuration.scope;\n    overridable = configuration.overridable || overridable;\n    var propertyKeys = [];\n    var properties = configuration.properties;\n\n    if (properties) {\n      for (var key in properties) {\n        var message = void 0;\n\n        if (validate && (message = validateProperty(key))) {\n          console.warn(message);\n          delete properties[key];\n          continue;\n        } // fill in default values\n\n\n        var property = properties[key];\n        var defaultValue = property.default;\n\n        if (types.isUndefined(defaultValue)) {\n          property.default = getDefaultValue(property.type);\n        } // Inherit overridable property from parent\n\n\n        if (overridable) {\n          property.overridable = true;\n        }\n\n        if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n          property.scope = undefined; // No scope for overridable properties `[${identifier}]`\n        } else {\n          property.scope = types.isUndefinedOrNull(property.scope) ? scope : property.scope;\n        } // Add to properties maps\n        // Property is included by default if 'included' is unspecified\n\n\n        if (properties[key].hasOwnProperty('included') && !properties[key].included) {\n          this.excludedConfigurationProperties[key] = properties[key];\n          delete properties[key];\n          continue;\n        } else {\n          this.configurationProperties[key] = properties[key];\n        }\n\n        propertyKeys.push(key);\n      }\n    }\n\n    var subNodes = configuration.allOf;\n\n    if (subNodes) {\n      for (var _i = 0, subNodes_1 = subNodes; _i < subNodes_1.length; _i++) {\n        var node = subNodes_1[_i];\n        propertyKeys.push.apply(propertyKeys, this.validateAndRegisterProperties(node, validate, scope, overridable));\n      }\n    }\n\n    return propertyKeys;\n  };\n\n  ConfigurationRegistry.prototype.getConfigurationProperties = function () {\n    return this.configurationProperties;\n  };\n\n  ConfigurationRegistry.prototype.registerJSONConfiguration = function (configuration) {\n    function register(configuration) {\n      var properties = configuration.properties;\n\n      if (properties) {\n        for (var key in properties) {\n          allSettings.properties[key] = properties[key];\n\n          switch (properties[key].scope) {\n            case 1\n            /* APPLICATION */\n            :\n              applicationSettings.properties[key] = properties[key];\n              break;\n\n            case 2\n            /* MACHINE */\n            :\n              machineSettings.properties[key] = properties[key];\n              break;\n\n            case 5\n            /* MACHINE_OVERRIDABLE */\n            :\n              machineOverridableSettings.properties[key] = properties[key];\n              break;\n\n            case 3\n            /* WINDOW */\n            :\n              windowSettings.properties[key] = properties[key];\n              break;\n\n            case 4\n            /* RESOURCE */\n            :\n              resourceSettings.properties[key] = properties[key];\n              break;\n          }\n        }\n      }\n\n      var subNodes = configuration.allOf;\n\n      if (subNodes) {\n        subNodes.forEach(register);\n      }\n    }\n\n    register(configuration);\n  };\n\n  ConfigurationRegistry.prototype.updateSchemaForOverrideSettingsConfiguration = function (configuration) {\n    if (configuration.id !== SETTINGS_OVERRRIDE_NODE_ID) {\n      this.update(configuration);\n      contributionRegistry.registerSchema(editorConfigurationSchemaId, this.editorConfigurationSchema);\n    }\n  };\n\n  ConfigurationRegistry.prototype.updateOverridePropertyPatternKey = function () {\n    var patternProperties = allSettings.patternProperties[this.overridePropertyPattern];\n\n    if (!patternProperties) {\n      patternProperties = {\n        type: 'object',\n        description: nls.localize('overrideSettings.defaultDescription', \"Configure editor settings to be overridden for a language.\"),\n        errorMessage: 'Unknown Identifier. Use language identifiers',\n        $ref: editorConfigurationSchemaId\n      };\n    }\n\n    delete allSettings.patternProperties[this.overridePropertyPattern];\n    delete applicationSettings.patternProperties[this.overridePropertyPattern];\n    delete machineSettings.patternProperties[this.overridePropertyPattern];\n    delete machineOverridableSettings.patternProperties[this.overridePropertyPattern];\n    delete windowSettings.patternProperties[this.overridePropertyPattern];\n    delete resourceSettings.patternProperties[this.overridePropertyPattern];\n    this.computeOverridePropertyPattern();\n    allSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n    applicationSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n    machineSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n    machineOverridableSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n    windowSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n    resourceSettings.patternProperties[this.overridePropertyPattern] = patternProperties;\n\n    this._onDidSchemaChange.fire();\n  };\n\n  ConfigurationRegistry.prototype.update = function (configuration) {\n    var _this = this;\n\n    var properties = configuration.properties;\n\n    if (properties) {\n      for (var key in properties) {\n        if (properties[key].overridable) {\n          this.editorConfigurationSchema.properties[key] = this.getConfigurationProperties()[key];\n        }\n      }\n    }\n\n    var subNodes = configuration.allOf;\n\n    if (subNodes) {\n      subNodes.forEach(function (subNode) {\n        return _this.update(subNode);\n      });\n    }\n  };\n\n  ConfigurationRegistry.prototype.computeOverridePropertyPattern = function () {\n    this.overridePropertyPattern = this.overrideIdentifiers.length ? OVERRIDE_PATTERN_WITH_SUBSTITUTION.replace('${0}', this.overrideIdentifiers.map(function (identifier) {\n      return strings.createRegExp(identifier, false).source;\n    }).join('|')) : OVERRIDE_PROPERTY;\n  };\n\n  return ConfigurationRegistry;\n}();\n\nvar SETTINGS_OVERRRIDE_NODE_ID = 'override';\nvar OVERRIDE_PROPERTY = '\\\\[.*\\\\]$';\nvar OVERRIDE_PATTERN_WITH_SUBSTITUTION = '\\\\[(${0})\\\\]$';\nexport var OVERRIDE_PROPERTY_PATTERN = new RegExp(OVERRIDE_PROPERTY);\nexport function getDefaultValue(type) {\n  var t = Array.isArray(type) ? type[0] : type;\n\n  switch (t) {\n    case 'boolean':\n      return false;\n\n    case 'integer':\n    case 'number':\n      return 0;\n\n    case 'string':\n      return '';\n\n    case 'array':\n      return [];\n\n    case 'object':\n      return {};\n\n    default:\n      return null;\n  }\n}\nvar configurationRegistry = new ConfigurationRegistry();\nRegistry.add(Extensions.Configuration, configurationRegistry);\nexport function validateProperty(property) {\n  if (OVERRIDE_PROPERTY_PATTERN.test(property)) {\n    return nls.localize('config.property.languageDefault', \"Cannot register '{0}'. This matches property pattern '\\\\\\\\[.*\\\\\\\\]$' for describing language specific editor settings. Use 'configurationDefaults' contribution.\", property);\n  }\n\n  if (configurationRegistry.getConfigurationProperties()[property] !== undefined) {\n    return nls.localize('config.property.duplicate', \"Cannot register '{0}'. This property is already registered.\", property);\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}