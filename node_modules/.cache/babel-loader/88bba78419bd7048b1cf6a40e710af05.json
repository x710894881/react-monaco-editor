{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Schemas } from '../../../base/common/network.js';\nimport { DataUri, basenameOrAuthority } from '../../../base/common/resources.js';\nimport { PLAINTEXT_MODE_ID } from '../modes/modesRegistry.js';\nimport { FileKind } from '../../../platform/files/common/files.js';\nexport function getIconClasses(modelService, modeService, resource, fileKind) {\n  // we always set these base classes even if we do not have a path\n  var classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n\n  if (resource) {\n    // Get the path and name of the resource. For data-URIs, we need to parse specially\n    var name_1;\n\n    if (resource.scheme === Schemas.data) {\n      var metadata = DataUri.parseMetaData(resource);\n      name_1 = metadata.get(DataUri.META_DATA_LABEL);\n    } else {\n      name_1 = cssEscape(basenameOrAuthority(resource).toLowerCase());\n    } // Folders\n\n\n    if (fileKind === FileKind.FOLDER) {\n      classes.push(name_1 + \"-name-folder-icon\");\n    } // Files\n    else {\n        // Name & Extension(s)\n        if (name_1) {\n          classes.push(name_1 + \"-name-file-icon\");\n          var dotSegments = name_1.split('.');\n\n          for (var i = 1; i < dotSegments.length; i++) {\n            classes.push(dotSegments.slice(i).join('.') + \"-ext-file-icon\"); // add each combination of all found extensions if more than one\n          }\n\n          classes.push(\"ext-file-icon\"); // extra segment to increase file-ext score\n        } // Detected Mode\n\n\n        var detectedModeId = detectModeId(modelService, modeService, resource);\n\n        if (detectedModeId) {\n          classes.push(cssEscape(detectedModeId) + \"-lang-file-icon\");\n        }\n      }\n  }\n\n  return classes;\n}\nexport function detectModeId(modelService, modeService, resource) {\n  if (!resource) {\n    return null; // we need a resource at least\n  }\n\n  var modeId = null; // Data URI: check for encoded metadata\n\n  if (resource.scheme === Schemas.data) {\n    var metadata = DataUri.parseMetaData(resource);\n    var mime = metadata.get(DataUri.META_DATA_MIME);\n\n    if (mime) {\n      modeId = modeService.getModeId(mime);\n    }\n  } // Any other URI: check for model if existing\n  else {\n      var model = modelService.getModel(resource);\n\n      if (model) {\n        modeId = model.getModeId();\n      }\n    } // only take if the mode is specific (aka no just plain text)\n\n\n  if (modeId && modeId !== PLAINTEXT_MODE_ID) {\n    return modeId;\n  } // otherwise fallback to path based detection\n\n\n  return modeService.getModeIdByFilepathOrFirstLine(resource);\n}\nexport function cssEscape(val) {\n  return val.replace(/\\s/g, '\\\\$&'); // make sure to not introduce CSS classes from files that contain whitespace\n}","map":null,"metadata":{},"sourceType":"module"}