{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar _this = this;\n\nimport { first } from '../../../base/common/async.js';\nimport { assign } from '../../../base/common/objects.js';\nimport { onUnexpectedExternalError, canceled, isPromiseCanceledError } from '../../../base/common/errors.js';\nimport { registerDefaultLanguageCommand } from '../../browser/editorExtensions.js';\nimport * as modes from '../../common/modes.js';\nimport { RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { Range } from '../../common/core/range.js';\nimport { FuzzyScore } from '../../../base/common/filters.js';\nimport { isDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nexport var Context = {\n  Visible: new RawContextKey('suggestWidgetVisible', false),\n  MultipleSuggestions: new RawContextKey('suggestWidgetMultipleSuggestions', false),\n  MakesTextEdit: new RawContextKey('suggestionMakesTextEdit', true),\n  AcceptSuggestionsOnEnter: new RawContextKey('acceptSuggestionOnEnter', true)\n};\n\nvar CompletionItem =\n/** @class */\nfunction () {\n  function CompletionItem(position, completion, container, provider, model) {\n    this.position = position;\n    this.completion = completion;\n    this.container = container;\n    this.provider = provider; // sorting, filtering\n\n    this.score = FuzzyScore.Default;\n    this.distance = 0; // ensure lower-variants (perf)\n\n    this.labelLow = completion.label.toLowerCase();\n    this.sortTextLow = completion.sortText && completion.sortText.toLowerCase();\n    this.filterTextLow = completion.filterText && completion.filterText.toLowerCase(); // create the suggestion resolver\n\n    var resolveCompletionItem = provider.resolveCompletionItem;\n\n    if (typeof resolveCompletionItem !== 'function') {\n      this.resolve = function () {\n        return Promise.resolve();\n      };\n    } else {\n      var cached_1;\n\n      this.resolve = function (token) {\n        if (!cached_1) {\n          var isDone_1 = false;\n          cached_1 = Promise.resolve(resolveCompletionItem.call(provider, model, position, completion, token)).then(function (value) {\n            assign(completion, value);\n            isDone_1 = true;\n          }, function (err) {\n            if (isPromiseCanceledError(err)) {\n              // the IPC queue will reject the request with the\n              // cancellation error -> reset cached\n              cached_1 = undefined;\n            }\n          });\n          token.onCancellationRequested(function () {\n            if (!isDone_1) {\n              // cancellation after the request has been\n              // dispatched -> reset cache\n              cached_1 = undefined;\n            }\n          });\n        }\n\n        return cached_1;\n      };\n    }\n  }\n\n  return CompletionItem;\n}();\n\nexport { CompletionItem };\n\nvar CompletionOptions =\n/** @class */\nfunction () {\n  function CompletionOptions(snippetSortOrder, kindFilter, providerFilter) {\n    if (snippetSortOrder === void 0) {\n      snippetSortOrder = 2\n      /* Bottom */\n      ;\n    }\n\n    if (kindFilter === void 0) {\n      kindFilter = new Set();\n    }\n\n    if (providerFilter === void 0) {\n      providerFilter = new Set();\n    }\n\n    this.snippetSortOrder = snippetSortOrder;\n    this.kindFilter = kindFilter;\n    this.providerFilter = providerFilter;\n  }\n\n  CompletionOptions.default = new CompletionOptions();\n  return CompletionOptions;\n}();\n\nexport { CompletionOptions };\n\nvar _snippetSuggestSupport;\n\nexport function getSnippetSuggestSupport() {\n  return _snippetSuggestSupport;\n}\nexport function provideSuggestionItems(model, position, options, context, token) {\n  if (options === void 0) {\n    options = CompletionOptions.default;\n  }\n\n  if (context === void 0) {\n    context = {\n      triggerKind: 0\n      /* Invoke */\n\n    };\n  }\n\n  if (token === void 0) {\n    token = CancellationToken.None;\n  }\n\n  var wordUntil = model.getWordUntilPosition(position);\n  var defaultRange = new Range(position.lineNumber, wordUntil.startColumn, position.lineNumber, wordUntil.endColumn);\n  position = position.clone(); // get provider groups, always add snippet suggestion provider\n\n  var supports = modes.CompletionProviderRegistry.orderedGroups(model); // add snippets provider unless turned off\n\n  if (!options.kindFilter.has(25\n  /* Snippet */\n  ) && _snippetSuggestSupport) {\n    supports.unshift([_snippetSuggestSupport]);\n  }\n\n  var allSuggestions = [];\n  var disposables = new DisposableStore();\n  var hasResult = false; // add suggestions from contributed providers - providers are ordered in groups of\n  // equal score and once a group produces a result the process stops\n\n  var factory = supports.map(function (supports) {\n    return function () {\n      // for each support in the group ask for suggestions\n      return Promise.all(supports.map(function (provider) {\n        if (options.providerFilter.size > 0 && !options.providerFilter.has(provider)) {\n          return undefined;\n        }\n\n        return Promise.resolve(provider.provideCompletionItems(model, position, context, token)).then(function (container) {\n          var len = allSuggestions.length;\n\n          if (container) {\n            for (var _i = 0, _a = container.suggestions || []; _i < _a.length; _i++) {\n              var suggestion = _a[_i];\n\n              if (!options.kindFilter.has(suggestion.kind)) {\n                // fill in default range when missing\n                if (!suggestion.range) {\n                  suggestion.range = defaultRange;\n                }\n\n                allSuggestions.push(new CompletionItem(position, suggestion, container, provider, model));\n              }\n            }\n\n            if (isDisposable(container)) {\n              disposables.add(container);\n            }\n          }\n\n          if (len !== allSuggestions.length && provider !== _snippetSuggestSupport) {\n            hasResult = true;\n          }\n        }, onUnexpectedExternalError);\n      }));\n    };\n  });\n  var result = first(factory, function () {\n    // stop on result or cancellation\n    return hasResult || token.isCancellationRequested;\n  }).then(function () {\n    if (token.isCancellationRequested) {\n      disposables.dispose();\n      return Promise.reject(canceled());\n    }\n\n    return allSuggestions.sort(getSuggestionComparator(options.snippetSortOrder));\n  }); // result.then(items => {\n  // \tconsole.log(model.getWordUntilPosition(position), items.map(item => `${item.suggestion.label}, type=${item.suggestion.type}, incomplete?${item.container.incomplete}, overwriteBefore=${item.suggestion.overwriteBefore}`));\n  // \treturn items;\n  // }, err => {\n  // \tconsole.warn(model.getWordUntilPosition(position), err);\n  // });\n\n  return result;\n}\n\nfunction defaultComparator(a, b) {\n  // check with 'sortText'\n  if (a.sortTextLow && b.sortTextLow) {\n    if (a.sortTextLow < b.sortTextLow) {\n      return -1;\n    } else if (a.sortTextLow > b.sortTextLow) {\n      return 1;\n    }\n  } // check with 'label'\n\n\n  if (a.completion.label < b.completion.label) {\n    return -1;\n  } else if (a.completion.label > b.completion.label) {\n    return 1;\n  } // check with 'type'\n\n\n  return a.completion.kind - b.completion.kind;\n}\n\nfunction snippetUpComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 25\n    /* Snippet */\n    ) {\n        return -1;\n      } else if (b.completion.kind === 25\n    /* Snippet */\n    ) {\n        return 1;\n      }\n  }\n\n  return defaultComparator(a, b);\n}\n\nfunction snippetDownComparator(a, b) {\n  if (a.completion.kind !== b.completion.kind) {\n    if (a.completion.kind === 25\n    /* Snippet */\n    ) {\n        return 1;\n      } else if (b.completion.kind === 25\n    /* Snippet */\n    ) {\n        return -1;\n      }\n  }\n\n  return defaultComparator(a, b);\n}\n\nvar _snippetComparators = new Map();\n\n_snippetComparators.set(0\n/* Top */\n, snippetUpComparator);\n\n_snippetComparators.set(2\n/* Bottom */\n, snippetDownComparator);\n\n_snippetComparators.set(1\n/* Inline */\n, defaultComparator);\n\nexport function getSuggestionComparator(snippetConfig) {\n  return _snippetComparators.get(snippetConfig);\n}\nregisterDefaultLanguageCommand('_executeCompletionItemProvider', function (model, position, args) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var result, disposables, resolving, maxItemsToResolve, items, _i, items_1, item;\n\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          result = {\n            incomplete: false,\n            suggestions: []\n          };\n          disposables = new DisposableStore();\n          resolving = [];\n          maxItemsToResolve = args['maxItemsToResolve'] || 0;\n          return [4\n          /*yield*/\n          , provideSuggestionItems(model, position)];\n\n        case 1:\n          items = _a.sent();\n\n          for (_i = 0, items_1 = items; _i < items_1.length; _i++) {\n            item = items_1[_i];\n\n            if (resolving.length < maxItemsToResolve) {\n              resolving.push(item.resolve(CancellationToken.None));\n            }\n\n            result.incomplete = result.incomplete || item.container.incomplete;\n            result.suggestions.push(item.completion);\n\n            if (isDisposable(item.container)) {\n              disposables.add(item.container);\n            }\n          }\n\n          _a.label = 2;\n\n        case 2:\n          _a.trys.push([2,, 4, 5]);\n\n          return [4\n          /*yield*/\n          , Promise.all(resolving)];\n\n        case 3:\n          _a.sent();\n\n          return [2\n          /*return*/\n          , result];\n\n        case 4:\n          setTimeout(function () {\n            return disposables.dispose();\n          }, 100);\n          return [7\n          /*endfinally*/\n          ];\n\n        case 5:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n});\n\nvar _provider = new (\n/** @class */\nfunction () {\n  function class_1() {\n    this.onlyOnceSuggestions = [];\n  }\n\n  class_1.prototype.provideCompletionItems = function () {\n    var suggestions = this.onlyOnceSuggestions.slice(0);\n    var result = {\n      suggestions: suggestions\n    };\n    this.onlyOnceSuggestions.length = 0;\n    return result;\n  };\n\n  return class_1;\n}())();\n\nmodes.CompletionProviderRegistry.register('*', _provider);\nexport function showSimpleSuggestions(editor, suggestions) {\n  setTimeout(function () {\n    var _a;\n\n    (_a = _provider.onlyOnceSuggestions).push.apply(_a, suggestions);\n\n    editor.getContribution('editor.contrib.suggestController').triggerSuggest(new Set().add(_provider));\n  }, 0);\n}","map":null,"metadata":{},"sourceType":"module"}