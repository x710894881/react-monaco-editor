{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { WorkerManager } from './workerManager.js';\nimport * as languageFeatures from './languageFeatures.js';\nvar javaScriptWorker;\nvar typeScriptWorker;\nexport function setupTypeScript(defaults) {\n  typeScriptWorker = setupMode(defaults, 'typescript');\n}\nexport function setupJavaScript(defaults) {\n  javaScriptWorker = setupMode(defaults, 'javascript');\n}\nexport function getJavaScriptWorker() {\n  return new Promise(function (resolve, reject) {\n    if (!javaScriptWorker) {\n      return reject(\"JavaScript not registered!\");\n    }\n\n    resolve(javaScriptWorker);\n  });\n}\nexport function getTypeScriptWorker() {\n  return new Promise(function (resolve, reject) {\n    if (!typeScriptWorker) {\n      return reject(\"TypeScript not registered!\");\n    }\n\n    resolve(typeScriptWorker);\n  });\n}\n\nfunction setupMode(defaults, modeId) {\n  var client = new WorkerManager(modeId, defaults);\n\n  var worker = function (first) {\n    var more = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      more[_i - 1] = arguments[_i];\n    }\n\n    return client.getLanguageServiceWorker.apply(client, [first].concat(more));\n  };\n\n  monaco.languages.registerCompletionItemProvider(modeId, new languageFeatures.SuggestAdapter(worker));\n  monaco.languages.registerSignatureHelpProvider(modeId, new languageFeatures.SignatureHelpAdapter(worker));\n  monaco.languages.registerHoverProvider(modeId, new languageFeatures.QuickInfoAdapter(worker));\n  monaco.languages.registerDocumentHighlightProvider(modeId, new languageFeatures.OccurrencesAdapter(worker));\n  monaco.languages.registerDefinitionProvider(modeId, new languageFeatures.DefinitionAdapter(worker));\n  monaco.languages.registerReferenceProvider(modeId, new languageFeatures.ReferenceAdapter(worker));\n  monaco.languages.registerDocumentSymbolProvider(modeId, new languageFeatures.OutlineAdapter(worker));\n  monaco.languages.registerDocumentRangeFormattingEditProvider(modeId, new languageFeatures.FormatAdapter(worker));\n  monaco.languages.registerOnTypeFormattingEditProvider(modeId, new languageFeatures.FormatOnTypeAdapter(worker));\n  monaco.languages.registerRenameProvider(modeId, new languageFeatures.RenameAdapter(worker));\n  new languageFeatures.DiagnostcsAdapter(defaults, modeId, worker);\n  return worker;\n}","map":null,"metadata":{},"sourceType":"module"}