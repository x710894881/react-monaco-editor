{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createKeybinding } from '../../../base/common/keyCodes.js';\nimport { OS } from '../../../base/common/platform.js';\nimport { CommandsRegistry } from '../../commands/common/commands.js';\nimport { Registry } from '../../registry/common/platform.js';\n\nvar KeybindingsRegistryImpl =\n/** @class */\nfunction () {\n  function KeybindingsRegistryImpl() {\n    this._coreKeybindings = [];\n    this._extensionKeybindings = [];\n    this._cachedMergedKeybindings = null;\n  }\n  /**\n   * Take current platform into account and reduce to primary & secondary.\n   */\n\n\n  KeybindingsRegistryImpl.bindToCurrentPlatform = function (kb) {\n    if (OS === 1\n    /* Windows */\n    ) {\n        if (kb && kb.win) {\n          return kb.win;\n        }\n      } else if (OS === 2\n    /* Macintosh */\n    ) {\n        if (kb && kb.mac) {\n          return kb.mac;\n        }\n      } else {\n      if (kb && kb.linux) {\n        return kb.linux;\n      }\n    }\n\n    return kb;\n  };\n\n  KeybindingsRegistryImpl.prototype.registerKeybindingRule = function (rule) {\n    var actualKb = KeybindingsRegistryImpl.bindToCurrentPlatform(rule);\n\n    if (actualKb && actualKb.primary) {\n      var kk = createKeybinding(actualKb.primary, OS);\n\n      if (kk) {\n        this._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, 0, rule.when);\n      }\n    }\n\n    if (actualKb && Array.isArray(actualKb.secondary)) {\n      for (var i = 0, len = actualKb.secondary.length; i < len; i++) {\n        var k = actualKb.secondary[i];\n        var kk = createKeybinding(k, OS);\n\n        if (kk) {\n          this._registerDefaultKeybinding(kk, rule.id, undefined, rule.weight, -i - 1, rule.when);\n        }\n      }\n    }\n  };\n\n  KeybindingsRegistryImpl.prototype.registerCommandAndKeybindingRule = function (desc) {\n    this.registerKeybindingRule(desc);\n    CommandsRegistry.registerCommand(desc);\n  };\n\n  KeybindingsRegistryImpl._mightProduceChar = function (keyCode) {\n    if (keyCode >= 21\n    /* KEY_0 */\n    && keyCode <= 30\n    /* KEY_9 */\n    ) {\n        return true;\n      }\n\n    if (keyCode >= 31\n    /* KEY_A */\n    && keyCode <= 56\n    /* KEY_Z */\n    ) {\n        return true;\n      }\n\n    return keyCode === 80\n    /* US_SEMICOLON */\n    || keyCode === 81\n    /* US_EQUAL */\n    || keyCode === 82\n    /* US_COMMA */\n    || keyCode === 83\n    /* US_MINUS */\n    || keyCode === 84\n    /* US_DOT */\n    || keyCode === 85\n    /* US_SLASH */\n    || keyCode === 86\n    /* US_BACKTICK */\n    || keyCode === 110\n    /* ABNT_C1 */\n    || keyCode === 111\n    /* ABNT_C2 */\n    || keyCode === 87\n    /* US_OPEN_SQUARE_BRACKET */\n    || keyCode === 88\n    /* US_BACKSLASH */\n    || keyCode === 89\n    /* US_CLOSE_SQUARE_BRACKET */\n    || keyCode === 90\n    /* US_QUOTE */\n    || keyCode === 91\n    /* OEM_8 */\n    || keyCode === 92\n    /* OEM_102 */\n    ;\n  };\n\n  KeybindingsRegistryImpl.prototype._assertNoCtrlAlt = function (keybinding, commandId) {\n    if (keybinding.ctrlKey && keybinding.altKey && !keybinding.metaKey) {\n      if (KeybindingsRegistryImpl._mightProduceChar(keybinding.keyCode)) {\n        console.warn('Ctrl+Alt+ keybindings should not be used by default under Windows. Offender: ', keybinding, ' for ', commandId);\n      }\n    }\n  };\n\n  KeybindingsRegistryImpl.prototype._registerDefaultKeybinding = function (keybinding, commandId, commandArgs, weight1, weight2, when) {\n    if (OS === 1\n    /* Windows */\n    ) {\n        this._assertNoCtrlAlt(keybinding.parts[0], commandId);\n      }\n\n    this._coreKeybindings.push({\n      keybinding: keybinding,\n      command: commandId,\n      commandArgs: commandArgs,\n      when: when,\n      weight1: weight1,\n      weight2: weight2\n    });\n\n    this._cachedMergedKeybindings = null;\n  };\n\n  KeybindingsRegistryImpl.prototype.getDefaultKeybindings = function () {\n    if (!this._cachedMergedKeybindings) {\n      this._cachedMergedKeybindings = [].concat(this._coreKeybindings).concat(this._extensionKeybindings);\n\n      this._cachedMergedKeybindings.sort(sorter);\n    }\n\n    return this._cachedMergedKeybindings.slice(0);\n  };\n\n  return KeybindingsRegistryImpl;\n}();\n\nexport var KeybindingsRegistry = new KeybindingsRegistryImpl(); // Define extension point ids\n\nexport var Extensions = {\n  EditorModes: 'platform.keybindingsRegistry'\n};\nRegistry.add(Extensions.EditorModes, KeybindingsRegistry);\n\nfunction sorter(a, b) {\n  if (a.weight1 !== b.weight1) {\n    return a.weight1 - b.weight1;\n  }\n\n  if (a.command < b.command) {\n    return -1;\n  }\n\n  if (a.command > b.command) {\n    return 1;\n  }\n\n  return a.weight2 - b.weight2;\n}","map":null,"metadata":{},"sourceType":"module"}