{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { createCancelablePromise, Delayer } from '../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { CharacterSet } from '../../common/core/characterClassifier.js';\nimport * as modes from '../../common/modes.js';\nimport { provideSignatureHelp } from './provideSignatureHelp.js';\nvar ParameterHintState;\n\n(function (ParameterHintState) {\n  ParameterHintState.Default = new (\n  /** @class */\n  function () {\n    function class_1() {\n      this.type = 0\n      /* Default */\n      ;\n    }\n\n    return class_1;\n  }())();\n\n  var Pending =\n  /** @class */\n  function () {\n    function Pending(request) {\n      this.request = request;\n      this.type = 2\n      /* Pending */\n      ;\n    }\n\n    return Pending;\n  }();\n\n  ParameterHintState.Pending = Pending;\n\n  var Active =\n  /** @class */\n  function () {\n    function Active(hints) {\n      this.hints = hints;\n      this.type = 1\n      /* Active */\n      ;\n    }\n\n    return Active;\n  }();\n\n  ParameterHintState.Active = Active;\n})(ParameterHintState || (ParameterHintState = {}));\n\nvar ParameterHintsModel =\n/** @class */\nfunction (_super) {\n  __extends(ParameterHintsModel, _super);\n\n  function ParameterHintsModel(editor, delay) {\n    if (delay === void 0) {\n      delay = ParameterHintsModel.DEFAULT_DELAY;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._onChangedHints = _this._register(new Emitter());\n    _this.onChangedHints = _this._onChangedHints.event;\n    _this.triggerOnType = false;\n    _this._state = ParameterHintState.Default;\n    _this._lastSignatureHelpResult = _this._register(new MutableDisposable());\n    _this.triggerChars = new CharacterSet();\n    _this.retriggerChars = new CharacterSet();\n    _this.triggerId = 0;\n    _this.editor = editor;\n    _this.throttledDelayer = new Delayer(delay);\n\n    _this._register(_this.editor.onDidChangeConfiguration(function () {\n      return _this.onEditorConfigurationChange();\n    }));\n\n    _this._register(_this.editor.onDidChangeModel(function (e) {\n      return _this.onModelChanged();\n    }));\n\n    _this._register(_this.editor.onDidChangeModelLanguage(function (_) {\n      return _this.onModelChanged();\n    }));\n\n    _this._register(_this.editor.onDidChangeCursorSelection(function (e) {\n      return _this.onCursorChange(e);\n    }));\n\n    _this._register(_this.editor.onDidChangeModelContent(function (e) {\n      return _this.onModelContentChange();\n    }));\n\n    _this._register(modes.SignatureHelpProviderRegistry.onDidChange(_this.onModelChanged, _this));\n\n    _this._register(_this.editor.onDidType(function (text) {\n      return _this.onDidType(text);\n    }));\n\n    _this.onEditorConfigurationChange();\n\n    _this.onModelChanged();\n\n    return _this;\n  }\n\n  Object.defineProperty(ParameterHintsModel.prototype, \"state\", {\n    get: function () {\n      return this._state;\n    },\n    set: function (value) {\n      if (this._state.type === 2\n      /* Pending */\n      ) {\n          this._state.request.cancel();\n        }\n\n      this._state = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ParameterHintsModel.prototype.cancel = function (silent) {\n    if (silent === void 0) {\n      silent = false;\n    }\n\n    this.state = ParameterHintState.Default;\n    this.throttledDelayer.cancel();\n\n    if (!silent) {\n      this._onChangedHints.fire(undefined);\n    }\n  };\n\n  ParameterHintsModel.prototype.trigger = function (context, delay) {\n    var _this = this;\n\n    var model = this.editor.getModel();\n\n    if (!model || !modes.SignatureHelpProviderRegistry.has(model)) {\n      return;\n    }\n\n    var triggerId = ++this.triggerId;\n    this.throttledDelayer.trigger(function () {\n      return _this.doTrigger({\n        triggerKind: context.triggerKind,\n        triggerCharacter: context.triggerCharacter,\n        isRetrigger: _this.state.type === 1\n        /* Active */\n        || _this.state.type === 2\n        /* Pending */\n        ,\n        activeSignatureHelp: _this.state.type === 1\n        /* Active */\n        ? _this.state.hints : undefined\n      }, triggerId);\n    }, delay).then(undefined, onUnexpectedError);\n  };\n\n  ParameterHintsModel.prototype.next = function () {\n    if (this.state.type !== 1\n    /* Active */\n    ) {\n        return;\n      }\n\n    var length = this.state.hints.signatures.length;\n    var activeSignature = this.state.hints.activeSignature;\n    var last = activeSignature % length === length - 1;\n    var cycle = this.editor.getConfiguration().contribInfo.parameterHints.cycle; // If there is only one signature, or we're on last signature of list\n\n    if ((length < 2 || last) && !cycle) {\n      this.cancel();\n      return;\n    }\n\n    this.updateActiveSignature(last && cycle ? 0 : activeSignature + 1);\n  };\n\n  ParameterHintsModel.prototype.previous = function () {\n    if (this.state.type !== 1\n    /* Active */\n    ) {\n        return;\n      }\n\n    var length = this.state.hints.signatures.length;\n    var activeSignature = this.state.hints.activeSignature;\n    var first = activeSignature === 0;\n    var cycle = this.editor.getConfiguration().contribInfo.parameterHints.cycle; // If there is only one signature, or we're on first signature of list\n\n    if ((length < 2 || first) && !cycle) {\n      this.cancel();\n      return;\n    }\n\n    this.updateActiveSignature(first && cycle ? length - 1 : activeSignature - 1);\n  };\n\n  ParameterHintsModel.prototype.updateActiveSignature = function (activeSignature) {\n    if (this.state.type !== 1\n    /* Active */\n    ) {\n        return;\n      }\n\n    this.state = new ParameterHintState.Active(__assign({}, this.state.hints, {\n      activeSignature: activeSignature\n    }));\n\n    this._onChangedHints.fire(this.state.hints);\n  };\n\n  ParameterHintsModel.prototype.doTrigger = function (triggerContext, triggerId) {\n    var _this = this;\n\n    this.cancel(true);\n\n    if (!this.editor.hasModel()) {\n      return Promise.resolve(false);\n    }\n\n    var model = this.editor.getModel();\n    var position = this.editor.getPosition();\n    this.state = new ParameterHintState.Pending(createCancelablePromise(function (token) {\n      return provideSignatureHelp(model, position, triggerContext, token);\n    }));\n    return this.state.request.then(function (result) {\n      // Check that we are still resolving the correct signature help\n      if (triggerId !== _this.triggerId) {\n        if (result) {\n          result.dispose();\n        }\n\n        return false;\n      }\n\n      if (!result || !result.value.signatures || result.value.signatures.length === 0) {\n        if (result) {\n          result.dispose();\n        }\n\n        _this._lastSignatureHelpResult.clear();\n\n        _this.cancel();\n\n        return false;\n      } else {\n        _this.state = new ParameterHintState.Active(result.value);\n        _this._lastSignatureHelpResult.value = result;\n\n        _this._onChangedHints.fire(_this.state.hints);\n\n        return true;\n      }\n    }).catch(function (error) {\n      if (triggerId === _this.triggerId) {\n        _this.state = ParameterHintState.Default;\n      }\n\n      onUnexpectedError(error);\n      return false;\n    });\n  };\n\n  Object.defineProperty(ParameterHintsModel.prototype, \"isTriggered\", {\n    get: function () {\n      return this.state.type === 1\n      /* Active */\n      || this.state.type === 2\n      /* Pending */\n      || this.throttledDelayer.isTriggered();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ParameterHintsModel.prototype.onModelChanged = function () {\n    this.cancel(); // Update trigger characters\n\n    this.triggerChars = new CharacterSet();\n    this.retriggerChars = new CharacterSet();\n    var model = this.editor.getModel();\n\n    if (!model) {\n      return;\n    }\n\n    for (var _i = 0, _a = modes.SignatureHelpProviderRegistry.ordered(model); _i < _a.length; _i++) {\n      var support = _a[_i];\n\n      for (var _b = 0, _c = support.signatureHelpTriggerCharacters || []; _b < _c.length; _b++) {\n        var ch = _c[_b];\n        this.triggerChars.add(ch.charCodeAt(0)); // All trigger characters are also considered retrigger characters\n\n        this.retriggerChars.add(ch.charCodeAt(0));\n      }\n\n      for (var _d = 0, _e = support.signatureHelpRetriggerCharacters || []; _d < _e.length; _d++) {\n        var ch = _e[_d];\n        this.retriggerChars.add(ch.charCodeAt(0));\n      }\n    }\n  };\n\n  ParameterHintsModel.prototype.onDidType = function (text) {\n    if (!this.triggerOnType) {\n      return;\n    }\n\n    var lastCharIndex = text.length - 1;\n    var triggerCharCode = text.charCodeAt(lastCharIndex);\n\n    if (this.triggerChars.has(triggerCharCode) || this.isTriggered && this.retriggerChars.has(triggerCharCode)) {\n      this.trigger({\n        triggerKind: modes.SignatureHelpTriggerKind.TriggerCharacter,\n        triggerCharacter: text.charAt(lastCharIndex)\n      });\n    }\n  };\n\n  ParameterHintsModel.prototype.onCursorChange = function (e) {\n    if (e.source === 'mouse') {\n      this.cancel();\n    } else if (this.isTriggered) {\n      this.trigger({\n        triggerKind: modes.SignatureHelpTriggerKind.ContentChange\n      });\n    }\n  };\n\n  ParameterHintsModel.prototype.onModelContentChange = function () {\n    if (this.isTriggered) {\n      this.trigger({\n        triggerKind: modes.SignatureHelpTriggerKind.ContentChange\n      });\n    }\n  };\n\n  ParameterHintsModel.prototype.onEditorConfigurationChange = function () {\n    this.triggerOnType = this.editor.getConfiguration().contribInfo.parameterHints.enabled;\n\n    if (!this.triggerOnType) {\n      this.cancel();\n    }\n  };\n\n  ParameterHintsModel.prototype.dispose = function () {\n    this.cancel(true);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  ParameterHintsModel.DEFAULT_DELAY = 120; // ms\n\n  return ParameterHintsModel;\n}(Disposable);\n\nexport { ParameterHintsModel };","map":null,"metadata":{},"sourceType":"module"}