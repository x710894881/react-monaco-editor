{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { KeyCodeUtils } from '../../../base/common/keyCodes.js';\nimport { BaseResolvedKeybinding } from './baseResolvedKeybinding.js';\n/**\n * Do not instantiate. Use KeybindingService to get a ResolvedKeybinding seeded with information about the current kb layout.\n */\n\nvar USLayoutResolvedKeybinding =\n/** @class */\nfunction (_super) {\n  __extends(USLayoutResolvedKeybinding, _super);\n\n  function USLayoutResolvedKeybinding(actual, os) {\n    return _super.call(this, os, actual.parts) || this;\n  }\n\n  USLayoutResolvedKeybinding.prototype._keyCodeToUILabel = function (keyCode) {\n    if (this._os === 2\n    /* Macintosh */\n    ) {\n        switch (keyCode) {\n          case 15\n          /* LeftArrow */\n          :\n            return '←';\n\n          case 16\n          /* UpArrow */\n          :\n            return '↑';\n\n          case 17\n          /* RightArrow */\n          :\n            return '→';\n\n          case 18\n          /* DownArrow */\n          :\n            return '↓';\n        }\n      }\n\n    return KeyCodeUtils.toString(keyCode);\n  };\n\n  USLayoutResolvedKeybinding.prototype._getLabel = function (keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n\n    return this._keyCodeToUILabel(keybinding.keyCode);\n  };\n\n  USLayoutResolvedKeybinding.prototype._getAriaLabel = function (keybinding) {\n    if (keybinding.isDuplicateModifierCase()) {\n      return '';\n    }\n\n    return KeyCodeUtils.toString(keybinding.keyCode);\n  };\n\n  USLayoutResolvedKeybinding.prototype._getDispatchPart = function (keybinding) {\n    return USLayoutResolvedKeybinding.getDispatchStr(keybinding);\n  };\n\n  USLayoutResolvedKeybinding.getDispatchStr = function (keybinding) {\n    if (keybinding.isModifierKey()) {\n      return null;\n    }\n\n    var result = '';\n\n    if (keybinding.ctrlKey) {\n      result += 'ctrl+';\n    }\n\n    if (keybinding.shiftKey) {\n      result += 'shift+';\n    }\n\n    if (keybinding.altKey) {\n      result += 'alt+';\n    }\n\n    if (keybinding.metaKey) {\n      result += 'meta+';\n    }\n\n    result += KeyCodeUtils.toString(keybinding.keyCode);\n    return result;\n  };\n\n  return USLayoutResolvedKeybinding;\n}(BaseResolvedKeybinding);\n\nexport { USLayoutResolvedKeybinding };","map":null,"metadata":{},"sourceType":"module"}