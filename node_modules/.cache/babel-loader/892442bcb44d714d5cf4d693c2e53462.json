{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport * as nls from '../../../nls.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport * as objects from '../../../base/common/objects.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { USUAL_WORD_SEPARATORS } from '../model/wordHelper.js';\nimport { isObject } from '../../../base/common/types.js';\n/**\n * @internal\n */\n\nexport function blinkingStyleToString(blinkingStyle) {\n  if (blinkingStyle === 1\n  /* Blink */\n  ) {\n      return 'blink';\n    } else if (blinkingStyle === 4\n  /* Expand */\n  ) {\n      return 'expand';\n    } else if (blinkingStyle === 3\n  /* Phase */\n  ) {\n      return 'phase';\n    } else if (blinkingStyle === 2\n  /* Smooth */\n  ) {\n      return 'smooth';\n    } else if (blinkingStyle === 5\n  /* Solid */\n  ) {\n      return 'solid';\n    } else {\n    throw new Error('blinkingStyleToString: Unknown blinkingStyle');\n  }\n}\n/**\n * The style in which the editor's cursor should be rendered.\n */\n\nexport var TextEditorCursorStyle;\n\n(function (TextEditorCursorStyle) {\n  /**\n   * As a vertical line (sitting between two characters).\n   */\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Line\"] = 1] = \"Line\";\n  /**\n   * As a block (sitting on top of a character).\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Block\"] = 2] = \"Block\";\n  /**\n   * As a horizontal line (sitting under a character).\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"Underline\"] = 3] = \"Underline\";\n  /**\n   * As a thin vertical line (sitting between two characters).\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"LineThin\"] = 4] = \"LineThin\";\n  /**\n   * As an outlined block (sitting on top of a character).\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"BlockOutline\"] = 5] = \"BlockOutline\";\n  /**\n   * As a thin horizontal line (sitting under a character).\n   */\n\n  TextEditorCursorStyle[TextEditorCursorStyle[\"UnderlineThin\"] = 6] = \"UnderlineThin\";\n})(TextEditorCursorStyle || (TextEditorCursorStyle = {}));\n/**\n * @internal\n */\n\n\nexport function cursorStyleToString(cursorStyle) {\n  if (cursorStyle === TextEditorCursorStyle.Line) {\n    return 'line';\n  } else if (cursorStyle === TextEditorCursorStyle.Block) {\n    return 'block';\n  } else if (cursorStyle === TextEditorCursorStyle.Underline) {\n    return 'underline';\n  } else if (cursorStyle === TextEditorCursorStyle.LineThin) {\n    return 'line-thin';\n  } else if (cursorStyle === TextEditorCursorStyle.BlockOutline) {\n    return 'block-outline';\n  } else if (cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n    return 'underline-thin';\n  } else {\n    throw new Error('cursorStyleToString: Unknown cursorStyle');\n  }\n}\n\nfunction _cursorStyleFromString(cursorStyle, defaultValue) {\n  if (typeof cursorStyle !== 'string') {\n    return defaultValue;\n  }\n\n  if (cursorStyle === 'line') {\n    return TextEditorCursorStyle.Line;\n  } else if (cursorStyle === 'block') {\n    return TextEditorCursorStyle.Block;\n  } else if (cursorStyle === 'underline') {\n    return TextEditorCursorStyle.Underline;\n  } else if (cursorStyle === 'line-thin') {\n    return TextEditorCursorStyle.LineThin;\n  } else if (cursorStyle === 'block-outline') {\n    return TextEditorCursorStyle.BlockOutline;\n  } else if (cursorStyle === 'underline-thin') {\n    return TextEditorCursorStyle.UnderlineThin;\n  }\n\n  return TextEditorCursorStyle.Line;\n}\n/**\n * Internal configuration options (transformed or computed) for the editor.\n */\n\n\nvar InternalEditorOptions =\n/** @class */\nfunction () {\n  /**\n   * @internal\n   */\n  function InternalEditorOptions(source) {\n    this.canUseLayerHinting = source.canUseLayerHinting;\n    this.pixelRatio = source.pixelRatio;\n    this.editorClassName = source.editorClassName;\n    this.lineHeight = source.lineHeight | 0;\n    this.readOnly = source.readOnly;\n    this.accessibilitySupport = source.accessibilitySupport;\n    this.multiCursorModifier = source.multiCursorModifier;\n    this.multiCursorMergeOverlapping = source.multiCursorMergeOverlapping;\n    this.wordSeparators = source.wordSeparators;\n    this.autoClosingBrackets = source.autoClosingBrackets;\n    this.autoClosingQuotes = source.autoClosingQuotes;\n    this.autoClosingOvertype = source.autoClosingOvertype;\n    this.autoSurround = source.autoSurround;\n    this.autoIndent = source.autoIndent;\n    this.useTabStops = source.useTabStops;\n    this.tabFocusMode = source.tabFocusMode;\n    this.dragAndDrop = source.dragAndDrop;\n    this.emptySelectionClipboard = source.emptySelectionClipboard;\n    this.copyWithSyntaxHighlighting = source.copyWithSyntaxHighlighting;\n    this.layoutInfo = source.layoutInfo;\n    this.fontInfo = source.fontInfo;\n    this.viewInfo = source.viewInfo;\n    this.wrappingInfo = source.wrappingInfo;\n    this.contribInfo = source.contribInfo;\n    this.showUnused = source.showUnused;\n  }\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions.prototype.equals = function (other) {\n    return this.canUseLayerHinting === other.canUseLayerHinting && this.pixelRatio === other.pixelRatio && this.editorClassName === other.editorClassName && this.lineHeight === other.lineHeight && this.readOnly === other.readOnly && this.accessibilitySupport === other.accessibilitySupport && this.multiCursorModifier === other.multiCursorModifier && this.multiCursorMergeOverlapping === other.multiCursorMergeOverlapping && this.wordSeparators === other.wordSeparators && this.autoClosingBrackets === other.autoClosingBrackets && this.autoClosingQuotes === other.autoClosingQuotes && this.autoClosingOvertype === other.autoClosingOvertype && this.autoSurround === other.autoSurround && this.autoIndent === other.autoIndent && this.useTabStops === other.useTabStops && this.tabFocusMode === other.tabFocusMode && this.dragAndDrop === other.dragAndDrop && this.showUnused === other.showUnused && this.emptySelectionClipboard === other.emptySelectionClipboard && this.copyWithSyntaxHighlighting === other.copyWithSyntaxHighlighting && InternalEditorOptions._equalsLayoutInfo(this.layoutInfo, other.layoutInfo) && this.fontInfo.equals(other.fontInfo) && InternalEditorOptions._equalsViewOptions(this.viewInfo, other.viewInfo) && InternalEditorOptions._equalsWrappingInfo(this.wrappingInfo, other.wrappingInfo) && InternalEditorOptions._equalsContribOptions(this.contribInfo, other.contribInfo);\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions.prototype.createChangeEvent = function (newOpts) {\n    return {\n      canUseLayerHinting: this.canUseLayerHinting !== newOpts.canUseLayerHinting,\n      pixelRatio: this.pixelRatio !== newOpts.pixelRatio,\n      editorClassName: this.editorClassName !== newOpts.editorClassName,\n      lineHeight: this.lineHeight !== newOpts.lineHeight,\n      readOnly: this.readOnly !== newOpts.readOnly,\n      accessibilitySupport: this.accessibilitySupport !== newOpts.accessibilitySupport,\n      multiCursorModifier: this.multiCursorModifier !== newOpts.multiCursorModifier,\n      multiCursorMergeOverlapping: this.multiCursorMergeOverlapping !== newOpts.multiCursorMergeOverlapping,\n      wordSeparators: this.wordSeparators !== newOpts.wordSeparators,\n      autoClosingBrackets: this.autoClosingBrackets !== newOpts.autoClosingBrackets,\n      autoClosingQuotes: this.autoClosingQuotes !== newOpts.autoClosingQuotes,\n      autoClosingOvertype: this.autoClosingOvertype !== newOpts.autoClosingOvertype,\n      autoSurround: this.autoSurround !== newOpts.autoSurround,\n      autoIndent: this.autoIndent !== newOpts.autoIndent,\n      useTabStops: this.useTabStops !== newOpts.useTabStops,\n      tabFocusMode: this.tabFocusMode !== newOpts.tabFocusMode,\n      dragAndDrop: this.dragAndDrop !== newOpts.dragAndDrop,\n      emptySelectionClipboard: this.emptySelectionClipboard !== newOpts.emptySelectionClipboard,\n      copyWithSyntaxHighlighting: this.copyWithSyntaxHighlighting !== newOpts.copyWithSyntaxHighlighting,\n      layoutInfo: !InternalEditorOptions._equalsLayoutInfo(this.layoutInfo, newOpts.layoutInfo),\n      fontInfo: !this.fontInfo.equals(newOpts.fontInfo),\n      viewInfo: !InternalEditorOptions._equalsViewOptions(this.viewInfo, newOpts.viewInfo),\n      wrappingInfo: !InternalEditorOptions._equalsWrappingInfo(this.wrappingInfo, newOpts.wrappingInfo),\n      contribInfo: !InternalEditorOptions._equalsContribOptions(this.contribInfo, newOpts.contribInfo)\n    };\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsLayoutInfo = function (a, b) {\n    return a.width === b.width && a.height === b.height && a.glyphMarginLeft === b.glyphMarginLeft && a.glyphMarginWidth === b.glyphMarginWidth && a.glyphMarginHeight === b.glyphMarginHeight && a.lineNumbersLeft === b.lineNumbersLeft && a.lineNumbersWidth === b.lineNumbersWidth && a.lineNumbersHeight === b.lineNumbersHeight && a.decorationsLeft === b.decorationsLeft && a.decorationsWidth === b.decorationsWidth && a.decorationsHeight === b.decorationsHeight && a.contentLeft === b.contentLeft && a.contentWidth === b.contentWidth && a.contentHeight === b.contentHeight && a.renderMinimap === b.renderMinimap && a.minimapLeft === b.minimapLeft && a.minimapWidth === b.minimapWidth && a.viewportColumn === b.viewportColumn && a.verticalScrollbarWidth === b.verticalScrollbarWidth && a.horizontalScrollbarHeight === b.horizontalScrollbarHeight && this._equalsOverviewRuler(a.overviewRuler, b.overviewRuler);\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsOverviewRuler = function (a, b) {\n    return a.width === b.width && a.height === b.height && a.top === b.top && a.right === b.right;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsViewOptions = function (a, b) {\n    return a.extraEditorClassName === b.extraEditorClassName && a.disableMonospaceOptimizations === b.disableMonospaceOptimizations && arrays.equals(a.rulers, b.rulers) && a.ariaLabel === b.ariaLabel && a.renderLineNumbers === b.renderLineNumbers && a.renderCustomLineNumbers === b.renderCustomLineNumbers && a.cursorSurroundingLines === b.cursorSurroundingLines && a.renderFinalNewline === b.renderFinalNewline && a.selectOnLineNumbers === b.selectOnLineNumbers && a.glyphMargin === b.glyphMargin && a.revealHorizontalRightPadding === b.revealHorizontalRightPadding && a.roundedSelection === b.roundedSelection && a.overviewRulerLanes === b.overviewRulerLanes && a.overviewRulerBorder === b.overviewRulerBorder && a.cursorBlinking === b.cursorBlinking && a.mouseWheelZoom === b.mouseWheelZoom && a.cursorSmoothCaretAnimation === b.cursorSmoothCaretAnimation && a.cursorStyle === b.cursorStyle && a.cursorWidth === b.cursorWidth && a.hideCursorInOverviewRuler === b.hideCursorInOverviewRuler && a.scrollBeyondLastLine === b.scrollBeyondLastLine && a.scrollBeyondLastColumn === b.scrollBeyondLastColumn && a.smoothScrolling === b.smoothScrolling && a.stopRenderingLineAfter === b.stopRenderingLineAfter && a.renderWhitespace === b.renderWhitespace && a.renderControlCharacters === b.renderControlCharacters && a.fontLigatures === b.fontLigatures && a.renderIndentGuides === b.renderIndentGuides && a.highlightActiveIndentGuide === b.highlightActiveIndentGuide && a.renderLineHighlight === b.renderLineHighlight && this._equalsScrollbarOptions(a.scrollbar, b.scrollbar) && this._equalsMinimapOptions(a.minimap, b.minimap) && a.fixedOverflowWidgets === b.fixedOverflowWidgets;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsScrollbarOptions = function (a, b) {\n    return a.arrowSize === b.arrowSize && a.vertical === b.vertical && a.horizontal === b.horizontal && a.useShadows === b.useShadows && a.verticalHasArrows === b.verticalHasArrows && a.horizontalHasArrows === b.horizontalHasArrows && a.handleMouseWheel === b.handleMouseWheel && a.horizontalScrollbarSize === b.horizontalScrollbarSize && a.horizontalSliderSize === b.horizontalSliderSize && a.verticalScrollbarSize === b.verticalScrollbarSize && a.verticalSliderSize === b.verticalSliderSize && a.mouseWheelScrollSensitivity === b.mouseWheelScrollSensitivity && a.fastScrollSensitivity === b.fastScrollSensitivity;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsMinimapOptions = function (a, b) {\n    return a.enabled === b.enabled && a.side === b.side && a.showSlider === b.showSlider && a.renderCharacters === b.renderCharacters && a.maxColumn === b.maxColumn;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalFindOptions = function (a, b) {\n    return a.seedSearchStringFromSelection === b.seedSearchStringFromSelection && a.autoFindInSelection === b.autoFindInSelection && a.globalFindClipboard === b.globalFindClipboard && a.addExtraSpaceOnTop === b.addExtraSpaceOnTop;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsParameterHintOptions = function (a, b) {\n    return a.enabled === b.enabled && a.cycle === b.cycle;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsHoverOptions = function (a, b) {\n    return a.enabled === b.enabled && a.delay === b.delay && a.sticky === b.sticky;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsSuggestOptions = function (a, b) {\n    if (a === b) {\n      return true;\n    } else if (!a || !b) {\n      return false;\n    } else {\n      return a.filterGraceful === b.filterGraceful && a.snippets === b.snippets && a.snippetsPreventQuickSuggestions === b.snippetsPreventQuickSuggestions && a.localityBonus === b.localityBonus && a.shareSuggestSelections === b.shareSuggestSelections && a.showIcons === b.showIcons && a.maxVisibleSuggestions === b.maxVisibleSuggestions && objects.equals(a.filteredTypes, b.filteredTypes);\n    }\n  };\n\n  InternalEditorOptions._equalsGotoLocationOptions = function (a, b) {\n    if (a === b) {\n      return true;\n    } else if (!a || !b) {\n      return false;\n    } else {\n      return a.multiple === b.multiple;\n    }\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsWrappingInfo = function (a, b) {\n    return a.inDiffEditor === b.inDiffEditor && a.isDominatedByLongLines === b.isDominatedByLongLines && a.isWordWrapMinified === b.isWordWrapMinified && a.isViewportWrapping === b.isViewportWrapping && a.wrappingColumn === b.wrappingColumn && a.wrappingIndent === b.wrappingIndent && a.wordWrapBreakBeforeCharacters === b.wordWrapBreakBeforeCharacters && a.wordWrapBreakAfterCharacters === b.wordWrapBreakAfterCharacters && a.wordWrapBreakObtrusiveCharacters === b.wordWrapBreakObtrusiveCharacters;\n  };\n  /**\n   * @internal\n   */\n\n\n  InternalEditorOptions._equalsContribOptions = function (a, b) {\n    return a.selectionClipboard === b.selectionClipboard && this._equalsHoverOptions(a.hover, b.hover) && a.links === b.links && a.contextmenu === b.contextmenu && InternalEditorOptions._equalsQuickSuggestions(a.quickSuggestions, b.quickSuggestions) && a.quickSuggestionsDelay === b.quickSuggestionsDelay && this._equalsParameterHintOptions(a.parameterHints, b.parameterHints) && a.formatOnType === b.formatOnType && a.formatOnPaste === b.formatOnPaste && a.suggestOnTriggerCharacters === b.suggestOnTriggerCharacters && a.acceptSuggestionOnEnter === b.acceptSuggestionOnEnter && a.acceptSuggestionOnCommitCharacter === b.acceptSuggestionOnCommitCharacter && a.wordBasedSuggestions === b.wordBasedSuggestions && a.suggestSelection === b.suggestSelection && a.suggestFontSize === b.suggestFontSize && a.suggestLineHeight === b.suggestLineHeight && a.tabCompletion === b.tabCompletion && this._equalsSuggestOptions(a.suggest, b.suggest) && InternalEditorOptions._equalsGotoLocationOptions(a.gotoLocation, b.gotoLocation) && a.selectionHighlight === b.selectionHighlight && a.occurrencesHighlight === b.occurrencesHighlight && a.codeLens === b.codeLens && a.folding === b.folding && a.foldingStrategy === b.foldingStrategy && a.showFoldingControls === b.showFoldingControls && a.matchBrackets === b.matchBrackets && this._equalFindOptions(a.find, b.find) && a.colorDecorators === b.colorDecorators && objects.equals(a.codeActionsOnSave, b.codeActionsOnSave) && a.codeActionsOnSaveTimeout === b.codeActionsOnSaveTimeout && a.lightbulbEnabled === b.lightbulbEnabled;\n  };\n\n  InternalEditorOptions._equalsQuickSuggestions = function (a, b) {\n    if (typeof a === 'boolean') {\n      if (typeof b !== 'boolean') {\n        return false;\n      }\n\n      return a === b;\n    }\n\n    if (typeof b === 'boolean') {\n      return false;\n    }\n\n    return a.comments === b.comments && a.other === b.other && a.strings === b.strings;\n  };\n\n  return InternalEditorOptions;\n}();\n\nexport { InternalEditorOptions };\n\nfunction _boolean(value, defaultValue) {\n  if (typeof value === 'undefined') {\n    return defaultValue;\n  }\n\n  if (value === 'false') {\n    // treat the string 'false' as false\n    return false;\n  }\n\n  return Boolean(value);\n}\n\nfunction _booleanMap(value, defaultValue) {\n  if (!value) {\n    return defaultValue;\n  }\n\n  var out = Object.create(null);\n\n  for (var _i = 0, _a = Object.keys(value); _i < _a.length; _i++) {\n    var k = _a[_i];\n    var v = value[k];\n\n    if (typeof v === 'boolean') {\n      out[k] = v;\n    }\n  }\n\n  return out;\n}\n\nfunction _string(value, defaultValue) {\n  if (typeof value !== 'string') {\n    return defaultValue;\n  }\n\n  return value;\n}\n\nfunction _stringSet(value, defaultValue, allowedValues) {\n  if (typeof value !== 'string') {\n    return defaultValue;\n  }\n\n  if (allowedValues.indexOf(value) === -1) {\n    return defaultValue;\n  }\n\n  return value;\n}\n\nfunction _clampedInt(value, defaultValue, minimum, maximum) {\n  var r;\n\n  if (typeof value === 'undefined') {\n    r = defaultValue;\n  } else {\n    r = parseInt(value, 10);\n\n    if (isNaN(r)) {\n      r = defaultValue;\n    }\n  }\n\n  r = Math.max(minimum, r);\n  r = Math.min(maximum, r);\n  return r | 0;\n}\n\nfunction _float(value, defaultValue) {\n  var r = parseFloat(value);\n\n  if (isNaN(r)) {\n    r = defaultValue;\n  }\n\n  return r;\n}\n\nfunction _wrappingIndentFromString(wrappingIndent, defaultValue) {\n  if (typeof wrappingIndent !== 'string') {\n    return defaultValue;\n  }\n\n  if (wrappingIndent === 'same') {\n    return 1\n    /* Same */\n    ;\n  } else if (wrappingIndent === 'indent') {\n    return 2\n    /* Indent */\n    ;\n  } else if (wrappingIndent === 'deepIndent') {\n    return 3\n    /* DeepIndent */\n    ;\n  } else {\n      return 0\n      /* None */\n      ;\n    }\n}\n\nfunction _cursorBlinkingStyleFromString(cursorBlinkingStyle, defaultValue) {\n  if (typeof cursorBlinkingStyle !== 'string') {\n    return defaultValue;\n  }\n\n  switch (cursorBlinkingStyle) {\n    case 'blink':\n      return 1\n      /* Blink */\n      ;\n\n    case 'smooth':\n      return 2\n      /* Smooth */\n      ;\n\n    case 'phase':\n      return 3\n      /* Phase */\n      ;\n\n    case 'expand':\n      return 4\n      /* Expand */\n      ;\n\n    case 'visible': // maintain compatibility\n\n    case 'solid':\n      return 5\n      /* Solid */\n      ;\n  }\n\n  return 1\n  /* Blink */\n  ;\n}\n\nfunction _scrollbarVisibilityFromString(visibility, defaultValue) {\n  if (typeof visibility !== 'string') {\n    return defaultValue;\n  }\n\n  switch (visibility) {\n    case 'hidden':\n      return 2\n      /* Hidden */\n      ;\n\n    case 'visible':\n      return 3\n      /* Visible */\n      ;\n\n    default:\n      return 1\n      /* Auto */\n      ;\n  }\n}\n/**\n * @internal\n */\n\n\nvar EditorOptionsValidator =\n/** @class */\nfunction () {\n  function EditorOptionsValidator() {}\n  /**\n   * Validate raw editor options.\n   * i.e. since they can be defined by the user, they might be invalid.\n   */\n\n\n  EditorOptionsValidator.validate = function (opts, defaults) {\n    var wordWrap = opts.wordWrap;\n    {\n      // Compatibility with old true or false values\n      if (wordWrap === true) {\n        wordWrap = 'on';\n      } else if (wordWrap === false) {\n        wordWrap = 'off';\n      }\n\n      wordWrap = _stringSet(wordWrap, defaults.wordWrap, ['off', 'on', 'wordWrapColumn', 'bounded']);\n    }\n\n    var viewInfo = this._sanitizeViewInfo(opts, defaults.viewInfo);\n\n    var contribInfo = this._sanitizeContribInfo(opts, defaults.contribInfo);\n\n    var configuredMulticursorModifier = undefined;\n\n    if (typeof opts.multiCursorModifier === 'string') {\n      if (opts.multiCursorModifier === 'ctrlCmd') {\n        configuredMulticursorModifier = platform.isMacintosh ? 'metaKey' : 'ctrlKey';\n      } else {\n        configuredMulticursorModifier = 'altKey';\n      }\n    }\n\n    var multiCursorModifier = _stringSet(configuredMulticursorModifier, defaults.multiCursorModifier, ['altKey', 'metaKey', 'ctrlKey']);\n\n    var autoClosingBrackets;\n    var autoClosingQuotes;\n    var autoSurround;\n\n    if (typeof opts.autoClosingBrackets === 'boolean' && opts.autoClosingBrackets === false) {\n      // backwards compatibility: disable all on boolean false\n      autoClosingBrackets = 'never';\n      autoClosingQuotes = 'never';\n      autoSurround = 'never';\n    } else {\n      autoClosingBrackets = _stringSet(opts.autoClosingBrackets, defaults.autoClosingBrackets, ['always', 'languageDefined', 'beforeWhitespace', 'never']);\n      autoClosingQuotes = _stringSet(opts.autoClosingQuotes, defaults.autoClosingQuotes, ['always', 'languageDefined', 'beforeWhitespace', 'never']);\n      autoSurround = _stringSet(opts.autoSurround, defaults.autoSurround, ['languageDefined', 'brackets', 'quotes', 'never']);\n    }\n\n    return {\n      inDiffEditor: _boolean(opts.inDiffEditor, defaults.inDiffEditor),\n      wordSeparators: _string(opts.wordSeparators, defaults.wordSeparators),\n      lineNumbersMinChars: _clampedInt(opts.lineNumbersMinChars, defaults.lineNumbersMinChars, 1, 10),\n      lineDecorationsWidth: typeof opts.lineDecorationsWidth === 'undefined' ? defaults.lineDecorationsWidth : opts.lineDecorationsWidth,\n      readOnly: _boolean(opts.readOnly, defaults.readOnly),\n      mouseStyle: _stringSet(opts.mouseStyle, defaults.mouseStyle, ['text', 'default', 'copy']),\n      disableLayerHinting: _boolean(opts.disableLayerHinting, defaults.disableLayerHinting),\n      automaticLayout: _boolean(opts.automaticLayout, defaults.automaticLayout),\n      wordWrap: wordWrap,\n      wordWrapColumn: _clampedInt(opts.wordWrapColumn, defaults.wordWrapColumn, 1, 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ),\n      wordWrapMinified: _boolean(opts.wordWrapMinified, defaults.wordWrapMinified),\n      wrappingIndent: _wrappingIndentFromString(opts.wrappingIndent, defaults.wrappingIndent),\n      wordWrapBreakBeforeCharacters: _string(opts.wordWrapBreakBeforeCharacters, defaults.wordWrapBreakBeforeCharacters),\n      wordWrapBreakAfterCharacters: _string(opts.wordWrapBreakAfterCharacters, defaults.wordWrapBreakAfterCharacters),\n      wordWrapBreakObtrusiveCharacters: _string(opts.wordWrapBreakObtrusiveCharacters, defaults.wordWrapBreakObtrusiveCharacters),\n      autoClosingBrackets: autoClosingBrackets,\n      autoClosingQuotes: autoClosingQuotes,\n      autoClosingOvertype: _stringSet(opts.autoClosingOvertype, defaults.autoClosingOvertype, ['always', 'auto', 'never']),\n      autoSurround: autoSurround,\n      autoIndent: _boolean(opts.autoIndent, defaults.autoIndent),\n      dragAndDrop: _boolean(opts.dragAndDrop, defaults.dragAndDrop),\n      emptySelectionClipboard: _boolean(opts.emptySelectionClipboard, defaults.emptySelectionClipboard),\n      copyWithSyntaxHighlighting: _boolean(opts.copyWithSyntaxHighlighting, defaults.copyWithSyntaxHighlighting),\n      useTabStops: _boolean(opts.useTabStops, defaults.useTabStops),\n      multiCursorModifier: multiCursorModifier,\n      multiCursorMergeOverlapping: _boolean(opts.multiCursorMergeOverlapping, defaults.multiCursorMergeOverlapping),\n      accessibilitySupport: _stringSet(opts.accessibilitySupport, defaults.accessibilitySupport, ['auto', 'on', 'off']),\n      showUnused: _boolean(opts.showUnused, defaults.showUnused),\n      viewInfo: viewInfo,\n      contribInfo: contribInfo\n    };\n  };\n\n  EditorOptionsValidator._sanitizeScrollbarOpts = function (opts, defaults, mouseWheelScrollSensitivity, fastScrollSensitivity) {\n    if (typeof opts !== 'object') {\n      return defaults;\n    }\n\n    var horizontalScrollbarSize = _clampedInt(opts.horizontalScrollbarSize, defaults.horizontalScrollbarSize, 0, 1000);\n\n    var verticalScrollbarSize = _clampedInt(opts.verticalScrollbarSize, defaults.verticalScrollbarSize, 0, 1000);\n\n    return {\n      vertical: _scrollbarVisibilityFromString(opts.vertical, defaults.vertical),\n      horizontal: _scrollbarVisibilityFromString(opts.horizontal, defaults.horizontal),\n      arrowSize: _clampedInt(opts.arrowSize, defaults.arrowSize, 0, 1000),\n      useShadows: _boolean(opts.useShadows, defaults.useShadows),\n      verticalHasArrows: _boolean(opts.verticalHasArrows, defaults.verticalHasArrows),\n      horizontalHasArrows: _boolean(opts.horizontalHasArrows, defaults.horizontalHasArrows),\n      horizontalScrollbarSize: horizontalScrollbarSize,\n      horizontalSliderSize: _clampedInt(opts.horizontalSliderSize, horizontalScrollbarSize, 0, 1000),\n      verticalScrollbarSize: verticalScrollbarSize,\n      verticalSliderSize: _clampedInt(opts.verticalSliderSize, verticalScrollbarSize, 0, 1000),\n      handleMouseWheel: _boolean(opts.handleMouseWheel, defaults.handleMouseWheel),\n      mouseWheelScrollSensitivity: mouseWheelScrollSensitivity,\n      fastScrollSensitivity: fastScrollSensitivity\n    };\n  };\n\n  EditorOptionsValidator._sanitizeMinimapOpts = function (opts, defaults) {\n    if (typeof opts !== 'object') {\n      return defaults;\n    }\n\n    return {\n      enabled: _boolean(opts.enabled, defaults.enabled),\n      side: _stringSet(opts.side, defaults.side, ['right', 'left']),\n      showSlider: _stringSet(opts.showSlider, defaults.showSlider, ['always', 'mouseover']),\n      renderCharacters: _boolean(opts.renderCharacters, defaults.renderCharacters),\n      maxColumn: _clampedInt(opts.maxColumn, defaults.maxColumn, 1, 10000)\n    };\n  };\n\n  EditorOptionsValidator._sanitizeFindOpts = function (opts, defaults) {\n    if (typeof opts !== 'object') {\n      return defaults;\n    }\n\n    return {\n      seedSearchStringFromSelection: _boolean(opts.seedSearchStringFromSelection, defaults.seedSearchStringFromSelection),\n      autoFindInSelection: _boolean(opts.autoFindInSelection, defaults.autoFindInSelection),\n      globalFindClipboard: _boolean(opts.globalFindClipboard, defaults.globalFindClipboard),\n      addExtraSpaceOnTop: _boolean(opts.addExtraSpaceOnTop, defaults.addExtraSpaceOnTop)\n    };\n  };\n\n  EditorOptionsValidator._sanitizeParameterHintOpts = function (opts, defaults) {\n    if (typeof opts !== 'object') {\n      return defaults;\n    }\n\n    return {\n      enabled: _boolean(opts.enabled, defaults.enabled),\n      cycle: _boolean(opts.cycle, defaults.cycle)\n    };\n  };\n\n  EditorOptionsValidator._sanitizeHoverOpts = function (_opts, defaults) {\n    var opts;\n\n    if (typeof _opts === 'boolean') {\n      opts = {\n        enabled: _opts\n      };\n    } else if (typeof _opts === 'object') {\n      opts = _opts;\n    } else {\n      return defaults;\n    }\n\n    return {\n      enabled: _boolean(opts.enabled, defaults.enabled),\n      delay: _clampedInt(opts.delay, defaults.delay, 0, 10000),\n      sticky: _boolean(opts.sticky, defaults.sticky)\n    };\n  };\n\n  EditorOptionsValidator._sanitizeSuggestOpts = function (opts, defaults) {\n    var suggestOpts = opts.suggest || {};\n    return {\n      filterGraceful: _boolean(suggestOpts.filterGraceful, defaults.filterGraceful),\n      snippets: _stringSet(opts.snippetSuggestions, defaults.snippets, ['top', 'bottom', 'inline', 'none']),\n      snippetsPreventQuickSuggestions: _boolean(suggestOpts.snippetsPreventQuickSuggestions, defaults.filterGraceful),\n      localityBonus: _boolean(suggestOpts.localityBonus, defaults.localityBonus),\n      shareSuggestSelections: _boolean(suggestOpts.shareSuggestSelections, defaults.shareSuggestSelections),\n      showIcons: _boolean(suggestOpts.showIcons, defaults.showIcons),\n      maxVisibleSuggestions: _clampedInt(suggestOpts.maxVisibleSuggestions, defaults.maxVisibleSuggestions, 1, 15),\n      filteredTypes: isObject(suggestOpts.filteredTypes) ? suggestOpts.filteredTypes : Object.create(null)\n    };\n  };\n\n  EditorOptionsValidator._sanitizeGotoLocationOpts = function (opts, defaults) {\n    var gotoOpts = opts.gotoLocation || {};\n    return {\n      multiple: _stringSet(gotoOpts.multiple, defaults.multiple, ['peek', 'gotoAndPeek', 'goto'])\n    };\n  };\n\n  EditorOptionsValidator._sanitizeTabCompletionOpts = function (opts, defaults) {\n    if (opts === false) {\n      return 'off';\n    } else if (opts === true) {\n      return 'onlySnippets';\n    } else {\n      return _stringSet(opts, defaults, ['on', 'off', 'onlySnippets']);\n    }\n  };\n\n  EditorOptionsValidator._sanitizeViewInfo = function (opts, defaults) {\n    var rulers = [];\n\n    if (Array.isArray(opts.rulers)) {\n      for (var i = 0, len = opts.rulers.length; i < len; i++) {\n        rulers.push(_clampedInt(opts.rulers[i], 0, 0, 10000));\n      }\n\n      rulers.sort();\n    }\n\n    var renderLineNumbers = defaults.renderLineNumbers;\n    var renderCustomLineNumbers = defaults.renderCustomLineNumbers;\n\n    if (typeof opts.lineNumbers !== 'undefined') {\n      var lineNumbers = opts.lineNumbers; // Compatibility with old true or false values\n\n      if (lineNumbers === true) {\n        lineNumbers = 'on';\n      } else if (lineNumbers === false) {\n        lineNumbers = 'off';\n      }\n\n      if (typeof lineNumbers === 'function') {\n        renderLineNumbers = 4\n        /* Custom */\n        ;\n        renderCustomLineNumbers = lineNumbers;\n      } else if (lineNumbers === 'interval') {\n        renderLineNumbers = 3\n        /* Interval */\n        ;\n      } else if (lineNumbers === 'relative') {\n        renderLineNumbers = 2\n        /* Relative */\n        ;\n      } else if (lineNumbers === 'on') {\n        renderLineNumbers = 1\n        /* On */\n        ;\n      } else {\n        renderLineNumbers = 0\n        /* Off */\n        ;\n      }\n    }\n\n    var fontLigatures = _boolean(opts.fontLigatures, defaults.fontLigatures);\n\n    var disableMonospaceOptimizations = _boolean(opts.disableMonospaceOptimizations, defaults.disableMonospaceOptimizations) || fontLigatures;\n    var renderWhitespace = opts.renderWhitespace;\n    {\n      // Compatibility with old true or false values\n      if (renderWhitespace === true) {\n        renderWhitespace = 'boundary';\n      } else if (renderWhitespace === false) {\n        renderWhitespace = 'none';\n      }\n\n      renderWhitespace = _stringSet(renderWhitespace, defaults.renderWhitespace, ['none', 'boundary', 'selection', 'all']);\n    }\n    var renderLineHighlight = opts.renderLineHighlight;\n    {\n      // Compatibility with old true or false values\n      if (renderLineHighlight === true) {\n        renderLineHighlight = 'line';\n      } else if (renderLineHighlight === false) {\n        renderLineHighlight = 'none';\n      }\n\n      renderLineHighlight = _stringSet(renderLineHighlight, defaults.renderLineHighlight, ['none', 'gutter', 'line', 'all']);\n    }\n\n    var mouseWheelScrollSensitivity = _float(opts.mouseWheelScrollSensitivity, defaults.scrollbar.mouseWheelScrollSensitivity);\n\n    if (mouseWheelScrollSensitivity === 0) {\n      // Disallow 0, as it would prevent/block scrolling\n      mouseWheelScrollSensitivity = 1;\n    }\n\n    var fastScrollSensitivity = _float(opts.fastScrollSensitivity, defaults.scrollbar.fastScrollSensitivity);\n\n    if (fastScrollSensitivity <= 0) {\n      fastScrollSensitivity = defaults.scrollbar.fastScrollSensitivity;\n    }\n\n    var scrollbar = this._sanitizeScrollbarOpts(opts.scrollbar, defaults.scrollbar, mouseWheelScrollSensitivity, fastScrollSensitivity);\n\n    var minimap = this._sanitizeMinimapOpts(opts.minimap, defaults.minimap);\n\n    return {\n      extraEditorClassName: _string(opts.extraEditorClassName, defaults.extraEditorClassName),\n      disableMonospaceOptimizations: disableMonospaceOptimizations,\n      rulers: rulers,\n      ariaLabel: _string(opts.ariaLabel, defaults.ariaLabel),\n      cursorSurroundingLines: _clampedInt(opts.cursorSurroundingLines, defaults.cursorWidth, 0, Number.MAX_VALUE),\n      renderLineNumbers: renderLineNumbers,\n      renderCustomLineNumbers: renderCustomLineNumbers,\n      renderFinalNewline: _boolean(opts.renderFinalNewline, defaults.renderFinalNewline),\n      selectOnLineNumbers: _boolean(opts.selectOnLineNumbers, defaults.selectOnLineNumbers),\n      glyphMargin: _boolean(opts.glyphMargin, defaults.glyphMargin),\n      revealHorizontalRightPadding: _clampedInt(opts.revealHorizontalRightPadding, defaults.revealHorizontalRightPadding, 0, 1000),\n      roundedSelection: _boolean(opts.roundedSelection, defaults.roundedSelection),\n      overviewRulerLanes: _clampedInt(opts.overviewRulerLanes, defaults.overviewRulerLanes, 0, 3),\n      overviewRulerBorder: _boolean(opts.overviewRulerBorder, defaults.overviewRulerBorder),\n      cursorBlinking: _cursorBlinkingStyleFromString(opts.cursorBlinking, defaults.cursorBlinking),\n      mouseWheelZoom: _boolean(opts.mouseWheelZoom, defaults.mouseWheelZoom),\n      cursorSmoothCaretAnimation: _boolean(opts.cursorSmoothCaretAnimation, defaults.cursorSmoothCaretAnimation),\n      cursorStyle: _cursorStyleFromString(opts.cursorStyle, defaults.cursorStyle),\n      cursorWidth: _clampedInt(opts.cursorWidth, defaults.cursorWidth, 0, Number.MAX_VALUE),\n      hideCursorInOverviewRuler: _boolean(opts.hideCursorInOverviewRuler, defaults.hideCursorInOverviewRuler),\n      scrollBeyondLastLine: _boolean(opts.scrollBeyondLastLine, defaults.scrollBeyondLastLine),\n      scrollBeyondLastColumn: _clampedInt(opts.scrollBeyondLastColumn, defaults.scrollBeyondLastColumn, 0, 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ),\n      smoothScrolling: _boolean(opts.smoothScrolling, defaults.smoothScrolling),\n      stopRenderingLineAfter: _clampedInt(opts.stopRenderingLineAfter, defaults.stopRenderingLineAfter, -1, 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ),\n      renderWhitespace: renderWhitespace,\n      renderControlCharacters: _boolean(opts.renderControlCharacters, defaults.renderControlCharacters),\n      fontLigatures: fontLigatures,\n      renderIndentGuides: _boolean(opts.renderIndentGuides, defaults.renderIndentGuides),\n      highlightActiveIndentGuide: _boolean(opts.highlightActiveIndentGuide, defaults.highlightActiveIndentGuide),\n      renderLineHighlight: renderLineHighlight,\n      scrollbar: scrollbar,\n      minimap: minimap,\n      fixedOverflowWidgets: _boolean(opts.fixedOverflowWidgets, defaults.fixedOverflowWidgets)\n    };\n  };\n\n  EditorOptionsValidator._sanitizeContribInfo = function (opts, defaults) {\n    var quickSuggestions;\n\n    if (typeof opts.quickSuggestions === 'object') {\n      quickSuggestions = __assign({\n        other: true\n      }, opts.quickSuggestions);\n    } else {\n      quickSuggestions = _boolean(opts.quickSuggestions, defaults.quickSuggestions);\n    } // Compatibility support for acceptSuggestionOnEnter\n\n\n    if (typeof opts.acceptSuggestionOnEnter === 'boolean') {\n      opts.acceptSuggestionOnEnter = opts.acceptSuggestionOnEnter ? 'on' : 'off';\n    }\n\n    var find = this._sanitizeFindOpts(opts.find, defaults.find);\n\n    return {\n      selectionClipboard: _boolean(opts.selectionClipboard, defaults.selectionClipboard),\n      hover: this._sanitizeHoverOpts(opts.hover, defaults.hover),\n      links: _boolean(opts.links, defaults.links),\n      contextmenu: _boolean(opts.contextmenu, defaults.contextmenu),\n      quickSuggestions: quickSuggestions,\n      quickSuggestionsDelay: _clampedInt(opts.quickSuggestionsDelay, defaults.quickSuggestionsDelay, -1073741824\n      /* MIN_SAFE_SMALL_INTEGER */\n      , 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      ),\n      parameterHints: this._sanitizeParameterHintOpts(opts.parameterHints, defaults.parameterHints),\n      formatOnType: _boolean(opts.formatOnType, defaults.formatOnType),\n      formatOnPaste: _boolean(opts.formatOnPaste, defaults.formatOnPaste),\n      suggestOnTriggerCharacters: _boolean(opts.suggestOnTriggerCharacters, defaults.suggestOnTriggerCharacters),\n      acceptSuggestionOnEnter: _stringSet(opts.acceptSuggestionOnEnter, defaults.acceptSuggestionOnEnter, ['on', 'smart', 'off']),\n      acceptSuggestionOnCommitCharacter: _boolean(opts.acceptSuggestionOnCommitCharacter, defaults.acceptSuggestionOnCommitCharacter),\n      wordBasedSuggestions: _boolean(opts.wordBasedSuggestions, defaults.wordBasedSuggestions),\n      suggestSelection: _stringSet(opts.suggestSelection, defaults.suggestSelection, ['first', 'recentlyUsed', 'recentlyUsedByPrefix']),\n      suggestFontSize: _clampedInt(opts.suggestFontSize, defaults.suggestFontSize, 0, 1000),\n      suggestLineHeight: _clampedInt(opts.suggestLineHeight, defaults.suggestLineHeight, 0, 1000),\n      tabCompletion: this._sanitizeTabCompletionOpts(opts.tabCompletion, defaults.tabCompletion),\n      suggest: this._sanitizeSuggestOpts(opts, defaults.suggest),\n      gotoLocation: this._sanitizeGotoLocationOpts(opts, defaults.gotoLocation),\n      selectionHighlight: _boolean(opts.selectionHighlight, defaults.selectionHighlight),\n      occurrencesHighlight: _boolean(opts.occurrencesHighlight, defaults.occurrencesHighlight),\n      codeLens: _boolean(opts.codeLens, defaults.codeLens),\n      folding: _boolean(opts.folding, defaults.folding),\n      foldingStrategy: _stringSet(opts.foldingStrategy, defaults.foldingStrategy, ['auto', 'indentation']),\n      showFoldingControls: _stringSet(opts.showFoldingControls, defaults.showFoldingControls, ['always', 'mouseover']),\n      matchBrackets: _boolean(opts.matchBrackets, defaults.matchBrackets),\n      find: find,\n      colorDecorators: _boolean(opts.colorDecorators, defaults.colorDecorators),\n      lightbulbEnabled: _boolean(opts.lightbulb ? opts.lightbulb.enabled : false, defaults.lightbulbEnabled),\n      codeActionsOnSave: _booleanMap(opts.codeActionsOnSave, {}),\n      codeActionsOnSaveTimeout: _clampedInt(opts.codeActionsOnSaveTimeout, defaults.codeActionsOnSaveTimeout, 1, 10000)\n    };\n  };\n\n  return EditorOptionsValidator;\n}();\n\nexport { EditorOptionsValidator };\n/**\n * @internal\n */\n\nvar InternalEditorOptionsFactory =\n/** @class */\nfunction () {\n  function InternalEditorOptionsFactory() {}\n\n  InternalEditorOptionsFactory._tweakValidatedOptions = function (opts, accessibilitySupport) {\n    var accessibilityIsOff = accessibilitySupport === 1\n    /* Disabled */\n    ;\n    return {\n      inDiffEditor: opts.inDiffEditor,\n      wordSeparators: opts.wordSeparators,\n      lineNumbersMinChars: opts.lineNumbersMinChars,\n      lineDecorationsWidth: opts.lineDecorationsWidth,\n      readOnly: opts.readOnly,\n      mouseStyle: opts.mouseStyle,\n      disableLayerHinting: opts.disableLayerHinting,\n      automaticLayout: opts.automaticLayout,\n      wordWrap: opts.wordWrap,\n      wordWrapColumn: opts.wordWrapColumn,\n      wordWrapMinified: opts.wordWrapMinified,\n      wrappingIndent: opts.wrappingIndent,\n      wordWrapBreakBeforeCharacters: opts.wordWrapBreakBeforeCharacters,\n      wordWrapBreakAfterCharacters: opts.wordWrapBreakAfterCharacters,\n      wordWrapBreakObtrusiveCharacters: opts.wordWrapBreakObtrusiveCharacters,\n      autoClosingBrackets: opts.autoClosingBrackets,\n      autoClosingQuotes: opts.autoClosingQuotes,\n      autoClosingOvertype: opts.autoClosingOvertype,\n      autoSurround: opts.autoSurround,\n      autoIndent: opts.autoIndent,\n      dragAndDrop: opts.dragAndDrop,\n      emptySelectionClipboard: opts.emptySelectionClipboard,\n      copyWithSyntaxHighlighting: opts.copyWithSyntaxHighlighting,\n      useTabStops: opts.useTabStops,\n      multiCursorModifier: opts.multiCursorModifier,\n      multiCursorMergeOverlapping: opts.multiCursorMergeOverlapping,\n      accessibilitySupport: opts.accessibilitySupport,\n      showUnused: opts.showUnused,\n      viewInfo: {\n        extraEditorClassName: opts.viewInfo.extraEditorClassName,\n        disableMonospaceOptimizations: opts.viewInfo.disableMonospaceOptimizations,\n        rulers: opts.viewInfo.rulers,\n        ariaLabel: accessibilityIsOff ? nls.localize('accessibilityOffAriaLabel', \"The editor is not accessible at this time. Press Alt+F1 for options.\") : opts.viewInfo.ariaLabel,\n        renderLineNumbers: opts.viewInfo.renderLineNumbers,\n        renderCustomLineNumbers: opts.viewInfo.renderCustomLineNumbers,\n        cursorSurroundingLines: opts.viewInfo.cursorSurroundingLines,\n        renderFinalNewline: opts.viewInfo.renderFinalNewline,\n        selectOnLineNumbers: opts.viewInfo.selectOnLineNumbers,\n        glyphMargin: opts.viewInfo.glyphMargin,\n        revealHorizontalRightPadding: opts.viewInfo.revealHorizontalRightPadding,\n        roundedSelection: opts.viewInfo.roundedSelection,\n        overviewRulerLanes: opts.viewInfo.overviewRulerLanes,\n        overviewRulerBorder: opts.viewInfo.overviewRulerBorder,\n        cursorBlinking: opts.viewInfo.cursorBlinking,\n        mouseWheelZoom: opts.viewInfo.mouseWheelZoom,\n        cursorSmoothCaretAnimation: opts.viewInfo.cursorSmoothCaretAnimation,\n        cursorStyle: opts.viewInfo.cursorStyle,\n        cursorWidth: opts.viewInfo.cursorWidth,\n        hideCursorInOverviewRuler: opts.viewInfo.hideCursorInOverviewRuler,\n        scrollBeyondLastLine: opts.viewInfo.scrollBeyondLastLine,\n        scrollBeyondLastColumn: opts.viewInfo.scrollBeyondLastColumn,\n        smoothScrolling: opts.viewInfo.smoothScrolling,\n        stopRenderingLineAfter: opts.viewInfo.stopRenderingLineAfter,\n        renderWhitespace: opts.viewInfo.renderWhitespace,\n        renderControlCharacters: opts.viewInfo.renderControlCharacters,\n        fontLigatures: opts.viewInfo.fontLigatures,\n        renderIndentGuides: opts.viewInfo.renderIndentGuides,\n        highlightActiveIndentGuide: opts.viewInfo.highlightActiveIndentGuide,\n        renderLineHighlight: opts.viewInfo.renderLineHighlight,\n        scrollbar: opts.viewInfo.scrollbar,\n        minimap: {\n          enabled: opts.viewInfo.minimap.enabled,\n          side: opts.viewInfo.minimap.side,\n          renderCharacters: opts.viewInfo.minimap.renderCharacters,\n          showSlider: opts.viewInfo.minimap.showSlider,\n          maxColumn: opts.viewInfo.minimap.maxColumn\n        },\n        fixedOverflowWidgets: opts.viewInfo.fixedOverflowWidgets\n      },\n      contribInfo: {\n        selectionClipboard: opts.contribInfo.selectionClipboard,\n        hover: opts.contribInfo.hover,\n        links: opts.contribInfo.links,\n        contextmenu: opts.contribInfo.contextmenu,\n        quickSuggestions: opts.contribInfo.quickSuggestions,\n        quickSuggestionsDelay: opts.contribInfo.quickSuggestionsDelay,\n        parameterHints: opts.contribInfo.parameterHints,\n        formatOnType: opts.contribInfo.formatOnType,\n        formatOnPaste: opts.contribInfo.formatOnPaste,\n        suggestOnTriggerCharacters: opts.contribInfo.suggestOnTriggerCharacters,\n        acceptSuggestionOnEnter: opts.contribInfo.acceptSuggestionOnEnter,\n        acceptSuggestionOnCommitCharacter: opts.contribInfo.acceptSuggestionOnCommitCharacter,\n        wordBasedSuggestions: opts.contribInfo.wordBasedSuggestions,\n        suggestSelection: opts.contribInfo.suggestSelection,\n        suggestFontSize: opts.contribInfo.suggestFontSize,\n        suggestLineHeight: opts.contribInfo.suggestLineHeight,\n        tabCompletion: opts.contribInfo.tabCompletion,\n        suggest: opts.contribInfo.suggest,\n        gotoLocation: opts.contribInfo.gotoLocation,\n        selectionHighlight: opts.contribInfo.selectionHighlight,\n        occurrencesHighlight: opts.contribInfo.occurrencesHighlight,\n        codeLens: opts.contribInfo.codeLens,\n        folding: opts.contribInfo.folding,\n        foldingStrategy: opts.contribInfo.foldingStrategy,\n        showFoldingControls: opts.contribInfo.showFoldingControls,\n        matchBrackets: opts.contribInfo.matchBrackets,\n        find: opts.contribInfo.find,\n        colorDecorators: opts.contribInfo.colorDecorators,\n        lightbulbEnabled: opts.contribInfo.lightbulbEnabled,\n        codeActionsOnSave: opts.contribInfo.codeActionsOnSave,\n        codeActionsOnSaveTimeout: opts.contribInfo.codeActionsOnSaveTimeout\n      }\n    };\n  };\n\n  InternalEditorOptionsFactory.createInternalEditorOptions = function (env, _opts) {\n    var accessibilitySupport;\n\n    if (_opts.accessibilitySupport === 'auto') {\n      // The editor reads the `accessibilitySupport` from the environment\n      accessibilitySupport = env.accessibilitySupport;\n    } else if (_opts.accessibilitySupport === 'on') {\n      accessibilitySupport = 2\n      /* Enabled */\n      ;\n    } else {\n      accessibilitySupport = 1\n      /* Disabled */\n      ;\n    } // Disable some non critical features to get as best performance as possible\n    // See https://github.com/Microsoft/vscode/issues/26730\n\n\n    var opts = this._tweakValidatedOptions(_opts, accessibilitySupport);\n\n    var lineDecorationsWidth;\n\n    if (typeof opts.lineDecorationsWidth === 'string' && /^\\d+(\\.\\d+)?ch$/.test(opts.lineDecorationsWidth)) {\n      var multiple = parseFloat(opts.lineDecorationsWidth.substr(0, opts.lineDecorationsWidth.length - 2));\n      lineDecorationsWidth = multiple * env.fontInfo.typicalHalfwidthCharacterWidth;\n    } else {\n      lineDecorationsWidth = _clampedInt(opts.lineDecorationsWidth, 0, 0, 1000);\n    }\n\n    if (opts.contribInfo.folding) {\n      lineDecorationsWidth += 16;\n    }\n\n    var layoutInfo = EditorLayoutProvider.compute({\n      outerWidth: env.outerWidth,\n      outerHeight: env.outerHeight,\n      showGlyphMargin: opts.viewInfo.glyphMargin,\n      lineHeight: env.fontInfo.lineHeight,\n      showLineNumbers: opts.viewInfo.renderLineNumbers !== 0\n      /* Off */\n      ,\n      lineNumbersMinChars: opts.lineNumbersMinChars,\n      lineNumbersDigitCount: env.lineNumbersDigitCount,\n      lineDecorationsWidth: lineDecorationsWidth,\n      typicalHalfwidthCharacterWidth: env.fontInfo.typicalHalfwidthCharacterWidth,\n      maxDigitWidth: env.fontInfo.maxDigitWidth,\n      verticalScrollbarWidth: opts.viewInfo.scrollbar.verticalScrollbarSize,\n      horizontalScrollbarHeight: opts.viewInfo.scrollbar.horizontalScrollbarSize,\n      scrollbarArrowSize: opts.viewInfo.scrollbar.arrowSize,\n      verticalScrollbarHasArrows: opts.viewInfo.scrollbar.verticalHasArrows,\n      minimap: opts.viewInfo.minimap.enabled,\n      minimapSide: opts.viewInfo.minimap.side,\n      minimapRenderCharacters: opts.viewInfo.minimap.renderCharacters,\n      minimapMaxColumn: opts.viewInfo.minimap.maxColumn,\n      pixelRatio: env.pixelRatio\n    });\n    var bareWrappingInfo = null;\n    {\n      var wordWrap = opts.wordWrap;\n      var wordWrapColumn = opts.wordWrapColumn;\n      var wordWrapMinified = opts.wordWrapMinified;\n\n      if (accessibilitySupport === 2\n      /* Enabled */\n      ) {\n          // See https://github.com/Microsoft/vscode/issues/27766\n          // Never enable wrapping when a screen reader is attached\n          // because arrow down etc. will not move the cursor in the way\n          // a screen reader expects.\n          bareWrappingInfo = {\n            isWordWrapMinified: false,\n            isViewportWrapping: false,\n            wrappingColumn: -1\n          };\n        } else if (wordWrapMinified && env.isDominatedByLongLines) {\n        // Force viewport width wrapping if model is dominated by long lines\n        bareWrappingInfo = {\n          isWordWrapMinified: true,\n          isViewportWrapping: true,\n          wrappingColumn: Math.max(1, layoutInfo.viewportColumn)\n        };\n      } else if (wordWrap === 'on') {\n        bareWrappingInfo = {\n          isWordWrapMinified: false,\n          isViewportWrapping: true,\n          wrappingColumn: Math.max(1, layoutInfo.viewportColumn)\n        };\n      } else if (wordWrap === 'bounded') {\n        bareWrappingInfo = {\n          isWordWrapMinified: false,\n          isViewportWrapping: true,\n          wrappingColumn: Math.min(Math.max(1, layoutInfo.viewportColumn), wordWrapColumn)\n        };\n      } else if (wordWrap === 'wordWrapColumn') {\n        bareWrappingInfo = {\n          isWordWrapMinified: false,\n          isViewportWrapping: false,\n          wrappingColumn: wordWrapColumn\n        };\n      } else {\n        bareWrappingInfo = {\n          isWordWrapMinified: false,\n          isViewportWrapping: false,\n          wrappingColumn: -1\n        };\n      }\n    }\n    var wrappingInfo = {\n      inDiffEditor: opts.inDiffEditor,\n      isDominatedByLongLines: env.isDominatedByLongLines,\n      isWordWrapMinified: bareWrappingInfo.isWordWrapMinified,\n      isViewportWrapping: bareWrappingInfo.isViewportWrapping,\n      wrappingColumn: bareWrappingInfo.wrappingColumn,\n      wrappingIndent: opts.wrappingIndent,\n      wordWrapBreakBeforeCharacters: opts.wordWrapBreakBeforeCharacters,\n      wordWrapBreakAfterCharacters: opts.wordWrapBreakAfterCharacters,\n      wordWrapBreakObtrusiveCharacters: opts.wordWrapBreakObtrusiveCharacters\n    };\n    var className = 'monaco-editor';\n\n    if (opts.viewInfo.extraEditorClassName) {\n      className += ' ' + opts.viewInfo.extraEditorClassName;\n    }\n\n    if (env.extraEditorClassName) {\n      className += ' ' + env.extraEditorClassName;\n    }\n\n    if (opts.viewInfo.fontLigatures) {\n      className += ' enable-ligatures';\n    }\n\n    if (opts.mouseStyle === 'default') {\n      className += ' mouse-default';\n    } else if (opts.mouseStyle === 'copy') {\n      className += ' mouse-copy';\n    }\n\n    return new InternalEditorOptions({\n      canUseLayerHinting: opts.disableLayerHinting ? false : true,\n      pixelRatio: env.pixelRatio,\n      editorClassName: className,\n      lineHeight: env.fontInfo.lineHeight,\n      readOnly: opts.readOnly,\n      accessibilitySupport: accessibilitySupport,\n      multiCursorModifier: opts.multiCursorModifier,\n      multiCursorMergeOverlapping: opts.multiCursorMergeOverlapping,\n      wordSeparators: opts.wordSeparators,\n      autoClosingBrackets: opts.autoClosingBrackets,\n      autoClosingQuotes: opts.autoClosingQuotes,\n      autoClosingOvertype: opts.autoClosingOvertype,\n      autoSurround: opts.autoSurround,\n      autoIndent: opts.autoIndent,\n      useTabStops: opts.useTabStops,\n      tabFocusMode: opts.readOnly ? true : env.tabFocusMode,\n      dragAndDrop: opts.dragAndDrop,\n      emptySelectionClipboard: opts.emptySelectionClipboard && env.emptySelectionClipboard,\n      copyWithSyntaxHighlighting: opts.copyWithSyntaxHighlighting,\n      layoutInfo: layoutInfo,\n      fontInfo: env.fontInfo,\n      viewInfo: opts.viewInfo,\n      wrappingInfo: wrappingInfo,\n      contribInfo: opts.contribInfo,\n      showUnused: opts.showUnused\n    });\n  };\n\n  return InternalEditorOptionsFactory;\n}();\n\nexport { InternalEditorOptionsFactory };\n/**\n * @internal\n */\n\nvar EditorLayoutProvider =\n/** @class */\nfunction () {\n  function EditorLayoutProvider() {}\n\n  EditorLayoutProvider.compute = function (_opts) {\n    var outerWidth = _opts.outerWidth | 0;\n    var outerHeight = _opts.outerHeight | 0;\n    var showGlyphMargin = _opts.showGlyphMargin;\n    var lineHeight = _opts.lineHeight | 0;\n    var showLineNumbers = _opts.showLineNumbers;\n    var lineNumbersMinChars = _opts.lineNumbersMinChars | 0;\n    var lineNumbersDigitCount = _opts.lineNumbersDigitCount | 0;\n    var lineDecorationsWidth = _opts.lineDecorationsWidth | 0;\n    var typicalHalfwidthCharacterWidth = _opts.typicalHalfwidthCharacterWidth;\n    var maxDigitWidth = _opts.maxDigitWidth;\n    var verticalScrollbarWidth = _opts.verticalScrollbarWidth | 0;\n    var verticalScrollbarHasArrows = _opts.verticalScrollbarHasArrows;\n    var scrollbarArrowSize = _opts.scrollbarArrowSize | 0;\n    var horizontalScrollbarHeight = _opts.horizontalScrollbarHeight | 0;\n    var minimap = _opts.minimap;\n    var minimapSide = _opts.minimapSide;\n    var minimapRenderCharacters = _opts.minimapRenderCharacters;\n    var minimapMaxColumn = _opts.minimapMaxColumn | 0;\n    var pixelRatio = _opts.pixelRatio;\n    var lineNumbersWidth = 0;\n\n    if (showLineNumbers) {\n      var digitCount = Math.max(lineNumbersDigitCount, lineNumbersMinChars);\n      lineNumbersWidth = Math.round(digitCount * maxDigitWidth);\n    }\n\n    var glyphMarginWidth = 0;\n\n    if (showGlyphMargin) {\n      glyphMarginWidth = lineHeight;\n    }\n\n    var glyphMarginLeft = 0;\n    var lineNumbersLeft = glyphMarginLeft + glyphMarginWidth;\n    var decorationsLeft = lineNumbersLeft + lineNumbersWidth;\n    var contentLeft = decorationsLeft + lineDecorationsWidth;\n    var remainingWidth = outerWidth - glyphMarginWidth - lineNumbersWidth - lineDecorationsWidth;\n    var renderMinimap;\n    var minimapLeft;\n    var minimapWidth;\n    var contentWidth;\n\n    if (!minimap) {\n      minimapLeft = 0;\n      minimapWidth = 0;\n      renderMinimap = 0\n      /* None */\n      ;\n      contentWidth = remainingWidth;\n    } else {\n      var minimapCharWidth = void 0;\n\n      if (pixelRatio >= 2) {\n        renderMinimap = minimapRenderCharacters ? 2\n        /* Large */\n        : 4\n        /* LargeBlocks */\n        ;\n        minimapCharWidth = 2 / pixelRatio;\n      } else {\n        renderMinimap = minimapRenderCharacters ? 1\n        /* Small */\n        : 3\n        /* SmallBlocks */\n        ;\n        minimapCharWidth = 1 / pixelRatio;\n      } // Given:\n      // (leaving 2px for the cursor to have space after the last character)\n      // viewportColumn = (contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth\n      // minimapWidth = viewportColumn * minimapCharWidth\n      // contentWidth = remainingWidth - minimapWidth\n      // What are good values for contentWidth and minimapWidth ?\n      // minimapWidth = ((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth) * minimapCharWidth\n      // typicalHalfwidthCharacterWidth * minimapWidth = (contentWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n      // typicalHalfwidthCharacterWidth * minimapWidth = (remainingWidth - minimapWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n      // (typicalHalfwidthCharacterWidth + minimapCharWidth) * minimapWidth = (remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth\n      // minimapWidth = ((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth) / (typicalHalfwidthCharacterWidth + minimapCharWidth)\n\n\n      minimapWidth = Math.max(0, Math.floor((remainingWidth - verticalScrollbarWidth - 2) * minimapCharWidth / (typicalHalfwidthCharacterWidth + minimapCharWidth)));\n      var minimapColumns = minimapWidth / minimapCharWidth;\n\n      if (minimapColumns > minimapMaxColumn) {\n        minimapWidth = Math.floor(minimapMaxColumn * minimapCharWidth);\n      }\n\n      contentWidth = remainingWidth - minimapWidth;\n\n      if (minimapSide === 'left') {\n        minimapLeft = 0;\n        glyphMarginLeft += minimapWidth;\n        lineNumbersLeft += minimapWidth;\n        decorationsLeft += minimapWidth;\n        contentLeft += minimapWidth;\n      } else {\n        minimapLeft = outerWidth - minimapWidth - verticalScrollbarWidth;\n      }\n    } // (leaving 2px for the cursor to have space after the last character)\n\n\n    var viewportColumn = Math.max(1, Math.floor((contentWidth - verticalScrollbarWidth - 2) / typicalHalfwidthCharacterWidth));\n    var verticalArrowSize = verticalScrollbarHasArrows ? scrollbarArrowSize : 0;\n    return {\n      width: outerWidth,\n      height: outerHeight,\n      glyphMarginLeft: glyphMarginLeft,\n      glyphMarginWidth: glyphMarginWidth,\n      glyphMarginHeight: outerHeight,\n      lineNumbersLeft: lineNumbersLeft,\n      lineNumbersWidth: lineNumbersWidth,\n      lineNumbersHeight: outerHeight,\n      decorationsLeft: decorationsLeft,\n      decorationsWidth: lineDecorationsWidth,\n      decorationsHeight: outerHeight,\n      contentLeft: contentLeft,\n      contentWidth: contentWidth,\n      contentHeight: outerHeight,\n      renderMinimap: renderMinimap,\n      minimapLeft: minimapLeft,\n      minimapWidth: minimapWidth,\n      viewportColumn: viewportColumn,\n      verticalScrollbarWidth: verticalScrollbarWidth,\n      horizontalScrollbarHeight: horizontalScrollbarHeight,\n      overviewRuler: {\n        top: verticalArrowSize,\n        width: verticalScrollbarWidth,\n        height: outerHeight - 2 * verticalArrowSize,\n        right: 0\n      }\n    };\n  };\n\n  return EditorLayoutProvider;\n}();\n\nexport { EditorLayoutProvider };\nvar DEFAULT_WINDOWS_FONT_FAMILY = 'Consolas, \\'Courier New\\', monospace';\nvar DEFAULT_MAC_FONT_FAMILY = 'Menlo, Monaco, \\'Courier New\\', monospace';\nvar DEFAULT_LINUX_FONT_FAMILY = '\\'Droid Sans Mono\\', \\'monospace\\', monospace, \\'Droid Sans Fallback\\'';\n/**\n * @internal\n */\n\nexport var EDITOR_FONT_DEFAULTS = {\n  fontFamily: platform.isMacintosh ? DEFAULT_MAC_FONT_FAMILY : platform.isLinux ? DEFAULT_LINUX_FONT_FAMILY : DEFAULT_WINDOWS_FONT_FAMILY,\n  fontWeight: 'normal',\n  fontSize: platform.isMacintosh ? 12 : 14,\n  lineHeight: 0,\n  letterSpacing: 0\n};\n/**\n * @internal\n */\n\nexport var EDITOR_MODEL_DEFAULTS = {\n  tabSize: 4,\n  indentSize: 4,\n  insertSpaces: true,\n  detectIndentation: true,\n  trimAutoWhitespace: true,\n  largeFileOptimizations: true\n};\n/**\n * @internal\n */\n\nexport var EDITOR_DEFAULTS = {\n  inDiffEditor: false,\n  wordSeparators: USUAL_WORD_SEPARATORS,\n  lineNumbersMinChars: 5,\n  lineDecorationsWidth: 10,\n  readOnly: false,\n  mouseStyle: 'text',\n  disableLayerHinting: false,\n  automaticLayout: false,\n  wordWrap: 'off',\n  wordWrapColumn: 80,\n  wordWrapMinified: true,\n  wrappingIndent: 1\n  /* Same */\n  ,\n  wordWrapBreakBeforeCharacters: '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋',\n  wordWrapBreakAfterCharacters: ' \\t})]?|/&,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣',\n  wordWrapBreakObtrusiveCharacters: '.',\n  autoClosingBrackets: 'languageDefined',\n  autoClosingQuotes: 'languageDefined',\n  autoClosingOvertype: 'auto',\n  autoSurround: 'languageDefined',\n  autoIndent: true,\n  dragAndDrop: true,\n  emptySelectionClipboard: true,\n  copyWithSyntaxHighlighting: true,\n  useTabStops: true,\n  multiCursorModifier: 'altKey',\n  multiCursorMergeOverlapping: true,\n  accessibilitySupport: 'auto',\n  showUnused: true,\n  viewInfo: {\n    extraEditorClassName: '',\n    disableMonospaceOptimizations: false,\n    rulers: [],\n    ariaLabel: nls.localize('editorViewAccessibleLabel', \"Editor content\"),\n    renderLineNumbers: 1\n    /* On */\n    ,\n    renderCustomLineNumbers: null,\n    cursorSurroundingLines: 0,\n    renderFinalNewline: true,\n    selectOnLineNumbers: true,\n    glyphMargin: true,\n    revealHorizontalRightPadding: 30,\n    roundedSelection: true,\n    overviewRulerLanes: 2,\n    overviewRulerBorder: true,\n    cursorBlinking: 1\n    /* Blink */\n    ,\n    mouseWheelZoom: false,\n    cursorSmoothCaretAnimation: false,\n    cursorStyle: TextEditorCursorStyle.Line,\n    cursorWidth: 0,\n    hideCursorInOverviewRuler: false,\n    scrollBeyondLastLine: true,\n    scrollBeyondLastColumn: 5,\n    smoothScrolling: false,\n    stopRenderingLineAfter: 10000,\n    renderWhitespace: 'none',\n    renderControlCharacters: false,\n    fontLigatures: false,\n    renderIndentGuides: true,\n    highlightActiveIndentGuide: true,\n    renderLineHighlight: 'line',\n    scrollbar: {\n      vertical: 1\n      /* Auto */\n      ,\n      horizontal: 1\n      /* Auto */\n      ,\n      arrowSize: 11,\n      useShadows: true,\n      verticalHasArrows: false,\n      horizontalHasArrows: false,\n      horizontalScrollbarSize: 10,\n      horizontalSliderSize: 10,\n      verticalScrollbarSize: 14,\n      verticalSliderSize: 14,\n      handleMouseWheel: true,\n      mouseWheelScrollSensitivity: 1,\n      fastScrollSensitivity: 5\n    },\n    minimap: {\n      enabled: true,\n      side: 'right',\n      showSlider: 'mouseover',\n      renderCharacters: true,\n      maxColumn: 120\n    },\n    fixedOverflowWidgets: false\n  },\n  contribInfo: {\n    selectionClipboard: true,\n    hover: {\n      enabled: true,\n      delay: 300,\n      sticky: true\n    },\n    links: true,\n    contextmenu: true,\n    quickSuggestions: {\n      other: true,\n      comments: false,\n      strings: false\n    },\n    quickSuggestionsDelay: 10,\n    parameterHints: {\n      enabled: true,\n      cycle: false\n    },\n    formatOnType: false,\n    formatOnPaste: false,\n    suggestOnTriggerCharacters: true,\n    acceptSuggestionOnEnter: 'on',\n    acceptSuggestionOnCommitCharacter: true,\n    wordBasedSuggestions: true,\n    suggestSelection: 'recentlyUsed',\n    suggestFontSize: 0,\n    suggestLineHeight: 0,\n    tabCompletion: 'off',\n    suggest: {\n      filterGraceful: true,\n      snippets: 'inline',\n      snippetsPreventQuickSuggestions: true,\n      localityBonus: false,\n      shareSuggestSelections: false,\n      showIcons: true,\n      maxVisibleSuggestions: 12,\n      filteredTypes: Object.create(null)\n    },\n    gotoLocation: {\n      multiple: 'peek'\n    },\n    selectionHighlight: true,\n    occurrencesHighlight: true,\n    codeLens: true,\n    folding: true,\n    foldingStrategy: 'auto',\n    showFoldingControls: 'mouseover',\n    matchBrackets: true,\n    find: {\n      seedSearchStringFromSelection: true,\n      autoFindInSelection: false,\n      globalFindClipboard: false,\n      addExtraSpaceOnTop: true\n    },\n    colorDecorators: true,\n    lightbulbEnabled: true,\n    codeActionsOnSave: {},\n    codeActionsOnSaveTimeout: 750\n  }\n};","map":null,"metadata":{},"sourceType":"module"}