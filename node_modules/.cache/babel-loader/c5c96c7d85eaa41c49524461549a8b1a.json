{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as strings from '../../../base/common/strings.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorKeybindingCancellationTokenSource } from './keybindingCancellation.js';\n\nvar EditorState =\n/** @class */\nfunction () {\n  function EditorState(editor, flags) {\n    this.flags = flags;\n\n    if ((this.flags & 1\n    /* Value */\n    ) !== 0) {\n      var model = editor.getModel();\n      this.modelVersionId = model ? strings.format('{0}#{1}', model.uri.toString(), model.getVersionId()) : null;\n    } else {\n      this.modelVersionId = null;\n    }\n\n    if ((this.flags & 4\n    /* Position */\n    ) !== 0) {\n      this.position = editor.getPosition();\n    } else {\n      this.position = null;\n    }\n\n    if ((this.flags & 2\n    /* Selection */\n    ) !== 0) {\n      this.selection = editor.getSelection();\n    } else {\n      this.selection = null;\n    }\n\n    if ((this.flags & 8\n    /* Scroll */\n    ) !== 0) {\n      this.scrollLeft = editor.getScrollLeft();\n      this.scrollTop = editor.getScrollTop();\n    } else {\n      this.scrollLeft = -1;\n      this.scrollTop = -1;\n    }\n  }\n\n  EditorState.prototype._equals = function (other) {\n    if (!(other instanceof EditorState)) {\n      return false;\n    }\n\n    var state = other;\n\n    if (this.modelVersionId !== state.modelVersionId) {\n      return false;\n    }\n\n    if (this.scrollLeft !== state.scrollLeft || this.scrollTop !== state.scrollTop) {\n      return false;\n    }\n\n    if (!this.position && state.position || this.position && !state.position || this.position && state.position && !this.position.equals(state.position)) {\n      return false;\n    }\n\n    if (!this.selection && state.selection || this.selection && !state.selection || this.selection && state.selection && !this.selection.equalsRange(state.selection)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  EditorState.prototype.validate = function (editor) {\n    return this._equals(new EditorState(editor, this.flags));\n  };\n\n  return EditorState;\n}();\n\nexport { EditorState };\n/**\n * A cancellation token source that cancels when the editor changes as expressed\n * by the provided flags\n */\n\nvar EditorStateCancellationTokenSource =\n/** @class */\nfunction (_super) {\n  __extends(EditorStateCancellationTokenSource, _super);\n\n  function EditorStateCancellationTokenSource(editor, flags, parent) {\n    var _this = _super.call(this, editor, parent) || this;\n\n    _this.editor = editor;\n    _this._listener = new DisposableStore();\n\n    if (flags & 4\n    /* Position */\n    ) {\n        _this._listener.add(editor.onDidChangeCursorPosition(function (_) {\n          return _this.cancel();\n        }));\n      }\n\n    if (flags & 2\n    /* Selection */\n    ) {\n        _this._listener.add(editor.onDidChangeCursorSelection(function (_) {\n          return _this.cancel();\n        }));\n      }\n\n    if (flags & 8\n    /* Scroll */\n    ) {\n        _this._listener.add(editor.onDidScrollChange(function (_) {\n          return _this.cancel();\n        }));\n      }\n\n    if (flags & 1\n    /* Value */\n    ) {\n        _this._listener.add(editor.onDidChangeModel(function (_) {\n          return _this.cancel();\n        }));\n\n        _this._listener.add(editor.onDidChangeModelContent(function (_) {\n          return _this.cancel();\n        }));\n      }\n\n    return _this;\n  }\n\n  EditorStateCancellationTokenSource.prototype.dispose = function () {\n    this._listener.dispose();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return EditorStateCancellationTokenSource;\n}(EditorKeybindingCancellationTokenSource);\n\nexport { EditorStateCancellationTokenSource };\n/**\n * A cancellation token source that cancels when the provided model changes\n */\n\nvar TextModelCancellationTokenSource =\n/** @class */\nfunction (_super) {\n  __extends(TextModelCancellationTokenSource, _super);\n\n  function TextModelCancellationTokenSource(model, parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this._listener = model.onDidChangeContent(function () {\n      return _this.cancel();\n    });\n    return _this;\n  }\n\n  TextModelCancellationTokenSource.prototype.dispose = function () {\n    this._listener.dispose();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return TextModelCancellationTokenSource;\n}(CancellationTokenSource);\n\nexport { TextModelCancellationTokenSource };\n\nvar StableEditorScrollState =\n/** @class */\nfunction () {\n  function StableEditorScrollState(_visiblePosition, _visiblePositionScrollDelta) {\n    this._visiblePosition = _visiblePosition;\n    this._visiblePositionScrollDelta = _visiblePositionScrollDelta;\n  }\n\n  StableEditorScrollState.capture = function (editor) {\n    var visiblePosition = null;\n    var visiblePositionScrollDelta = 0;\n\n    if (editor.getScrollTop() !== 0) {\n      var visibleRanges = editor.getVisibleRanges();\n\n      if (visibleRanges.length > 0) {\n        visiblePosition = visibleRanges[0].getStartPosition();\n        var visiblePositionScrollTop = editor.getTopForPosition(visiblePosition.lineNumber, visiblePosition.column);\n        visiblePositionScrollDelta = editor.getScrollTop() - visiblePositionScrollTop;\n      }\n    }\n\n    return new StableEditorScrollState(visiblePosition, visiblePositionScrollDelta);\n  };\n\n  StableEditorScrollState.prototype.restore = function (editor) {\n    if (this._visiblePosition) {\n      var visiblePositionScrollTop = editor.getTopForPosition(this._visiblePosition.lineNumber, this._visiblePosition.column);\n      editor.setScrollTop(visiblePositionScrollTop + this._visiblePositionScrollDelta);\n    }\n  };\n\n  return StableEditorScrollState;\n}();\n\nexport { StableEditorScrollState };","map":null,"metadata":{},"sourceType":"module"}