{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { Configuration } from '../../config/configuration.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\n\nvar ViewCursorRenderData =\n/** @class */\nfunction () {\n  function ViewCursorRenderData(top, left, width, height, textContent, textContentClassName) {\n    this.top = top;\n    this.left = left;\n    this.width = width;\n    this.height = height;\n    this.textContent = textContent;\n    this.textContentClassName = textContentClassName;\n  }\n\n  return ViewCursorRenderData;\n}();\n\nvar ViewCursor =\n/** @class */\nfunction () {\n  function ViewCursor(context) {\n    this._context = context;\n    this._cursorStyle = this._context.configuration.editor.viewInfo.cursorStyle;\n    this._lineHeight = this._context.configuration.editor.lineHeight;\n    this._typicalHalfwidthCharacterWidth = this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n    this._lineCursorWidth = Math.min(this._context.configuration.editor.viewInfo.cursorWidth, this._typicalHalfwidthCharacterWidth);\n    this._isVisible = true; // Create the dom node\n\n    this._domNode = createFastDomNode(document.createElement('div'));\n\n    this._domNode.setClassName('cursor');\n\n    this._domNode.setHeight(this._lineHeight);\n\n    this._domNode.setTop(0);\n\n    this._domNode.setLeft(0);\n\n    Configuration.applyFontInfo(this._domNode, this._context.configuration.editor.fontInfo);\n\n    this._domNode.setDisplay('none');\n\n    this._position = new Position(1, 1);\n    this._lastRenderedContent = '';\n    this._renderData = null;\n  }\n\n  ViewCursor.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  ViewCursor.prototype.getPosition = function () {\n    return this._position;\n  };\n\n  ViewCursor.prototype.show = function () {\n    if (!this._isVisible) {\n      this._domNode.setVisibility('inherit');\n\n      this._isVisible = true;\n    }\n  };\n\n  ViewCursor.prototype.hide = function () {\n    if (this._isVisible) {\n      this._domNode.setVisibility('hidden');\n\n      this._isVisible = false;\n    }\n  };\n\n  ViewCursor.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._lineHeight = this._context.configuration.editor.lineHeight;\n    }\n\n    if (e.fontInfo) {\n      Configuration.applyFontInfo(this._domNode, this._context.configuration.editor.fontInfo);\n      this._typicalHalfwidthCharacterWidth = this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n    }\n\n    if (e.viewInfo) {\n      this._cursorStyle = this._context.configuration.editor.viewInfo.cursorStyle;\n      this._lineCursorWidth = Math.min(this._context.configuration.editor.viewInfo.cursorWidth, this._typicalHalfwidthCharacterWidth);\n    }\n\n    return true;\n  };\n\n  ViewCursor.prototype.onCursorPositionChanged = function (position) {\n    this._position = position;\n    return true;\n  };\n\n  ViewCursor.prototype._prepareRender = function (ctx) {\n    var textContent = '';\n    var textContentClassName = '';\n\n    if (this._cursorStyle === TextEditorCursorStyle.Line || this._cursorStyle === TextEditorCursorStyle.LineThin) {\n      var visibleRange = ctx.visibleRangeForPosition(this._position);\n\n      if (!visibleRange) {\n        // Outside viewport\n        return null;\n      }\n\n      var width_1;\n\n      if (this._cursorStyle === TextEditorCursorStyle.Line) {\n        width_1 = dom.computeScreenAwareSize(this._lineCursorWidth > 0 ? this._lineCursorWidth : 2);\n\n        if (width_1 > 2) {\n          var lineContent = this._context.model.getLineContent(this._position.lineNumber);\n\n          textContent = lineContent.charAt(this._position.column - 1);\n        }\n      } else {\n        width_1 = dom.computeScreenAwareSize(1);\n      }\n\n      var left = visibleRange.left;\n\n      if (width_1 >= 2 && left >= 1) {\n        // try to center cursor\n        left -= 1;\n      }\n\n      var top_1 = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n      return new ViewCursorRenderData(top_1, left, width_1, this._lineHeight, textContent, textContentClassName);\n    }\n\n    var visibleRangeForCharacter = ctx.linesVisibleRangesForRange(new Range(this._position.lineNumber, this._position.column, this._position.lineNumber, this._position.column + 1), false);\n\n    if (!visibleRangeForCharacter || visibleRangeForCharacter.length === 0 || visibleRangeForCharacter[0].ranges.length === 0) {\n      // Outside viewport\n      return null;\n    }\n\n    var range = visibleRangeForCharacter[0].ranges[0];\n    var width = range.width < 1 ? this._typicalHalfwidthCharacterWidth : range.width;\n\n    if (this._cursorStyle === TextEditorCursorStyle.Block) {\n      var lineData = this._context.model.getViewLineData(this._position.lineNumber);\n\n      textContent = lineData.content.charAt(this._position.column - 1);\n\n      if (strings.isHighSurrogate(lineData.content.charCodeAt(this._position.column - 1))) {\n        textContent += lineData.content.charAt(this._position.column);\n      }\n\n      var tokenIndex = lineData.tokens.findTokenIndexAtOffset(this._position.column - 1);\n      textContentClassName = lineData.tokens.getClassName(tokenIndex);\n    }\n\n    var top = ctx.getVerticalOffsetForLineNumber(this._position.lineNumber) - ctx.bigNumbersDelta;\n    var height = this._lineHeight; // Underline might interfere with clicking\n\n    if (this._cursorStyle === TextEditorCursorStyle.Underline || this._cursorStyle === TextEditorCursorStyle.UnderlineThin) {\n      top += this._lineHeight - 2;\n      height = 2;\n    }\n\n    return new ViewCursorRenderData(top, range.left, width, height, textContent, textContentClassName);\n  };\n\n  ViewCursor.prototype.prepareRender = function (ctx) {\n    this._renderData = this._prepareRender(ctx);\n  };\n\n  ViewCursor.prototype.render = function (ctx) {\n    if (!this._renderData) {\n      this._domNode.setDisplay('none');\n\n      return null;\n    }\n\n    if (this._lastRenderedContent !== this._renderData.textContent) {\n      this._lastRenderedContent = this._renderData.textContent;\n      this._domNode.domNode.textContent = this._lastRenderedContent;\n    }\n\n    this._domNode.setClassName('cursor ' + this._renderData.textContentClassName);\n\n    this._domNode.setDisplay('block');\n\n    this._domNode.setTop(this._renderData.top);\n\n    this._domNode.setLeft(this._renderData.left);\n\n    this._domNode.setWidth(this._renderData.width);\n\n    this._domNode.setLineHeight(this._renderData.height);\n\n    this._domNode.setHeight(this._renderData.height);\n\n    return {\n      domNode: this._domNode.domNode,\n      position: this._position,\n      contentLeft: this._renderData.left,\n      height: this._renderData.height,\n      width: 2\n    };\n  };\n\n  return ViewCursor;\n}();\n\nexport { ViewCursor };","map":null,"metadata":{},"sourceType":"module"}