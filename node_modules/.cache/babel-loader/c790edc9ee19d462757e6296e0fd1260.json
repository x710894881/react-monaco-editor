{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorState } from './cursorCommon.js';\nimport { OneCursor } from './oneCursor.js';\nimport { Selection } from '../core/selection.js';\n\nvar CursorCollection =\n/** @class */\nfunction () {\n  function CursorCollection(context) {\n    this.context = context;\n    this.primaryCursor = new OneCursor(context);\n    this.secondaryCursors = [];\n    this.lastAddedCursorIndex = 0;\n  }\n\n  CursorCollection.prototype.dispose = function () {\n    this.primaryCursor.dispose(this.context);\n    this.killSecondaryCursors();\n  };\n\n  CursorCollection.prototype.startTrackingSelections = function () {\n    this.primaryCursor.startTrackingSelection(this.context);\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].startTrackingSelection(this.context);\n    }\n  };\n\n  CursorCollection.prototype.stopTrackingSelections = function () {\n    this.primaryCursor.stopTrackingSelection(this.context);\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].stopTrackingSelection(this.context);\n    }\n  };\n\n  CursorCollection.prototype.updateContext = function (context) {\n    this.context = context;\n  };\n\n  CursorCollection.prototype.ensureValidState = function () {\n    this.primaryCursor.ensureValidState(this.context);\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      this.secondaryCursors[i].ensureValidState(this.context);\n    }\n  };\n\n  CursorCollection.prototype.readSelectionFromMarkers = function () {\n    var result = [];\n    result[0] = this.primaryCursor.readSelectionFromMarkers(this.context);\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].readSelectionFromMarkers(this.context);\n    }\n\n    return result;\n  };\n\n  CursorCollection.prototype.getAll = function () {\n    var result = [];\n    result[0] = this.primaryCursor.asCursorState();\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].asCursorState();\n    }\n\n    return result;\n  };\n\n  CursorCollection.prototype.getViewPositions = function () {\n    var result = [];\n    result[0] = this.primaryCursor.viewState.position;\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].viewState.position;\n    }\n\n    return result;\n  };\n\n  CursorCollection.prototype.getSelections = function () {\n    var result = [];\n    result[0] = this.primaryCursor.modelState.selection;\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].modelState.selection;\n    }\n\n    return result;\n  };\n\n  CursorCollection.prototype.getViewSelections = function () {\n    var result = [];\n    result[0] = this.primaryCursor.viewState.selection;\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i].viewState.selection;\n    }\n\n    return result;\n  };\n\n  CursorCollection.prototype.setSelections = function (selections) {\n    this.setStates(CursorState.fromModelSelections(selections));\n  };\n\n  CursorCollection.prototype.getPrimaryCursor = function () {\n    return this.primaryCursor.asCursorState();\n  };\n\n  CursorCollection.prototype.setStates = function (states) {\n    if (states === null) {\n      return;\n    }\n\n    this.primaryCursor.setState(this.context, states[0].modelState, states[0].viewState);\n\n    this._setSecondaryStates(states.slice(1));\n  };\n  /**\n   * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n   */\n\n\n  CursorCollection.prototype._setSecondaryStates = function (secondaryStates) {\n    var secondaryCursorsLength = this.secondaryCursors.length;\n    var secondaryStatesLength = secondaryStates.length;\n\n    if (secondaryCursorsLength < secondaryStatesLength) {\n      var createCnt = secondaryStatesLength - secondaryCursorsLength;\n\n      for (var i = 0; i < createCnt; i++) {\n        this._addSecondaryCursor();\n      }\n    } else if (secondaryCursorsLength > secondaryStatesLength) {\n      var removeCnt = secondaryCursorsLength - secondaryStatesLength;\n\n      for (var i = 0; i < removeCnt; i++) {\n        this._removeSecondaryCursor(this.secondaryCursors.length - 1);\n      }\n    }\n\n    for (var i = 0; i < secondaryStatesLength; i++) {\n      this.secondaryCursors[i].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n    }\n  };\n\n  CursorCollection.prototype.killSecondaryCursors = function () {\n    this._setSecondaryStates([]);\n  };\n\n  CursorCollection.prototype._addSecondaryCursor = function () {\n    this.secondaryCursors.push(new OneCursor(this.context));\n    this.lastAddedCursorIndex = this.secondaryCursors.length;\n  };\n\n  CursorCollection.prototype.getLastAddedCursorIndex = function () {\n    if (this.secondaryCursors.length === 0 || this.lastAddedCursorIndex === 0) {\n      return 0;\n    }\n\n    return this.lastAddedCursorIndex;\n  };\n\n  CursorCollection.prototype._removeSecondaryCursor = function (removeIndex) {\n    if (this.lastAddedCursorIndex >= removeIndex + 1) {\n      this.lastAddedCursorIndex--;\n    }\n\n    this.secondaryCursors[removeIndex].dispose(this.context);\n    this.secondaryCursors.splice(removeIndex, 1);\n  };\n\n  CursorCollection.prototype._getAll = function () {\n    var result = [];\n    result[0] = this.primaryCursor;\n\n    for (var i = 0, len = this.secondaryCursors.length; i < len; i++) {\n      result[i + 1] = this.secondaryCursors[i];\n    }\n\n    return result;\n  };\n\n  CursorCollection.prototype.normalize = function () {\n    if (this.secondaryCursors.length === 0) {\n      return;\n    }\n\n    var cursors = this._getAll();\n\n    var sortedCursors = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      sortedCursors.push({\n        index: i,\n        selection: cursors[i].modelState.selection\n      });\n    }\n\n    sortedCursors.sort(function (a, b) {\n      if (a.selection.startLineNumber === b.selection.startLineNumber) {\n        return a.selection.startColumn - b.selection.startColumn;\n      }\n\n      return a.selection.startLineNumber - b.selection.startLineNumber;\n    });\n\n    for (var sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n      var current = sortedCursors[sortedCursorIndex];\n      var next = sortedCursors[sortedCursorIndex + 1];\n      var currentSelection = current.selection;\n      var nextSelection = next.selection;\n\n      if (!this.context.config.multiCursorMergeOverlapping) {\n        continue;\n      }\n\n      var shouldMergeCursors = void 0;\n\n      if (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n        // Merge touching cursors if one of them is collapsed\n        shouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n      } else {\n        // Merge only overlapping cursors (i.e. allow touching ranges)\n        shouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n      }\n\n      if (shouldMergeCursors) {\n        var winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n        var looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n        var looserIndex = sortedCursors[looserSortedCursorIndex].index;\n        var winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n        var looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n        var winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n\n        if (!looserSelection.equalsSelection(winnerSelection)) {\n          var resultingRange = looserSelection.plusRange(winnerSelection);\n          var looserSelectionIsLTR = looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn;\n          var winnerSelectionIsLTR = winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn; // Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n\n          var resultingSelectionIsLTR = void 0;\n\n          if (looserIndex === this.lastAddedCursorIndex) {\n            resultingSelectionIsLTR = looserSelectionIsLTR;\n            this.lastAddedCursorIndex = winnerIndex;\n          } else {\n            // Winner takes it all\n            resultingSelectionIsLTR = winnerSelectionIsLTR;\n          }\n\n          var resultingSelection = void 0;\n\n          if (resultingSelectionIsLTR) {\n            resultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n          } else {\n            resultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n          }\n\n          sortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n          var resultingState = CursorState.fromModelSelection(resultingSelection);\n          cursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n        }\n\n        for (var _i = 0, sortedCursors_1 = sortedCursors; _i < sortedCursors_1.length; _i++) {\n          var sortedCursor = sortedCursors_1[_i];\n\n          if (sortedCursor.index > looserIndex) {\n            sortedCursor.index--;\n          }\n        }\n\n        cursors.splice(looserIndex, 1);\n        sortedCursors.splice(looserSortedCursorIndex, 1);\n\n        this._removeSecondaryCursor(looserIndex - 1);\n\n        sortedCursorIndex--;\n      }\n    }\n  };\n\n  return CursorCollection;\n}();\n\nexport { CursorCollection };","map":null,"metadata":{},"sourceType":"module"}