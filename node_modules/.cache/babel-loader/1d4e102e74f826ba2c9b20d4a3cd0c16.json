{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as DOM from './dom.js';\nexport function renderText(text, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var element = createElement(options);\n  element.textContent = text;\n  return element;\n}\nexport function renderFormattedText(formattedText, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var element = createElement(options);\n\n  _renderFormattedText(element, parseFormattedText(formattedText), options.actionHandler);\n\n  return element;\n}\nexport function createElement(options) {\n  var tagName = options.inline ? 'span' : 'div';\n  var element = document.createElement(tagName);\n\n  if (options.className) {\n    element.className = options.className;\n  }\n\n  return element;\n}\n\nvar StringStream =\n/** @class */\nfunction () {\n  function StringStream(source) {\n    this.source = source;\n    this.index = 0;\n  }\n\n  StringStream.prototype.eos = function () {\n    return this.index >= this.source.length;\n  };\n\n  StringStream.prototype.next = function () {\n    var next = this.peek();\n    this.advance();\n    return next;\n  };\n\n  StringStream.prototype.peek = function () {\n    return this.source[this.index];\n  };\n\n  StringStream.prototype.advance = function () {\n    this.index++;\n  };\n\n  return StringStream;\n}();\n\nfunction _renderFormattedText(element, treeNode, actionHandler) {\n  var child;\n\n  if (treeNode.type === 2\n  /* Text */\n  ) {\n      child = document.createTextNode(treeNode.content || '');\n    } else if (treeNode.type === 3\n  /* Bold */\n  ) {\n      child = document.createElement('b');\n    } else if (treeNode.type === 4\n  /* Italics */\n  ) {\n      child = document.createElement('i');\n    } else if (treeNode.type === 5\n  /* Action */\n  && actionHandler) {\n    var a = document.createElement('a');\n    a.href = '#';\n    actionHandler.disposeables.add(DOM.addStandardDisposableListener(a, 'click', function (event) {\n      actionHandler.callback(String(treeNode.index), event);\n    }));\n    child = a;\n  } else if (treeNode.type === 7\n  /* NewLine */\n  ) {\n      child = document.createElement('br');\n    } else if (treeNode.type === 1\n  /* Root */\n  ) {\n      child = element;\n    }\n\n  if (child && element !== child) {\n    element.appendChild(child);\n  }\n\n  if (child && Array.isArray(treeNode.children)) {\n    treeNode.children.forEach(function (nodeChild) {\n      _renderFormattedText(child, nodeChild, actionHandler);\n    });\n  }\n}\n\nfunction parseFormattedText(content) {\n  var root = {\n    type: 1\n    /* Root */\n    ,\n    children: []\n  };\n  var actionViewItemIndex = 0;\n  var current = root;\n  var stack = [];\n  var stream = new StringStream(content);\n\n  while (!stream.eos()) {\n    var next = stream.next();\n    var isEscapedFormatType = next === '\\\\' && formatTagType(stream.peek()) !== 0\n    /* Invalid */\n    ;\n\n    if (isEscapedFormatType) {\n      next = stream.next(); // unread the backslash if it escapes a format tag type\n    }\n\n    if (!isEscapedFormatType && isFormatTag(next) && next === stream.peek()) {\n      stream.advance();\n\n      if (current.type === 2\n      /* Text */\n      ) {\n          current = stack.pop();\n        }\n\n      var type = formatTagType(next);\n\n      if (current.type === type || current.type === 5\n      /* Action */\n      && type === 6\n      /* ActionClose */\n      ) {\n        current = stack.pop();\n      } else {\n        var newCurrent = {\n          type: type,\n          children: []\n        };\n\n        if (type === 5\n        /* Action */\n        ) {\n            newCurrent.index = actionViewItemIndex;\n            actionViewItemIndex++;\n          }\n\n        current.children.push(newCurrent);\n        stack.push(current);\n        current = newCurrent;\n      }\n    } else if (next === '\\n') {\n      if (current.type === 2\n      /* Text */\n      ) {\n          current = stack.pop();\n        }\n\n      current.children.push({\n        type: 7\n        /* NewLine */\n\n      });\n    } else {\n      if (current.type !== 2\n      /* Text */\n      ) {\n          var textCurrent = {\n            type: 2\n            /* Text */\n            ,\n            content: next\n          };\n          current.children.push(textCurrent);\n          stack.push(current);\n          current = textCurrent;\n        } else {\n        current.content += next;\n      }\n    }\n  }\n\n  if (current.type === 2\n  /* Text */\n  ) {\n      current = stack.pop();\n    }\n\n  if (stack.length) {// incorrectly formatted string literal\n  }\n\n  return root;\n}\n\nfunction isFormatTag(char) {\n  return formatTagType(char) !== 0\n  /* Invalid */\n  ;\n}\n\nfunction formatTagType(char) {\n  switch (char) {\n    case '*':\n      return 3\n      /* Bold */\n      ;\n\n    case '_':\n      return 4\n      /* Italics */\n      ;\n\n    case '[':\n      return 5\n      /* Action */\n      ;\n\n    case ']':\n      return 6\n      /* ActionClose */\n      ;\n\n    default:\n      return 0\n      /* Invalid */\n      ;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}