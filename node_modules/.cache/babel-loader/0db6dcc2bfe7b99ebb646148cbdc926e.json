{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './viewCursors.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { IntervalTimer, TimeoutTimer } from '../../../../base/common/async.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { ViewCursor } from './viewCursor.js';\nimport { TextEditorCursorStyle } from '../../../common/config/editorOptions.js';\nimport { editorCursorBackground, editorCursorForeground } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\n\nvar ViewCursors =\n/** @class */\nfunction (_super) {\n  __extends(ViewCursors, _super);\n\n  function ViewCursors(context) {\n    var _this = _super.call(this, context) || this;\n\n    _this._readOnly = _this._context.configuration.editor.readOnly;\n    _this._cursorBlinking = _this._context.configuration.editor.viewInfo.cursorBlinking;\n    _this._cursorStyle = _this._context.configuration.editor.viewInfo.cursorStyle;\n    _this._cursorSmoothCaretAnimation = _this._context.configuration.editor.viewInfo.cursorSmoothCaretAnimation;\n    _this._selectionIsEmpty = true;\n    _this._isVisible = false;\n    _this._primaryCursor = new ViewCursor(_this._context);\n    _this._secondaryCursors = [];\n    _this._renderData = [];\n    _this._domNode = createFastDomNode(document.createElement('div'));\n\n    _this._domNode.setAttribute('role', 'presentation');\n\n    _this._domNode.setAttribute('aria-hidden', 'true');\n\n    _this._updateDomClassName();\n\n    _this._domNode.appendChild(_this._primaryCursor.getDomNode());\n\n    _this._startCursorBlinkAnimation = new TimeoutTimer();\n    _this._cursorFlatBlinkInterval = new IntervalTimer();\n    _this._blinkingEnabled = false;\n    _this._editorHasFocus = false;\n\n    _this._updateBlinking();\n\n    return _this;\n  }\n\n  ViewCursors.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._startCursorBlinkAnimation.dispose();\n\n    this._cursorFlatBlinkInterval.dispose();\n  };\n\n  ViewCursors.prototype.getDomNode = function () {\n    return this._domNode;\n  }; // --- begin event handlers\n\n\n  ViewCursors.prototype.onConfigurationChanged = function (e) {\n    if (e.readOnly) {\n      this._readOnly = this._context.configuration.editor.readOnly;\n    }\n\n    if (e.viewInfo) {\n      this._cursorBlinking = this._context.configuration.editor.viewInfo.cursorBlinking;\n      this._cursorStyle = this._context.configuration.editor.viewInfo.cursorStyle;\n      this._cursorSmoothCaretAnimation = this._context.configuration.editor.viewInfo.cursorSmoothCaretAnimation;\n    }\n\n    this._primaryCursor.onConfigurationChanged(e);\n\n    this._updateBlinking();\n\n    if (e.viewInfo) {\n      this._updateDomClassName();\n    }\n\n    for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {\n      this._secondaryCursors[i].onConfigurationChanged(e);\n    }\n\n    return true;\n  };\n\n  ViewCursors.prototype._onCursorPositionChanged = function (position, secondaryPositions) {\n    this._primaryCursor.onCursorPositionChanged(position);\n\n    this._updateBlinking();\n\n    if (this._secondaryCursors.length < secondaryPositions.length) {\n      // Create new cursors\n      var addCnt = secondaryPositions.length - this._secondaryCursors.length;\n\n      for (var i = 0; i < addCnt; i++) {\n        var newCursor = new ViewCursor(this._context);\n\n        this._domNode.domNode.insertBefore(newCursor.getDomNode().domNode, this._primaryCursor.getDomNode().domNode.nextSibling);\n\n        this._secondaryCursors.push(newCursor);\n      }\n    } else if (this._secondaryCursors.length > secondaryPositions.length) {\n      // Remove some cursors\n      var removeCnt = this._secondaryCursors.length - secondaryPositions.length;\n\n      for (var i = 0; i < removeCnt; i++) {\n        this._domNode.removeChild(this._secondaryCursors[0].getDomNode());\n\n        this._secondaryCursors.splice(0, 1);\n      }\n    }\n\n    for (var i = 0; i < secondaryPositions.length; i++) {\n      this._secondaryCursors[i].onCursorPositionChanged(secondaryPositions[i]);\n    }\n  };\n\n  ViewCursors.prototype.onCursorStateChanged = function (e) {\n    var positions = [];\n\n    for (var i = 0, len = e.selections.length; i < len; i++) {\n      positions[i] = e.selections[i].getPosition();\n    }\n\n    this._onCursorPositionChanged(positions[0], positions.slice(1));\n\n    var selectionIsEmpty = e.selections[0].isEmpty();\n\n    if (this._selectionIsEmpty !== selectionIsEmpty) {\n      this._selectionIsEmpty = selectionIsEmpty;\n\n      this._updateDomClassName();\n    }\n\n    return true;\n  };\n\n  ViewCursors.prototype.onDecorationsChanged = function (e) {\n    // true for inline decorations that can end up relayouting text\n    return true;\n  };\n\n  ViewCursors.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  ViewCursors.prototype.onFocusChanged = function (e) {\n    this._editorHasFocus = e.isFocused;\n\n    this._updateBlinking();\n\n    return false;\n  };\n\n  ViewCursors.prototype.onLinesChanged = function (e) {\n    return true;\n  };\n\n  ViewCursors.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  ViewCursors.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  ViewCursors.prototype.onScrollChanged = function (e) {\n    return true;\n  };\n\n  ViewCursors.prototype.onTokensChanged = function (e) {\n    var shouldRender = function (position) {\n      for (var i = 0, len = e.ranges.length; i < len; i++) {\n        if (e.ranges[i].fromLineNumber <= position.lineNumber && position.lineNumber <= e.ranges[i].toLineNumber) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    if (shouldRender(this._primaryCursor.getPosition())) {\n      return true;\n    }\n\n    for (var _i = 0, _a = this._secondaryCursors; _i < _a.length; _i++) {\n      var secondaryCursor = _a[_i];\n\n      if (shouldRender(secondaryCursor.getPosition())) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ViewCursors.prototype.onZonesChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n  // ---- blinking logic\n\n\n  ViewCursors.prototype._getCursorBlinking = function () {\n    if (!this._editorHasFocus) {\n      return 0\n      /* Hidden */\n      ;\n    }\n\n    if (this._readOnly) {\n      return 5\n      /* Solid */\n      ;\n    }\n\n    return this._cursorBlinking;\n  };\n\n  ViewCursors.prototype._updateBlinking = function () {\n    var _this = this;\n\n    this._startCursorBlinkAnimation.cancel();\n\n    this._cursorFlatBlinkInterval.cancel();\n\n    var blinkingStyle = this._getCursorBlinking(); // hidden and solid are special as they involve no animations\n\n\n    var isHidden = blinkingStyle === 0\n    /* Hidden */\n    ;\n    var isSolid = blinkingStyle === 5\n    /* Solid */\n    ;\n\n    if (isHidden) {\n      this._hide();\n    } else {\n      this._show();\n    }\n\n    this._blinkingEnabled = false;\n\n    this._updateDomClassName();\n\n    if (!isHidden && !isSolid) {\n      if (blinkingStyle === 1\n      /* Blink */\n      ) {\n          // flat blinking is handled by JavaScript to save battery life due to Chromium step timing issue https://bugs.chromium.org/p/chromium/issues/detail?id=361587\n          this._cursorFlatBlinkInterval.cancelAndSet(function () {\n            if (_this._isVisible) {\n              _this._hide();\n            } else {\n              _this._show();\n            }\n          }, ViewCursors.BLINK_INTERVAL);\n        } else {\n        this._startCursorBlinkAnimation.setIfNotSet(function () {\n          _this._blinkingEnabled = true;\n\n          _this._updateDomClassName();\n        }, ViewCursors.BLINK_INTERVAL);\n      }\n    }\n  }; // --- end blinking logic\n\n\n  ViewCursors.prototype._updateDomClassName = function () {\n    this._domNode.setClassName(this._getClassName());\n  };\n\n  ViewCursors.prototype._getClassName = function () {\n    var result = 'cursors-layer';\n\n    if (!this._selectionIsEmpty) {\n      result += ' has-selection';\n    }\n\n    switch (this._cursorStyle) {\n      case TextEditorCursorStyle.Line:\n        result += ' cursor-line-style';\n        break;\n\n      case TextEditorCursorStyle.Block:\n        result += ' cursor-block-style';\n        break;\n\n      case TextEditorCursorStyle.Underline:\n        result += ' cursor-underline-style';\n        break;\n\n      case TextEditorCursorStyle.LineThin:\n        result += ' cursor-line-thin-style';\n        break;\n\n      case TextEditorCursorStyle.BlockOutline:\n        result += ' cursor-block-outline-style';\n        break;\n\n      case TextEditorCursorStyle.UnderlineThin:\n        result += ' cursor-underline-thin-style';\n        break;\n\n      default:\n        result += ' cursor-line-style';\n    }\n\n    if (this._blinkingEnabled) {\n      switch (this._getCursorBlinking()) {\n        case 1\n        /* Blink */\n        :\n          result += ' cursor-blink';\n          break;\n\n        case 2\n        /* Smooth */\n        :\n          result += ' cursor-smooth';\n          break;\n\n        case 3\n        /* Phase */\n        :\n          result += ' cursor-phase';\n          break;\n\n        case 4\n        /* Expand */\n        :\n          result += ' cursor-expand';\n          break;\n\n        case 5\n        /* Solid */\n        :\n          result += ' cursor-solid';\n          break;\n\n        default:\n          result += ' cursor-solid';\n      }\n    } else {\n      result += ' cursor-solid';\n    }\n\n    if (this._cursorSmoothCaretAnimation) {\n      result += ' cursor-smooth-caret-animation';\n    }\n\n    return result;\n  };\n\n  ViewCursors.prototype._show = function () {\n    this._primaryCursor.show();\n\n    for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {\n      this._secondaryCursors[i].show();\n    }\n\n    this._isVisible = true;\n  };\n\n  ViewCursors.prototype._hide = function () {\n    this._primaryCursor.hide();\n\n    for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {\n      this._secondaryCursors[i].hide();\n    }\n\n    this._isVisible = false;\n  }; // ---- IViewPart implementation\n\n\n  ViewCursors.prototype.prepareRender = function (ctx) {\n    this._primaryCursor.prepareRender(ctx);\n\n    for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {\n      this._secondaryCursors[i].prepareRender(ctx);\n    }\n  };\n\n  ViewCursors.prototype.render = function (ctx) {\n    var renderData = [],\n        renderDataLen = 0;\n\n    var primaryRenderData = this._primaryCursor.render(ctx);\n\n    if (primaryRenderData) {\n      renderData[renderDataLen++] = primaryRenderData;\n    }\n\n    for (var i = 0, len = this._secondaryCursors.length; i < len; i++) {\n      var secondaryRenderData = this._secondaryCursors[i].render(ctx);\n\n      if (secondaryRenderData) {\n        renderData[renderDataLen++] = secondaryRenderData;\n      }\n    }\n\n    this._renderData = renderData;\n  };\n\n  ViewCursors.prototype.getLastRenderData = function () {\n    return this._renderData;\n  };\n\n  ViewCursors.BLINK_INTERVAL = 500;\n  return ViewCursors;\n}(ViewPart);\n\nexport { ViewCursors };\nregisterThemingParticipant(function (theme, collector) {\n  var caret = theme.getColor(editorCursorForeground);\n\n  if (caret) {\n    var caretBackground = theme.getColor(editorCursorBackground);\n\n    if (!caretBackground) {\n      caretBackground = caret.opposite();\n    }\n\n    collector.addRule(\".monaco-editor .cursor { background-color: \" + caret + \"; border-color: \" + caret + \"; color: \" + caretBackground + \"; }\");\n\n    if (theme.type === 'hc') {\n      collector.addRule(\".monaco-editor .cursors-layer.has-selection .cursor { border-left: 1px solid \" + caretBackground + \"; border-right: 1px solid \" + caretBackground + \"; }\");\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}