{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as dom from '../../base/browser/dom.js';\nimport { GlobalMouseMoveMonitor } from '../../base/browser/globalMouseMoveMonitor.js';\nimport { StandardMouseEvent } from '../../base/browser/mouseEvent.js';\nimport { Disposable } from '../../base/common/lifecycle.js';\n/**\n * Coordinates relative to the whole document (e.g. mouse event's pageX and pageY)\n */\n\nvar PageCoordinates =\n/** @class */\nfunction () {\n  function PageCoordinates(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  PageCoordinates.prototype.toClientCoordinates = function () {\n    return new ClientCoordinates(this.x - dom.StandardWindow.scrollX, this.y - dom.StandardWindow.scrollY);\n  };\n\n  return PageCoordinates;\n}();\n\nexport { PageCoordinates };\n/**\n * Coordinates within the application's client area (i.e. origin is document's scroll position).\n *\n * For example, clicking in the top-left corner of the client area will\n * always result in a mouse event with a client.x value of 0, regardless\n * of whether the page is scrolled horizontally.\n */\n\nvar ClientCoordinates =\n/** @class */\nfunction () {\n  function ClientCoordinates(clientX, clientY) {\n    this.clientX = clientX;\n    this.clientY = clientY;\n  }\n\n  ClientCoordinates.prototype.toPageCoordinates = function () {\n    return new PageCoordinates(this.clientX + dom.StandardWindow.scrollX, this.clientY + dom.StandardWindow.scrollY);\n  };\n\n  return ClientCoordinates;\n}();\n\nexport { ClientCoordinates };\n/**\n * The position of the editor in the page.\n */\n\nvar EditorPagePosition =\n/** @class */\nfunction () {\n  function EditorPagePosition(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  return EditorPagePosition;\n}();\n\nexport { EditorPagePosition };\nexport function createEditorPagePosition(editorViewDomNode) {\n  var editorPos = dom.getDomNodePagePosition(editorViewDomNode);\n  return new EditorPagePosition(editorPos.left, editorPos.top, editorPos.width, editorPos.height);\n}\n\nvar EditorMouseEvent =\n/** @class */\nfunction (_super) {\n  __extends(EditorMouseEvent, _super);\n\n  function EditorMouseEvent(e, editorViewDomNode) {\n    var _this = _super.call(this, e) || this;\n\n    _this.pos = new PageCoordinates(_this.posx, _this.posy);\n    _this.editorPos = createEditorPagePosition(editorViewDomNode);\n    return _this;\n  }\n\n  return EditorMouseEvent;\n}(StandardMouseEvent);\n\nexport { EditorMouseEvent };\n\nvar EditorMouseEventFactory =\n/** @class */\nfunction () {\n  function EditorMouseEventFactory(editorViewDomNode) {\n    this._editorViewDomNode = editorViewDomNode;\n  }\n\n  EditorMouseEventFactory.prototype._create = function (e) {\n    return new EditorMouseEvent(e, this._editorViewDomNode);\n  };\n\n  EditorMouseEventFactory.prototype.onContextMenu = function (target, callback) {\n    var _this = this;\n\n    return dom.addDisposableListener(target, 'contextmenu', function (e) {\n      callback(_this._create(e));\n    });\n  };\n\n  EditorMouseEventFactory.prototype.onMouseUp = function (target, callback) {\n    var _this = this;\n\n    return dom.addDisposableListener(target, 'mouseup', function (e) {\n      callback(_this._create(e));\n    });\n  };\n\n  EditorMouseEventFactory.prototype.onMouseDown = function (target, callback) {\n    var _this = this;\n\n    return dom.addDisposableListener(target, 'mousedown', function (e) {\n      callback(_this._create(e));\n    });\n  };\n\n  EditorMouseEventFactory.prototype.onMouseLeave = function (target, callback) {\n    var _this = this;\n\n    return dom.addDisposableNonBubblingMouseOutListener(target, function (e) {\n      callback(_this._create(e));\n    });\n  };\n\n  EditorMouseEventFactory.prototype.onMouseMoveThrottled = function (target, callback, merger, minimumTimeMs) {\n    var _this = this;\n\n    var myMerger = function (lastEvent, currentEvent) {\n      return merger(lastEvent, _this._create(currentEvent));\n    };\n\n    return dom.addDisposableThrottledListener(target, 'mousemove', callback, myMerger, minimumTimeMs);\n  };\n\n  return EditorMouseEventFactory;\n}();\n\nexport { EditorMouseEventFactory };\n\nvar GlobalEditorMouseMoveMonitor =\n/** @class */\nfunction (_super) {\n  __extends(GlobalEditorMouseMoveMonitor, _super);\n\n  function GlobalEditorMouseMoveMonitor(editorViewDomNode) {\n    var _this = _super.call(this) || this;\n\n    _this._editorViewDomNode = editorViewDomNode;\n    _this._globalMouseMoveMonitor = _this._register(new GlobalMouseMoveMonitor());\n    _this._keydownListener = null;\n    return _this;\n  }\n\n  GlobalEditorMouseMoveMonitor.prototype.startMonitoring = function (merger, mouseMoveCallback, onStopCallback) {\n    var _this = this; // Add a <<capture>> keydown event listener that will cancel the monitoring\n    // if something other than a modifier key is pressed\n\n\n    this._keydownListener = dom.addStandardDisposableListener(document, 'keydown', function (e) {\n      var kb = e.toKeybinding();\n\n      if (kb.isModifierKey()) {\n        // Allow modifier keys\n        return;\n      }\n\n      _this._globalMouseMoveMonitor.stopMonitoring(true);\n    }, true);\n\n    var myMerger = function (lastEvent, currentEvent) {\n      return merger(lastEvent, new EditorMouseEvent(currentEvent, _this._editorViewDomNode));\n    };\n\n    this._globalMouseMoveMonitor.startMonitoring(myMerger, mouseMoveCallback, function () {\n      _this._keydownListener.dispose();\n\n      onStopCallback();\n    });\n  };\n\n  return GlobalEditorMouseMoveMonitor;\n}(Disposable);\n\nexport { GlobalEditorMouseMoveMonitor };","map":null,"metadata":{},"sourceType":"module"}