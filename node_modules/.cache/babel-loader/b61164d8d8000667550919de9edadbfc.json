{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { illegalArgument } from '../../base/common/errors.js';\nimport { URI } from '../../base/common/uri.js';\nimport { ICodeEditorService } from './services/codeEditorService.js';\nimport { Position } from '../common/core/position.js';\nimport { IModelService } from '../common/services/modelService.js';\nimport { ITextModelService } from '../common/services/resolverService.js';\nimport { MenuRegistry } from '../../platform/actions/common/actions.js';\nimport { CommandsRegistry } from '../../platform/commands/common/commands.js';\nimport { ContextKeyExpr, IContextKeyService } from '../../platform/contextkey/common/contextkey.js';\nimport { KeybindingsRegistry } from '../../platform/keybinding/common/keybindingsRegistry.js';\nimport { Registry } from '../../platform/registry/common/platform.js';\nimport { ITelemetryService } from '../../platform/telemetry/common/telemetry.js';\nimport { withNullAsUndefined } from '../../base/common/types.js';\n\nvar Command =\n/** @class */\nfunction () {\n  function Command(opts) {\n    this.id = opts.id;\n    this.precondition = opts.precondition;\n    this._kbOpts = opts.kbOpts;\n    this._menubarOpts = opts.menubarOpts;\n    this._description = opts.description;\n  }\n\n  Command.prototype.register = function () {\n    var _this = this;\n\n    if (this._menubarOpts) {\n      MenuRegistry.appendMenuItem(this._menubarOpts.menuId, {\n        group: this._menubarOpts.group,\n        command: {\n          id: this.id,\n          title: this._menubarOpts.title\n        },\n        when: this._menubarOpts.when,\n        order: this._menubarOpts.order\n      });\n    }\n\n    if (this._kbOpts) {\n      var kbWhen = this._kbOpts.kbExpr;\n\n      if (this.precondition) {\n        if (kbWhen) {\n          kbWhen = ContextKeyExpr.and(kbWhen, this.precondition);\n        } else {\n          kbWhen = this.precondition;\n        }\n      }\n\n      KeybindingsRegistry.registerCommandAndKeybindingRule({\n        id: this.id,\n        handler: function (accessor, args) {\n          return _this.runCommand(accessor, args);\n        },\n        weight: this._kbOpts.weight,\n        when: kbWhen,\n        primary: this._kbOpts.primary,\n        secondary: this._kbOpts.secondary,\n        win: this._kbOpts.win,\n        linux: this._kbOpts.linux,\n        mac: this._kbOpts.mac,\n        description: this._description\n      });\n    } else {\n      CommandsRegistry.registerCommand({\n        id: this.id,\n        handler: function (accessor, args) {\n          return _this.runCommand(accessor, args);\n        },\n        description: this._description\n      });\n    }\n  };\n\n  return Command;\n}();\n\nexport { Command };\n\nvar EditorCommand =\n/** @class */\nfunction (_super) {\n  __extends(EditorCommand, _super);\n\n  function EditorCommand() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * Create a command class that is bound to a certain editor contribution.\n   */\n\n\n  EditorCommand.bindToContribution = function (controllerGetter) {\n    return (\n      /** @class */\n      function (_super) {\n        __extends(EditorControllerCommandImpl, _super);\n\n        function EditorControllerCommandImpl(opts) {\n          var _this = _super.call(this, opts) || this;\n\n          _this._callback = opts.handler;\n          return _this;\n        }\n\n        EditorControllerCommandImpl.prototype.runEditorCommand = function (accessor, editor, args) {\n          var controller = controllerGetter(editor);\n\n          if (controller) {\n            this._callback(controllerGetter(editor), args);\n          }\n        };\n\n        return EditorControllerCommandImpl;\n      }(EditorCommand)\n    );\n  };\n\n  EditorCommand.prototype.runCommand = function (accessor, args) {\n    var _this = this;\n\n    var codeEditorService = accessor.get(ICodeEditorService); // Find the editor with text focus or active\n\n    var editor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\n    if (!editor) {\n      // well, at least we tried...\n      return;\n    }\n\n    return editor.invokeWithinContext(function (editorAccessor) {\n      var kbService = editorAccessor.get(IContextKeyService);\n\n      if (!kbService.contextMatchesRules(withNullAsUndefined(_this.precondition))) {\n        // precondition does not hold\n        return;\n      }\n\n      return _this.runEditorCommand(editorAccessor, editor, args);\n    });\n  };\n\n  return EditorCommand;\n}(Command);\n\nexport { EditorCommand };\n\nvar EditorAction =\n/** @class */\nfunction (_super) {\n  __extends(EditorAction, _super);\n\n  function EditorAction(opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this.label = opts.label;\n    _this.alias = opts.alias;\n    _this.menuOpts = opts.menuOpts;\n    return _this;\n  }\n\n  EditorAction.prototype.register = function () {\n    if (this.menuOpts) {\n      MenuRegistry.appendMenuItem(7\n      /* EditorContext */\n      , {\n        command: {\n          id: this.id,\n          title: this.label\n        },\n        when: ContextKeyExpr.and(this.precondition, this.menuOpts.when),\n        group: this.menuOpts.group,\n        order: this.menuOpts.order\n      });\n    }\n\n    _super.prototype.register.call(this);\n  };\n\n  EditorAction.prototype.runEditorCommand = function (accessor, editor, args) {\n    this.reportTelemetry(accessor, editor);\n    return this.run(accessor, editor, args || {});\n  };\n\n  EditorAction.prototype.reportTelemetry = function (accessor, editor) {\n    accessor.get(ITelemetryService).publicLog2('editorActionInvoked', {\n      name: this.label,\n      id: this.id\n    });\n  };\n\n  return EditorAction;\n}(EditorCommand);\n\nexport { EditorAction }; //#endregion EditorAction\n// --- Registration of commands and actions\n\nexport function registerLanguageCommand(id, handler) {\n  CommandsRegistry.registerCommand(id, function (accessor, args) {\n    return handler(accessor, args || {});\n  });\n}\nexport function registerDefaultLanguageCommand(id, handler) {\n  registerLanguageCommand(id, function (accessor, args) {\n    var resource = args.resource,\n        position = args.position;\n\n    if (!(resource instanceof URI)) {\n      throw illegalArgument('resource');\n    }\n\n    if (!Position.isIPosition(position)) {\n      throw illegalArgument('position');\n    }\n\n    var model = accessor.get(IModelService).getModel(resource);\n\n    if (model) {\n      var editorPosition = Position.lift(position);\n      return handler(model, editorPosition, args);\n    }\n\n    return accessor.get(ITextModelService).createModelReference(resource).then(function (reference) {\n      return new Promise(function (resolve, reject) {\n        try {\n          var result = handler(reference.object.textEditorModel, Position.lift(position), args);\n          resolve(result);\n        } catch (err) {\n          reject(err);\n        }\n      }).finally(function () {\n        reference.dispose();\n      });\n    });\n  });\n}\nexport function registerEditorCommand(editorCommand) {\n  EditorContributionRegistry.INSTANCE.registerEditorCommand(editorCommand);\n  return editorCommand;\n}\nexport function registerEditorAction(ctor) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(new ctor());\n}\nexport function registerInstantiatedEditorAction(editorAction) {\n  EditorContributionRegistry.INSTANCE.registerEditorAction(editorAction);\n}\nexport function registerEditorContribution(ctor) {\n  EditorContributionRegistry.INSTANCE.registerEditorContribution(ctor);\n}\nexport var EditorExtensionsRegistry;\n\n(function (EditorExtensionsRegistry) {\n  function getEditorCommand(commandId) {\n    return EditorContributionRegistry.INSTANCE.getEditorCommand(commandId);\n  }\n\n  EditorExtensionsRegistry.getEditorCommand = getEditorCommand;\n\n  function getEditorActions() {\n    return EditorContributionRegistry.INSTANCE.getEditorActions();\n  }\n\n  EditorExtensionsRegistry.getEditorActions = getEditorActions;\n\n  function getEditorContributions() {\n    return EditorContributionRegistry.INSTANCE.getEditorContributions();\n  }\n\n  EditorExtensionsRegistry.getEditorContributions = getEditorContributions;\n})(EditorExtensionsRegistry || (EditorExtensionsRegistry = {})); // Editor extension points\n\n\nvar Extensions = {\n  EditorCommonContributions: 'editor.contributions'\n};\n\nvar EditorContributionRegistry =\n/** @class */\nfunction () {\n  function EditorContributionRegistry() {\n    this.editorContributions = [];\n    this.editorActions = [];\n    this.editorCommands = Object.create(null);\n  }\n\n  EditorContributionRegistry.prototype.registerEditorContribution = function (ctor) {\n    this.editorContributions.push(ctor);\n  };\n\n  EditorContributionRegistry.prototype.registerEditorAction = function (action) {\n    action.register();\n    this.editorActions.push(action);\n  };\n\n  EditorContributionRegistry.prototype.getEditorContributions = function () {\n    return this.editorContributions.slice(0);\n  };\n\n  EditorContributionRegistry.prototype.getEditorActions = function () {\n    return this.editorActions.slice(0);\n  };\n\n  EditorContributionRegistry.prototype.registerEditorCommand = function (editorCommand) {\n    editorCommand.register();\n    this.editorCommands[editorCommand.id] = editorCommand;\n  };\n\n  EditorContributionRegistry.prototype.getEditorCommand = function (commandId) {\n    return this.editorCommands[commandId] || null;\n  };\n\n  EditorContributionRegistry.INSTANCE = new EditorContributionRegistry();\n  return EditorContributionRegistry;\n}();\n\nRegistry.add(Extensions.EditorCommonContributions, EditorContributionRegistry.INSTANCE);","map":null,"metadata":{},"sourceType":"module"}