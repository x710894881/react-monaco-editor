{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ArrayIterator } from '../../../common/iterator.js';\n\nvar HeightMap =\n/** @class */\nfunction () {\n  function HeightMap() {\n    this.heightMap = [];\n    this.indexes = {};\n  }\n\n  HeightMap.prototype.getContentHeight = function () {\n    var last = this.heightMap[this.heightMap.length - 1];\n    return !last ? 0 : last.top + last.height;\n  };\n\n  HeightMap.prototype.onInsertItems = function (iterator, afterItemId) {\n    if (afterItemId === void 0) {\n      afterItemId = null;\n    }\n\n    var item = null;\n    var viewItem;\n    var i, j;\n    var totalSize;\n    var sizeDiff = 0;\n\n    if (afterItemId === null) {\n      i = 0;\n      totalSize = 0;\n    } else {\n      i = this.indexes[afterItemId] + 1;\n      viewItem = this.heightMap[i - 1];\n\n      if (!viewItem) {\n        console.error('view item doesnt exist');\n        return undefined;\n      }\n\n      totalSize = viewItem.top + viewItem.height;\n    }\n\n    var boundSplice = this.heightMap.splice.bind(this.heightMap, i, 0);\n    var itemsToInsert = [];\n\n    while (item = iterator.next()) {\n      viewItem = this.createViewItem(item);\n      viewItem.top = totalSize + sizeDiff;\n      this.indexes[item.id] = i++;\n      itemsToInsert.push(viewItem);\n      sizeDiff += viewItem.height;\n    }\n\n    boundSplice.apply(this.heightMap, itemsToInsert);\n\n    for (j = i; j < this.heightMap.length; j++) {\n      viewItem = this.heightMap[j];\n      viewItem.top += sizeDiff;\n      this.indexes[viewItem.model.id] = j;\n    }\n\n    for (j = itemsToInsert.length - 1; j >= 0; j--) {\n      this.onInsertItem(itemsToInsert[j]);\n    }\n\n    for (j = this.heightMap.length - 1; j >= i; j--) {\n      this.onRefreshItem(this.heightMap[j]);\n    }\n\n    return sizeDiff;\n  };\n\n  HeightMap.prototype.onInsertItem = function (item) {// noop\n  }; // Contiguous items\n\n\n  HeightMap.prototype.onRemoveItems = function (iterator) {\n    var itemId = null;\n    var viewItem;\n    var startIndex = null;\n    var i = 0;\n    var sizeDiff = 0;\n\n    while (itemId = iterator.next()) {\n      i = this.indexes[itemId];\n      viewItem = this.heightMap[i];\n\n      if (!viewItem) {\n        console.error('view item doesnt exist');\n        return;\n      }\n\n      sizeDiff -= viewItem.height;\n      delete this.indexes[itemId];\n      this.onRemoveItem(viewItem);\n\n      if (startIndex === null) {\n        startIndex = i;\n      }\n    }\n\n    if (sizeDiff === 0 || startIndex === null) {\n      return;\n    }\n\n    this.heightMap.splice(startIndex, i - startIndex + 1);\n\n    for (i = startIndex; i < this.heightMap.length; i++) {\n      viewItem = this.heightMap[i];\n      viewItem.top += sizeDiff;\n      this.indexes[viewItem.model.id] = i;\n      this.onRefreshItem(viewItem);\n    }\n  };\n\n  HeightMap.prototype.onRemoveItem = function (item) {// noop\n  };\n\n  HeightMap.prototype.onRefreshItemSet = function (items) {\n    var _this = this;\n\n    var sortedItems = items.sort(function (a, b) {\n      return _this.indexes[a.id] - _this.indexes[b.id];\n    });\n    this.onRefreshItems(new ArrayIterator(sortedItems));\n  }; // Ordered, but not necessarily contiguous items\n\n\n  HeightMap.prototype.onRefreshItems = function (iterator) {\n    var item = null;\n    var viewItem;\n    var newHeight;\n    var i,\n        j = null;\n    var cummDiff = 0;\n\n    while (item = iterator.next()) {\n      i = this.indexes[item.id];\n\n      for (; cummDiff !== 0 && j !== null && j < i; j++) {\n        viewItem = this.heightMap[j];\n        viewItem.top += cummDiff;\n        this.onRefreshItem(viewItem);\n      }\n\n      viewItem = this.heightMap[i];\n      newHeight = item.getHeight();\n      viewItem.top += cummDiff;\n      cummDiff += newHeight - viewItem.height;\n      viewItem.height = newHeight;\n      this.onRefreshItem(viewItem, true);\n      j = i + 1;\n    }\n\n    if (cummDiff !== 0 && j !== null) {\n      for (; j < this.heightMap.length; j++) {\n        viewItem = this.heightMap[j];\n        viewItem.top += cummDiff;\n        this.onRefreshItem(viewItem);\n      }\n    }\n  };\n\n  HeightMap.prototype.onRefreshItem = function (item, needsRender) {\n    if (needsRender === void 0) {\n      needsRender = false;\n    } // noop\n\n  };\n\n  HeightMap.prototype.indexAt = function (position) {\n    var left = 0;\n    var right = this.heightMap.length;\n    var center;\n    var item; // Binary search\n\n    while (left < right) {\n      center = Math.floor((left + right) / 2);\n      item = this.heightMap[center];\n\n      if (position < item.top) {\n        right = center;\n      } else if (position >= item.top + item.height) {\n        if (left === center) {\n          break;\n        }\n\n        left = center;\n      } else {\n        return center;\n      }\n    }\n\n    return this.heightMap.length;\n  };\n\n  HeightMap.prototype.indexAfter = function (position) {\n    return Math.min(this.indexAt(position) + 1, this.heightMap.length);\n  };\n\n  HeightMap.prototype.itemAtIndex = function (index) {\n    return this.heightMap[index];\n  };\n\n  HeightMap.prototype.itemAfter = function (item) {\n    return this.heightMap[this.indexes[item.model.id] + 1] || null;\n  };\n\n  HeightMap.prototype.createViewItem = function (item) {\n    throw new Error('not implemented');\n  };\n\n  HeightMap.prototype.dispose = function () {\n    this.heightMap = [];\n    this.indexes = {};\n  };\n\n  return HeightMap;\n}();\n\nexport { HeightMap };","map":null,"metadata":{},"sourceType":"module"}