{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as ts from './lib/typescriptServices.js';\nimport { lib_dts, lib_es6_dts } from './lib/lib.js';\nvar DEFAULT_LIB = {\n  NAME: 'defaultLib:lib.d.ts',\n  CONTENTS: lib_dts\n};\nvar ES6_LIB = {\n  NAME: 'defaultLib:lib.es6.d.ts',\n  CONTENTS: lib_es6_dts\n};\n\nvar TypeScriptWorker =\n/** @class */\nfunction () {\n  function TypeScriptWorker(ctx, createData) {\n    this._extraLibs = Object.create(null);\n    this._languageService = ts.createLanguageService(this);\n    this._ctx = ctx;\n    this._compilerOptions = createData.compilerOptions;\n    this._extraLibs = createData.extraLibs;\n  } // --- language service host ---------------\n\n\n  TypeScriptWorker.prototype.getCompilationSettings = function () {\n    return this._compilerOptions;\n  };\n\n  TypeScriptWorker.prototype.getScriptFileNames = function () {\n    var models = this._ctx.getMirrorModels().map(function (model) {\n      return model.uri.toString();\n    });\n\n    return models.concat(Object.keys(this._extraLibs));\n  };\n\n  TypeScriptWorker.prototype._getModel = function (fileName) {\n    var models = this._ctx.getMirrorModels();\n\n    for (var i = 0; i < models.length; i++) {\n      if (models[i].uri.toString() === fileName) {\n        return models[i];\n      }\n    }\n\n    return null;\n  };\n\n  TypeScriptWorker.prototype.getScriptVersion = function (fileName) {\n    var model = this._getModel(fileName);\n\n    if (model) {\n      return model.version.toString();\n    } else if (this.isDefaultLibFileName(fileName)) {\n      // default lib is static\n      return '1';\n    } else if (fileName in this._extraLibs) {\n      return String(this._extraLibs[fileName].version);\n    }\n  };\n\n  TypeScriptWorker.prototype.getScriptSnapshot = function (fileName) {\n    var text;\n\n    var model = this._getModel(fileName);\n\n    if (model) {\n      // a true editor model\n      text = model.getValue();\n    } else if (fileName in this._extraLibs) {\n      // extra lib\n      text = this._extraLibs[fileName].content;\n    } else if (fileName === DEFAULT_LIB.NAME) {\n      text = DEFAULT_LIB.CONTENTS;\n    } else if (fileName === ES6_LIB.NAME) {\n      text = ES6_LIB.CONTENTS;\n    } else {\n      return;\n    }\n\n    return {\n      getText: function (start, end) {\n        return text.substring(start, end);\n      },\n      getLength: function () {\n        return text.length;\n      },\n      getChangeRange: function () {\n        return undefined;\n      }\n    };\n  };\n\n  TypeScriptWorker.prototype.getScriptKind = function (fileName) {\n    var suffix = fileName.substr(fileName.lastIndexOf('.') + 1);\n\n    switch (suffix) {\n      case 'ts':\n        return ts.ScriptKind.TS;\n\n      case 'tsx':\n        return ts.ScriptKind.TSX;\n\n      case 'js':\n        return ts.ScriptKind.JS;\n\n      case 'jsx':\n        return ts.ScriptKind.JSX;\n\n      default:\n        return this.getCompilationSettings().allowJs ? ts.ScriptKind.JS : ts.ScriptKind.TS;\n    }\n  };\n\n  TypeScriptWorker.prototype.getCurrentDirectory = function () {\n    return '';\n  };\n\n  TypeScriptWorker.prototype.getDefaultLibFileName = function (options) {\n    // TODO@joh support lib.es7.d.ts\n    return options.target <= ts.ScriptTarget.ES5 ? DEFAULT_LIB.NAME : ES6_LIB.NAME;\n  };\n\n  TypeScriptWorker.prototype.isDefaultLibFileName = function (fileName) {\n    return fileName === this.getDefaultLibFileName(this._compilerOptions);\n  }; // --- language features\n\n\n  TypeScriptWorker.clearFiles = function (diagnostics) {\n    // Clear the `file` field, which cannot be JSON'yfied because it\n    // contains cyclic data structures.\n    diagnostics.forEach(function (diag) {\n      diag.file = undefined;\n      var related = diag.relatedInformation;\n\n      if (related) {\n        related.forEach(function (diag2) {\n          return diag2.file = undefined;\n        });\n      }\n    });\n  };\n\n  TypeScriptWorker.prototype.getSyntacticDiagnostics = function (fileName) {\n    var diagnostics = this._languageService.getSyntacticDiagnostics(fileName);\n\n    TypeScriptWorker.clearFiles(diagnostics);\n    return Promise.resolve(diagnostics);\n  };\n\n  TypeScriptWorker.prototype.getSemanticDiagnostics = function (fileName) {\n    var diagnostics = this._languageService.getSemanticDiagnostics(fileName);\n\n    TypeScriptWorker.clearFiles(diagnostics);\n    return Promise.resolve(diagnostics);\n  };\n\n  TypeScriptWorker.prototype.getCompilerOptionsDiagnostics = function (fileName) {\n    var diagnostics = this._languageService.getCompilerOptionsDiagnostics();\n\n    TypeScriptWorker.clearFiles(diagnostics);\n    return Promise.resolve(diagnostics);\n  };\n\n  TypeScriptWorker.prototype.getCompletionsAtPosition = function (fileName, position) {\n    return Promise.resolve(this._languageService.getCompletionsAtPosition(fileName, position, undefined));\n  };\n\n  TypeScriptWorker.prototype.getCompletionEntryDetails = function (fileName, position, entry) {\n    return Promise.resolve(this._languageService.getCompletionEntryDetails(fileName, position, entry, undefined, undefined, undefined));\n  };\n\n  TypeScriptWorker.prototype.getSignatureHelpItems = function (fileName, position) {\n    return Promise.resolve(this._languageService.getSignatureHelpItems(fileName, position, undefined));\n  };\n\n  TypeScriptWorker.prototype.getQuickInfoAtPosition = function (fileName, position) {\n    return Promise.resolve(this._languageService.getQuickInfoAtPosition(fileName, position));\n  };\n\n  TypeScriptWorker.prototype.getOccurrencesAtPosition = function (fileName, position) {\n    return Promise.resolve(this._languageService.getOccurrencesAtPosition(fileName, position));\n  };\n\n  TypeScriptWorker.prototype.getDefinitionAtPosition = function (fileName, position) {\n    return Promise.resolve(this._languageService.getDefinitionAtPosition(fileName, position));\n  };\n\n  TypeScriptWorker.prototype.getReferencesAtPosition = function (fileName, position) {\n    return Promise.resolve(this._languageService.getReferencesAtPosition(fileName, position));\n  };\n\n  TypeScriptWorker.prototype.getNavigationBarItems = function (fileName) {\n    return Promise.resolve(this._languageService.getNavigationBarItems(fileName));\n  };\n\n  TypeScriptWorker.prototype.getFormattingEditsForDocument = function (fileName, options) {\n    return Promise.resolve(this._languageService.getFormattingEditsForDocument(fileName, options));\n  };\n\n  TypeScriptWorker.prototype.getFormattingEditsForRange = function (fileName, start, end, options) {\n    return Promise.resolve(this._languageService.getFormattingEditsForRange(fileName, start, end, options));\n  };\n\n  TypeScriptWorker.prototype.getFormattingEditsAfterKeystroke = function (fileName, postion, ch, options) {\n    return Promise.resolve(this._languageService.getFormattingEditsAfterKeystroke(fileName, postion, ch, options));\n  };\n\n  TypeScriptWorker.prototype.findRenameLocations = function (fileName, positon, findInStrings, findInComments, providePrefixAndSuffixTextForRename) {\n    return Promise.resolve(this._languageService.findRenameLocations(fileName, positon, findInStrings, findInComments, providePrefixAndSuffixTextForRename));\n  };\n\n  TypeScriptWorker.prototype.getRenameInfo = function (fileName, positon, options) {\n    return Promise.resolve(this._languageService.getRenameInfo(fileName, positon, options));\n  };\n\n  TypeScriptWorker.prototype.getEmitOutput = function (fileName) {\n    return Promise.resolve(this._languageService.getEmitOutput(fileName));\n  };\n\n  TypeScriptWorker.prototype.updateExtraLibs = function (extraLibs) {\n    this._extraLibs = extraLibs;\n  };\n\n  return TypeScriptWorker;\n}();\n\nexport { TypeScriptWorker };\nexport function create(ctx, createData) {\n  return new TypeScriptWorker(ctx, createData);\n}","map":null,"metadata":{},"sourceType":"module"}