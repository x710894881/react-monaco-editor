{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { ignoreBracketsInToken } from '../supports.js';\nimport { BracketsUtils } from './richEditBrackets.js';\n\nvar BracketElectricCharacterSupport =\n/** @class */\nfunction () {\n  function BracketElectricCharacterSupport(richEditBrackets) {\n    this._richEditBrackets = richEditBrackets;\n  }\n\n  BracketElectricCharacterSupport.prototype.getElectricCharacters = function () {\n    var result = [];\n\n    if (this._richEditBrackets) {\n      for (var i = 0, len = this._richEditBrackets.brackets.length; i < len; i++) {\n        var bracketPair = this._richEditBrackets.brackets[i];\n        var lastChar = bracketPair.close.charAt(bracketPair.close.length - 1);\n        result.push(lastChar);\n      }\n    } // Filter duplicate entries\n\n\n    result = result.filter(function (item, pos, array) {\n      return array.indexOf(item) === pos;\n    });\n    return result;\n  };\n\n  BracketElectricCharacterSupport.prototype.onElectricCharacter = function (character, context, column) {\n    if (!this._richEditBrackets || this._richEditBrackets.brackets.length === 0) {\n      return null;\n    }\n\n    var tokenIndex = context.findTokenIndexAtOffset(column - 1);\n\n    if (ignoreBracketsInToken(context.getStandardTokenType(tokenIndex))) {\n      return null;\n    }\n\n    var reversedBracketRegex = this._richEditBrackets.reversedRegex;\n    var text = context.getLineContent().substring(0, column - 1) + character;\n    var r = BracketsUtils.findPrevBracketInToken(reversedBracketRegex, 1, text, 0, text.length);\n\n    if (!r) {\n      return null;\n    }\n\n    var bracketText = text.substring(r.startColumn - 1, r.endColumn - 1);\n    bracketText = bracketText.toLowerCase();\n    var isOpen = this._richEditBrackets.textIsOpenBracket[bracketText];\n\n    if (isOpen) {\n      return null;\n    }\n\n    var textBeforeBracket = text.substring(0, r.startColumn - 1);\n\n    if (!/^\\s*$/.test(textBeforeBracket)) {\n      // There is other text on the line before the bracket\n      return null;\n    }\n\n    return {\n      matchOpenBracket: bracketText\n    };\n  };\n\n  return BracketElectricCharacterSupport;\n}();\n\nexport { BracketElectricCharacterSupport };","map":null,"metadata":{},"sourceType":"module"}