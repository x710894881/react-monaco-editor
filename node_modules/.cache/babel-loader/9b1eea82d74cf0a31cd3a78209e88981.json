{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './media/diffReview.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { ActionBar } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Configuration } from '../config/configuration.js';\nimport { EditorAction, registerEditorAction } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { LineTokens } from '../../common/core/lineTokens.js';\nimport { Position } from '../../common/core/position.js';\nimport { editorLineNumbers } from '../../common/view/editorColorRegistry.js';\nimport { RenderLineInput, renderViewLine2 as renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nvar DIFF_LINES_PADDING = 3;\n\nvar DiffEntry =\n/** @class */\nfunction () {\n  function DiffEntry(originalLineStart, originalLineEnd, modifiedLineStart, modifiedLineEnd) {\n    this.originalLineStart = originalLineStart;\n    this.originalLineEnd = originalLineEnd;\n    this.modifiedLineStart = modifiedLineStart;\n    this.modifiedLineEnd = modifiedLineEnd;\n  }\n\n  DiffEntry.prototype.getType = function () {\n    if (this.originalLineStart === 0) {\n      return 1\n      /* Insert */\n      ;\n    }\n\n    if (this.modifiedLineStart === 0) {\n      return 2\n      /* Delete */\n      ;\n    }\n\n    return 0\n    /* Equal */\n    ;\n  };\n\n  return DiffEntry;\n}();\n\nvar Diff =\n/** @class */\nfunction () {\n  function Diff(entries) {\n    this.entries = entries;\n  }\n\n  return Diff;\n}();\n\nvar DiffReview =\n/** @class */\nfunction (_super) {\n  __extends(DiffReview, _super);\n\n  function DiffReview(diffEditor) {\n    var _this = _super.call(this) || this;\n\n    _this._width = 0;\n    _this._diffEditor = diffEditor;\n    _this._isVisible = false;\n    _this.shadow = createFastDomNode(document.createElement('div'));\n\n    _this.shadow.setClassName('diff-review-shadow');\n\n    _this.actionBarContainer = createFastDomNode(document.createElement('div'));\n\n    _this.actionBarContainer.setClassName('diff-review-actions');\n\n    _this._actionBar = _this._register(new ActionBar(_this.actionBarContainer.domNode));\n\n    _this._actionBar.push(new Action('diffreview.close', nls.localize('label.close', \"Close\"), 'close-diff-review', true, function () {\n      _this.hide();\n\n      return Promise.resolve(null);\n    }), {\n      label: false,\n      icon: true\n    });\n\n    _this.domNode = createFastDomNode(document.createElement('div'));\n\n    _this.domNode.setClassName('diff-review monaco-editor-background');\n\n    _this._content = createFastDomNode(document.createElement('div'));\n\n    _this._content.setClassName('diff-review-content');\n\n    _this.scrollbar = _this._register(new DomScrollableElement(_this._content.domNode, {}));\n\n    _this.domNode.domNode.appendChild(_this.scrollbar.getDomNode());\n\n    _this._register(diffEditor.onDidUpdateDiff(function () {\n      if (!_this._isVisible) {\n        return;\n      }\n\n      _this._diffs = _this._compute();\n\n      _this._render();\n    }));\n\n    _this._register(diffEditor.getModifiedEditor().onDidChangeCursorPosition(function () {\n      if (!_this._isVisible) {\n        return;\n      }\n\n      _this._render();\n    }));\n\n    _this._register(diffEditor.getOriginalEditor().onDidFocusEditorWidget(function () {\n      if (_this._isVisible) {\n        _this.hide();\n      }\n    }));\n\n    _this._register(diffEditor.getModifiedEditor().onDidFocusEditorWidget(function () {\n      if (_this._isVisible) {\n        _this.hide();\n      }\n    }));\n\n    _this._register(dom.addStandardDisposableListener(_this.domNode.domNode, 'click', function (e) {\n      e.preventDefault();\n      var row = dom.findParentWithClass(e.target, 'diff-review-row');\n\n      if (row) {\n        _this._goToRow(row);\n      }\n    }));\n\n    _this._register(dom.addStandardDisposableListener(_this.domNode.domNode, 'keydown', function (e) {\n      if (e.equals(18\n      /* DownArrow */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 18\n      /* DownArrow */\n      ) || e.equals(512\n      /* Alt */\n      | 18\n      /* DownArrow */\n      )) {\n        e.preventDefault();\n\n        _this._goToRow(_this._getNextRow());\n      }\n\n      if (e.equals(16\n      /* UpArrow */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 16\n      /* UpArrow */\n      ) || e.equals(512\n      /* Alt */\n      | 16\n      /* UpArrow */\n      )) {\n        e.preventDefault();\n\n        _this._goToRow(_this._getPrevRow());\n      }\n\n      if (e.equals(9\n      /* Escape */\n      ) || e.equals(2048\n      /* CtrlCmd */\n      | 9\n      /* Escape */\n      ) || e.equals(512\n      /* Alt */\n      | 9\n      /* Escape */\n      ) || e.equals(1024\n      /* Shift */\n      | 9\n      /* Escape */\n      )) {\n        e.preventDefault();\n\n        _this.hide();\n      }\n\n      if (e.equals(10\n      /* Space */\n      ) || e.equals(3\n      /* Enter */\n      )) {\n        e.preventDefault();\n\n        _this.accept();\n      }\n    }));\n\n    _this._diffs = [];\n    _this._currentDiff = null;\n    return _this;\n  }\n\n  DiffReview.prototype.prev = function () {\n    var index = 0;\n\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n\n    if (this._isVisible) {\n      var currentIndex = -1;\n\n      for (var i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n\n      index = this._diffs.length + currentIndex - 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n\n    index = index % this._diffs.length;\n\n    this._diffEditor.setPosition(new Position(this._diffs[index].entries[0].modifiedLineStart, 1));\n\n    this._isVisible = true;\n\n    this._diffEditor.doLayout();\n\n    this._render();\n\n    this._goToRow(this._getNextRow());\n  };\n\n  DiffReview.prototype.next = function () {\n    var index = 0;\n\n    if (!this._isVisible) {\n      this._diffs = this._compute();\n    }\n\n    if (this._isVisible) {\n      var currentIndex = -1;\n\n      for (var i = 0, len = this._diffs.length; i < len; i++) {\n        if (this._diffs[i] === this._currentDiff) {\n          currentIndex = i;\n          break;\n        }\n      }\n\n      index = currentIndex + 1;\n    } else {\n      index = this._findDiffIndex(this._diffEditor.getPosition());\n    }\n\n    if (this._diffs.length === 0) {\n      // Nothing to do\n      return;\n    }\n\n    index = index % this._diffs.length;\n\n    this._diffEditor.setPosition(new Position(this._diffs[index].entries[0].modifiedLineStart, 1));\n\n    this._isVisible = true;\n\n    this._diffEditor.doLayout();\n\n    this._render();\n\n    this._goToRow(this._getNextRow());\n  };\n\n  DiffReview.prototype.accept = function () {\n    var jumpToLineNumber = -1;\n\n    var current = this._getCurrentFocusedRow();\n\n    if (current) {\n      var lineNumber = parseInt(current.getAttribute('data-line'), 10);\n\n      if (!isNaN(lineNumber)) {\n        jumpToLineNumber = lineNumber;\n      }\n    }\n\n    this.hide();\n\n    if (jumpToLineNumber !== -1) {\n      this._diffEditor.setPosition(new Position(jumpToLineNumber, 1));\n\n      this._diffEditor.revealPosition(new Position(jumpToLineNumber, 1), 1\n      /* Immediate */\n      );\n    }\n  };\n\n  DiffReview.prototype.hide = function () {\n    this._isVisible = false;\n\n    this._diffEditor.focus();\n\n    this._diffEditor.doLayout();\n\n    this._render();\n  };\n\n  DiffReview.prototype._getPrevRow = function () {\n    var current = this._getCurrentFocusedRow();\n\n    if (!current) {\n      return this._getFirstRow();\n    }\n\n    if (current.previousElementSibling) {\n      return current.previousElementSibling;\n    }\n\n    return current;\n  };\n\n  DiffReview.prototype._getNextRow = function () {\n    var current = this._getCurrentFocusedRow();\n\n    if (!current) {\n      return this._getFirstRow();\n    }\n\n    if (current.nextElementSibling) {\n      return current.nextElementSibling;\n    }\n\n    return current;\n  };\n\n  DiffReview.prototype._getFirstRow = function () {\n    return this.domNode.domNode.querySelector('.diff-review-row');\n  };\n\n  DiffReview.prototype._getCurrentFocusedRow = function () {\n    var result = document.activeElement;\n\n    if (result && /diff-review-row/.test(result.className)) {\n      return result;\n    }\n\n    return null;\n  };\n\n  DiffReview.prototype._goToRow = function (row) {\n    var prev = this._getCurrentFocusedRow();\n\n    row.tabIndex = 0;\n    row.focus();\n\n    if (prev && prev !== row) {\n      prev.tabIndex = -1;\n    }\n\n    this.scrollbar.scanDomNode();\n  };\n\n  DiffReview.prototype.isVisible = function () {\n    return this._isVisible;\n  };\n\n  DiffReview.prototype.layout = function (top, width, height) {\n    this._width = width;\n    this.shadow.setTop(top - 6);\n    this.shadow.setWidth(width);\n    this.shadow.setHeight(this._isVisible ? 6 : 0);\n    this.domNode.setTop(top);\n    this.domNode.setWidth(width);\n    this.domNode.setHeight(height);\n\n    this._content.setHeight(height);\n\n    this._content.setWidth(width);\n\n    if (this._isVisible) {\n      this.actionBarContainer.setAttribute('aria-hidden', 'false');\n      this.actionBarContainer.setDisplay('block');\n    } else {\n      this.actionBarContainer.setAttribute('aria-hidden', 'true');\n      this.actionBarContainer.setDisplay('none');\n    }\n  };\n\n  DiffReview.prototype._compute = function () {\n    var lineChanges = this._diffEditor.getLineChanges();\n\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n\n    var originalModel = this._diffEditor.getOriginalEditor().getModel();\n\n    var modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n\n    if (!originalModel || !modifiedModel) {\n      return [];\n    }\n\n    return DiffReview._mergeAdjacent(lineChanges, originalModel.getLineCount(), modifiedModel.getLineCount());\n  };\n\n  DiffReview._mergeAdjacent = function (lineChanges, originalLineCount, modifiedLineCount) {\n    if (!lineChanges || lineChanges.length === 0) {\n      return [];\n    }\n\n    var diffs = [],\n        diffsLength = 0;\n\n    for (var i = 0, len = lineChanges.length; i < len; i++) {\n      var lineChange = lineChanges[i];\n      var originalStart = lineChange.originalStartLineNumber;\n      var originalEnd = lineChange.originalEndLineNumber;\n      var modifiedStart = lineChange.modifiedStartLineNumber;\n      var modifiedEnd = lineChange.modifiedEndLineNumber;\n      var r_1 = [],\n          rLength_1 = 0; // Emit before anchors\n\n      {\n        var originalEqualAbove = originalEnd === 0 ? originalStart : originalStart - 1;\n        var modifiedEqualAbove = modifiedEnd === 0 ? modifiedStart : modifiedStart - 1; // Make sure we don't step into the previous diff\n\n        var minOriginal = 1;\n        var minModified = 1;\n\n        if (i > 0) {\n          var prevLineChange = lineChanges[i - 1];\n\n          if (prevLineChange.originalEndLineNumber === 0) {\n            minOriginal = prevLineChange.originalStartLineNumber + 1;\n          } else {\n            minOriginal = prevLineChange.originalEndLineNumber + 1;\n          }\n\n          if (prevLineChange.modifiedEndLineNumber === 0) {\n            minModified = prevLineChange.modifiedStartLineNumber + 1;\n          } else {\n            minModified = prevLineChange.modifiedEndLineNumber + 1;\n          }\n        }\n\n        var fromOriginal = originalEqualAbove - DIFF_LINES_PADDING + 1;\n        var fromModified = modifiedEqualAbove - DIFF_LINES_PADDING + 1;\n\n        if (fromOriginal < minOriginal) {\n          var delta = minOriginal - fromOriginal;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n\n        if (fromModified < minModified) {\n          var delta = minModified - fromModified;\n          fromOriginal = fromOriginal + delta;\n          fromModified = fromModified + delta;\n        }\n\n        r_1[rLength_1++] = new DiffEntry(fromOriginal, originalEqualAbove, fromModified, modifiedEqualAbove);\n      } // Emit deleted lines\n\n      {\n        if (originalEnd !== 0) {\n          r_1[rLength_1++] = new DiffEntry(originalStart, originalEnd, 0, 0);\n        }\n      } // Emit inserted lines\n\n      {\n        if (modifiedEnd !== 0) {\n          r_1[rLength_1++] = new DiffEntry(0, 0, modifiedStart, modifiedEnd);\n        }\n      } // Emit after anchors\n\n      {\n        var originalEqualBelow = originalEnd === 0 ? originalStart + 1 : originalEnd + 1;\n        var modifiedEqualBelow = modifiedEnd === 0 ? modifiedStart + 1 : modifiedEnd + 1; // Make sure we don't step into the next diff\n\n        var maxOriginal = originalLineCount;\n        var maxModified = modifiedLineCount;\n\n        if (i + 1 < len) {\n          var nextLineChange = lineChanges[i + 1];\n\n          if (nextLineChange.originalEndLineNumber === 0) {\n            maxOriginal = nextLineChange.originalStartLineNumber;\n          } else {\n            maxOriginal = nextLineChange.originalStartLineNumber - 1;\n          }\n\n          if (nextLineChange.modifiedEndLineNumber === 0) {\n            maxModified = nextLineChange.modifiedStartLineNumber;\n          } else {\n            maxModified = nextLineChange.modifiedStartLineNumber - 1;\n          }\n        }\n\n        var toOriginal = originalEqualBelow + DIFF_LINES_PADDING - 1;\n        var toModified = modifiedEqualBelow + DIFF_LINES_PADDING - 1;\n\n        if (toOriginal > maxOriginal) {\n          var delta = maxOriginal - toOriginal;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n\n        if (toModified > maxModified) {\n          var delta = maxModified - toModified;\n          toOriginal = toOriginal + delta;\n          toModified = toModified + delta;\n        }\n\n        r_1[rLength_1++] = new DiffEntry(originalEqualBelow, toOriginal, modifiedEqualBelow, toModified);\n      }\n      diffs[diffsLength++] = new Diff(r_1);\n    } // Merge adjacent diffs\n\n\n    var curr = diffs[0].entries;\n    var r = [],\n        rLength = 0;\n\n    for (var i = 1, len = diffs.length; i < len; i++) {\n      var thisDiff = diffs[i].entries;\n      var currLast = curr[curr.length - 1];\n      var thisFirst = thisDiff[0];\n\n      if (currLast.getType() === 0\n      /* Equal */\n      && thisFirst.getType() === 0\n      /* Equal */\n      && thisFirst.originalLineStart <= currLast.originalLineEnd) {\n        // We are dealing with equal lines that overlap\n        curr[curr.length - 1] = new DiffEntry(currLast.originalLineStart, thisFirst.originalLineEnd, currLast.modifiedLineStart, thisFirst.modifiedLineEnd);\n        curr = curr.concat(thisDiff.slice(1));\n        continue;\n      }\n\n      r[rLength++] = new Diff(curr);\n      curr = thisDiff;\n    }\n\n    r[rLength++] = new Diff(curr);\n    return r;\n  };\n\n  DiffReview.prototype._findDiffIndex = function (pos) {\n    var lineNumber = pos.lineNumber;\n\n    for (var i = 0, len = this._diffs.length; i < len; i++) {\n      var diff = this._diffs[i].entries;\n      var lastModifiedLine = diff[diff.length - 1].modifiedLineEnd;\n\n      if (lineNumber <= lastModifiedLine) {\n        return i;\n      }\n    }\n\n    return 0;\n  };\n\n  DiffReview.prototype._render = function () {\n    var originalOpts = this._diffEditor.getOriginalEditor().getConfiguration();\n\n    var modifiedOpts = this._diffEditor.getModifiedEditor().getConfiguration();\n\n    var originalModel = this._diffEditor.getOriginalEditor().getModel();\n\n    var modifiedModel = this._diffEditor.getModifiedEditor().getModel();\n\n    var originalModelOpts = originalModel.getOptions();\n    var modifiedModelOpts = modifiedModel.getOptions();\n\n    if (!this._isVisible || !originalModel || !modifiedModel) {\n      dom.clearNode(this._content.domNode);\n      this._currentDiff = null;\n      this.scrollbar.scanDomNode();\n      return;\n    }\n\n    var diffIndex = this._findDiffIndex(this._diffEditor.getPosition());\n\n    if (this._diffs[diffIndex] === this._currentDiff) {\n      return;\n    }\n\n    this._currentDiff = this._diffs[diffIndex];\n    var diffs = this._diffs[diffIndex].entries;\n    var container = document.createElement('div');\n    container.className = 'diff-review-table';\n    container.setAttribute('role', 'list');\n    Configuration.applyFontInfoSlow(container, modifiedOpts.fontInfo);\n    var minOriginalLine = 0;\n    var maxOriginalLine = 0;\n    var minModifiedLine = 0;\n    var maxModifiedLine = 0;\n\n    for (var i = 0, len = diffs.length; i < len; i++) {\n      var diffEntry = diffs[i];\n      var originalLineStart = diffEntry.originalLineStart;\n      var originalLineEnd = diffEntry.originalLineEnd;\n      var modifiedLineStart = diffEntry.modifiedLineStart;\n      var modifiedLineEnd = diffEntry.modifiedLineEnd;\n\n      if (originalLineStart !== 0 && (minOriginalLine === 0 || originalLineStart < minOriginalLine)) {\n        minOriginalLine = originalLineStart;\n      }\n\n      if (originalLineEnd !== 0 && (maxOriginalLine === 0 || originalLineEnd > maxOriginalLine)) {\n        maxOriginalLine = originalLineEnd;\n      }\n\n      if (modifiedLineStart !== 0 && (minModifiedLine === 0 || modifiedLineStart < minModifiedLine)) {\n        minModifiedLine = modifiedLineStart;\n      }\n\n      if (modifiedLineEnd !== 0 && (maxModifiedLine === 0 || modifiedLineEnd > maxModifiedLine)) {\n        maxModifiedLine = modifiedLineEnd;\n      }\n    }\n\n    var header = document.createElement('div');\n    header.className = 'diff-review-row';\n    var cell = document.createElement('div');\n    cell.className = 'diff-review-cell diff-review-summary';\n    var originalChangedLinesCnt = maxOriginalLine - minOriginalLine + 1;\n    var modifiedChangedLinesCnt = maxModifiedLine - minModifiedLine + 1;\n    cell.appendChild(document.createTextNode(diffIndex + 1 + \"/\" + this._diffs.length + \": @@ -\" + minOriginalLine + \",\" + originalChangedLinesCnt + \" +\" + minModifiedLine + \",\" + modifiedChangedLinesCnt + \" @@\"));\n    header.setAttribute('data-line', String(minModifiedLine));\n\n    var getAriaLines = function (lines) {\n      if (lines === 0) {\n        return nls.localize('no_lines', \"no lines\");\n      } else if (lines === 1) {\n        return nls.localize('one_line', \"1 line\");\n      } else {\n        return nls.localize('more_lines', \"{0} lines\", lines);\n      }\n    };\n\n    var originalChangedLinesCntAria = getAriaLines(originalChangedLinesCnt);\n    var modifiedChangedLinesCntAria = getAriaLines(modifiedChangedLinesCnt);\n    header.setAttribute('aria-label', nls.localize({\n      key: 'header',\n      comment: ['This is the ARIA label for a git diff header.', 'A git diff header looks like this: @@ -154,12 +159,39 @@.', 'That encodes that at original line 154 (which is now line 159), 12 lines were removed/changed with 39 lines.', 'Variables 0 and 1 refer to the diff index out of total number of diffs.', 'Variables 2 and 4 will be numbers (a line number).', 'Variables 3 and 5 will be \"no lines\", \"1 line\" or \"X lines\", localized separately.']\n    }, \"Difference {0} of {1}: original {2}, {3}, modified {4}, {5}\", diffIndex + 1, this._diffs.length, minOriginalLine, originalChangedLinesCntAria, minModifiedLine, modifiedChangedLinesCntAria));\n    header.appendChild(cell); // @@ -504,7 +517,7 @@\n\n    header.setAttribute('role', 'listitem');\n    container.appendChild(header);\n    var modLine = minModifiedLine;\n\n    for (var i = 0, len = diffs.length; i < len; i++) {\n      var diffEntry = diffs[i];\n\n      DiffReview._renderSection(container, diffEntry, modLine, this._width, originalOpts, originalModel, originalModelOpts, modifiedOpts, modifiedModel, modifiedModelOpts);\n\n      if (diffEntry.modifiedLineStart !== 0) {\n        modLine = diffEntry.modifiedLineEnd;\n      }\n    }\n\n    dom.clearNode(this._content.domNode);\n\n    this._content.domNode.appendChild(container);\n\n    this.scrollbar.scanDomNode();\n  };\n\n  DiffReview._renderSection = function (dest, diffEntry, modLine, width, originalOpts, originalModel, originalModelOpts, modifiedOpts, modifiedModel, modifiedModelOpts) {\n    var type = diffEntry.getType();\n    var rowClassName = 'diff-review-row';\n    var lineNumbersExtraClassName = '';\n    var spacerClassName = 'diff-review-spacer';\n\n    switch (type) {\n      case 1\n      /* Insert */\n      :\n        rowClassName = 'diff-review-row line-insert';\n        lineNumbersExtraClassName = ' char-insert';\n        spacerClassName = 'diff-review-spacer insert-sign';\n        break;\n\n      case 2\n      /* Delete */\n      :\n        rowClassName = 'diff-review-row line-delete';\n        lineNumbersExtraClassName = ' char-delete';\n        spacerClassName = 'diff-review-spacer delete-sign';\n        break;\n    }\n\n    var originalLineStart = diffEntry.originalLineStart;\n    var originalLineEnd = diffEntry.originalLineEnd;\n    var modifiedLineStart = diffEntry.modifiedLineStart;\n    var modifiedLineEnd = diffEntry.modifiedLineEnd;\n    var cnt = Math.max(modifiedLineEnd - modifiedLineStart, originalLineEnd - originalLineStart);\n    var originalLineNumbersWidth = originalOpts.layoutInfo.glyphMarginWidth + originalOpts.layoutInfo.lineNumbersWidth;\n    var modifiedLineNumbersWidth = 10 + modifiedOpts.layoutInfo.glyphMarginWidth + modifiedOpts.layoutInfo.lineNumbersWidth;\n\n    for (var i = 0; i <= cnt; i++) {\n      var originalLine = originalLineStart === 0 ? 0 : originalLineStart + i;\n      var modifiedLine = modifiedLineStart === 0 ? 0 : modifiedLineStart + i;\n      var row = document.createElement('div');\n      row.style.minWidth = width + 'px';\n      row.className = rowClassName;\n      row.setAttribute('role', 'listitem');\n\n      if (modifiedLine !== 0) {\n        modLine = modifiedLine;\n      }\n\n      row.setAttribute('data-line', String(modLine));\n      var cell = document.createElement('div');\n      cell.className = 'diff-review-cell';\n      row.appendChild(cell);\n      var originalLineNumber = document.createElement('span');\n      originalLineNumber.style.width = originalLineNumbersWidth + 'px';\n      originalLineNumber.style.minWidth = originalLineNumbersWidth + 'px';\n      originalLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n\n      if (originalLine !== 0) {\n        originalLineNumber.appendChild(document.createTextNode(String(originalLine)));\n      } else {\n        originalLineNumber.innerHTML = '&nbsp;';\n      }\n\n      cell.appendChild(originalLineNumber);\n      var modifiedLineNumber = document.createElement('span');\n      modifiedLineNumber.style.width = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.minWidth = modifiedLineNumbersWidth + 'px';\n      modifiedLineNumber.style.paddingRight = '10px';\n      modifiedLineNumber.className = 'diff-review-line-number' + lineNumbersExtraClassName;\n\n      if (modifiedLine !== 0) {\n        modifiedLineNumber.appendChild(document.createTextNode(String(modifiedLine)));\n      } else {\n        modifiedLineNumber.innerHTML = '&nbsp;';\n      }\n\n      cell.appendChild(modifiedLineNumber);\n      var spacer = document.createElement('span');\n      spacer.className = spacerClassName;\n      spacer.innerHTML = '&nbsp;&nbsp;';\n      cell.appendChild(spacer);\n      var lineContent = void 0;\n\n      if (modifiedLine !== 0) {\n        cell.insertAdjacentHTML('beforeend', this._renderLine(modifiedModel, modifiedOpts, modifiedModelOpts.tabSize, modifiedLine));\n        lineContent = modifiedModel.getLineContent(modifiedLine);\n      } else {\n        cell.insertAdjacentHTML('beforeend', this._renderLine(originalModel, originalOpts, originalModelOpts.tabSize, originalLine));\n        lineContent = originalModel.getLineContent(originalLine);\n      }\n\n      if (lineContent.length === 0) {\n        lineContent = nls.localize('blankLine', \"blank\");\n      }\n\n      var ariaLabel = '';\n\n      switch (type) {\n        case 0\n        /* Equal */\n        :\n          ariaLabel = nls.localize('equalLine', \"original {0}, modified {1}: {2}\", originalLine, modifiedLine, lineContent);\n          break;\n\n        case 1\n        /* Insert */\n        :\n          ariaLabel = nls.localize('insertLine', \"+ modified {0}: {1}\", modifiedLine, lineContent);\n          break;\n\n        case 2\n        /* Delete */\n        :\n          ariaLabel = nls.localize('deleteLine', \"- original {0}: {1}\", originalLine, lineContent);\n          break;\n      }\n\n      row.setAttribute('aria-label', ariaLabel);\n      dest.appendChild(row);\n    }\n  };\n\n  DiffReview._renderLine = function (model, config, tabSize, lineNumber) {\n    var lineContent = model.getLineContent(lineNumber);\n    var defaultMetadata = (0\n    /* None */\n    << 11\n    /* FONT_STYLE_OFFSET */\n    | 1\n    /* DefaultForeground */\n    << 14\n    /* FOREGROUND_OFFSET */\n    | 2\n    /* DefaultBackground */\n    << 23\n    /* BACKGROUND_OFFSET */\n    ) >>> 0;\n    var tokens = new Uint32Array(2);\n    tokens[0] = lineContent.length;\n    tokens[1] = defaultMetadata;\n    var lineTokens = new LineTokens(tokens, lineContent);\n    var isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, model.mightContainNonBasicASCII());\n    var containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, model.mightContainRTL());\n    var r = renderViewLine(new RenderLineInput(config.fontInfo.isMonospace && !config.viewInfo.disableMonospaceOptimizations, config.fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, [], tabSize, config.fontInfo.spaceWidth, config.viewInfo.stopRenderingLineAfter, config.viewInfo.renderWhitespace, config.viewInfo.renderControlCharacters, config.viewInfo.fontLigatures, null));\n    return r.html;\n  };\n\n  return DiffReview;\n}(Disposable);\n\nexport { DiffReview }; // theming\n\nregisterThemingParticipant(function (theme, collector) {\n  var lineNumbers = theme.getColor(editorLineNumbers);\n\n  if (lineNumbers) {\n    collector.addRule(\".monaco-diff-editor .diff-review-line-number { color: \" + lineNumbers + \"; }\");\n  }\n\n  var shadow = theme.getColor(scrollbarShadow);\n\n  if (shadow) {\n    collector.addRule(\".monaco-diff-editor .diff-review-shadow { box-shadow: \" + shadow + \" 0 -6px 6px -6px inset; }\");\n  }\n});\n\nvar DiffReviewNext =\n/** @class */\nfunction (_super) {\n  __extends(DiffReviewNext, _super);\n\n  function DiffReviewNext() {\n    return _super.call(this, {\n      id: 'editor.action.diffReview.next',\n      label: nls.localize('editor.action.diffReview.next', \"Go to Next Difference\"),\n      alias: 'Go to Next Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  DiffReviewNext.prototype.run = function (accessor, editor) {\n    var diffEditor = findFocusedDiffEditor(accessor);\n\n    if (diffEditor) {\n      diffEditor.diffReviewNext();\n    }\n  };\n\n  return DiffReviewNext;\n}(EditorAction);\n\nvar DiffReviewPrev =\n/** @class */\nfunction (_super) {\n  __extends(DiffReviewPrev, _super);\n\n  function DiffReviewPrev() {\n    return _super.call(this, {\n      id: 'editor.action.diffReview.prev',\n      label: nls.localize('editor.action.diffReview.prev', \"Go to Previous Difference\"),\n      alias: 'Go to Previous Difference',\n      precondition: ContextKeyExpr.has('isInDiffEditor'),\n      kbOpts: {\n        kbExpr: null,\n        primary: 1024\n        /* Shift */\n        | 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  DiffReviewPrev.prototype.run = function (accessor, editor) {\n    var diffEditor = findFocusedDiffEditor(accessor);\n\n    if (diffEditor) {\n      diffEditor.diffReviewPrev();\n    }\n  };\n\n  return DiffReviewPrev;\n}(EditorAction);\n\nfunction findFocusedDiffEditor(accessor) {\n  var codeEditorService = accessor.get(ICodeEditorService);\n  var diffEditors = codeEditorService.listDiffEditors();\n\n  for (var i = 0, len = diffEditors.length; i < len; i++) {\n    var diffEditor = diffEditors[i];\n\n    if (diffEditor.hasWidgetFocus()) {\n      return diffEditor;\n    }\n  }\n\n  return null;\n}\n\nregisterEditorAction(DiffReviewNext);\nregisterEditorAction(DiffReviewPrev);","map":null,"metadata":{},"sourceType":"module"}