{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createScanner } from '../parser/htmlScanner.js';\nimport { Range } from '../../vscode-languageserver-types/main.js';\nimport * as strings from '../utils/strings.js';\nimport Uri from '../../vscode-uri/index.js';\nimport { TokenType } from '../htmlLanguageTypes.js';\n\nfunction normalizeRef(url, languageId) {\n  var first = url[0];\n  var last = url[url.length - 1];\n\n  if (first === last && (first === '\\'' || first === '\\\"')) {\n    url = url.substr(1, url.length - 2);\n  }\n\n  return url;\n}\n\nfunction validateRef(url, languageId) {\n  if (!url.length) {\n    return false;\n  }\n\n  if (languageId === 'handlebars' && /{{.*}}/.test(url)) {\n    return false;\n  }\n\n  try {\n    return !!Uri.parse(url);\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getWorkspaceUrl(documentUri, tokenContent, documentContext, base) {\n  if (/^\\s*javascript\\:/i.test(tokenContent) || /^\\s*\\#/i.test(tokenContent) || /[\\n\\r]/.test(tokenContent)) {\n    return null;\n  }\n\n  tokenContent = tokenContent.replace(/^\\s*/g, '');\n\n  if (/^https?:\\/\\//i.test(tokenContent) || /^file:\\/\\//i.test(tokenContent)) {\n    // Absolute link that needs no treatment\n    return tokenContent;\n  }\n\n  if (/^\\/\\//i.test(tokenContent)) {\n    // Absolute link (that does not name the protocol)\n    var pickedScheme = strings.startsWith(documentUri, 'https://') ? 'https' : 'http';\n    return pickedScheme + ':' + tokenContent.replace(/^\\s*/g, '');\n  }\n\n  if (documentContext) {\n    return documentContext.resolveReference(tokenContent, base || documentUri);\n  }\n\n  return tokenContent;\n}\n\nfunction createLink(document, documentContext, attributeValue, startOffset, endOffset, base) {\n  var tokenContent = normalizeRef(attributeValue, document.languageId);\n\n  if (!validateRef(tokenContent, document.languageId)) {\n    return null;\n  }\n\n  if (tokenContent.length < attributeValue.length) {\n    startOffset++;\n    endOffset--;\n  }\n\n  var workspaceUrl = getWorkspaceUrl(document.uri, tokenContent, documentContext, base);\n\n  if (!workspaceUrl || !isValidURI(workspaceUrl)) {\n    return null;\n  }\n\n  return {\n    range: Range.create(document.positionAt(startOffset), document.positionAt(endOffset)),\n    target: workspaceUrl\n  };\n}\n\nfunction isValidURI(uri) {\n  try {\n    Uri.parse(uri);\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nexport function findDocumentLinks(document, documentContext) {\n  var newLinks = [];\n  var rootAbsoluteUrl = null;\n  var scanner = createScanner(document.getText(), 0);\n  var token = scanner.scan();\n  var afterHrefOrSrc = false;\n  var afterBase = false;\n  var base = void 0;\n\n  while (token !== TokenType.EOS) {\n    switch (token) {\n      case TokenType.StartTag:\n        if (!base) {\n          var tagName = scanner.getTokenText().toLowerCase();\n          afterBase = tagName === 'base';\n        }\n\n        break;\n\n      case TokenType.AttributeName:\n        var attributeName = scanner.getTokenText().toLowerCase();\n        afterHrefOrSrc = attributeName === 'src' || attributeName === 'href';\n        break;\n\n      case TokenType.AttributeValue:\n        if (afterHrefOrSrc) {\n          var attributeValue = scanner.getTokenText();\n\n          if (!afterBase) {\n            // don't highlight the base link itself\n            var link = createLink(document, documentContext, attributeValue, scanner.getTokenOffset(), scanner.getTokenEnd(), base);\n\n            if (link) {\n              newLinks.push(link);\n            }\n          }\n\n          if (afterBase && typeof base === 'undefined') {\n            base = normalizeRef(attributeValue, document.languageId);\n\n            if (base && documentContext) {\n              base = documentContext.resolveReference(base, document.uri);\n            }\n          }\n\n          afterBase = false;\n          afterHrefOrSrc = false;\n        }\n\n        break;\n    }\n\n    token = scanner.scan();\n  }\n\n  return newLinks;\n}","map":null,"metadata":{},"sourceType":"module"}