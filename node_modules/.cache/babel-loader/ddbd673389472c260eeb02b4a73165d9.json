{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './keybindingLabel.css';\nimport { equals } from '../../../common/objects.js';\nimport { UILabelProvider } from '../../../common/keybindingLabels.js';\nimport * as dom from '../../dom.js';\nimport { localize } from '../../../../nls.js';\nvar $ = dom.$;\n\nvar KeybindingLabel =\n/** @class */\nfunction () {\n  function KeybindingLabel(container, os, options) {\n    this.os = os;\n    this.options = options;\n    this.domNode = dom.append(container, $('.monaco-keybinding'));\n    this.didEverRender = false;\n    container.appendChild(this.domNode);\n  }\n\n  KeybindingLabel.prototype.set = function (keybinding, matches) {\n    if (this.didEverRender && this.keybinding === keybinding && KeybindingLabel.areSame(this.matches, matches)) {\n      return;\n    }\n\n    this.keybinding = keybinding;\n    this.matches = matches;\n    this.render();\n  };\n\n  KeybindingLabel.prototype.render = function () {\n    dom.clearNode(this.domNode);\n\n    if (this.keybinding) {\n      var _a = this.keybinding.getParts(),\n          firstPart = _a[0],\n          chordPart = _a[1];\n\n      if (firstPart) {\n        this.renderPart(this.domNode, firstPart, this.matches ? this.matches.firstPart : null);\n      }\n\n      if (chordPart) {\n        dom.append(this.domNode, $('span.monaco-keybinding-key-chord-separator', undefined, ' '));\n        this.renderPart(this.domNode, chordPart, this.matches ? this.matches.chordPart : null);\n      }\n\n      this.domNode.title = this.keybinding.getAriaLabel() || '';\n    } else if (this.options && this.options.renderUnboundKeybindings) {\n      this.renderUnbound(this.domNode);\n    }\n\n    this.didEverRender = true;\n  };\n\n  KeybindingLabel.prototype.renderPart = function (parent, part, match) {\n    var modifierLabels = UILabelProvider.modifierLabels[this.os];\n\n    if (part.ctrlKey) {\n      this.renderKey(parent, modifierLabels.ctrlKey, Boolean(match && match.ctrlKey), modifierLabels.separator);\n    }\n\n    if (part.shiftKey) {\n      this.renderKey(parent, modifierLabels.shiftKey, Boolean(match && match.shiftKey), modifierLabels.separator);\n    }\n\n    if (part.altKey) {\n      this.renderKey(parent, modifierLabels.altKey, Boolean(match && match.altKey), modifierLabels.separator);\n    }\n\n    if (part.metaKey) {\n      this.renderKey(parent, modifierLabels.metaKey, Boolean(match && match.metaKey), modifierLabels.separator);\n    }\n\n    var keyLabel = part.keyLabel;\n\n    if (keyLabel) {\n      this.renderKey(parent, keyLabel, Boolean(match && match.keyCode), '');\n    }\n  };\n\n  KeybindingLabel.prototype.renderKey = function (parent, label, highlight, separator) {\n    dom.append(parent, $('span.monaco-keybinding-key' + (highlight ? '.highlight' : ''), undefined, label));\n\n    if (separator) {\n      dom.append(parent, $('span.monaco-keybinding-key-separator', undefined, separator));\n    }\n  };\n\n  KeybindingLabel.prototype.renderUnbound = function (parent) {\n    dom.append(parent, $('span.monaco-keybinding-key', undefined, localize('unbound', \"Unbound\")));\n  };\n\n  KeybindingLabel.areSame = function (a, b) {\n    if (a === b || !a && !b) {\n      return true;\n    }\n\n    return !!a && !!b && equals(a.firstPart, b.firstPart) && equals(a.chordPart, b.chordPart);\n  };\n\n  return KeybindingLabel;\n}();\n\nexport { KeybindingLabel };","map":null,"metadata":{},"sourceType":"module"}