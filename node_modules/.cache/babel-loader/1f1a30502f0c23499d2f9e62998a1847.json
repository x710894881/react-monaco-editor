{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n// ------ internal util\nexport var _util;\n\n(function (_util) {\n  _util.serviceIds = new Map();\n  _util.DI_TARGET = '$di$target';\n  _util.DI_DEPENDENCIES = '$di$dependencies';\n\n  function getServiceDependencies(ctor) {\n    return ctor[_util.DI_DEPENDENCIES] || [];\n  }\n\n  _util.getServiceDependencies = getServiceDependencies;\n})(_util || (_util = {}));\n\nexport var IInstantiationService = createDecorator('instantiationService');\n\nfunction storeServiceDependency(id, target, index, optional) {\n  if (target[_util.DI_TARGET] === target) {\n    target[_util.DI_DEPENDENCIES].push({\n      id: id,\n      index: index,\n      optional: optional\n    });\n  } else {\n    target[_util.DI_DEPENDENCIES] = [{\n      id: id,\n      index: index,\n      optional: optional\n    }];\n    target[_util.DI_TARGET] = target;\n  }\n}\n/**\n * A *only* valid way to create a {{ServiceIdentifier}}.\n */\n\n\nexport function createDecorator(serviceId) {\n  if (_util.serviceIds.has(serviceId)) {\n    return _util.serviceIds.get(serviceId);\n  }\n\n  var id = function (target, key, index) {\n    if (arguments.length !== 3) {\n      throw new Error('@IServiceName-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(id, target, index, false);\n  };\n\n  id.toString = function () {\n    return serviceId;\n  };\n\n  _util.serviceIds.set(serviceId, id);\n\n  return id;\n}\n/**\n * Mark a service dependency as optional.\n */\n\nexport function optional(serviceIdentifier) {\n  return function (target, key, index) {\n    if (arguments.length !== 3) {\n      throw new Error('@optional-decorator can only be used to decorate a parameter');\n    }\n\n    storeServiceDependency(serviceIdentifier, target, index, true);\n  };\n}","map":null,"metadata":{},"sourceType":"module"}