{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\n\nvar BracketSelectionRangeProvider =\n/** @class */\nfunction () {\n  function BracketSelectionRangeProvider() {}\n\n  BracketSelectionRangeProvider.prototype.provideSelectionRanges = function (model, positions) {\n    return __awaiter(this, void 0, void 0, function () {\n      var result, _loop_1, _i, positions_1, position;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            result = [];\n\n            _loop_1 = function (position) {\n              var bucket, ranges;\n              return __generator(this, function (_a) {\n                switch (_a.label) {\n                  case 0:\n                    bucket = [];\n                    result.push(bucket);\n                    ranges = new Map();\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      return BracketSelectionRangeProvider._bracketsRightYield(resolve, 0, model, position, ranges);\n                    })];\n\n                  case 1:\n                    _a.sent();\n\n                    return [4\n                    /*yield*/\n                    , new Promise(function (resolve) {\n                      return BracketSelectionRangeProvider._bracketsLeftYield(resolve, 0, model, position, ranges, bucket);\n                    })];\n\n                  case 2:\n                    _a.sent();\n\n                    return [2\n                    /*return*/\n                    ];\n                }\n              });\n            };\n\n            _i = 0, positions_1 = positions;\n            _a.label = 1;\n\n          case 1:\n            if (!(_i < positions_1.length)) return [3\n            /*break*/\n            , 4];\n            position = positions_1[_i];\n            return [5\n            /*yield**/\n            , _loop_1(position)];\n\n          case 2:\n            _a.sent();\n\n            _a.label = 3;\n\n          case 3:\n            _i++;\n            return [3\n            /*break*/\n            , 1];\n\n          case 4:\n            return [2\n            /*return*/\n            , result];\n        }\n      });\n    });\n  };\n\n  BracketSelectionRangeProvider._bracketsRightYield = function (resolve, round, model, pos, ranges) {\n    var counts = new Map();\n    var t1 = Date.now();\n\n    while (true) {\n      if (round >= BracketSelectionRangeProvider._maxRounds) {\n        resolve();\n        break;\n      }\n\n      if (!pos) {\n        resolve();\n        break;\n      }\n\n      var bracket = model.findNextBracket(pos);\n\n      if (!bracket) {\n        resolve();\n        break;\n      }\n\n      var d = Date.now() - t1;\n\n      if (d > BracketSelectionRangeProvider._maxDuration) {\n        setTimeout(function () {\n          return BracketSelectionRangeProvider._bracketsRightYield(resolve, round + 1, model, pos, ranges);\n        });\n        break;\n      }\n\n      var key = bracket.close;\n\n      if (bracket.isOpen) {\n        // wait for closing\n        var val = counts.has(key) ? counts.get(key) : 0;\n        counts.set(key, val + 1);\n      } else {\n        // process closing\n        var val = counts.has(key) ? counts.get(key) : 0;\n        val -= 1;\n        counts.set(key, Math.max(0, val));\n\n        if (val < 0) {\n          var list = ranges.get(key);\n\n          if (!list) {\n            list = new LinkedList();\n            ranges.set(key, list);\n          }\n\n          list.push(bracket.range);\n        }\n      }\n\n      pos = bracket.range.getEndPosition();\n    }\n  };\n\n  BracketSelectionRangeProvider._bracketsLeftYield = function (resolve, round, model, pos, ranges, bucket) {\n    var counts = new Map();\n    var t1 = Date.now();\n\n    while (true) {\n      if (round >= BracketSelectionRangeProvider._maxRounds && ranges.size === 0) {\n        resolve();\n        break;\n      }\n\n      if (!pos) {\n        resolve();\n        break;\n      }\n\n      var bracket = model.findPrevBracket(pos);\n\n      if (!bracket) {\n        resolve();\n        break;\n      }\n\n      var d = Date.now() - t1;\n\n      if (d > BracketSelectionRangeProvider._maxDuration) {\n        setTimeout(function () {\n          return BracketSelectionRangeProvider._bracketsLeftYield(resolve, round + 1, model, pos, ranges, bucket);\n        });\n        break;\n      }\n\n      var key = bracket.close;\n\n      if (!bracket.isOpen) {\n        // wait for opening\n        var val = counts.has(key) ? counts.get(key) : 0;\n        counts.set(key, val + 1);\n      } else {\n        // opening\n        var val = counts.has(key) ? counts.get(key) : 0;\n        val -= 1;\n        counts.set(key, Math.max(0, val));\n\n        if (val < 0) {\n          var list = ranges.get(key);\n\n          if (list) {\n            var closing = list.shift();\n\n            if (list.size === 0) {\n              ranges.delete(key);\n            }\n\n            var innerBracket = Range.fromPositions(bracket.range.getEndPosition(), closing.getStartPosition());\n            var outerBracket = Range.fromPositions(bracket.range.getStartPosition(), closing.getEndPosition());\n            bucket.push({\n              range: innerBracket\n            });\n            bucket.push({\n              range: outerBracket\n            });\n\n            BracketSelectionRangeProvider._addBracketLeading(model, outerBracket, bucket);\n          }\n        }\n      }\n\n      pos = bracket.range.getStartPosition();\n    }\n  };\n\n  BracketSelectionRangeProvider._addBracketLeading = function (model, bracket, bucket) {\n    if (bracket.startLineNumber === bracket.endLineNumber) {\n      return;\n    } // xxxxxxxx {\n    //\n    // }\n\n\n    var startLine = bracket.startLineNumber;\n    var column = model.getLineFirstNonWhitespaceColumn(startLine);\n\n    if (column !== 0 && column !== bracket.startColumn) {\n      bucket.push({\n        range: Range.fromPositions(new Position(startLine, column), bracket.getEndPosition())\n      });\n      bucket.push({\n        range: Range.fromPositions(new Position(startLine, 1), bracket.getEndPosition())\n      });\n    } // xxxxxxxx\n    // {\n    //\n    // }\n\n\n    var aboveLine = startLine - 1;\n\n    if (aboveLine > 0) {\n      var column_1 = model.getLineFirstNonWhitespaceColumn(aboveLine);\n\n      if (column_1 === bracket.startColumn && column_1 !== model.getLineLastNonWhitespaceColumn(aboveLine)) {\n        bucket.push({\n          range: Range.fromPositions(new Position(aboveLine, column_1), bracket.getEndPosition())\n        });\n        bucket.push({\n          range: Range.fromPositions(new Position(aboveLine, 1), bracket.getEndPosition())\n        });\n      }\n    }\n  };\n\n  BracketSelectionRangeProvider._maxDuration = 30;\n  BracketSelectionRangeProvider._maxRounds = 2;\n  return BracketSelectionRangeProvider;\n}();\n\nexport { BracketSelectionRangeProvider };","map":null,"metadata":{},"sourceType":"module"}