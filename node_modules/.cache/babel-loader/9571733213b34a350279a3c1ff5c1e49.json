{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nls from '../../../nls.js';\nimport * as types from '../../../base/common/types.js';\nimport { Command, EditorCommand, registerEditorCommand } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { ColumnSelection } from '../../common/controller/cursorColumnSelection.js';\nimport { CursorState } from '../../common/controller/cursorCommon.js';\nimport { DeleteOperations } from '../../common/controller/cursorDeleteOperations.js';\nimport { CursorMove as CursorMove_, CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { TypeOperations } from '../../common/controller/cursorTypeOperations.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Handler } from '../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nvar CORE_WEIGHT = 0\n/* EditorCore */\n;\n\nvar CoreEditorCommand =\n/** @class */\nfunction (_super) {\n  __extends(CoreEditorCommand, _super);\n\n  function CoreEditorCommand() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  CoreEditorCommand.prototype.runEditorCommand = function (accessor, editor, args) {\n    var cursors = editor._getCursors();\n\n    if (!cursors) {\n      // the editor has no view => has no cursors\n      return;\n    }\n\n    this.runCoreEditorCommand(cursors, args || {});\n  };\n\n  return CoreEditorCommand;\n}(EditorCommand);\n\nexport { CoreEditorCommand };\nexport var EditorScroll_;\n\n(function (EditorScroll_) {\n  var isEditorScrollArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    var scrollArg = arg;\n\n    if (!types.isString(scrollArg.to)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.by) && !types.isString(scrollArg.by)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.value) && !types.isNumber(scrollArg.value)) {\n      return false;\n    }\n\n    if (!types.isUndefined(scrollArg.revealCursor) && !types.isBoolean(scrollArg.revealCursor)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  EditorScroll_.description = {\n    description: 'Scroll editor in the given direction',\n    args: [{\n      name: 'Editor scroll argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory direction value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'up', 'down'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'page', 'halfPage'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'revealCursor': If 'true' reveals the cursor if it is outside view port.\\n\\t\\t\\t\\t\",\n      constraint: isEditorScrollArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['up', 'down']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'page', 'halfPage']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'revealCursor': {\n            'type': 'boolean'\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Directions in the view for editor scroll command.\n   */\n\n  EditorScroll_.RawDirection = {\n    Up: 'up',\n    Down: 'down'\n  };\n  /**\n   * Units for editor scroll 'by' argument\n   */\n\n  EditorScroll_.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Page: 'page',\n    HalfPage: 'halfPage'\n  };\n\n  function parse(args) {\n    var direction;\n\n    switch (args.to) {\n      case EditorScroll_.RawDirection.Up:\n        direction = 1\n        /* Up */\n        ;\n        break;\n\n      case EditorScroll_.RawDirection.Down:\n        direction = 2\n        /* Down */\n        ;\n        break;\n\n      default:\n        // Illegal arguments\n        return null;\n    }\n\n    var unit;\n\n    switch (args.by) {\n      case EditorScroll_.RawUnit.Line:\n        unit = 1\n        /* Line */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.WrappedLine:\n        unit = 2\n        /* WrappedLine */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.Page:\n        unit = 3\n        /* Page */\n        ;\n        break;\n\n      case EditorScroll_.RawUnit.HalfPage:\n        unit = 4\n        /* HalfPage */\n        ;\n        break;\n\n      default:\n        unit = 2\n        /* WrappedLine */\n        ;\n    }\n\n    var value = Math.floor(args.value || 1);\n    var revealCursor = !!args.revealCursor;\n    return {\n      direction: direction,\n      unit: unit,\n      value: value,\n      revealCursor: revealCursor,\n      select: !!args.select\n    };\n  }\n\n  EditorScroll_.parse = parse;\n})(EditorScroll_ || (EditorScroll_ = {}));\n\nexport var RevealLine_;\n\n(function (RevealLine_) {\n  var isRevealLineArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    var reveaLineArg = arg;\n\n    if (!types.isNumber(reveaLineArg.lineNumber)) {\n      return false;\n    }\n\n    if (!types.isUndefined(reveaLineArg.at) && !types.isString(reveaLineArg.at)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  RevealLine_.description = {\n    description: 'Reveal the given line at the given logical position',\n    args: [{\n      name: 'Reveal line argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'lineNumber': A mandatory line number value.\\n\\t\\t\\t\\t\\t* 'at': Logical position at which line has to be revealed .\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'top', 'center', 'bottom'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\",\n      constraint: isRevealLineArgs,\n      schema: {\n        'type': 'object',\n        'required': ['lineNumber'],\n        'properties': {\n          'lineNumber': {\n            'type': 'number'\n          },\n          'at': {\n            'type': 'string',\n            'enum': ['top', 'center', 'bottom']\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Values for reveal line 'at' argument\n   */\n\n  RevealLine_.RawAtArgument = {\n    Top: 'top',\n    Center: 'center',\n    Bottom: 'bottom'\n  };\n})(RevealLine_ || (RevealLine_ = {}));\n\nexport var CoreNavigationCommands;\n\n(function (CoreNavigationCommands) {\n  var BaseMoveToCommand =\n  /** @class */\n  function (_super) {\n    __extends(BaseMoveToCommand, _super);\n\n    function BaseMoveToCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    BaseMoveToCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.moveTo(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position, args.viewPosition)]);\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return BaseMoveToCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.MoveTo = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveTo',\n    inSelectionMode: false,\n    precondition: undefined\n  }));\n  CoreNavigationCommands.MoveToSelect = registerEditorCommand(new BaseMoveToCommand({\n    id: '_moveToSelect',\n    inSelectionMode: true,\n    precondition: undefined\n  }));\n\n  var ColumnSelectCommand =\n  /** @class */\n  function (_super) {\n    __extends(ColumnSelectCommand, _super);\n\n    function ColumnSelectCommand() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    ColumnSelectCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n\n      var result = this._getColumnSelectResult(cursors.context, cursors.getPrimaryCursor(), cursors.getColumnSelectData(), args);\n\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , result.viewStates.map(function (viewState) {\n        return CursorState.fromViewState(viewState);\n      }));\n      cursors.setColumnSelectData({\n        isReal: true,\n        fromViewLineNumber: result.fromLineNumber,\n        fromViewVisualColumn: result.fromVisualColumn,\n        toViewLineNumber: result.toLineNumber,\n        toViewVisualColumn: result.toVisualColumn\n      });\n      cursors.reveal(true, result.reversed ? 1\n      /* TopMost */\n      : 2\n      /* BottomMost */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return ColumnSelectCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.ColumnSelect = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_1, _super);\n\n    function class_1() {\n      return _super.call(this, {\n        id: 'columnSelect',\n        precondition: undefined\n      }) || this;\n    }\n\n    class_1.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n      // validate `args`\n      var validatedPosition = context.model.validatePosition(args.position);\n      var validatedViewPosition = context.validateViewPosition(new Position(args.viewPosition.lineNumber, args.viewPosition.column), validatedPosition);\n      var fromViewLineNumber = prevColumnSelectData.fromViewLineNumber;\n      var fromViewVisualColumn = prevColumnSelectData.fromViewVisualColumn;\n\n      if (!prevColumnSelectData.isReal && args.setAnchorIfNotSet) {\n        fromViewLineNumber = validatedViewPosition.lineNumber;\n        fromViewVisualColumn = args.mouseColumn - 1;\n      }\n\n      return ColumnSelection.columnSelect(context.config, context.viewModel, fromViewLineNumber, fromViewVisualColumn, validatedViewPosition.lineNumber, args.mouseColumn - 1);\n    };\n\n    return class_1;\n  }(ColumnSelectCommand))());\n  CoreNavigationCommands.CursorColumnSelectLeft = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_2, _super);\n\n    function class_2() {\n      return _super.call(this, {\n        id: 'cursorColumnSelectLeft',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 15\n          /* LeftArrow */\n          ,\n          linux: {\n            primary: 0\n          }\n        }\n      }) || this;\n    }\n\n    class_2.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectLeft(context.config, context.viewModel, prevColumnSelectData);\n    };\n\n    return class_2;\n  }(ColumnSelectCommand))());\n  CoreNavigationCommands.CursorColumnSelectRight = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_3, _super);\n\n    function class_3() {\n      return _super.call(this, {\n        id: 'cursorColumnSelectRight',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 17\n          /* RightArrow */\n          ,\n          linux: {\n            primary: 0\n          }\n        }\n      }) || this;\n    }\n\n    class_3.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectRight(context.config, context.viewModel, prevColumnSelectData);\n    };\n\n    return class_3;\n  }(ColumnSelectCommand))());\n\n  var ColumnSelectUpCommand =\n  /** @class */\n  function (_super) {\n    __extends(ColumnSelectUpCommand, _super);\n\n    function ColumnSelectUpCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._isPaged = opts.isPaged;\n      return _this;\n    }\n\n    ColumnSelectUpCommand.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectUp(context.config, context.viewModel, prevColumnSelectData, this._isPaged);\n    };\n\n    return ColumnSelectUpCommand;\n  }(ColumnSelectCommand);\n\n  CoreNavigationCommands.CursorColumnSelectUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 16\n      /* UpArrow */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageUp = registerEditorCommand(new ColumnSelectUpCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 11\n      /* PageUp */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n\n  var ColumnSelectDownCommand =\n  /** @class */\n  function (_super) {\n    __extends(ColumnSelectDownCommand, _super);\n\n    function ColumnSelectDownCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._isPaged = opts.isPaged;\n      return _this;\n    }\n\n    ColumnSelectDownCommand.prototype._getColumnSelectResult = function (context, primary, prevColumnSelectData, args) {\n      return ColumnSelection.columnSelectDown(context.config, context.viewModel, prevColumnSelectData, this._isPaged);\n    };\n\n    return ColumnSelectDownCommand;\n  }(ColumnSelectCommand);\n\n  CoreNavigationCommands.CursorColumnSelectDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: false,\n    id: 'cursorColumnSelectDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 18\n      /* DownArrow */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorColumnSelectPageDown = registerEditorCommand(new ColumnSelectDownCommand({\n    isPaged: true,\n    id: 'cursorColumnSelectPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 512\n      /* Alt */\n      | 12\n      /* PageDown */\n      ,\n      linux: {\n        primary: 0\n      }\n    }\n  }));\n\n  var CursorMoveImpl =\n  /** @class */\n  function (_super) {\n    __extends(CursorMoveImpl, _super);\n\n    function CursorMoveImpl() {\n      return _super.call(this, {\n        id: 'cursorMove',\n        precondition: undefined,\n        description: CursorMove_.description\n      }) || this;\n    }\n\n    CursorMoveImpl.prototype.runCoreEditorCommand = function (cursors, args) {\n      var parsed = CursorMove_.parse(args);\n\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n\n      this._runCursorMove(cursors, args.source, parsed);\n    };\n\n    CursorMoveImpl.prototype._runCursorMove = function (cursors, source, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(source, 3\n      /* Explicit */\n      , CursorMoveCommands.move(cursors.context, cursors.getAll(), args));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return CursorMoveImpl;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorMoveImpl = CursorMoveImpl;\n  CoreNavigationCommands.CursorMove = registerEditorCommand(new CursorMoveImpl());\n\n  var CursorMoveBasedCommand =\n  /** @class */\n  function (_super) {\n    __extends(CursorMoveBasedCommand, _super);\n\n    function CursorMoveBasedCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._staticArgs = opts.args;\n      return _this;\n    }\n\n    CursorMoveBasedCommand.prototype.runCoreEditorCommand = function (cursors, dynamicArgs) {\n      var args = this._staticArgs;\n\n      if (this._staticArgs.value === -1\n      /* PAGE_SIZE_MARKER */\n      ) {\n          // -1 is a marker for page size\n          args = {\n            direction: this._staticArgs.direction,\n            unit: this._staticArgs.unit,\n            select: this._staticArgs.select,\n            value: cursors.context.config.pageSize\n          };\n        }\n\n      CoreNavigationCommands.CursorMove._runCursorMove(cursors, dynamicArgs.source, args);\n    };\n\n    return CursorMoveBasedCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorLeft = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0\n      /* Left */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorLeft',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 15\n      /* LeftArrow */\n      ,\n      mac: {\n        primary: 15\n        /* LeftArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 32\n        /* KEY_B */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLeftSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 0\n      /* Left */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorLeftSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 15\n      /* LeftArrow */\n\n    }\n  }));\n  CoreNavigationCommands.CursorRight = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1\n      /* Right */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorRight',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 17\n      /* RightArrow */\n      ,\n      mac: {\n        primary: 17\n        /* RightArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 36\n        /* KEY_F */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorRightSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 1\n      /* Right */\n      ,\n      unit: 0\n      /* None */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorRightSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 17\n      /* RightArrow */\n\n    }\n  }));\n  CoreNavigationCommands.CursorUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 16\n      /* UpArrow */\n      ,\n      mac: {\n        primary: 16\n        /* UpArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 46\n        /* KEY_P */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 16\n      /* UpArrow */\n      ,\n      secondary: [2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 16\n      /* UpArrow */\n      ],\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      },\n      linux: {\n        primary: 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageUp = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageUp',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 11\n      /* PageUp */\n\n    }\n  }));\n  CoreNavigationCommands.CursorPageUpSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 2\n      /* Up */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageUpSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 11\n      /* PageUp */\n\n    }\n  }));\n  CoreNavigationCommands.CursorDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: 1\n    },\n    id: 'cursorDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 18\n      /* DownArrow */\n      ,\n      mac: {\n        primary: 18\n        /* DownArrow */\n        ,\n        secondary: [256\n        /* WinCtrl */\n        | 44\n        /* KEY_N */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: 1\n    },\n    id: 'cursorDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 18\n      /* DownArrow */\n      ,\n      secondary: [2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 18\n      /* DownArrow */\n      ],\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      },\n      linux: {\n        primary: 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorPageDown = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: false,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageDown',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 12\n      /* PageDown */\n\n    }\n  }));\n  CoreNavigationCommands.CursorPageDownSelect = registerEditorCommand(new CursorMoveBasedCommand({\n    args: {\n      direction: 3\n      /* Down */\n      ,\n      unit: 2\n      /* WrappedLine */\n      ,\n      select: true,\n      value: -1\n      /* PAGE_SIZE_MARKER */\n\n    },\n    id: 'cursorPageDownSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 12\n      /* PageDown */\n\n    }\n  }));\n  CoreNavigationCommands.CreateCursor = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_4, _super);\n\n    function class_4() {\n      return _super.call(this, {\n        id: 'createCursor',\n        precondition: undefined\n      }) || this;\n    }\n\n    class_4.prototype.runCoreEditorCommand = function (cursors, args) {\n      var context = cursors.context;\n      var newState;\n\n      if (args.wholeLine) {\n        newState = CursorMoveCommands.line(context, cursors.getPrimaryCursor(), false, args.position, args.viewPosition);\n      } else {\n        newState = CursorMoveCommands.moveTo(context, cursors.getPrimaryCursor(), false, args.position, args.viewPosition);\n      }\n\n      var states = cursors.getAll(); // Check if we should remove a cursor (sort of like a toggle)\n\n      if (states.length > 1) {\n        var newModelPosition = newState.modelState ? newState.modelState.position : null;\n        var newViewPosition = newState.viewState ? newState.viewState.position : null;\n\n        for (var i = 0, len = states.length; i < len; i++) {\n          var state = states[i];\n\n          if (newModelPosition && !state.modelState.selection.containsPosition(newModelPosition)) {\n            continue;\n          }\n\n          if (newViewPosition && !state.viewState.selection.containsPosition(newViewPosition)) {\n            continue;\n          } // => Remove the cursor\n\n\n          states.splice(i, 1);\n          cursors.context.model.pushStackElement();\n          cursors.setStates(args.source, 3\n          /* Explicit */\n          , states);\n          return;\n        }\n      } // => Add the new cursor\n\n\n      states.push(newState);\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , states);\n    };\n\n    return class_4;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.LastCursorMoveToSelect = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_5, _super);\n\n    function class_5() {\n      return _super.call(this, {\n        id: '_lastCursorMoveToSelect',\n        precondition: undefined\n      }) || this;\n    }\n\n    class_5.prototype.runCoreEditorCommand = function (cursors, args) {\n      var context = cursors.context;\n      var lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n      var states = cursors.getAll();\n      var newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.moveTo(context, states[lastAddedCursorIndex], true, args.position, args.viewPosition);\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , newStates);\n    };\n\n    return class_5;\n  }(CoreEditorCommand))());\n\n  var HomeCommand =\n  /** @class */\n  function (_super) {\n    __extends(HomeCommand, _super);\n\n    function HomeCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    HomeCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToBeginningOfLine(cursors.context, cursors.getAll(), this._inSelectionMode));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return HomeCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorHome = registerEditorCommand(new HomeCommand({\n    inSelectionMode: false,\n    id: 'cursorHome',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 14\n      /* Home */\n      ,\n      mac: {\n        primary: 14\n        /* Home */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 15\n        /* LeftArrow */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorHomeSelect = registerEditorCommand(new HomeCommand({\n    inSelectionMode: true,\n    id: 'cursorHomeSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 14\n        /* Home */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 15\n        /* LeftArrow */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineStart = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_6, _super);\n\n    function class_6() {\n      return _super.call(this, {\n        id: 'cursorLineStart',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 31\n            /* KEY_A */\n\n          }\n        }\n      }) || this;\n    }\n\n    class_6.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , this._exec(cursors.context, cursors.getAll()));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    class_6.prototype._exec = function (context, cursors) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var lineNumber = cursor.modelState.position.lineNumber;\n        result[i] = CursorState.fromModelState(cursor.modelState.move(false, lineNumber, 1, 0));\n      }\n\n      return result;\n    };\n\n    return class_6;\n  }(CoreEditorCommand))());\n\n  var EndCommand =\n  /** @class */\n  function (_super) {\n    __extends(EndCommand, _super);\n\n    function EndCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    EndCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToEndOfLine(cursors.context, cursors.getAll(), this._inSelectionMode));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return EndCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorEnd = registerEditorCommand(new EndCommand({\n    inSelectionMode: false,\n    id: 'cursorEnd',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 13\n      /* End */\n      ,\n      mac: {\n        primary: 13\n        /* End */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 17\n        /* RightArrow */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorEndSelect = registerEditorCommand(new EndCommand({\n    inSelectionMode: true,\n    id: 'cursorEndSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 1024\n      /* Shift */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 1024\n        /* Shift */\n        | 13\n        /* End */\n        ,\n        secondary: [2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 17\n        /* RightArrow */\n        ]\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorLineEnd = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_7, _super);\n\n    function class_7() {\n      return _super.call(this, {\n        id: 'cursorLineEnd',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 35\n            /* KEY_E */\n\n          }\n        }\n      }) || this;\n    }\n\n    class_7.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , this._exec(cursors.context, cursors.getAll()));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    class_7.prototype._exec = function (context, cursors) {\n      var result = [];\n\n      for (var i = 0, len = cursors.length; i < len; i++) {\n        var cursor = cursors[i];\n        var lineNumber = cursor.modelState.position.lineNumber;\n        var maxColumn = context.model.getLineMaxColumn(lineNumber);\n        result[i] = CursorState.fromModelState(cursor.modelState.move(false, lineNumber, maxColumn, 0));\n      }\n\n      return result;\n    };\n\n    return class_7;\n  }(CoreEditorCommand))());\n\n  var TopCommand =\n  /** @class */\n  function (_super) {\n    __extends(TopCommand, _super);\n\n    function TopCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    TopCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToBeginningOfBuffer(cursors.context, cursors.getAll(), this._inSelectionMode));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return TopCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorTop = registerEditorCommand(new TopCommand({\n    inSelectionMode: false,\n    id: 'cursorTop',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorTopSelect = registerEditorCommand(new TopCommand({\n    inSelectionMode: true,\n    id: 'cursorTopSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 14\n      /* Home */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 16\n        /* UpArrow */\n\n      }\n    }\n  }));\n\n  var BottomCommand =\n  /** @class */\n  function (_super) {\n    __extends(BottomCommand, _super);\n\n    function BottomCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    BottomCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.moveToEndOfBuffer(cursors.context, cursors.getAll(), this._inSelectionMode));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return BottomCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.CursorBottom = registerEditorCommand(new BottomCommand({\n    inSelectionMode: false,\n    id: 'cursorBottom',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n  CoreNavigationCommands.CursorBottomSelect = registerEditorCommand(new BottomCommand({\n    inSelectionMode: true,\n    id: 'cursorBottomSelect',\n    precondition: undefined,\n    kbOpts: {\n      weight: CORE_WEIGHT,\n      kbExpr: EditorContextKeys.textInputFocus,\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 13\n      /* End */\n      ,\n      mac: {\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 18\n        /* DownArrow */\n\n      }\n    }\n  }));\n\n  var EditorScrollImpl =\n  /** @class */\n  function (_super) {\n    __extends(EditorScrollImpl, _super);\n\n    function EditorScrollImpl() {\n      return _super.call(this, {\n        id: 'editorScroll',\n        precondition: undefined,\n        description: EditorScroll_.description\n      }) || this;\n    }\n\n    EditorScrollImpl.prototype.runCoreEditorCommand = function (cursors, args) {\n      var parsed = EditorScroll_.parse(args);\n\n      if (!parsed) {\n        // illegal arguments\n        return;\n      }\n\n      this._runEditorScroll(cursors, args.source, parsed);\n    };\n\n    EditorScrollImpl.prototype._runEditorScroll = function (cursors, source, args) {\n      var desiredScrollTop = this._computeDesiredScrollTop(cursors.context, args);\n\n      if (args.revealCursor) {\n        // must ensure cursor is in new visible range\n        var desiredVisibleViewRange = cursors.context.getCompletelyVisibleViewRangeAtScrollTop(desiredScrollTop);\n        cursors.setStates(source, 3\n        /* Explicit */\n        , [CursorMoveCommands.findPositionInViewportIfOutside(cursors.context, cursors.getPrimaryCursor(), desiredVisibleViewRange, args.select)]);\n      }\n\n      cursors.scrollTo(desiredScrollTop);\n    };\n\n    EditorScrollImpl.prototype._computeDesiredScrollTop = function (context, args) {\n      if (args.unit === 1\n      /* Line */\n      ) {\n          // scrolling by model lines\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n          var desiredTopModelLineNumber = void 0;\n\n          if (args.direction === 1\n          /* Up */\n          ) {\n              // must go x model lines up\n              desiredTopModelLineNumber = Math.max(1, visibleModelRange.startLineNumber - args.value);\n            } else {\n            // must go x model lines down\n            desiredTopModelLineNumber = Math.min(context.model.getLineCount(), visibleModelRange.startLineNumber + args.value);\n          }\n\n          var desiredTopViewPosition = context.convertModelPositionToViewPosition(new Position(desiredTopModelLineNumber, 1));\n          return context.getVerticalOffsetForViewLine(desiredTopViewPosition.lineNumber);\n        }\n\n      var noOfLines;\n\n      if (args.unit === 3\n      /* Page */\n      ) {\n          noOfLines = context.config.pageSize * args.value;\n        } else if (args.unit === 4\n      /* HalfPage */\n      ) {\n          noOfLines = Math.round(context.config.pageSize / 2) * args.value;\n        } else {\n        noOfLines = args.value;\n      }\n\n      var deltaLines = (args.direction === 1\n      /* Up */\n      ? -1 : 1) * noOfLines;\n      return context.getCurrentScrollTop() + deltaLines * context.config.lineHeight;\n    };\n\n    return EditorScrollImpl;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.EditorScrollImpl = EditorScrollImpl;\n  CoreNavigationCommands.EditorScroll = registerEditorCommand(new EditorScrollImpl());\n  CoreNavigationCommands.ScrollLineUp = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_8, _super);\n\n    function class_8() {\n      return _super.call(this, {\n        id: 'scrollLineUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 16\n          /* UpArrow */\n          ,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 11\n            /* PageUp */\n\n          }\n        }\n      }) || this;\n    }\n\n    class_8.prototype.runCoreEditorCommand = function (cursors, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n        direction: 1\n        /* Up */\n        ,\n        unit: 2\n        /* WrappedLine */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    };\n\n    return class_8;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollPageUp = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_9, _super);\n\n    function class_9() {\n      return _super.call(this, {\n        id: 'scrollPageUp',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 11\n          /* PageUp */\n          ,\n          win: {\n            primary: 512\n            /* Alt */\n            | 11\n            /* PageUp */\n\n          },\n          linux: {\n            primary: 512\n            /* Alt */\n            | 11\n            /* PageUp */\n\n          }\n        }\n      }) || this;\n    }\n\n    class_9.prototype.runCoreEditorCommand = function (cursors, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n        direction: 1\n        /* Up */\n        ,\n        unit: 3\n        /* Page */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    };\n\n    return class_9;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollLineDown = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_10, _super);\n\n    function class_10() {\n      return _super.call(this, {\n        id: 'scrollLineDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 18\n          /* DownArrow */\n          ,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 12\n            /* PageDown */\n\n          }\n        }\n      }) || this;\n    }\n\n    class_10.prototype.runCoreEditorCommand = function (cursors, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n        direction: 2\n        /* Down */\n        ,\n        unit: 2\n        /* WrappedLine */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    };\n\n    return class_10;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.ScrollPageDown = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_11, _super);\n\n    function class_11() {\n      return _super.call(this, {\n        id: 'scrollPageDown',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 12\n          /* PageDown */\n          ,\n          win: {\n            primary: 512\n            /* Alt */\n            | 12\n            /* PageDown */\n\n          },\n          linux: {\n            primary: 512\n            /* Alt */\n            | 12\n            /* PageDown */\n\n          }\n        }\n      }) || this;\n    }\n\n    class_11.prototype.runCoreEditorCommand = function (cursors, args) {\n      CoreNavigationCommands.EditorScroll._runEditorScroll(cursors, args.source, {\n        direction: 2\n        /* Down */\n        ,\n        unit: 3\n        /* Page */\n        ,\n        value: 1,\n        revealCursor: false,\n        select: false\n      });\n    };\n\n    return class_11;\n  }(CoreEditorCommand))());\n\n  var WordCommand =\n  /** @class */\n  function (_super) {\n    __extends(WordCommand, _super);\n\n    function WordCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    WordCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.word(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position)]);\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return WordCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.WordSelect = registerEditorCommand(new WordCommand({\n    inSelectionMode: false,\n    id: '_wordSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.WordSelectDrag = registerEditorCommand(new WordCommand({\n    inSelectionMode: true,\n    id: '_wordSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorWordSelect = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_12, _super);\n\n    function class_12() {\n      return _super.call(this, {\n        id: 'lastCursorWordSelect',\n        precondition: undefined\n      }) || this;\n    }\n\n    class_12.prototype.runCoreEditorCommand = function (cursors, args) {\n      var context = cursors.context;\n      var lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n      var states = cursors.getAll();\n      var newStates = states.slice(0);\n      var lastAddedState = states[lastAddedCursorIndex];\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.word(context, lastAddedState, lastAddedState.modelState.hasSelection(), args.position);\n      context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , newStates);\n    };\n\n    return class_12;\n  }(CoreEditorCommand))());\n\n  var LineCommand =\n  /** @class */\n  function (_super) {\n    __extends(LineCommand, _super);\n\n    function LineCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    LineCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.line(cursors.context, cursors.getPrimaryCursor(), this._inSelectionMode, args.position, args.viewPosition)]);\n      cursors.reveal(false, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return LineCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.LineSelect = registerEditorCommand(new LineCommand({\n    inSelectionMode: false,\n    id: '_lineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LineSelectDrag = registerEditorCommand(new LineCommand({\n    inSelectionMode: true,\n    id: '_lineSelectDrag',\n    precondition: undefined\n  }));\n\n  var LastCursorLineCommand =\n  /** @class */\n  function (_super) {\n    __extends(LastCursorLineCommand, _super);\n\n    function LastCursorLineCommand(opts) {\n      var _this = _super.call(this, opts) || this;\n\n      _this._inSelectionMode = opts.inSelectionMode;\n      return _this;\n    }\n\n    LastCursorLineCommand.prototype.runCoreEditorCommand = function (cursors, args) {\n      var lastAddedCursorIndex = cursors.getLastAddedCursorIndex();\n      var states = cursors.getAll();\n      var newStates = states.slice(0);\n      newStates[lastAddedCursorIndex] = CursorMoveCommands.line(cursors.context, states[lastAddedCursorIndex], this._inSelectionMode, args.position, args.viewPosition);\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , newStates);\n    };\n\n    return LastCursorLineCommand;\n  }(CoreEditorCommand);\n\n  CoreNavigationCommands.LastCursorLineSelect = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: false,\n    id: 'lastCursorLineSelect',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.LastCursorLineSelectDrag = registerEditorCommand(new LastCursorLineCommand({\n    inSelectionMode: true,\n    id: 'lastCursorLineSelectDrag',\n    precondition: undefined\n  }));\n  CoreNavigationCommands.ExpandLineSelection = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_13, _super);\n\n    function class_13() {\n      return _super.call(this, {\n        id: 'expandLineSelection',\n        precondition: undefined,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 2048\n          /* CtrlCmd */\n          | 42\n          /* KEY_L */\n\n        }\n      }) || this;\n    }\n\n    class_13.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , CursorMoveCommands.expandLineSelection(cursors.context, cursors.getAll()));\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return class_13;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.CancelSelection = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_14, _super);\n\n    function class_14() {\n      return _super.call(this, {\n        id: 'cancelSelection',\n        precondition: EditorContextKeys.hasNonEmptySelection,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9\n          /* Escape */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 9\n          /* Escape */\n          ]\n        }\n      }) || this;\n    }\n\n    class_14.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.cancelSelection(cursors.context, cursors.getPrimaryCursor())]);\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return class_14;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.RemoveSecondaryCursors = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_15, _super);\n\n    function class_15() {\n      return _super.call(this, {\n        id: 'removeSecondaryCursors',\n        precondition: EditorContextKeys.hasMultipleSelections,\n        kbOpts: {\n          weight: CORE_WEIGHT + 1,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 9\n          /* Escape */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 9\n          /* Escape */\n          ]\n        }\n      }) || this;\n    }\n\n    class_15.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , [cursors.getPrimaryCursor()]);\n      cursors.reveal(true, 0\n      /* Primary */\n      , 0\n      /* Smooth */\n      );\n    };\n\n    return class_15;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.RevealLine = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_16, _super);\n\n    function class_16() {\n      return _super.call(this, {\n        id: 'revealLine',\n        precondition: undefined,\n        description: RevealLine_.description\n      }) || this;\n    }\n\n    class_16.prototype.runCoreEditorCommand = function (cursors, args) {\n      var revealLineArg = args;\n      var lineNumber = (revealLineArg.lineNumber || 0) + 1;\n\n      if (lineNumber < 1) {\n        lineNumber = 1;\n      }\n\n      var lineCount = cursors.context.model.getLineCount();\n\n      if (lineNumber > lineCount) {\n        lineNumber = lineCount;\n      }\n\n      var range = new Range(lineNumber, 1, lineNumber, cursors.context.model.getLineMaxColumn(lineNumber));\n      var revealAt = 0\n      /* Simple */\n      ;\n\n      if (revealLineArg.at) {\n        switch (revealLineArg.at) {\n          case RevealLine_.RawAtArgument.Top:\n            revealAt = 3\n            /* Top */\n            ;\n            break;\n\n          case RevealLine_.RawAtArgument.Center:\n            revealAt = 1\n            /* Center */\n            ;\n            break;\n\n          case RevealLine_.RawAtArgument.Bottom:\n            revealAt = 4\n            /* Bottom */\n            ;\n            break;\n\n          default:\n            break;\n        }\n      }\n\n      var viewRange = cursors.context.convertModelRangeToViewRange(range);\n      cursors.revealRange(false, viewRange, revealAt, 0\n      /* Smooth */\n      );\n    };\n\n    return class_16;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.SelectAll = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_17, _super);\n\n    function class_17() {\n      return _super.call(this, {\n        id: 'selectAll',\n        precondition: undefined\n      }) || this;\n    }\n\n    class_17.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , [CursorMoveCommands.selectAll(cursors.context, cursors.getPrimaryCursor())]);\n    };\n\n    return class_17;\n  }(CoreEditorCommand))());\n  CoreNavigationCommands.SetSelection = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_18, _super);\n\n    function class_18() {\n      return _super.call(this, {\n        id: 'setSelection',\n        precondition: undefined\n      }) || this;\n    }\n\n    class_18.prototype.runCoreEditorCommand = function (cursors, args) {\n      cursors.context.model.pushStackElement();\n      cursors.setStates(args.source, 3\n      /* Explicit */\n      , [CursorState.fromModelSelection(args.selection)]);\n    };\n\n    return class_18;\n  }(CoreEditorCommand))());\n})(CoreNavigationCommands || (CoreNavigationCommands = {}));\n\nexport var CoreEditingCommands;\n\n(function (CoreEditingCommands) {\n  var CoreEditingCommand =\n  /** @class */\n  function (_super) {\n    __extends(CoreEditingCommand, _super);\n\n    function CoreEditingCommand() {\n      return _super !== null && _super.apply(this, arguments) || this;\n    }\n\n    CoreEditingCommand.prototype.runEditorCommand = function (accessor, editor, args) {\n      var cursors = editor._getCursors();\n\n      if (!cursors) {\n        // the editor has no view => has no cursors\n        return;\n      }\n\n      this.runCoreEditingCommand(editor, cursors, args || {});\n    };\n\n    return CoreEditingCommand;\n  }(EditorCommand);\n\n  CoreEditingCommands.CoreEditingCommand = CoreEditingCommand;\n  CoreEditingCommands.LineBreakInsert = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_19, _super);\n\n    function class_19() {\n      return _super.call(this, {\n        id: 'lineBreakInsert',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 0,\n          mac: {\n            primary: 256\n            /* WinCtrl */\n            | 45\n            /* KEY_O */\n\n          }\n        }\n      }) || this;\n    }\n\n    class_19.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.lineBreakInsert(cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) {\n        return s.modelState.selection;\n      })));\n    };\n\n    return class_19;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Outdent = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_20, _super);\n\n    function class_20() {\n      return _super.call(this, {\n        id: 'outdent',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 1024\n          /* Shift */\n          | 2\n          /* Tab */\n\n        }\n      }) || this;\n    }\n\n    class_20.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.outdent(cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) {\n        return s.modelState.selection;\n      })));\n      editor.pushUndoStop();\n    };\n\n    return class_20;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.Tab = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_21, _super);\n\n    function class_21() {\n      return _super.call(this, {\n        id: 'tab',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.tabDoesNotMoveFocus),\n          primary: 2\n          /* Tab */\n\n        }\n      }) || this;\n    }\n\n    class_21.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n      editor.pushUndoStop();\n      editor.executeCommands(this.id, TypeOperations.tab(cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) {\n        return s.modelState.selection;\n      })));\n      editor.pushUndoStop();\n    };\n\n    return class_21;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.DeleteLeft = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_22, _super);\n\n    function class_22() {\n      return _super.call(this, {\n        id: 'deleteLeft',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 1\n          /* Backspace */\n          ,\n          secondary: [1024\n          /* Shift */\n          | 1\n          /* Backspace */\n          ],\n          mac: {\n            primary: 1\n            /* Backspace */\n            ,\n            secondary: [1024\n            /* Shift */\n            | 1\n            /* Backspace */\n            , 256\n            /* WinCtrl */\n            | 38\n            /* KEY_H */\n            , 256\n            /* WinCtrl */\n            | 1\n            /* Backspace */\n            ]\n          }\n        }\n      }) || this;\n    }\n\n    class_22.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n      var _a = DeleteOperations.deleteLeft(cursors.getPrevEditOperationType(), cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) {\n        return s.modelState.selection;\n      })),\n          shouldPushStackElementBefore = _a[0],\n          commands = _a[1];\n\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n\n      editor.executeCommands(this.id, commands);\n      cursors.setPrevEditOperationType(2\n      /* DeletingLeft */\n      );\n    };\n\n    return class_22;\n  }(CoreEditingCommand))());\n  CoreEditingCommands.DeleteRight = registerEditorCommand(new (\n  /** @class */\n  function (_super) {\n    __extends(class_23, _super);\n\n    function class_23() {\n      return _super.call(this, {\n        id: 'deleteRight',\n        precondition: EditorContextKeys.writable,\n        kbOpts: {\n          weight: CORE_WEIGHT,\n          kbExpr: EditorContextKeys.textInputFocus,\n          primary: 20\n          /* Delete */\n          ,\n          mac: {\n            primary: 20\n            /* Delete */\n            ,\n            secondary: [256\n            /* WinCtrl */\n            | 34\n            /* KEY_D */\n            , 256\n            /* WinCtrl */\n            | 20\n            /* Delete */\n            ]\n          }\n        }\n      }) || this;\n    }\n\n    class_23.prototype.runCoreEditingCommand = function (editor, cursors, args) {\n      var _a = DeleteOperations.deleteRight(cursors.getPrevEditOperationType(), cursors.context.config, cursors.context.model, cursors.getAll().map(function (s) {\n        return s.modelState.selection;\n      })),\n          shouldPushStackElementBefore = _a[0],\n          commands = _a[1];\n\n      if (shouldPushStackElementBefore) {\n        editor.pushUndoStop();\n      }\n\n      editor.executeCommands(this.id, commands);\n      cursors.setPrevEditOperationType(3\n      /* DeletingRight */\n      );\n    };\n\n    return class_23;\n  }(CoreEditingCommand))());\n})(CoreEditingCommands || (CoreEditingCommands = {}));\n\nfunction registerCommand(command) {\n  command.register();\n}\n/**\n * A command that will:\n *  1. invoke a command on the focused editor.\n *  2. otherwise, invoke a browser built-in command on the `activeElement`.\n *  3. otherwise, invoke a command on the workbench active editor.\n */\n\n\nvar EditorOrNativeTextInputCommand =\n/** @class */\nfunction (_super) {\n  __extends(EditorOrNativeTextInputCommand, _super);\n\n  function EditorOrNativeTextInputCommand(opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this._editorHandler = opts.editorHandler;\n    _this._inputHandler = opts.inputHandler;\n    return _this;\n  }\n\n  EditorOrNativeTextInputCommand.prototype.runCommand = function (accessor, args) {\n    var focusedEditor = accessor.get(ICodeEditorService).getFocusedCodeEditor(); // Only if editor text focus (i.e. not if editor has widget focus).\n\n    if (focusedEditor && focusedEditor.hasTextFocus()) {\n      return this._runEditorHandler(accessor, focusedEditor, args);\n    } // Ignore this action when user is focused on an element that allows for entering text\n\n\n    var activeElement = document.activeElement;\n\n    if (activeElement && ['input', 'textarea'].indexOf(activeElement.tagName.toLowerCase()) >= 0) {\n      document.execCommand(this._inputHandler);\n      return;\n    } // Redirecting to active editor\n\n\n    var activeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor();\n\n    if (activeEditor) {\n      activeEditor.focus();\n      return this._runEditorHandler(accessor, activeEditor, args);\n    }\n  };\n\n  EditorOrNativeTextInputCommand.prototype._runEditorHandler = function (accessor, editor, args) {\n    var HANDLER = this._editorHandler;\n\n    if (typeof HANDLER === 'string') {\n      editor.trigger('keyboard', HANDLER, args);\n    } else {\n      args = args || {};\n      args.source = 'keyboard';\n      HANDLER.runEditorCommand(accessor, editor, args);\n    }\n  };\n\n  return EditorOrNativeTextInputCommand;\n}(Command);\n/**\n * A command that will invoke a command on the focused editor.\n */\n\n\nvar EditorHandlerCommand =\n/** @class */\nfunction (_super) {\n  __extends(EditorHandlerCommand, _super);\n\n  function EditorHandlerCommand(id, handlerId, description) {\n    var _this = _super.call(this, {\n      id: id,\n      precondition: undefined,\n      description: description\n    }) || this;\n\n    _this._handlerId = handlerId;\n    return _this;\n  }\n\n  EditorHandlerCommand.prototype.runCommand = function (accessor, args) {\n    var editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n    if (!editor) {\n      return;\n    }\n\n    editor.trigger('keyboard', this._handlerId, args);\n  };\n\n  return EditorHandlerCommand;\n}(Command);\n\nregisterCommand(new EditorOrNativeTextInputCommand({\n  editorHandler: CoreNavigationCommands.SelectAll,\n  inputHandler: 'selectAll',\n  id: 'editor.action.selectAll',\n  precondition: EditorContextKeys.textInputFocus,\n  kbOpts: {\n    weight: CORE_WEIGHT,\n    kbExpr: null,\n    primary: 2048\n    /* CtrlCmd */\n    | 31\n    /* KEY_A */\n\n  },\n  menubarOpts: {\n    menuId: 22\n    /* MenubarSelectionMenu */\n    ,\n    group: '1_basic',\n    title: nls.localize({\n      key: 'miSelectAll',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Select All\"),\n    order: 1\n  }\n}));\nregisterCommand(new EditorOrNativeTextInputCommand({\n  editorHandler: Handler.Undo,\n  inputHandler: 'undo',\n  id: Handler.Undo,\n  precondition: EditorContextKeys.writable,\n  kbOpts: {\n    weight: CORE_WEIGHT,\n    kbExpr: EditorContextKeys.textInputFocus,\n    primary: 2048\n    /* CtrlCmd */\n    | 56\n    /* KEY_Z */\n\n  },\n  menubarOpts: {\n    menuId: 14\n    /* MenubarEditMenu */\n    ,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miUndo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Undo\"),\n    order: 1\n  }\n}));\nregisterCommand(new EditorHandlerCommand('default:' + Handler.Undo, Handler.Undo));\nregisterCommand(new EditorOrNativeTextInputCommand({\n  editorHandler: Handler.Redo,\n  inputHandler: 'redo',\n  id: Handler.Redo,\n  precondition: EditorContextKeys.writable,\n  kbOpts: {\n    weight: CORE_WEIGHT,\n    kbExpr: EditorContextKeys.textInputFocus,\n    primary: 2048\n    /* CtrlCmd */\n    | 55\n    /* KEY_Y */\n    ,\n    secondary: [2048\n    /* CtrlCmd */\n    | 1024\n    /* Shift */\n    | 56\n    /* KEY_Z */\n    ],\n    mac: {\n      primary: 2048\n      /* CtrlCmd */\n      | 1024\n      /* Shift */\n      | 56\n      /* KEY_Z */\n\n    }\n  },\n  menubarOpts: {\n    menuId: 14\n    /* MenubarEditMenu */\n    ,\n    group: '1_do',\n    title: nls.localize({\n      key: 'miRedo',\n      comment: ['&& denotes a mnemonic']\n    }, \"&&Redo\"),\n    order: 2\n  }\n}));\nregisterCommand(new EditorHandlerCommand('default:' + Handler.Redo, Handler.Redo));\n\nfunction registerOverwritableCommand(handlerId, description) {\n  registerCommand(new EditorHandlerCommand('default:' + handlerId, handlerId));\n  registerCommand(new EditorHandlerCommand(handlerId, handlerId, description));\n}\n\nregisterOverwritableCommand(Handler.Type, {\n  description: \"Type\",\n  args: [{\n    name: 'args',\n    schema: {\n      'type': 'object',\n      'required': ['text'],\n      'properties': {\n        'text': {\n          'type': 'string'\n        }\n      }\n    }\n  }]\n});\nregisterOverwritableCommand(Handler.ReplacePreviousChar);\nregisterOverwritableCommand(Handler.CompositionStart);\nregisterOverwritableCommand(Handler.CompositionEnd);\nregisterOverwritableCommand(Handler.Paste);\nregisterOverwritableCommand(Handler.Cut);","map":null,"metadata":{},"sourceType":"module"}