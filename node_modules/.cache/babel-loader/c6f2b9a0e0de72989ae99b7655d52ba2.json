{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './media/scrollbars.css';\nimport { isEdgeOrIE } from '../../browser.js';\nimport * as dom from '../../dom.js';\nimport { createFastDomNode } from '../../fastDomNode.js';\nimport { StandardWheelEvent } from '../../mouseEvent.js';\nimport { HorizontalScrollbar } from './horizontalScrollbar.js';\nimport { VerticalScrollbar } from './verticalScrollbar.js';\nimport { Widget } from '../widget.js';\nimport { TimeoutTimer } from '../../../common/async.js';\nimport { Emitter } from '../../../common/event.js';\nimport { dispose } from '../../../common/lifecycle.js';\nimport * as platform from '../../../common/platform.js';\nimport { Scrollable } from '../../../common/scrollable.js';\nvar HIDE_TIMEOUT = 500;\nvar SCROLL_WHEEL_SENSITIVITY = 50;\nvar SCROLL_WHEEL_SMOOTH_SCROLL_ENABLED = true;\n\nvar MouseWheelClassifierItem =\n/** @class */\nfunction () {\n  function MouseWheelClassifierItem(timestamp, deltaX, deltaY) {\n    this.timestamp = timestamp;\n    this.deltaX = deltaX;\n    this.deltaY = deltaY;\n    this.score = 0;\n  }\n\n  return MouseWheelClassifierItem;\n}();\n\nvar MouseWheelClassifier =\n/** @class */\nfunction () {\n  function MouseWheelClassifier() {\n    this._capacity = 5;\n    this._memory = [];\n    this._front = -1;\n    this._rear = -1;\n  }\n\n  MouseWheelClassifier.prototype.isPhysicalMouseWheel = function () {\n    if (this._front === -1 && this._rear === -1) {\n      // no elements\n      return false;\n    } // 0.5 * last + 0.25 * before last + 0.125 * before before last + ...\n\n\n    var remainingInfluence = 1;\n    var score = 0;\n    var iteration = 1;\n    var index = this._rear;\n\n    do {\n      var influence = index === this._front ? remainingInfluence : Math.pow(2, -iteration);\n      remainingInfluence -= influence;\n      score += this._memory[index].score * influence;\n\n      if (index === this._front) {\n        break;\n      }\n\n      index = (this._capacity + index - 1) % this._capacity;\n      iteration++;\n    } while (true);\n\n    return score <= 0.5;\n  };\n\n  MouseWheelClassifier.prototype.accept = function (timestamp, deltaX, deltaY) {\n    var item = new MouseWheelClassifierItem(timestamp, deltaX, deltaY);\n    item.score = this._computeScore(item);\n\n    if (this._front === -1 && this._rear === -1) {\n      this._memory[0] = item;\n      this._front = 0;\n      this._rear = 0;\n    } else {\n      this._rear = (this._rear + 1) % this._capacity;\n\n      if (this._rear === this._front) {\n        // Drop oldest\n        this._front = (this._front + 1) % this._capacity;\n      }\n\n      this._memory[this._rear] = item;\n    }\n  };\n  /**\n   * A score between 0 and 1 for `item`.\n   *  - a score towards 0 indicates that the source appears to be a physical mouse wheel\n   *  - a score towards 1 indicates that the source appears to be a touchpad or magic mouse, etc.\n   */\n\n\n  MouseWheelClassifier.prototype._computeScore = function (item) {\n    if (Math.abs(item.deltaX) > 0 && Math.abs(item.deltaY) > 0) {\n      // both axes exercised => definitely not a physical mouse wheel\n      return 1;\n    }\n\n    var score = 0.5;\n    var prev = this._front === -1 && this._rear === -1 ? null : this._memory[this._rear];\n\n    if (prev) {// const deltaT = item.timestamp - prev.timestamp;\n      // if (deltaT < 1000 / 30) {\n      // \t// sooner than X times per second => indicator that this is not a physical mouse wheel\n      // \tscore += 0.25;\n      // }\n      // if (item.deltaX === prev.deltaX && item.deltaY === prev.deltaY) {\n      // \t// equal amplitude => indicator that this is a physical mouse wheel\n      // \tscore -= 0.25;\n      // }\n    }\n\n    if (Math.abs(item.deltaX - Math.round(item.deltaX)) > 0 || Math.abs(item.deltaY - Math.round(item.deltaY)) > 0) {\n      // non-integer deltas => indicator that this is not a physical mouse wheel\n      score += 0.25;\n    }\n\n    return Math.min(Math.max(score, 0), 1);\n  };\n\n  MouseWheelClassifier.INSTANCE = new MouseWheelClassifier();\n  return MouseWheelClassifier;\n}();\n\nexport { MouseWheelClassifier };\n\nvar AbstractScrollableElement =\n/** @class */\nfunction (_super) {\n  __extends(AbstractScrollableElement, _super);\n\n  function AbstractScrollableElement(element, options, scrollable) {\n    var _this = _super.call(this) || this;\n\n    _this._onScroll = _this._register(new Emitter());\n    _this.onScroll = _this._onScroll.event;\n    element.style.overflow = 'hidden';\n    _this._options = resolveOptions(options);\n    _this._scrollable = scrollable;\n\n    _this._register(_this._scrollable.onScroll(function (e) {\n      _this._onDidScroll(e);\n\n      _this._onScroll.fire(e);\n    }));\n\n    var scrollbarHost = {\n      onMouseWheel: function (mouseWheelEvent) {\n        return _this._onMouseWheel(mouseWheelEvent);\n      },\n      onDragStart: function () {\n        return _this._onDragStart();\n      },\n      onDragEnd: function () {\n        return _this._onDragEnd();\n      }\n    };\n    _this._verticalScrollbar = _this._register(new VerticalScrollbar(_this._scrollable, _this._options, scrollbarHost));\n    _this._horizontalScrollbar = _this._register(new HorizontalScrollbar(_this._scrollable, _this._options, scrollbarHost));\n    _this._domNode = document.createElement('div');\n    _this._domNode.className = 'monaco-scrollable-element ' + _this._options.className;\n\n    _this._domNode.setAttribute('role', 'presentation');\n\n    _this._domNode.style.position = 'relative';\n    _this._domNode.style.overflow = 'hidden';\n\n    _this._domNode.appendChild(element);\n\n    _this._domNode.appendChild(_this._horizontalScrollbar.domNode.domNode);\n\n    _this._domNode.appendChild(_this._verticalScrollbar.domNode.domNode);\n\n    if (_this._options.useShadows) {\n      _this._leftShadowDomNode = createFastDomNode(document.createElement('div'));\n\n      _this._leftShadowDomNode.setClassName('shadow');\n\n      _this._domNode.appendChild(_this._leftShadowDomNode.domNode);\n\n      _this._topShadowDomNode = createFastDomNode(document.createElement('div'));\n\n      _this._topShadowDomNode.setClassName('shadow');\n\n      _this._domNode.appendChild(_this._topShadowDomNode.domNode);\n\n      _this._topLeftShadowDomNode = createFastDomNode(document.createElement('div'));\n\n      _this._topLeftShadowDomNode.setClassName('shadow top-left-corner');\n\n      _this._domNode.appendChild(_this._topLeftShadowDomNode.domNode);\n    } else {\n      _this._leftShadowDomNode = null;\n      _this._topShadowDomNode = null;\n      _this._topLeftShadowDomNode = null;\n    }\n\n    _this._listenOnDomNode = _this._options.listenOnDomNode || _this._domNode;\n    _this._mouseWheelToDispose = [];\n\n    _this._setListeningToMouseWheel(_this._options.handleMouseWheel);\n\n    _this.onmouseover(_this._listenOnDomNode, function (e) {\n      return _this._onMouseOver(e);\n    });\n\n    _this.onnonbubblingmouseout(_this._listenOnDomNode, function (e) {\n      return _this._onMouseOut(e);\n    });\n\n    _this._hideTimeout = _this._register(new TimeoutTimer());\n    _this._isDragging = false;\n    _this._mouseIsOver = false;\n    _this._shouldRender = true;\n    _this._revealOnScroll = true;\n    return _this;\n  }\n\n  AbstractScrollableElement.prototype.dispose = function () {\n    this._mouseWheelToDispose = dispose(this._mouseWheelToDispose);\n\n    _super.prototype.dispose.call(this);\n  };\n  /**\n   * Get the generated 'scrollable' dom node\n   */\n\n\n  AbstractScrollableElement.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  AbstractScrollableElement.prototype.getOverviewRulerLayoutInfo = function () {\n    return {\n      parent: this._domNode,\n      insertBefore: this._verticalScrollbar.domNode.domNode\n    };\n  };\n  /**\n   * Delegate a mouse down event to the vertical scrollbar.\n   * This is to help with clicking somewhere else and having the scrollbar react.\n   */\n\n\n  AbstractScrollableElement.prototype.delegateVerticalScrollbarMouseDown = function (browserEvent) {\n    this._verticalScrollbar.delegateMouseDown(browserEvent);\n  };\n\n  AbstractScrollableElement.prototype.getScrollDimensions = function () {\n    return this._scrollable.getScrollDimensions();\n  };\n\n  AbstractScrollableElement.prototype.setScrollDimensions = function (dimensions) {\n    this._scrollable.setScrollDimensions(dimensions);\n  };\n  /**\n   * Update the class name of the scrollable element.\n   */\n\n\n  AbstractScrollableElement.prototype.updateClassName = function (newClassName) {\n    this._options.className = newClassName; // Defaults are different on Macs\n\n    if (platform.isMacintosh) {\n      this._options.className += ' mac';\n    }\n\n    this._domNode.className = 'monaco-scrollable-element ' + this._options.className;\n  };\n  /**\n   * Update configuration options for the scrollbar.\n   * Really this is Editor.IEditorScrollbarOptions, but base shouldn't\n   * depend on Editor.\n   */\n\n\n  AbstractScrollableElement.prototype.updateOptions = function (newOptions) {\n    var massagedOptions = resolveOptions(newOptions);\n    this._options.handleMouseWheel = massagedOptions.handleMouseWheel;\n    this._options.mouseWheelScrollSensitivity = massagedOptions.mouseWheelScrollSensitivity;\n    this._options.fastScrollSensitivity = massagedOptions.fastScrollSensitivity;\n\n    this._setListeningToMouseWheel(this._options.handleMouseWheel);\n\n    if (!this._options.lazyRender) {\n      this._render();\n    }\n  }; // -------------------- mouse wheel scrolling --------------------\n\n\n  AbstractScrollableElement.prototype._setListeningToMouseWheel = function (shouldListen) {\n    var _this = this;\n\n    var isListening = this._mouseWheelToDispose.length > 0;\n\n    if (isListening === shouldListen) {\n      // No change\n      return;\n    } // Stop listening (if necessary)\n\n\n    this._mouseWheelToDispose = dispose(this._mouseWheelToDispose); // Start listening (if necessary)\n\n    if (shouldListen) {\n      var onMouseWheel = function (browserEvent) {\n        _this._onMouseWheel(new StandardWheelEvent(browserEvent));\n      };\n\n      this._mouseWheelToDispose.push(dom.addDisposableListener(this._listenOnDomNode, isEdgeOrIE ? 'mousewheel' : 'wheel', onMouseWheel));\n    }\n  };\n\n  AbstractScrollableElement.prototype._onMouseWheel = function (e) {\n    var _a;\n\n    var classifier = MouseWheelClassifier.INSTANCE;\n\n    if (SCROLL_WHEEL_SMOOTH_SCROLL_ENABLED) {\n      classifier.accept(Date.now(), e.deltaX, e.deltaY);\n    } // console.log(`${Date.now()}, ${e.deltaY}, ${e.deltaX}`);\n\n\n    if (e.deltaY || e.deltaX) {\n      var deltaY = e.deltaY * this._options.mouseWheelScrollSensitivity;\n      var deltaX = e.deltaX * this._options.mouseWheelScrollSensitivity;\n\n      if (this._options.flipAxes) {\n        _a = [deltaX, deltaY], deltaY = _a[0], deltaX = _a[1];\n      } // Convert vertical scrolling to horizontal if shift is held, this\n      // is handled at a higher level on Mac\n\n\n      var shiftConvert = !platform.isMacintosh && e.browserEvent && e.browserEvent.shiftKey;\n\n      if ((this._options.scrollYToX || shiftConvert) && !deltaX) {\n        deltaX = deltaY;\n        deltaY = 0;\n      }\n\n      if (e.browserEvent && e.browserEvent.altKey) {\n        // fastScrolling\n        deltaX = deltaX * this._options.fastScrollSensitivity;\n        deltaY = deltaY * this._options.fastScrollSensitivity;\n      }\n\n      var futureScrollPosition = this._scrollable.getFutureScrollPosition();\n\n      var desiredScrollPosition = {};\n\n      if (deltaY) {\n        var desiredScrollTop = futureScrollPosition.scrollTop - SCROLL_WHEEL_SENSITIVITY * deltaY;\n\n        this._verticalScrollbar.writeScrollPosition(desiredScrollPosition, desiredScrollTop);\n      }\n\n      if (deltaX) {\n        var desiredScrollLeft = futureScrollPosition.scrollLeft - SCROLL_WHEEL_SENSITIVITY * deltaX;\n\n        this._horizontalScrollbar.writeScrollPosition(desiredScrollPosition, desiredScrollLeft);\n      } // Check that we are scrolling towards a location which is valid\n\n\n      desiredScrollPosition = this._scrollable.validateScrollPosition(desiredScrollPosition);\n\n      if (futureScrollPosition.scrollLeft !== desiredScrollPosition.scrollLeft || futureScrollPosition.scrollTop !== desiredScrollPosition.scrollTop) {\n        var canPerformSmoothScroll = SCROLL_WHEEL_SMOOTH_SCROLL_ENABLED && this._options.mouseWheelSmoothScroll && classifier.isPhysicalMouseWheel();\n\n        if (canPerformSmoothScroll) {\n          this._scrollable.setScrollPositionSmooth(desiredScrollPosition);\n        } else {\n          this._scrollable.setScrollPositionNow(desiredScrollPosition);\n        }\n\n        this._shouldRender = true;\n      }\n    }\n\n    if (this._options.alwaysConsumeMouseWheel || this._shouldRender) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  };\n\n  AbstractScrollableElement.prototype._onDidScroll = function (e) {\n    this._shouldRender = this._horizontalScrollbar.onDidScroll(e) || this._shouldRender;\n    this._shouldRender = this._verticalScrollbar.onDidScroll(e) || this._shouldRender;\n\n    if (this._options.useShadows) {\n      this._shouldRender = true;\n    }\n\n    if (this._revealOnScroll) {\n      this._reveal();\n    }\n\n    if (!this._options.lazyRender) {\n      this._render();\n    }\n  };\n  /**\n   * Render / mutate the DOM now.\n   * Should be used together with the ctor option `lazyRender`.\n   */\n\n\n  AbstractScrollableElement.prototype.renderNow = function () {\n    if (!this._options.lazyRender) {\n      throw new Error('Please use `lazyRender` together with `renderNow`!');\n    }\n\n    this._render();\n  };\n\n  AbstractScrollableElement.prototype._render = function () {\n    if (!this._shouldRender) {\n      return;\n    }\n\n    this._shouldRender = false;\n\n    this._horizontalScrollbar.render();\n\n    this._verticalScrollbar.render();\n\n    if (this._options.useShadows) {\n      var scrollState = this._scrollable.getCurrentScrollPosition();\n\n      var enableTop = scrollState.scrollTop > 0;\n      var enableLeft = scrollState.scrollLeft > 0;\n\n      this._leftShadowDomNode.setClassName('shadow' + (enableLeft ? ' left' : ''));\n\n      this._topShadowDomNode.setClassName('shadow' + (enableTop ? ' top' : ''));\n\n      this._topLeftShadowDomNode.setClassName('shadow top-left-corner' + (enableTop ? ' top' : '') + (enableLeft ? ' left' : ''));\n    }\n  }; // -------------------- fade in / fade out --------------------\n\n\n  AbstractScrollableElement.prototype._onDragStart = function () {\n    this._isDragging = true;\n\n    this._reveal();\n  };\n\n  AbstractScrollableElement.prototype._onDragEnd = function () {\n    this._isDragging = false;\n\n    this._hide();\n  };\n\n  AbstractScrollableElement.prototype._onMouseOut = function (e) {\n    this._mouseIsOver = false;\n\n    this._hide();\n  };\n\n  AbstractScrollableElement.prototype._onMouseOver = function (e) {\n    this._mouseIsOver = true;\n\n    this._reveal();\n  };\n\n  AbstractScrollableElement.prototype._reveal = function () {\n    this._verticalScrollbar.beginReveal();\n\n    this._horizontalScrollbar.beginReveal();\n\n    this._scheduleHide();\n  };\n\n  AbstractScrollableElement.prototype._hide = function () {\n    if (!this._mouseIsOver && !this._isDragging) {\n      this._verticalScrollbar.beginHide();\n\n      this._horizontalScrollbar.beginHide();\n    }\n  };\n\n  AbstractScrollableElement.prototype._scheduleHide = function () {\n    var _this = this;\n\n    if (!this._mouseIsOver && !this._isDragging) {\n      this._hideTimeout.cancelAndSet(function () {\n        return _this._hide();\n      }, HIDE_TIMEOUT);\n    }\n  };\n\n  return AbstractScrollableElement;\n}(Widget);\n\nexport { AbstractScrollableElement };\n\nvar ScrollableElement =\n/** @class */\nfunction (_super) {\n  __extends(ScrollableElement, _super);\n\n  function ScrollableElement(element, options) {\n    var _this = this;\n\n    options = options || {};\n    options.mouseWheelSmoothScroll = false;\n    var scrollable = new Scrollable(0, function (callback) {\n      return dom.scheduleAtNextAnimationFrame(callback);\n    });\n    _this = _super.call(this, element, options, scrollable) || this;\n\n    _this._register(scrollable);\n\n    return _this;\n  }\n\n  ScrollableElement.prototype.setScrollPosition = function (update) {\n    this._scrollable.setScrollPositionNow(update);\n  };\n\n  ScrollableElement.prototype.getScrollPosition = function () {\n    return this._scrollable.getCurrentScrollPosition();\n  };\n\n  return ScrollableElement;\n}(AbstractScrollableElement);\n\nexport { ScrollableElement };\n\nvar SmoothScrollableElement =\n/** @class */\nfunction (_super) {\n  __extends(SmoothScrollableElement, _super);\n\n  function SmoothScrollableElement(element, options, scrollable) {\n    return _super.call(this, element, options, scrollable) || this;\n  }\n\n  return SmoothScrollableElement;\n}(AbstractScrollableElement);\n\nexport { SmoothScrollableElement };\n\nvar DomScrollableElement =\n/** @class */\nfunction (_super) {\n  __extends(DomScrollableElement, _super);\n\n  function DomScrollableElement(element, options) {\n    var _this = _super.call(this, element, options) || this;\n\n    _this._element = element;\n\n    _this.onScroll(function (e) {\n      if (e.scrollTopChanged) {\n        _this._element.scrollTop = e.scrollTop;\n      }\n\n      if (e.scrollLeftChanged) {\n        _this._element.scrollLeft = e.scrollLeft;\n      }\n    });\n\n    _this.scanDomNode();\n\n    return _this;\n  }\n\n  DomScrollableElement.prototype.scanDomNode = function () {\n    // width, scrollLeft, scrollWidth, height, scrollTop, scrollHeight\n    this.setScrollDimensions({\n      width: this._element.clientWidth,\n      scrollWidth: this._element.scrollWidth,\n      height: this._element.clientHeight,\n      scrollHeight: this._element.scrollHeight\n    });\n    this.setScrollPosition({\n      scrollLeft: this._element.scrollLeft,\n      scrollTop: this._element.scrollTop\n    });\n  };\n\n  return DomScrollableElement;\n}(ScrollableElement);\n\nexport { DomScrollableElement };\n\nfunction resolveOptions(opts) {\n  var result = {\n    lazyRender: typeof opts.lazyRender !== 'undefined' ? opts.lazyRender : false,\n    className: typeof opts.className !== 'undefined' ? opts.className : '',\n    useShadows: typeof opts.useShadows !== 'undefined' ? opts.useShadows : true,\n    handleMouseWheel: typeof opts.handleMouseWheel !== 'undefined' ? opts.handleMouseWheel : true,\n    flipAxes: typeof opts.flipAxes !== 'undefined' ? opts.flipAxes : false,\n    alwaysConsumeMouseWheel: typeof opts.alwaysConsumeMouseWheel !== 'undefined' ? opts.alwaysConsumeMouseWheel : false,\n    scrollYToX: typeof opts.scrollYToX !== 'undefined' ? opts.scrollYToX : false,\n    mouseWheelScrollSensitivity: typeof opts.mouseWheelScrollSensitivity !== 'undefined' ? opts.mouseWheelScrollSensitivity : 1,\n    fastScrollSensitivity: typeof opts.fastScrollSensitivity !== 'undefined' ? opts.fastScrollSensitivity : 5,\n    mouseWheelSmoothScroll: typeof opts.mouseWheelSmoothScroll !== 'undefined' ? opts.mouseWheelSmoothScroll : true,\n    arrowSize: typeof opts.arrowSize !== 'undefined' ? opts.arrowSize : 11,\n    listenOnDomNode: typeof opts.listenOnDomNode !== 'undefined' ? opts.listenOnDomNode : null,\n    horizontal: typeof opts.horizontal !== 'undefined' ? opts.horizontal : 1\n    /* Auto */\n    ,\n    horizontalScrollbarSize: typeof opts.horizontalScrollbarSize !== 'undefined' ? opts.horizontalScrollbarSize : 10,\n    horizontalSliderSize: typeof opts.horizontalSliderSize !== 'undefined' ? opts.horizontalSliderSize : 0,\n    horizontalHasArrows: typeof opts.horizontalHasArrows !== 'undefined' ? opts.horizontalHasArrows : false,\n    vertical: typeof opts.vertical !== 'undefined' ? opts.vertical : 1\n    /* Auto */\n    ,\n    verticalScrollbarSize: typeof opts.verticalScrollbarSize !== 'undefined' ? opts.verticalScrollbarSize : 10,\n    verticalHasArrows: typeof opts.verticalHasArrows !== 'undefined' ? opts.verticalHasArrows : false,\n    verticalSliderSize: typeof opts.verticalSliderSize !== 'undefined' ? opts.verticalSliderSize : 0\n  };\n  result.horizontalSliderSize = typeof opts.horizontalSliderSize !== 'undefined' ? opts.horizontalSliderSize : result.horizontalScrollbarSize;\n  result.verticalSliderSize = typeof opts.verticalSliderSize !== 'undefined' ? opts.verticalSliderSize : result.verticalScrollbarSize; // Defaults are different on Macs\n\n  if (platform.isMacintosh) {\n    result.className += ' mac';\n  }\n\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}