{"ast":null,"code":"import '../../editor/editor.api.js';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nvar Emitter = monaco.Emitter; // --- CSS configuration and defaults ---------\n\nvar LanguageServiceDefaultsImpl =\n/** @class */\nfunction () {\n  function LanguageServiceDefaultsImpl(languageId, diagnosticsOptions) {\n    this._onDidChange = new Emitter();\n    this._languageId = languageId;\n    this.setDiagnosticsOptions(diagnosticsOptions);\n  }\n\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"onDidChange\", {\n    get: function () {\n      return this._onDidChange.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"languageId\", {\n    get: function () {\n      return this._languageId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"diagnosticsOptions\", {\n    get: function () {\n      return this._diagnosticsOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LanguageServiceDefaultsImpl.prototype.setDiagnosticsOptions = function (options) {\n    this._diagnosticsOptions = options || Object.create(null);\n\n    this._onDidChange.fire(this);\n  };\n\n  return LanguageServiceDefaultsImpl;\n}();\n\nexport { LanguageServiceDefaultsImpl };\nvar diagnosticDefault = {\n  validate: true,\n  lint: {\n    compatibleVendorPrefixes: 'ignore',\n    vendorPrefix: 'warning',\n    duplicateProperties: 'warning',\n    emptyRules: 'warning',\n    importStatement: 'ignore',\n    boxModel: 'ignore',\n    universalSelector: 'ignore',\n    zeroUnits: 'ignore',\n    fontFaceProperties: 'warning',\n    hexColorLength: 'error',\n    argumentsInColorFunction: 'error',\n    unknownProperties: 'warning',\n    ieHack: 'ignore',\n    unknownVendorSpecificProperties: 'ignore',\n    propertyIgnoredDueToDisplay: 'warning',\n    important: 'ignore',\n    float: 'ignore',\n    idSelector: 'ignore'\n  }\n};\nvar cssDefaults = new LanguageServiceDefaultsImpl('css', diagnosticDefault);\nvar scssDefaults = new LanguageServiceDefaultsImpl('scss', diagnosticDefault);\nvar lessDefaults = new LanguageServiceDefaultsImpl('less', diagnosticDefault); // Export API\n\nfunction createAPI() {\n  return {\n    cssDefaults: cssDefaults,\n    lessDefaults: lessDefaults,\n    scssDefaults: scssDefaults\n  };\n}\n\nmonaco.languages.css = createAPI(); // --- Registration to monaco editor ---\n\nfunction getMode() {\n  return import('./cssMode.js');\n}\n\nmonaco.languages.onLanguage('less', function () {\n  getMode().then(function (mode) {\n    return mode.setupMode(lessDefaults);\n  });\n});\nmonaco.languages.onLanguage('scss', function () {\n  getMode().then(function (mode) {\n    return mode.setupMode(scssDefaults);\n  });\n});\nmonaco.languages.onLanguage('css', function () {\n  getMode().then(function (mode) {\n    return mode.setupMode(cssDefaults);\n  });\n});","map":null,"metadata":{},"sourceType":"module"}