{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as Parser from '../parser/jsonParser.js';\nimport { Range } from '../_deps/vscode-languageserver-types/main.js';\n\nvar JSONHover =\n/** @class */\nfunction () {\n  function JSONHover(schemaService, contributions, promiseConstructor) {\n    if (contributions === void 0) {\n      contributions = [];\n    }\n\n    this.schemaService = schemaService;\n    this.contributions = contributions;\n    this.promise = promiseConstructor || Promise;\n  }\n\n  JSONHover.prototype.doHover = function (document, position, doc) {\n    var offset = document.offsetAt(position);\n    var node = doc.getNodeFromOffset(offset);\n\n    if (!node || (node.type === 'object' || node.type === 'array') && offset > node.offset + 1 && offset < node.offset + node.length - 1) {\n      return this.promise.resolve(null);\n    }\n\n    var hoverRangeNode = node; // use the property description when hovering over an object key\n\n    if (node.type === 'string') {\n      var parent = node.parent;\n\n      if (parent && parent.type === 'property' && parent.keyNode === node) {\n        node = parent.valueNode;\n\n        if (!node) {\n          return this.promise.resolve(null);\n        }\n      }\n    }\n\n    var hoverRange = Range.create(document.positionAt(hoverRangeNode.offset), document.positionAt(hoverRangeNode.offset + hoverRangeNode.length));\n\n    var createHover = function (contents) {\n      var result = {\n        contents: contents,\n        range: hoverRange\n      };\n      return result;\n    };\n\n    var location = Parser.getNodePath(node);\n\n    for (var i = this.contributions.length - 1; i >= 0; i--) {\n      var contribution = this.contributions[i];\n      var promise = contribution.getInfoContribution(document.uri, location);\n\n      if (promise) {\n        return promise.then(function (htmlContent) {\n          return createHover(htmlContent);\n        });\n      }\n    }\n\n    return this.schemaService.getSchemaForResource(document.uri, doc).then(function (schema) {\n      if (schema) {\n        var matchingSchemas = doc.getMatchingSchemas(schema.schema, node.offset);\n        var title_1 = null;\n        var markdownDescription_1 = null;\n        var markdownEnumValueDescription_1 = null,\n            enumValue_1 = null;\n        matchingSchemas.every(function (s) {\n          if (s.node === node && !s.inverted && s.schema) {\n            title_1 = title_1 || s.schema.title;\n            markdownDescription_1 = markdownDescription_1 || s.schema.markdownDescription || toMarkdown(s.schema.description);\n\n            if (s.schema.enum) {\n              var idx = s.schema.enum.indexOf(Parser.getNodeValue(node));\n\n              if (s.schema.markdownEnumDescriptions) {\n                markdownEnumValueDescription_1 = s.schema.markdownEnumDescriptions[idx];\n              } else if (s.schema.enumDescriptions) {\n                markdownEnumValueDescription_1 = toMarkdown(s.schema.enumDescriptions[idx]);\n              }\n\n              if (markdownEnumValueDescription_1) {\n                enumValue_1 = s.schema.enum[idx];\n\n                if (typeof enumValue_1 !== 'string') {\n                  enumValue_1 = JSON.stringify(enumValue_1);\n                }\n              }\n            }\n          }\n\n          return true;\n        });\n        var result = '';\n\n        if (title_1) {\n          result = toMarkdown(title_1);\n        }\n\n        if (markdownDescription_1) {\n          if (result.length > 0) {\n            result += \"\\n\\n\";\n          }\n\n          result += markdownDescription_1;\n        }\n\n        if (markdownEnumValueDescription_1) {\n          if (result.length > 0) {\n            result += \"\\n\\n\";\n          }\n\n          result += \"`\" + toMarkdownCodeBlock(enumValue_1) + \"`: \" + markdownEnumValueDescription_1;\n        }\n\n        return createHover([result]);\n      }\n\n      return null;\n    });\n  };\n\n  return JSONHover;\n}();\n\nexport { JSONHover };\n\nfunction toMarkdown(plain) {\n  if (plain) {\n    var res = plain.replace(/([^\\n\\r])(\\r?\\n)([^\\n\\r])/gm, '$1\\n\\n$3'); // single new lines to \\n\\n (Markdown paragraph)\n\n    return res.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, \"\\\\$&\"); // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n  }\n\n  return void 0;\n}\n\nfunction toMarkdownCodeBlock(content) {\n  // see https://daringfireball.net/projects/markdown/syntax#precode\n  if (content.indexOf('`') !== -1) {\n    return '`` ' + content + ' ``';\n  }\n\n  return content;\n}","map":null,"metadata":{},"sourceType":"module"}