{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isFalsyOrEmpty } from '../../../base/common/arrays.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { isEmptyObject } from '../../../base/common/types.js';\nimport { Event, Emitter } from '../../../base/common/event.js';\nimport { MarkerSeverity } from './markers.js';\nvar MapMap;\n\n(function (MapMap) {\n  function get(map, key1, key2) {\n    if (map[key1]) {\n      return map[key1][key2];\n    }\n\n    return undefined;\n  }\n\n  MapMap.get = get;\n\n  function set(map, key1, key2, value) {\n    if (!map[key1]) {\n      map[key1] = Object.create(null);\n    }\n\n    map[key1][key2] = value;\n  }\n\n  MapMap.set = set;\n\n  function remove(map, key1, key2) {\n    if (map[key1] && map[key1][key2]) {\n      delete map[key1][key2];\n\n      if (isEmptyObject(map[key1])) {\n        delete map[key1];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  MapMap.remove = remove;\n})(MapMap || (MapMap = {}));\n\nvar MarkerStats =\n/** @class */\nfunction () {\n  function MarkerStats(service) {\n    this.errors = 0;\n    this.infos = 0;\n    this.warnings = 0;\n    this.unknowns = 0;\n    this._data = Object.create(null);\n    this._service = service;\n    this._subscription = service.onMarkerChanged(this._update, this);\n  }\n\n  MarkerStats.prototype.dispose = function () {\n    this._subscription.dispose();\n\n    this._data = undefined;\n  };\n\n  MarkerStats.prototype._update = function (resources) {\n    if (!this._data) {\n      return;\n    }\n\n    for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n      var resource = resources_1[_i];\n      var key = resource.toString();\n      var oldStats = this._data[key];\n\n      if (oldStats) {\n        this._substract(oldStats);\n      }\n\n      var newStats = this._resourceStats(resource);\n\n      this._add(newStats);\n\n      this._data[key] = newStats;\n    }\n  };\n\n  MarkerStats.prototype._resourceStats = function (resource) {\n    var result = {\n      errors: 0,\n      warnings: 0,\n      infos: 0,\n      unknowns: 0\n    }; // TODO this is a hack\n\n    if (resource.scheme === Schemas.inMemory || resource.scheme === Schemas.walkThrough || resource.scheme === Schemas.walkThroughSnippet) {\n      return result;\n    }\n\n    for (var _i = 0, _a = this._service.read({\n      resource: resource\n    }); _i < _a.length; _i++) {\n      var severity = _a[_i].severity;\n\n      if (severity === MarkerSeverity.Error) {\n        result.errors += 1;\n      } else if (severity === MarkerSeverity.Warning) {\n        result.warnings += 1;\n      } else if (severity === MarkerSeverity.Info) {\n        result.infos += 1;\n      } else {\n        result.unknowns += 1;\n      }\n    }\n\n    return result;\n  };\n\n  MarkerStats.prototype._substract = function (op) {\n    this.errors -= op.errors;\n    this.warnings -= op.warnings;\n    this.infos -= op.infos;\n    this.unknowns -= op.unknowns;\n  };\n\n  MarkerStats.prototype._add = function (op) {\n    this.errors += op.errors;\n    this.warnings += op.warnings;\n    this.infos += op.infos;\n    this.unknowns += op.unknowns;\n  };\n\n  return MarkerStats;\n}();\n\nvar MarkerService =\n/** @class */\nfunction () {\n  function MarkerService() {\n    this._onMarkerChanged = new Emitter();\n    this._onMarkerChangedEvent = Event.debounce(this._onMarkerChanged.event, MarkerService._debouncer, 0);\n    this._byResource = Object.create(null);\n    this._byOwner = Object.create(null);\n    this._stats = new MarkerStats(this);\n  }\n\n  MarkerService.prototype.dispose = function () {\n    this._stats.dispose();\n  };\n\n  Object.defineProperty(MarkerService.prototype, \"onMarkerChanged\", {\n    get: function () {\n      return this._onMarkerChangedEvent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  MarkerService.prototype.remove = function (owner, resources) {\n    for (var _i = 0, _a = resources || []; _i < _a.length; _i++) {\n      var resource = _a[_i];\n      this.changeOne(owner, resource, []);\n    }\n  };\n\n  MarkerService.prototype.changeOne = function (owner, resource, markerData) {\n    if (isFalsyOrEmpty(markerData)) {\n      // remove marker for this (owner,resource)-tuple\n      var a = MapMap.remove(this._byResource, resource.toString(), owner);\n      var b = MapMap.remove(this._byOwner, owner, resource.toString());\n\n      if (a !== b) {\n        throw new Error('invalid marker service state');\n      }\n\n      if (a && b) {\n        this._onMarkerChanged.fire([resource]);\n      }\n    } else {\n      // insert marker for this (owner,resource)-tuple\n      var markers = [];\n\n      for (var _i = 0, markerData_1 = markerData; _i < markerData_1.length; _i++) {\n        var data = markerData_1[_i];\n\n        var marker = MarkerService._toMarker(owner, resource, data);\n\n        if (marker) {\n          markers.push(marker);\n        }\n      }\n\n      MapMap.set(this._byResource, resource.toString(), owner, markers);\n      MapMap.set(this._byOwner, owner, resource.toString(), markers);\n\n      this._onMarkerChanged.fire([resource]);\n    }\n  };\n\n  MarkerService._toMarker = function (owner, resource, data) {\n    var code = data.code,\n        severity = data.severity,\n        message = data.message,\n        source = data.source,\n        startLineNumber = data.startLineNumber,\n        startColumn = data.startColumn,\n        endLineNumber = data.endLineNumber,\n        endColumn = data.endColumn,\n        relatedInformation = data.relatedInformation,\n        tags = data.tags;\n\n    if (!message) {\n      return undefined;\n    } // santize data\n\n\n    startLineNumber = startLineNumber > 0 ? startLineNumber : 1;\n    startColumn = startColumn > 0 ? startColumn : 1;\n    endLineNumber = endLineNumber >= startLineNumber ? endLineNumber : startLineNumber;\n    endColumn = endColumn > 0 ? endColumn : startColumn;\n    return {\n      resource: resource,\n      owner: owner,\n      code: code,\n      severity: severity,\n      message: message,\n      source: source,\n      startLineNumber: startLineNumber,\n      startColumn: startColumn,\n      endLineNumber: endLineNumber,\n      endColumn: endColumn,\n      relatedInformation: relatedInformation,\n      tags: tags\n    };\n  };\n\n  MarkerService.prototype.read = function (filter) {\n    if (filter === void 0) {\n      filter = Object.create(null);\n    }\n\n    var owner = filter.owner,\n        resource = filter.resource,\n        severities = filter.severities,\n        take = filter.take;\n\n    if (!take || take < 0) {\n      take = -1;\n    }\n\n    if (owner && resource) {\n      // exactly one owner AND resource\n      var data = MapMap.get(this._byResource, resource.toString(), owner);\n\n      if (!data) {\n        return [];\n      } else {\n        var result = [];\n\n        for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n          var marker = data_1[_i];\n\n          if (MarkerService._accept(marker, severities)) {\n            var newLen = result.push(marker);\n\n            if (take > 0 && newLen === take) {\n              break;\n            }\n          }\n        }\n\n        return result;\n      }\n    } else if (!owner && !resource) {\n      // all\n      var result = [];\n\n      for (var key1 in this._byResource) {\n        for (var key2 in this._byResource[key1]) {\n          for (var _a = 0, _b = this._byResource[key1][key2]; _a < _b.length; _a++) {\n            var data = _b[_a];\n\n            if (MarkerService._accept(data, severities)) {\n              var newLen = result.push(data);\n\n              if (take > 0 && newLen === take) {\n                return result;\n              }\n            }\n          }\n        }\n      }\n\n      return result;\n    } else {\n      // of one resource OR owner\n      var map = owner ? this._byOwner[owner] : resource ? this._byResource[resource.toString()] : undefined;\n\n      if (!map) {\n        return [];\n      }\n\n      var result = [];\n\n      for (var key in map) {\n        for (var _c = 0, _d = map[key]; _c < _d.length; _c++) {\n          var data = _d[_c];\n\n          if (MarkerService._accept(data, severities)) {\n            var newLen = result.push(data);\n\n            if (take > 0 && newLen === take) {\n              return result;\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n  };\n\n  MarkerService._accept = function (marker, severities) {\n    return severities === undefined || (severities & marker.severity) === marker.severity;\n  };\n\n  MarkerService._debouncer = function (last, event) {\n    if (!last) {\n      MarkerService._dedupeMap = Object.create(null);\n      last = [];\n    }\n\n    for (var _i = 0, event_1 = event; _i < event_1.length; _i++) {\n      var uri = event_1[_i];\n\n      if (MarkerService._dedupeMap[uri.toString()] === undefined) {\n        MarkerService._dedupeMap[uri.toString()] = true;\n        last.push(uri);\n      }\n    }\n\n    return last;\n  };\n\n  return MarkerService;\n}();\n\nexport { MarkerService };","map":null,"metadata":{},"sourceType":"module"}