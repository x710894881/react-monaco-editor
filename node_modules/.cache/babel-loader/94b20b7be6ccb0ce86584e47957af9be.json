{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { EditorCommand, registerEditorCommand } from '../editorExtensions.js';\nimport { IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { CancellationTokenSource } from '../../../base/common/cancellation.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nvar IEditorCancellationTokens = createDecorator('IEditorCancelService');\nvar ctxCancellableOperation = new RawContextKey('cancellableOperation', false);\nregisterSingleton(IEditorCancellationTokens,\n/** @class */\nfunction () {\n  function class_1() {\n    this._tokens = new WeakMap();\n  }\n\n  class_1.prototype.add = function (editor, cts) {\n    var data = this._tokens.get(editor);\n\n    if (!data) {\n      data = editor.invokeWithinContext(function (accessor) {\n        var key = ctxCancellableOperation.bindTo(accessor.get(IContextKeyService));\n        var tokens = new LinkedList();\n        return {\n          key: key,\n          tokens: tokens\n        };\n      });\n\n      this._tokens.set(editor, data);\n    }\n\n    var removeFn;\n    data.key.set(true);\n    removeFn = data.tokens.push(cts);\n    return function () {\n      // remove w/o cancellation\n      if (removeFn) {\n        removeFn();\n        data.key.set(!data.tokens.isEmpty());\n        removeFn = undefined;\n      }\n    };\n  };\n\n  class_1.prototype.cancel = function (editor) {\n    var data = this._tokens.get(editor);\n\n    if (!data) {\n      return;\n    } // remove with cancellation\n\n\n    var cts = data.tokens.pop();\n\n    if (cts) {\n      cts.cancel();\n      data.key.set(!data.tokens.isEmpty());\n    }\n  };\n\n  return class_1;\n}(), true);\n\nvar EditorKeybindingCancellationTokenSource =\n/** @class */\nfunction (_super) {\n  __extends(EditorKeybindingCancellationTokenSource, _super);\n\n  function EditorKeybindingCancellationTokenSource(editor, parent) {\n    var _this = _super.call(this, parent) || this;\n\n    _this.editor = editor;\n    _this._unregister = editor.invokeWithinContext(function (accessor) {\n      return accessor.get(IEditorCancellationTokens).add(editor, _this);\n    });\n    return _this;\n  }\n\n  EditorKeybindingCancellationTokenSource.prototype.dispose = function () {\n    this._unregister();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  return EditorKeybindingCancellationTokenSource;\n}(CancellationTokenSource);\n\nexport { EditorKeybindingCancellationTokenSource };\nregisterEditorCommand(new (\n/** @class */\nfunction (_super) {\n  __extends(class_2, _super);\n\n  function class_2() {\n    return _super.call(this, {\n      id: 'editor.cancelOperation',\n      kbOpts: {\n        weight: 100\n        /* EditorContrib */\n        ,\n        primary: 9\n        /* Escape */\n\n      },\n      precondition: ctxCancellableOperation\n    }) || this;\n  }\n\n  class_2.prototype.runEditorCommand = function (accessor, editor) {\n    accessor.get(IEditorCancellationTokens).cancel(editor);\n  };\n\n  return class_2;\n}(EditorCommand))());","map":null,"metadata":{},"sourceType":"module"}