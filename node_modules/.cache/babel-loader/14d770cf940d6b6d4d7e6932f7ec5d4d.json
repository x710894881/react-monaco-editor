{"ast":null,"code":"import { startsWithIgnoreCase } from './strings.js';\nimport { sep, posix } from './path.js';\n/**\n * Takes a Windows OS path and changes backward slashes to forward slashes.\n * This should only be done for OS paths from Windows (or user provided paths potentially from Windows).\n * Using it on a Linux or MaxOS path might change it.\n */\n\nexport function toSlashes(osPath) {\n  return osPath.replace(/[\\\\/]/g, posix.sep);\n}\nexport function isEqualOrParent(path, candidate, ignoreCase, separator) {\n  if (separator === void 0) {\n    separator = sep;\n  }\n\n  if (path === candidate) {\n    return true;\n  }\n\n  if (!path || !candidate) {\n    return false;\n  }\n\n  if (candidate.length > path.length) {\n    return false;\n  }\n\n  if (ignoreCase) {\n    var beginsWith = startsWithIgnoreCase(path, candidate);\n\n    if (!beginsWith) {\n      return false;\n    }\n\n    if (candidate.length === path.length) {\n      return true; // same path, different casing\n    }\n\n    var sepOffset = candidate.length;\n\n    if (candidate.charAt(candidate.length - 1) === separator) {\n      sepOffset--; // adjust the expected sep offset in case our candidate already ends in separator character\n    }\n\n    return path.charAt(sepOffset) === separator;\n  }\n\n  if (candidate.charAt(candidate.length - 1) !== separator) {\n    candidate += separator;\n  }\n\n  return path.indexOf(candidate) === 0;\n}\nexport function isWindowsDriveLetter(char0) {\n  return char0 >= 65\n  /* A */\n  && char0 <= 90\n  /* Z */\n  || char0 >= 97\n  /* a */\n  && char0 <= 122\n  /* z */\n  ;\n}","map":null,"metadata":{},"sourceType":"module"}