{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport './media/diffEditor.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { RunOnceScheduler, IntervalTimer } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Configuration } from '../config/configuration.js';\nimport { StableEditorScrollState } from '../core/editorState.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { CodeEditorWidget } from './codeEditorWidget.js';\nimport { DiffReview } from './diffReview.js';\nimport * as editorOptions from '../../common/config/editorOptions.js';\nimport { Range } from '../../common/core/range.js';\nimport { createStringBuilder } from '../../common/core/stringBuilder.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { OverviewRulerZone } from '../../common/view/overviewZoneManager.js';\nimport { LineDecoration } from '../../common/viewLayout/lineDecorations.js';\nimport { RenderLineInput, renderViewLine } from '../../common/viewLayout/viewLineRenderer.js';\nimport { InlineDecoration, ViewLineRenderingData } from '../../common/viewModel/viewModel.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { defaultInsertColor, defaultRemoveColor, diffBorder, diffInserted, diffInsertedOutline, diffRemoved, diffRemovedOutline, scrollbarShadow } from '../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, getThemeTypeSelector, registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport { IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { InlineDiffMargin } from './inlineDiffMargin.js';\n\nvar VisualEditorState =\n/** @class */\nfunction () {\n  function VisualEditorState(_contextMenuService, _clipboardService) {\n    this._contextMenuService = _contextMenuService;\n    this._clipboardService = _clipboardService;\n    this._zones = [];\n    this.inlineDiffMargins = [];\n    this._zonesMap = {};\n    this._decorations = [];\n  }\n\n  VisualEditorState.prototype.getForeignViewZones = function (allViewZones) {\n    var _this = this;\n\n    return allViewZones.filter(function (z) {\n      return !_this._zonesMap[String(z.id)];\n    });\n  };\n\n  VisualEditorState.prototype.clean = function (editor) {\n    var _this = this; // (1) View zones\n\n\n    if (this._zones.length > 0) {\n      editor.changeViewZones(function (viewChangeAccessor) {\n        for (var i = 0, length_1 = _this._zones.length; i < length_1; i++) {\n          viewChangeAccessor.removeZone(_this._zones[i]);\n        }\n      });\n    }\n\n    this._zones = [];\n    this._zonesMap = {}; // (2) Model decorations\n\n    this._decorations = editor.deltaDecorations(this._decorations, []);\n  };\n\n  VisualEditorState.prototype.apply = function (editor, overviewRuler, newDecorations, restoreScrollState) {\n    var _this = this;\n\n    var scrollState = restoreScrollState ? StableEditorScrollState.capture(editor) : null; // view zones\n\n    editor.changeViewZones(function (viewChangeAccessor) {\n      for (var i = 0, length_2 = _this._zones.length; i < length_2; i++) {\n        viewChangeAccessor.removeZone(_this._zones[i]);\n      }\n\n      for (var i = 0, length_3 = _this.inlineDiffMargins.length; i < length_3; i++) {\n        _this.inlineDiffMargins[i].dispose();\n      }\n\n      _this._zones = [];\n      _this._zonesMap = {};\n      _this.inlineDiffMargins = [];\n\n      for (var i = 0, length_4 = newDecorations.zones.length; i < length_4; i++) {\n        var viewZone = newDecorations.zones[i];\n        viewZone.suppressMouseDown = false;\n        var zoneId = viewChangeAccessor.addZone(viewZone);\n\n        _this._zones.push(zoneId);\n\n        _this._zonesMap[String(zoneId)] = true;\n\n        if (newDecorations.zones[i].diff && viewZone.marginDomNode && _this._clipboardService) {\n          _this.inlineDiffMargins.push(new InlineDiffMargin(zoneId, viewZone.marginDomNode, editor, newDecorations.zones[i].diff, _this._contextMenuService, _this._clipboardService));\n        }\n      }\n    });\n\n    if (scrollState) {\n      scrollState.restore(editor);\n    } // decorations\n\n\n    this._decorations = editor.deltaDecorations(this._decorations, newDecorations.decorations); // overview ruler\n\n    if (overviewRuler) {\n      overviewRuler.setZones(newDecorations.overviewZones);\n    }\n  };\n\n  return VisualEditorState;\n}();\n\nvar DIFF_EDITOR_ID = 0;\n\nvar DiffEditorWidget =\n/** @class */\nfunction (_super) {\n  __extends(DiffEditorWidget, _super);\n\n  function DiffEditorWidget(domElement, options, clipboardService, editorWorkerService, contextKeyService, instantiationService, codeEditorService, themeService, notificationService, contextMenuService) {\n    var _this = _super.call(this) || this;\n\n    _this._onDidDispose = _this._register(new Emitter());\n    _this.onDidDispose = _this._onDidDispose.event;\n    _this._onDidUpdateDiff = _this._register(new Emitter());\n    _this.onDidUpdateDiff = _this._onDidUpdateDiff.event;\n    _this._lastOriginalWarning = null;\n    _this._lastModifiedWarning = null;\n    _this._editorWorkerService = editorWorkerService;\n    _this._codeEditorService = codeEditorService;\n    _this._contextKeyService = _this._register(contextKeyService.createScoped(domElement));\n\n    _this._contextKeyService.createKey('isInDiffEditor', true);\n\n    _this._themeService = themeService;\n    _this._notificationService = notificationService;\n    _this.id = ++DIFF_EDITOR_ID;\n    _this._domElement = domElement;\n    options = options || {}; // renderSideBySide\n\n    _this._renderSideBySide = true;\n\n    if (typeof options.renderSideBySide !== 'undefined') {\n      _this._renderSideBySide = options.renderSideBySide;\n    } // ignoreTrimWhitespace\n\n\n    _this._ignoreTrimWhitespace = true;\n\n    if (typeof options.ignoreTrimWhitespace !== 'undefined') {\n      _this._ignoreTrimWhitespace = options.ignoreTrimWhitespace;\n    } // renderIndicators\n\n\n    _this._renderIndicators = true;\n\n    if (typeof options.renderIndicators !== 'undefined') {\n      _this._renderIndicators = options.renderIndicators;\n    }\n\n    _this._originalIsEditable = false;\n\n    if (typeof options.originalEditable !== 'undefined') {\n      _this._originalIsEditable = Boolean(options.originalEditable);\n    }\n\n    _this._updateDecorationsRunner = _this._register(new RunOnceScheduler(function () {\n      return _this._updateDecorations();\n    }, 0));\n    _this._containerDomElement = document.createElement('div');\n    _this._containerDomElement.className = DiffEditorWidget._getClassName(_this._themeService.getTheme(), _this._renderSideBySide);\n    _this._containerDomElement.style.position = 'relative';\n    _this._containerDomElement.style.height = '100%';\n\n    _this._domElement.appendChild(_this._containerDomElement);\n\n    _this._overviewViewportDomElement = createFastDomNode(document.createElement('div'));\n\n    _this._overviewViewportDomElement.setClassName('diffViewport');\n\n    _this._overviewViewportDomElement.setPosition('absolute');\n\n    _this._overviewDomElement = document.createElement('div');\n    _this._overviewDomElement.className = 'diffOverview';\n    _this._overviewDomElement.style.position = 'absolute';\n\n    _this._overviewDomElement.appendChild(_this._overviewViewportDomElement.domNode);\n\n    _this._register(dom.addStandardDisposableListener(_this._overviewDomElement, 'mousedown', function (e) {\n      _this.modifiedEditor.delegateVerticalScrollbarMouseDown(e);\n    }));\n\n    _this._containerDomElement.appendChild(_this._overviewDomElement); // Create left side\n\n\n    _this._originalDomNode = document.createElement('div');\n    _this._originalDomNode.className = 'editor original';\n    _this._originalDomNode.style.position = 'absolute';\n    _this._originalDomNode.style.height = '100%';\n\n    _this._containerDomElement.appendChild(_this._originalDomNode); // Create right side\n\n\n    _this._modifiedDomNode = document.createElement('div');\n    _this._modifiedDomNode.className = 'editor modified';\n    _this._modifiedDomNode.style.position = 'absolute';\n    _this._modifiedDomNode.style.height = '100%';\n\n    _this._containerDomElement.appendChild(_this._modifiedDomNode);\n\n    _this._beginUpdateDecorationsTimeout = -1;\n    _this._currentlyChangingViewZones = false;\n    _this._diffComputationToken = 0;\n    _this._originalEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    _this._modifiedEditorState = new VisualEditorState(contextMenuService, clipboardService);\n    _this._isVisible = true;\n    _this._isHandlingScrollEvent = false;\n    _this._width = 0;\n    _this._height = 0;\n    _this._reviewHeight = 0;\n    _this._diffComputationResult = null;\n\n    var leftContextKeyService = _this._contextKeyService.createScoped();\n\n    leftContextKeyService.createKey('isInDiffLeftEditor', true);\n    var leftServices = new ServiceCollection();\n    leftServices.set(IContextKeyService, leftContextKeyService);\n    var leftScopedInstantiationService = instantiationService.createChild(leftServices);\n\n    var rightContextKeyService = _this._contextKeyService.createScoped();\n\n    rightContextKeyService.createKey('isInDiffRightEditor', true);\n    var rightServices = new ServiceCollection();\n    rightServices.set(IContextKeyService, rightContextKeyService);\n    var rightScopedInstantiationService = instantiationService.createChild(rightServices);\n    _this.originalEditor = _this._createLeftHandSideEditor(options, leftScopedInstantiationService);\n    _this.modifiedEditor = _this._createRightHandSideEditor(options, rightScopedInstantiationService);\n    _this._originalOverviewRuler = null;\n    _this._modifiedOverviewRuler = null;\n    _this._reviewPane = new DiffReview(_this);\n\n    _this._containerDomElement.appendChild(_this._reviewPane.domNode.domNode);\n\n    _this._containerDomElement.appendChild(_this._reviewPane.shadow.domNode);\n\n    _this._containerDomElement.appendChild(_this._reviewPane.actionBarContainer.domNode);\n\n    if (options.automaticLayout) {\n      _this._measureDomElementToken = new IntervalTimer();\n\n      _this._measureDomElementToken.cancelAndSet(function () {\n        return _this._measureDomElement(false);\n      }, 100);\n    } else {\n      _this._measureDomElementToken = null;\n    } // enableSplitViewResizing\n\n\n    _this._enableSplitViewResizing = true;\n\n    if (typeof options.enableSplitViewResizing !== 'undefined') {\n      _this._enableSplitViewResizing = options.enableSplitViewResizing;\n    }\n\n    if (_this._renderSideBySide) {\n      _this._setStrategy(new DiffEditorWidgetSideBySide(_this._createDataSource(), _this._enableSplitViewResizing));\n    } else {\n      _this._setStrategy(new DiffEditorWidgetInline(_this._createDataSource(), _this._enableSplitViewResizing));\n    }\n\n    _this._register(themeService.onThemeChange(function (t) {\n      if (_this._strategy && _this._strategy.applyColors(t)) {\n        _this._updateDecorationsRunner.schedule();\n      }\n\n      _this._containerDomElement.className = DiffEditorWidget._getClassName(_this._themeService.getTheme(), _this._renderSideBySide);\n    }));\n\n    _this._codeEditorService.addDiffEditor(_this);\n\n    return _this;\n  }\n\n  DiffEditorWidget.prototype.hasWidgetFocus = function () {\n    return dom.isAncestor(document.activeElement, this._domElement);\n  };\n\n  DiffEditorWidget.prototype.diffReviewNext = function () {\n    this._reviewPane.next();\n  };\n\n  DiffEditorWidget.prototype.diffReviewPrev = function () {\n    this._reviewPane.prev();\n  };\n\n  DiffEditorWidget._getClassName = function (theme, renderSideBySide) {\n    var result = 'monaco-diff-editor monaco-editor-background ';\n\n    if (renderSideBySide) {\n      result += 'side-by-side ';\n    }\n\n    result += getThemeTypeSelector(theme.type);\n    return result;\n  };\n\n  DiffEditorWidget.prototype._recreateOverviewRulers = function () {\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n\n      this._originalOverviewRuler.dispose();\n    }\n\n    if (this.originalEditor.hasModel()) {\n      this._originalOverviewRuler = this.originalEditor.createOverviewRuler('original diffOverviewRuler');\n\n      this._overviewDomElement.appendChild(this._originalOverviewRuler.getDomNode());\n    }\n\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n\n      this._modifiedOverviewRuler.dispose();\n    }\n\n    if (this.modifiedEditor.hasModel()) {\n      this._modifiedOverviewRuler = this.modifiedEditor.createOverviewRuler('modified diffOverviewRuler');\n\n      this._overviewDomElement.appendChild(this._modifiedOverviewRuler.getDomNode());\n    }\n\n    this._layoutOverviewRulers();\n  };\n\n  DiffEditorWidget.prototype._createLeftHandSideEditor = function (options, instantiationService) {\n    var _this = this;\n\n    var editor = this._createInnerEditor(instantiationService, this._originalDomNode, this._adjustOptionsForLeftHandSide(options, this._originalIsEditable));\n\n    this._register(editor.onDidScrollChange(function (e) {\n      if (_this._isHandlingScrollEvent) {\n        return;\n      }\n\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n\n      _this._isHandlingScrollEvent = true;\n\n      _this.modifiedEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n\n      _this._isHandlingScrollEvent = false;\n\n      _this._layoutOverviewViewport();\n    }));\n\n    this._register(editor.onDidChangeViewZones(function () {\n      _this._onViewZonesChanged();\n    }));\n\n    this._register(editor.onDidChangeModelContent(function () {\n      if (_this._isVisible) {\n        _this._beginUpdateDecorationsSoon();\n      }\n    }));\n\n    return editor;\n  };\n\n  DiffEditorWidget.prototype._createRightHandSideEditor = function (options, instantiationService) {\n    var _this = this;\n\n    var editor = this._createInnerEditor(instantiationService, this._modifiedDomNode, this._adjustOptionsForRightHandSide(options));\n\n    this._register(editor.onDidScrollChange(function (e) {\n      if (_this._isHandlingScrollEvent) {\n        return;\n      }\n\n      if (!e.scrollTopChanged && !e.scrollLeftChanged && !e.scrollHeightChanged) {\n        return;\n      }\n\n      _this._isHandlingScrollEvent = true;\n\n      _this.originalEditor.setScrollPosition({\n        scrollLeft: e.scrollLeft,\n        scrollTop: e.scrollTop\n      });\n\n      _this._isHandlingScrollEvent = false;\n\n      _this._layoutOverviewViewport();\n    }));\n\n    this._register(editor.onDidChangeViewZones(function () {\n      _this._onViewZonesChanged();\n    }));\n\n    this._register(editor.onDidChangeConfiguration(function (e) {\n      if (e.fontInfo && editor.getModel()) {\n        _this._onViewZonesChanged();\n      }\n    }));\n\n    this._register(editor.onDidChangeModelContent(function () {\n      if (_this._isVisible) {\n        _this._beginUpdateDecorationsSoon();\n      }\n    }));\n\n    return editor;\n  };\n\n  DiffEditorWidget.prototype._createInnerEditor = function (instantiationService, container, options) {\n    return instantiationService.createInstance(CodeEditorWidget, container, options, {});\n  };\n\n  DiffEditorWidget.prototype.dispose = function () {\n    this._codeEditorService.removeDiffEditor(this);\n\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n\n    if (this._measureDomElementToken) {\n      this._measureDomElementToken.dispose();\n    }\n\n    this._cleanViewZonesAndDecorations();\n\n    if (this._originalOverviewRuler) {\n      this._overviewDomElement.removeChild(this._originalOverviewRuler.getDomNode());\n\n      this._originalOverviewRuler.dispose();\n    }\n\n    if (this._modifiedOverviewRuler) {\n      this._overviewDomElement.removeChild(this._modifiedOverviewRuler.getDomNode());\n\n      this._modifiedOverviewRuler.dispose();\n    }\n\n    this._overviewDomElement.removeChild(this._overviewViewportDomElement.domNode);\n\n    this._containerDomElement.removeChild(this._overviewDomElement);\n\n    this._containerDomElement.removeChild(this._originalDomNode);\n\n    this.originalEditor.dispose();\n\n    this._containerDomElement.removeChild(this._modifiedDomNode);\n\n    this.modifiedEditor.dispose();\n\n    this._strategy.dispose();\n\n    this._containerDomElement.removeChild(this._reviewPane.domNode.domNode);\n\n    this._containerDomElement.removeChild(this._reviewPane.shadow.domNode);\n\n    this._containerDomElement.removeChild(this._reviewPane.actionBarContainer.domNode);\n\n    this._reviewPane.dispose();\n\n    this._domElement.removeChild(this._containerDomElement);\n\n    this._onDidDispose.fire();\n\n    _super.prototype.dispose.call(this);\n  }; //------------ begin IDiffEditor methods\n\n\n  DiffEditorWidget.prototype.getId = function () {\n    return this.getEditorType() + ':' + this.id;\n  };\n\n  DiffEditorWidget.prototype.getEditorType = function () {\n    return editorCommon.EditorType.IDiffEditor;\n  };\n\n  DiffEditorWidget.prototype.getLineChanges = function () {\n    if (!this._diffComputationResult) {\n      return null;\n    }\n\n    return this._diffComputationResult.changes;\n  };\n\n  DiffEditorWidget.prototype.getOriginalEditor = function () {\n    return this.originalEditor;\n  };\n\n  DiffEditorWidget.prototype.getModifiedEditor = function () {\n    return this.modifiedEditor;\n  };\n\n  DiffEditorWidget.prototype.updateOptions = function (newOptions) {\n    // Handle side by side\n    var renderSideBySideChanged = false;\n\n    if (typeof newOptions.renderSideBySide !== 'undefined') {\n      if (this._renderSideBySide !== newOptions.renderSideBySide) {\n        this._renderSideBySide = newOptions.renderSideBySide;\n        renderSideBySideChanged = true;\n      }\n    }\n\n    var beginUpdateDecorations = false;\n\n    if (typeof newOptions.ignoreTrimWhitespace !== 'undefined') {\n      if (this._ignoreTrimWhitespace !== newOptions.ignoreTrimWhitespace) {\n        this._ignoreTrimWhitespace = newOptions.ignoreTrimWhitespace; // Begin comparing\n\n        beginUpdateDecorations = true;\n      }\n    }\n\n    if (typeof newOptions.renderIndicators !== 'undefined') {\n      if (this._renderIndicators !== newOptions.renderIndicators) {\n        this._renderIndicators = newOptions.renderIndicators;\n        beginUpdateDecorations = true;\n      }\n    }\n\n    if (beginUpdateDecorations) {\n      this._beginUpdateDecorations();\n    }\n\n    if (typeof newOptions.originalEditable !== 'undefined') {\n      this._originalIsEditable = Boolean(newOptions.originalEditable);\n    }\n\n    this.modifiedEditor.updateOptions(this._adjustOptionsForRightHandSide(newOptions));\n    this.originalEditor.updateOptions(this._adjustOptionsForLeftHandSide(newOptions, this._originalIsEditable)); // enableSplitViewResizing\n\n    if (typeof newOptions.enableSplitViewResizing !== 'undefined') {\n      this._enableSplitViewResizing = newOptions.enableSplitViewResizing;\n    }\n\n    this._strategy.setEnableSplitViewResizing(this._enableSplitViewResizing); // renderSideBySide\n\n\n    if (renderSideBySideChanged) {\n      if (this._renderSideBySide) {\n        this._setStrategy(new DiffEditorWidgetSideBySide(this._createDataSource(), this._enableSplitViewResizing));\n      } else {\n        this._setStrategy(new DiffEditorWidgetInline(this._createDataSource(), this._enableSplitViewResizing));\n      } // Update class name\n\n\n      this._containerDomElement.className = DiffEditorWidget._getClassName(this._themeService.getTheme(), this._renderSideBySide);\n    }\n  };\n\n  DiffEditorWidget.prototype.getModel = function () {\n    return {\n      original: this.originalEditor.getModel(),\n      modified: this.modifiedEditor.getModel()\n    };\n  };\n\n  DiffEditorWidget.prototype.setModel = function (model) {\n    // Guard us against partial null model\n    if (model && (!model.original || !model.modified)) {\n      throw new Error(!model.original ? 'DiffEditorWidget.setModel: Original model is null' : 'DiffEditorWidget.setModel: Modified model is null');\n    } // Remove all view zones & decorations\n\n\n    this._cleanViewZonesAndDecorations(); // Update code editor models\n\n\n    this.originalEditor.setModel(model ? model.original : null);\n    this.modifiedEditor.setModel(model ? model.modified : null);\n\n    this._updateDecorationsRunner.cancel();\n\n    if (model) {\n      this.originalEditor.setScrollTop(0);\n      this.modifiedEditor.setScrollTop(0);\n    } // Disable any diff computations that will come in\n\n\n    this._diffComputationResult = null;\n    this._diffComputationToken++;\n\n    if (model) {\n      this._recreateOverviewRulers(); // Begin comparing\n\n\n      this._beginUpdateDecorations();\n    } else {\n      this._diffComputationResult = null;\n    }\n\n    this._layoutOverviewViewport();\n  };\n\n  DiffEditorWidget.prototype.getDomNode = function () {\n    return this._domElement;\n  };\n\n  DiffEditorWidget.prototype.getVisibleColumnFromPosition = function (position) {\n    return this.modifiedEditor.getVisibleColumnFromPosition(position);\n  };\n\n  DiffEditorWidget.prototype.getPosition = function () {\n    return this.modifiedEditor.getPosition();\n  };\n\n  DiffEditorWidget.prototype.setPosition = function (position) {\n    this.modifiedEditor.setPosition(position);\n  };\n\n  DiffEditorWidget.prototype.revealLine = function (lineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealLine(lineNumber, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealLineInCenter = function (lineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealLineInCenter(lineNumber, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealLineInCenterIfOutsideViewport = function (lineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealPosition = function (position, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealPosition(position, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealPositionInCenter = function (position, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealPositionInCenter(position, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealPositionInCenterIfOutsideViewport = function (position, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n  };\n\n  DiffEditorWidget.prototype.getSelection = function () {\n    return this.modifiedEditor.getSelection();\n  };\n\n  DiffEditorWidget.prototype.getSelections = function () {\n    return this.modifiedEditor.getSelections();\n  };\n\n  DiffEditorWidget.prototype.setSelection = function (something) {\n    this.modifiedEditor.setSelection(something);\n  };\n\n  DiffEditorWidget.prototype.setSelections = function (ranges) {\n    this.modifiedEditor.setSelections(ranges);\n  };\n\n  DiffEditorWidget.prototype.revealLines = function (startLineNumber, endLineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealLinesInCenter = function (startLineNumber, endLineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealLinesInCenterIfOutsideViewport = function (startLineNumber, endLineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealRange = function (range, scrollType, revealVerticalInCenter, revealHorizontal) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    if (revealVerticalInCenter === void 0) {\n      revealVerticalInCenter = false;\n    }\n\n    if (revealHorizontal === void 0) {\n      revealHorizontal = true;\n    }\n\n    this.modifiedEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n  };\n\n  DiffEditorWidget.prototype.revealRangeInCenter = function (range, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealRangeInCenter(range, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealRangeInCenterIfOutsideViewport = function (range, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n  };\n\n  DiffEditorWidget.prototype.revealRangeAtTop = function (range, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this.modifiedEditor.revealRangeAtTop(range, scrollType);\n  };\n\n  DiffEditorWidget.prototype.getSupportedActions = function () {\n    return this.modifiedEditor.getSupportedActions();\n  };\n\n  DiffEditorWidget.prototype.saveViewState = function () {\n    var originalViewState = this.originalEditor.saveViewState();\n    var modifiedViewState = this.modifiedEditor.saveViewState();\n    return {\n      original: originalViewState,\n      modified: modifiedViewState\n    };\n  };\n\n  DiffEditorWidget.prototype.restoreViewState = function (s) {\n    if (s.original && s.modified) {\n      var diffEditorState = s;\n      this.originalEditor.restoreViewState(diffEditorState.original);\n      this.modifiedEditor.restoreViewState(diffEditorState.modified);\n    }\n  };\n\n  DiffEditorWidget.prototype.layout = function (dimension) {\n    this._measureDomElement(false, dimension);\n  };\n\n  DiffEditorWidget.prototype.focus = function () {\n    this.modifiedEditor.focus();\n  };\n\n  DiffEditorWidget.prototype.hasTextFocus = function () {\n    return this.originalEditor.hasTextFocus() || this.modifiedEditor.hasTextFocus();\n  };\n\n  DiffEditorWidget.prototype.trigger = function (source, handlerId, payload) {\n    this.modifiedEditor.trigger(source, handlerId, payload);\n  };\n\n  DiffEditorWidget.prototype.changeDecorations = function (callback) {\n    return this.modifiedEditor.changeDecorations(callback);\n  }; //------------ end IDiffEditor methods\n  //------------ begin layouting methods\n\n\n  DiffEditorWidget.prototype._measureDomElement = function (forceDoLayoutCall, dimensions) {\n    dimensions = dimensions || {\n      width: this._containerDomElement.clientWidth,\n      height: this._containerDomElement.clientHeight\n    };\n\n    if (dimensions.width <= 0) {\n      this._width = 0;\n      this._height = 0;\n      this._reviewHeight = 0;\n      return;\n    }\n\n    if (!forceDoLayoutCall && dimensions.width === this._width && dimensions.height === this._height) {\n      // Nothing has changed\n      return;\n    }\n\n    this._width = dimensions.width;\n    this._height = dimensions.height;\n    this._reviewHeight = this._reviewPane.isVisible() ? this._height : 0;\n\n    this._doLayout();\n  };\n\n  DiffEditorWidget.prototype._layoutOverviewRulers = function () {\n    if (!this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n      return;\n    }\n\n    var freeSpace = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH - 2 * DiffEditorWidget.ONE_OVERVIEW_WIDTH;\n    var layoutInfo = this.modifiedEditor.getLayoutInfo();\n\n    if (layoutInfo) {\n      this._originalOverviewRuler.setLayout({\n        top: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        right: freeSpace + DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: this._height - this._reviewHeight\n      });\n\n      this._modifiedOverviewRuler.setLayout({\n        top: 0,\n        right: 0,\n        width: DiffEditorWidget.ONE_OVERVIEW_WIDTH,\n        height: this._height - this._reviewHeight\n      });\n    }\n  }; //------------ end layouting methods\n\n\n  DiffEditorWidget.prototype._onViewZonesChanged = function () {\n    if (this._currentlyChangingViewZones) {\n      return;\n    }\n\n    this._updateDecorationsRunner.schedule();\n  };\n\n  DiffEditorWidget.prototype._beginUpdateDecorationsSoon = function () {\n    var _this = this; // Clear previous timeout if necessary\n\n\n    if (this._beginUpdateDecorationsTimeout !== -1) {\n      window.clearTimeout(this._beginUpdateDecorationsTimeout);\n      this._beginUpdateDecorationsTimeout = -1;\n    }\n\n    this._beginUpdateDecorationsTimeout = window.setTimeout(function () {\n      return _this._beginUpdateDecorations();\n    }, DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY);\n  };\n\n  DiffEditorWidget._equals = function (a, b) {\n    if (!a && !b) {\n      return true;\n    }\n\n    if (!a || !b) {\n      return false;\n    }\n\n    return a.toString() === b.toString();\n  };\n\n  DiffEditorWidget.prototype._beginUpdateDecorations = function () {\n    var _this = this;\n\n    this._beginUpdateDecorationsTimeout = -1;\n    var currentOriginalModel = this.originalEditor.getModel();\n    var currentModifiedModel = this.modifiedEditor.getModel();\n\n    if (!currentOriginalModel || !currentModifiedModel) {\n      return;\n    } // Prevent old diff requests to come if a new request has been initiated\n    // The best method would be to call cancel on the Promise, but this is not\n    // yet supported, so using tokens for now.\n\n\n    this._diffComputationToken++;\n    var currentToken = this._diffComputationToken;\n\n    if (!this._editorWorkerService.canComputeDiff(currentOriginalModel.uri, currentModifiedModel.uri)) {\n      if (!DiffEditorWidget._equals(currentOriginalModel.uri, this._lastOriginalWarning) || !DiffEditorWidget._equals(currentModifiedModel.uri, this._lastModifiedWarning)) {\n        this._lastOriginalWarning = currentOriginalModel.uri;\n        this._lastModifiedWarning = currentModifiedModel.uri;\n\n        this._notificationService.warn(nls.localize(\"diff.tooLarge\", \"Cannot compare files because one file is too large.\"));\n      }\n\n      return;\n    }\n\n    this._editorWorkerService.computeDiff(currentOriginalModel.uri, currentModifiedModel.uri, this._ignoreTrimWhitespace).then(function (result) {\n      if (currentToken === _this._diffComputationToken && currentOriginalModel === _this.originalEditor.getModel() && currentModifiedModel === _this.modifiedEditor.getModel()) {\n        _this._diffComputationResult = result;\n\n        _this._updateDecorationsRunner.schedule();\n\n        _this._onDidUpdateDiff.fire();\n      }\n    }, function (error) {\n      if (currentToken === _this._diffComputationToken && currentOriginalModel === _this.originalEditor.getModel() && currentModifiedModel === _this.modifiedEditor.getModel()) {\n        _this._diffComputationResult = null;\n\n        _this._updateDecorationsRunner.schedule();\n      }\n    });\n  };\n\n  DiffEditorWidget.prototype._cleanViewZonesAndDecorations = function () {\n    this._originalEditorState.clean(this.originalEditor);\n\n    this._modifiedEditorState.clean(this.modifiedEditor);\n  };\n\n  DiffEditorWidget.prototype._updateDecorations = function () {\n    if (!this.originalEditor.getModel() || !this.modifiedEditor.getModel() || !this._originalOverviewRuler || !this._modifiedOverviewRuler) {\n      return;\n    }\n\n    var lineChanges = this._diffComputationResult ? this._diffComputationResult.changes : [];\n\n    var foreignOriginal = this._originalEditorState.getForeignViewZones(this.originalEditor.getWhitespaces());\n\n    var foreignModified = this._modifiedEditorState.getForeignViewZones(this.modifiedEditor.getWhitespaces());\n\n    var diffDecorations = this._strategy.getEditorsDiffDecorations(lineChanges, this._ignoreTrimWhitespace, this._renderIndicators, foreignOriginal, foreignModified, this.originalEditor, this.modifiedEditor);\n\n    try {\n      this._currentlyChangingViewZones = true;\n\n      this._originalEditorState.apply(this.originalEditor, this._originalOverviewRuler, diffDecorations.original, false);\n\n      this._modifiedEditorState.apply(this.modifiedEditor, this._modifiedOverviewRuler, diffDecorations.modified, true);\n    } finally {\n      this._currentlyChangingViewZones = false;\n    }\n  };\n\n  DiffEditorWidget.prototype._adjustOptionsForSubEditor = function (options) {\n    var clonedOptions = objects.deepClone(options || {});\n    clonedOptions.inDiffEditor = true;\n    clonedOptions.wordWrap = 'off';\n    clonedOptions.wordWrapMinified = false;\n    clonedOptions.automaticLayout = false;\n    clonedOptions.scrollbar = clonedOptions.scrollbar || {};\n    clonedOptions.scrollbar.vertical = 'visible';\n    clonedOptions.folding = false;\n    clonedOptions.codeLens = false;\n    clonedOptions.fixedOverflowWidgets = true; // clonedOptions.lineDecorationsWidth = '2ch';\n\n    if (!clonedOptions.minimap) {\n      clonedOptions.minimap = {};\n    }\n\n    clonedOptions.minimap.enabled = false;\n    return clonedOptions;\n  };\n\n  DiffEditorWidget.prototype._adjustOptionsForLeftHandSide = function (options, isEditable) {\n    var result = this._adjustOptionsForSubEditor(options);\n\n    result.readOnly = !isEditable;\n    result.overviewRulerLanes = 1;\n    result.extraEditorClassName = 'original-in-monaco-diff-editor';\n    return result;\n  };\n\n  DiffEditorWidget.prototype._adjustOptionsForRightHandSide = function (options) {\n    var result = this._adjustOptionsForSubEditor(options);\n\n    result.revealHorizontalRightPadding = editorOptions.EDITOR_DEFAULTS.viewInfo.revealHorizontalRightPadding + DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n    result.scrollbar.verticalHasArrows = false;\n    result.extraEditorClassName = 'modified-in-monaco-diff-editor';\n    return result;\n  };\n\n  DiffEditorWidget.prototype.doLayout = function () {\n    this._measureDomElement(true);\n  };\n\n  DiffEditorWidget.prototype._doLayout = function () {\n    var splitPoint = this._strategy.layout();\n\n    this._originalDomNode.style.width = splitPoint + 'px';\n    this._originalDomNode.style.left = '0px';\n    this._modifiedDomNode.style.width = this._width - splitPoint + 'px';\n    this._modifiedDomNode.style.left = splitPoint + 'px';\n    this._overviewDomElement.style.top = '0px';\n    this._overviewDomElement.style.height = this._height - this._reviewHeight + 'px';\n    this._overviewDomElement.style.width = DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n    this._overviewDomElement.style.left = this._width - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH + 'px';\n\n    this._overviewViewportDomElement.setWidth(DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH);\n\n    this._overviewViewportDomElement.setHeight(30);\n\n    this.originalEditor.layout({\n      width: splitPoint,\n      height: this._height - this._reviewHeight\n    });\n    this.modifiedEditor.layout({\n      width: this._width - splitPoint - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH,\n      height: this._height - this._reviewHeight\n    });\n\n    if (this._originalOverviewRuler || this._modifiedOverviewRuler) {\n      this._layoutOverviewRulers();\n    }\n\n    this._reviewPane.layout(this._height - this._reviewHeight, this._width, this._reviewHeight);\n\n    this._layoutOverviewViewport();\n  };\n\n  DiffEditorWidget.prototype._layoutOverviewViewport = function () {\n    var layout = this._computeOverviewViewport();\n\n    if (!layout) {\n      this._overviewViewportDomElement.setTop(0);\n\n      this._overviewViewportDomElement.setHeight(0);\n    } else {\n      this._overviewViewportDomElement.setTop(layout.top);\n\n      this._overviewViewportDomElement.setHeight(layout.height);\n    }\n  };\n\n  DiffEditorWidget.prototype._computeOverviewViewport = function () {\n    var layoutInfo = this.modifiedEditor.getLayoutInfo();\n\n    if (!layoutInfo) {\n      return null;\n    }\n\n    var scrollTop = this.modifiedEditor.getScrollTop();\n    var scrollHeight = this.modifiedEditor.getScrollHeight();\n    var computedAvailableSize = Math.max(0, layoutInfo.contentHeight);\n    var computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * 0);\n    var computedRatio = scrollHeight > 0 ? computedRepresentableSize / scrollHeight : 0;\n    var computedSliderSize = Math.max(0, Math.floor(layoutInfo.contentHeight * computedRatio));\n    var computedSliderPosition = Math.floor(scrollTop * computedRatio);\n    return {\n      height: computedSliderSize,\n      top: computedSliderPosition\n    };\n  };\n\n  DiffEditorWidget.prototype._createDataSource = function () {\n    var _this = this;\n\n    return {\n      getWidth: function () {\n        return _this._width;\n      },\n      getHeight: function () {\n        return _this._height - _this._reviewHeight;\n      },\n      getContainerDomNode: function () {\n        return _this._containerDomElement;\n      },\n      relayoutEditors: function () {\n        _this._doLayout();\n      },\n      getOriginalEditor: function () {\n        return _this.originalEditor;\n      },\n      getModifiedEditor: function () {\n        return _this.modifiedEditor;\n      }\n    };\n  };\n\n  DiffEditorWidget.prototype._setStrategy = function (newStrategy) {\n    if (this._strategy) {\n      this._strategy.dispose();\n    }\n\n    this._strategy = newStrategy;\n    newStrategy.applyColors(this._themeService.getTheme());\n\n    if (this._diffComputationResult) {\n      this._updateDecorations();\n    } // Just do a layout, the strategy might need it\n\n\n    this._measureDomElement(true);\n  };\n\n  DiffEditorWidget.prototype._getLineChangeAtOrBeforeLineNumber = function (lineNumber, startLineNumberExtractor) {\n    var lineChanges = this._diffComputationResult ? this._diffComputationResult.changes : [];\n\n    if (lineChanges.length === 0 || lineNumber < startLineNumberExtractor(lineChanges[0])) {\n      // There are no changes or `lineNumber` is before the first change\n      return null;\n    }\n\n    var min = 0,\n        max = lineChanges.length - 1;\n\n    while (min < max) {\n      var mid = Math.floor((min + max) / 2);\n      var midStart = startLineNumberExtractor(lineChanges[mid]);\n      var midEnd = mid + 1 <= max ? startLineNumberExtractor(lineChanges[mid + 1]) : Number.MAX_VALUE;\n\n      if (lineNumber < midStart) {\n        max = mid - 1;\n      } else if (lineNumber >= midEnd) {\n        min = mid + 1;\n      } else {\n        // HIT!\n        min = mid;\n        max = mid;\n      }\n    }\n\n    return lineChanges[min];\n  };\n\n  DiffEditorWidget.prototype._getEquivalentLineForOriginalLineNumber = function (lineNumber) {\n    var lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, function (lineChange) {\n      return lineChange.originalStartLineNumber;\n    });\n\n    if (!lineChange) {\n      return lineNumber;\n    }\n\n    var originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n    var modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n    var lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1 : 0;\n    var lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1 : 0;\n    var delta = lineNumber - originalEquivalentLineNumber;\n\n    if (delta <= lineChangeOriginalLength) {\n      return modifiedEquivalentLineNumber + Math.min(delta, lineChangeModifiedLength);\n    }\n\n    return modifiedEquivalentLineNumber + lineChangeModifiedLength - lineChangeOriginalLength + delta;\n  };\n\n  DiffEditorWidget.prototype._getEquivalentLineForModifiedLineNumber = function (lineNumber) {\n    var lineChange = this._getLineChangeAtOrBeforeLineNumber(lineNumber, function (lineChange) {\n      return lineChange.modifiedStartLineNumber;\n    });\n\n    if (!lineChange) {\n      return lineNumber;\n    }\n\n    var originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n    var modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n    var lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1 : 0;\n    var lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1 : 0;\n    var delta = lineNumber - modifiedEquivalentLineNumber;\n\n    if (delta <= lineChangeModifiedLength) {\n      return originalEquivalentLineNumber + Math.min(delta, lineChangeOriginalLength);\n    }\n\n    return originalEquivalentLineNumber + lineChangeOriginalLength - lineChangeModifiedLength + delta;\n  };\n\n  DiffEditorWidget.prototype.getDiffLineInformationForOriginal = function (lineNumber) {\n    if (!this._diffComputationResult) {\n      // Cannot answer that which I don't know\n      return null;\n    }\n\n    return {\n      equivalentLineNumber: this._getEquivalentLineForOriginalLineNumber(lineNumber)\n    };\n  };\n\n  DiffEditorWidget.prototype.getDiffLineInformationForModified = function (lineNumber) {\n    if (!this._diffComputationResult) {\n      // Cannot answer that which I don't know\n      return null;\n    }\n\n    return {\n      equivalentLineNumber: this._getEquivalentLineForModifiedLineNumber(lineNumber)\n    };\n  };\n\n  DiffEditorWidget.ONE_OVERVIEW_WIDTH = 15;\n  DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH = 30;\n  DiffEditorWidget.UPDATE_DIFF_DECORATIONS_DELAY = 200; // ms\n\n  DiffEditorWidget = __decorate([__param(3, IEditorWorkerService), __param(4, IContextKeyService), __param(5, IInstantiationService), __param(6, ICodeEditorService), __param(7, IThemeService), __param(8, INotificationService), __param(9, IContextMenuService)], DiffEditorWidget);\n  return DiffEditorWidget;\n}(Disposable);\n\nexport { DiffEditorWidget };\n\nvar DiffEditorWidgetStyle =\n/** @class */\nfunction (_super) {\n  __extends(DiffEditorWidgetStyle, _super);\n\n  function DiffEditorWidgetStyle(dataSource) {\n    var _this = _super.call(this) || this;\n\n    _this._dataSource = dataSource;\n    _this._insertColor = null;\n    _this._removeColor = null;\n    return _this;\n  }\n\n  DiffEditorWidgetStyle.prototype.applyColors = function (theme) {\n    var newInsertColor = (theme.getColor(diffInserted) || defaultInsertColor).transparent(2);\n    var newRemoveColor = (theme.getColor(diffRemoved) || defaultRemoveColor).transparent(2);\n    var hasChanges = !newInsertColor.equals(this._insertColor) || !newRemoveColor.equals(this._removeColor);\n    this._insertColor = newInsertColor;\n    this._removeColor = newRemoveColor;\n    return hasChanges;\n  };\n\n  DiffEditorWidgetStyle.prototype.getEditorsDiffDecorations = function (lineChanges, ignoreTrimWhitespace, renderIndicators, originalWhitespaces, modifiedWhitespaces, originalEditor, modifiedEditor) {\n    // Get view zones\n    modifiedWhitespaces = modifiedWhitespaces.sort(function (a, b) {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n    originalWhitespaces = originalWhitespaces.sort(function (a, b) {\n      return a.afterLineNumber - b.afterLineNumber;\n    });\n\n    var zones = this._getViewZones(lineChanges, originalWhitespaces, modifiedWhitespaces, originalEditor, modifiedEditor, renderIndicators); // Get decorations & overview ruler zones\n\n\n    var originalDecorations = this._getOriginalEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, originalEditor, modifiedEditor);\n\n    var modifiedDecorations = this._getModifiedEditorDecorations(lineChanges, ignoreTrimWhitespace, renderIndicators, originalEditor, modifiedEditor);\n\n    return {\n      original: {\n        decorations: originalDecorations.decorations,\n        overviewZones: originalDecorations.overviewZones,\n        zones: zones.original\n      },\n      modified: {\n        decorations: modifiedDecorations.decorations,\n        overviewZones: modifiedDecorations.overviewZones,\n        zones: zones.modified\n      }\n    };\n  };\n\n  return DiffEditorWidgetStyle;\n}(Disposable);\n\nvar ForeignViewZonesIterator =\n/** @class */\nfunction () {\n  function ForeignViewZonesIterator(source) {\n    this._source = source;\n    this._index = -1;\n    this.current = null;\n    this.advance();\n  }\n\n  ForeignViewZonesIterator.prototype.advance = function () {\n    this._index++;\n\n    if (this._index < this._source.length) {\n      this.current = this._source[this._index];\n    } else {\n      this.current = null;\n    }\n  };\n\n  return ForeignViewZonesIterator;\n}();\n\nvar ViewZonesComputer =\n/** @class */\nfunction () {\n  function ViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n    this.lineChanges = lineChanges;\n    this.originalForeignVZ = originalForeignVZ;\n    this.modifiedForeignVZ = modifiedForeignVZ;\n  }\n\n  ViewZonesComputer.prototype.getViewZones = function () {\n    var result = {\n      original: [],\n      modified: []\n    };\n    var lineChangeModifiedLength = 0;\n    var lineChangeOriginalLength = 0;\n    var originalEquivalentLineNumber = 0;\n    var modifiedEquivalentLineNumber = 0;\n    var originalEndEquivalentLineNumber = 0;\n    var modifiedEndEquivalentLineNumber = 0;\n\n    var sortMyViewZones = function (a, b) {\n      return a.afterLineNumber - b.afterLineNumber;\n    };\n\n    var addAndCombineIfPossible = function (destination, item) {\n      if (item.domNode === null && destination.length > 0) {\n        var lastItem = destination[destination.length - 1];\n\n        if (lastItem.afterLineNumber === item.afterLineNumber && lastItem.domNode === null) {\n          lastItem.heightInLines += item.heightInLines;\n          return;\n        }\n      }\n\n      destination.push(item);\n    };\n\n    var modifiedForeignVZ = new ForeignViewZonesIterator(this.modifiedForeignVZ);\n    var originalForeignVZ = new ForeignViewZonesIterator(this.originalForeignVZ); // In order to include foreign view zones after the last line change, the for loop will iterate once more after the end of the `lineChanges` array\n\n    for (var i = 0, length_5 = this.lineChanges.length; i <= length_5; i++) {\n      var lineChange = i < length_5 ? this.lineChanges[i] : null;\n\n      if (lineChange !== null) {\n        originalEquivalentLineNumber = lineChange.originalStartLineNumber + (lineChange.originalEndLineNumber > 0 ? -1 : 0);\n        modifiedEquivalentLineNumber = lineChange.modifiedStartLineNumber + (lineChange.modifiedEndLineNumber > 0 ? -1 : 0);\n        lineChangeOriginalLength = lineChange.originalEndLineNumber > 0 ? lineChange.originalEndLineNumber - lineChange.originalStartLineNumber + 1 : 0;\n        lineChangeModifiedLength = lineChange.modifiedEndLineNumber > 0 ? lineChange.modifiedEndLineNumber - lineChange.modifiedStartLineNumber + 1 : 0;\n        originalEndEquivalentLineNumber = Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber);\n        modifiedEndEquivalentLineNumber = Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber);\n      } else {\n        // Increase to very large value to get the producing tests of foreign view zones running\n        originalEquivalentLineNumber += 10000000 + lineChangeOriginalLength;\n        modifiedEquivalentLineNumber += 10000000 + lineChangeModifiedLength;\n        originalEndEquivalentLineNumber = originalEquivalentLineNumber;\n        modifiedEndEquivalentLineNumber = modifiedEquivalentLineNumber;\n      } // Each step produces view zones, and after producing them, we try to cancel them out, to avoid empty-empty view zone cases\n\n\n      var stepOriginal = [];\n      var stepModified = []; // ---------------------------- PRODUCE VIEW ZONES\n      // [PRODUCE] View zone(s) in original-side due to foreign view zone(s) in modified-side\n\n      while (modifiedForeignVZ.current && modifiedForeignVZ.current.afterLineNumber <= modifiedEndEquivalentLineNumber) {\n        var viewZoneLineNumber = void 0;\n\n        if (modifiedForeignVZ.current.afterLineNumber <= modifiedEquivalentLineNumber) {\n          viewZoneLineNumber = originalEquivalentLineNumber - modifiedEquivalentLineNumber + modifiedForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = originalEndEquivalentLineNumber;\n        }\n\n        var marginDomNode = null;\n\n        if (lineChange && lineChange.modifiedStartLineNumber <= modifiedForeignVZ.current.afterLineNumber && modifiedForeignVZ.current.afterLineNumber <= lineChange.modifiedEndLineNumber) {\n          marginDomNode = this._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion();\n        }\n\n        stepOriginal.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: modifiedForeignVZ.current.heightInLines,\n          domNode: null,\n          marginDomNode: marginDomNode\n        });\n        modifiedForeignVZ.advance();\n      } // [PRODUCE] View zone(s) in modified-side due to foreign view zone(s) in original-side\n\n\n      while (originalForeignVZ.current && originalForeignVZ.current.afterLineNumber <= originalEndEquivalentLineNumber) {\n        var viewZoneLineNumber = void 0;\n\n        if (originalForeignVZ.current.afterLineNumber <= originalEquivalentLineNumber) {\n          viewZoneLineNumber = modifiedEquivalentLineNumber - originalEquivalentLineNumber + originalForeignVZ.current.afterLineNumber;\n        } else {\n          viewZoneLineNumber = modifiedEndEquivalentLineNumber;\n        }\n\n        stepModified.push({\n          afterLineNumber: viewZoneLineNumber,\n          heightInLines: originalForeignVZ.current.heightInLines,\n          domNode: null\n        });\n        originalForeignVZ.advance();\n      }\n\n      if (lineChange !== null && isChangeOrInsert(lineChange)) {\n        var r = this._produceOriginalFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n\n        if (r) {\n          stepOriginal.push(r);\n        }\n      }\n\n      if (lineChange !== null && isChangeOrDelete(lineChange)) {\n        var r = this._produceModifiedFromDiff(lineChange, lineChangeOriginalLength, lineChangeModifiedLength);\n\n        if (r) {\n          stepModified.push(r);\n        }\n      } // ---------------------------- END PRODUCE VIEW ZONES\n      // ---------------------------- EMIT MINIMAL VIEW ZONES\n      // [CANCEL & EMIT] Try to cancel view zones out\n\n\n      var stepOriginalIndex = 0;\n      var stepModifiedIndex = 0;\n      stepOriginal = stepOriginal.sort(sortMyViewZones);\n      stepModified = stepModified.sort(sortMyViewZones);\n\n      while (stepOriginalIndex < stepOriginal.length && stepModifiedIndex < stepModified.length) {\n        var original = stepOriginal[stepOriginalIndex];\n        var modified = stepModified[stepModifiedIndex];\n        var originalDelta = original.afterLineNumber - originalEquivalentLineNumber;\n        var modifiedDelta = modified.afterLineNumber - modifiedEquivalentLineNumber;\n\n        if (originalDelta < modifiedDelta) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modifiedDelta < originalDelta) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else if (original.shouldNotShrink) {\n          addAndCombineIfPossible(result.original, original);\n          stepOriginalIndex++;\n        } else if (modified.shouldNotShrink) {\n          addAndCombineIfPossible(result.modified, modified);\n          stepModifiedIndex++;\n        } else {\n          if (original.heightInLines >= modified.heightInLines) {\n            // modified view zone gets removed\n            original.heightInLines -= modified.heightInLines;\n            stepModifiedIndex++;\n          } else {\n            // original view zone gets removed\n            modified.heightInLines -= original.heightInLines;\n            stepOriginalIndex++;\n          }\n        }\n      } // [EMIT] Remaining original view zones\n\n\n      while (stepOriginalIndex < stepOriginal.length) {\n        addAndCombineIfPossible(result.original, stepOriginal[stepOriginalIndex]);\n        stepOriginalIndex++;\n      } // [EMIT] Remaining modified view zones\n\n\n      while (stepModifiedIndex < stepModified.length) {\n        addAndCombineIfPossible(result.modified, stepModified[stepModifiedIndex]);\n        stepModifiedIndex++;\n      } // ---------------------------- END EMIT MINIMAL VIEW ZONES\n\n    }\n\n    return {\n      original: ViewZonesComputer._ensureDomNodes(result.original),\n      modified: ViewZonesComputer._ensureDomNodes(result.modified)\n    };\n  };\n\n  ViewZonesComputer._ensureDomNodes = function (zones) {\n    return zones.map(function (z) {\n      if (!z.domNode) {\n        z.domNode = createFakeLinesDiv();\n      }\n\n      return z;\n    });\n  };\n\n  return ViewZonesComputer;\n}();\n\nfunction createDecoration(startLineNumber, startColumn, endLineNumber, endColumn, options) {\n  return {\n    range: new Range(startLineNumber, startColumn, endLineNumber, endColumn),\n    options: options\n  };\n}\n\nvar DECORATIONS = {\n  charDelete: ModelDecorationOptions.register({\n    className: 'char-delete'\n  }),\n  charDeleteWholeLine: ModelDecorationOptions.register({\n    className: 'char-delete',\n    isWholeLine: true\n  }),\n  charInsert: ModelDecorationOptions.register({\n    className: 'char-insert'\n  }),\n  charInsertWholeLine: ModelDecorationOptions.register({\n    className: 'char-insert',\n    isWholeLine: true\n  }),\n  lineInsert: ModelDecorationOptions.register({\n    className: 'line-insert',\n    marginClassName: 'line-insert',\n    isWholeLine: true\n  }),\n  lineInsertWithSign: ModelDecorationOptions.register({\n    className: 'line-insert',\n    linesDecorationsClassName: 'insert-sign',\n    marginClassName: 'line-insert',\n    isWholeLine: true\n  }),\n  lineDelete: ModelDecorationOptions.register({\n    className: 'line-delete',\n    marginClassName: 'line-delete',\n    isWholeLine: true\n  }),\n  lineDeleteWithSign: ModelDecorationOptions.register({\n    className: 'line-delete',\n    linesDecorationsClassName: 'delete-sign',\n    marginClassName: 'line-delete',\n    isWholeLine: true\n  }),\n  lineDeleteMargin: ModelDecorationOptions.register({\n    marginClassName: 'line-delete'\n  })\n};\n\nvar DiffEditorWidgetSideBySide =\n/** @class */\nfunction (_super) {\n  __extends(DiffEditorWidgetSideBySide, _super);\n\n  function DiffEditorWidgetSideBySide(dataSource, enableSplitViewResizing) {\n    var _this = _super.call(this, dataSource) || this;\n\n    _this._disableSash = enableSplitViewResizing === false;\n    _this._sashRatio = null;\n    _this._sashPosition = null;\n    _this._startSashPosition = null;\n    _this._sash = _this._register(new Sash(_this._dataSource.getContainerDomNode(), _this));\n\n    if (_this._disableSash) {\n      _this._sash.state = 0\n      /* Disabled */\n      ;\n    }\n\n    _this._sash.onDidStart(function () {\n      return _this.onSashDragStart();\n    });\n\n    _this._sash.onDidChange(function (e) {\n      return _this.onSashDrag(e);\n    });\n\n    _this._sash.onDidEnd(function () {\n      return _this.onSashDragEnd();\n    });\n\n    _this._sash.onDidReset(function () {\n      return _this.onSashReset();\n    });\n\n    return _this;\n  }\n\n  DiffEditorWidgetSideBySide.prototype.setEnableSplitViewResizing = function (enableSplitViewResizing) {\n    var newDisableSash = enableSplitViewResizing === false;\n\n    if (this._disableSash !== newDisableSash) {\n      this._disableSash = newDisableSash;\n      this._sash.state = this._disableSash ? 0\n      /* Disabled */\n      : 3\n      /* Enabled */\n      ;\n    }\n  };\n\n  DiffEditorWidgetSideBySide.prototype.layout = function (sashRatio) {\n    if (sashRatio === void 0) {\n      sashRatio = this._sashRatio;\n    }\n\n    var w = this._dataSource.getWidth();\n\n    var contentWidth = w - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n    var sashPosition = Math.floor((sashRatio || 0.5) * contentWidth);\n    var midPoint = Math.floor(0.5 * contentWidth);\n    sashPosition = this._disableSash ? midPoint : sashPosition || midPoint;\n\n    if (contentWidth > DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH * 2) {\n      if (sashPosition < DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n\n      if (sashPosition > contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH) {\n        sashPosition = contentWidth - DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH;\n      }\n    } else {\n      sashPosition = midPoint;\n    }\n\n    if (this._sashPosition !== sashPosition) {\n      this._sashPosition = sashPosition;\n\n      this._sash.layout();\n    }\n\n    return this._sashPosition;\n  };\n\n  DiffEditorWidgetSideBySide.prototype.onSashDragStart = function () {\n    this._startSashPosition = this._sashPosition;\n  };\n\n  DiffEditorWidgetSideBySide.prototype.onSashDrag = function (e) {\n    var w = this._dataSource.getWidth();\n\n    var contentWidth = w - DiffEditorWidget.ENTIRE_DIFF_OVERVIEW_WIDTH;\n    var sashPosition = this.layout((this._startSashPosition + (e.currentX - e.startX)) / contentWidth);\n    this._sashRatio = sashPosition / contentWidth;\n\n    this._dataSource.relayoutEditors();\n  };\n\n  DiffEditorWidgetSideBySide.prototype.onSashDragEnd = function () {\n    this._sash.layout();\n  };\n\n  DiffEditorWidgetSideBySide.prototype.onSashReset = function () {\n    this._sashRatio = 0.5;\n\n    this._dataSource.relayoutEditors();\n\n    this._sash.layout();\n  };\n\n  DiffEditorWidgetSideBySide.prototype.getVerticalSashTop = function (sash) {\n    return 0;\n  };\n\n  DiffEditorWidgetSideBySide.prototype.getVerticalSashLeft = function (sash) {\n    return this._sashPosition;\n  };\n\n  DiffEditorWidgetSideBySide.prototype.getVerticalSashHeight = function (sash) {\n    return this._dataSource.getHeight();\n  };\n\n  DiffEditorWidgetSideBySide.prototype._getViewZones = function (lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor) {\n    var c = new SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ);\n    return c.getViewZones();\n  };\n\n  DiffEditorWidgetSideBySide.prototype._getOriginalEditorDecorations = function (lineChanges, ignoreTrimWhitespace, renderIndicators, originalEditor, modifiedEditor) {\n    var overviewZoneColor = String(this._removeColor);\n    var result = {\n      decorations: [],\n      overviewZones: []\n    };\n    var originalModel = originalEditor.getModel();\n\n    for (var i = 0, length_6 = lineChanges.length; i < length_6; i++) {\n      var lineChange = lineChanges[i];\n\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, Number.MAX_VALUE),\n          options: renderIndicators ? DECORATIONS.lineDeleteWithSign : DECORATIONS.lineDelete\n        });\n\n        if (!isChangeOrInsert(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, Number.MAX_VALUE, DECORATIONS.charDeleteWholeLine));\n        }\n\n        result.overviewZones.push(new OverviewRulerZone(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber, overviewZoneColor));\n\n        if (lineChange.charChanges) {\n          for (var j = 0, lengthJ = lineChange.charChanges.length; j < lengthJ; j++) {\n            var charChange = lineChange.charChanges[j];\n\n            if (isChangeOrDelete(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (var lineNumber = charChange.originalStartLineNumber; lineNumber <= charChange.originalEndLineNumber; lineNumber++) {\n                  var startColumn = void 0;\n                  var endColumn = void 0;\n\n                  if (lineNumber === charChange.originalStartLineNumber) {\n                    startColumn = charChange.originalStartColumn;\n                  } else {\n                    startColumn = originalModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n\n                  if (lineNumber === charChange.originalEndLineNumber) {\n                    endColumn = charChange.originalEndColumn;\n                  } else {\n                    endColumn = originalModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charDelete));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn, DECORATIONS.charDelete));\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  DiffEditorWidgetSideBySide.prototype._getModifiedEditorDecorations = function (lineChanges, ignoreTrimWhitespace, renderIndicators, originalEditor, modifiedEditor) {\n    var overviewZoneColor = String(this._insertColor);\n    var result = {\n      decorations: [],\n      overviewZones: []\n    };\n    var modifiedModel = modifiedEditor.getModel();\n\n    for (var i = 0, length_7 = lineChanges.length; i < length_7; i++) {\n      var lineChange = lineChanges[i];\n\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, Number.MAX_VALUE),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n\n        if (!isChangeOrDelete(lineChange) || !lineChange.charChanges) {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, Number.MAX_VALUE, DECORATIONS.charInsertWholeLine));\n        }\n\n        result.overviewZones.push(new OverviewRulerZone(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber, overviewZoneColor));\n\n        if (lineChange.charChanges) {\n          for (var j = 0, lengthJ = lineChange.charChanges.length; j < lengthJ; j++) {\n            var charChange = lineChange.charChanges[j];\n\n            if (isChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (var lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  var startColumn = void 0;\n                  var endColumn = void 0;\n\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return result;\n  };\n\n  DiffEditorWidgetSideBySide.MINIMUM_EDITOR_WIDTH = 100;\n  return DiffEditorWidgetSideBySide;\n}(DiffEditorWidgetStyle);\n\nvar SideBySideViewZonesComputer =\n/** @class */\nfunction (_super) {\n  __extends(SideBySideViewZonesComputer, _super);\n\n  function SideBySideViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ) {\n    return _super.call(this, lineChanges, originalForeignVZ, modifiedForeignVZ) || this;\n  }\n\n  SideBySideViewZonesComputer.prototype._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion = function () {\n    return null;\n  };\n\n  SideBySideViewZonesComputer.prototype._produceOriginalFromDiff = function (lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeModifiedLength > lineChangeOriginalLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n        heightInLines: lineChangeModifiedLength - lineChangeOriginalLength,\n        domNode: null\n      };\n    }\n\n    return null;\n  };\n\n  SideBySideViewZonesComputer.prototype._produceModifiedFromDiff = function (lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    if (lineChangeOriginalLength > lineChangeModifiedLength) {\n      return {\n        afterLineNumber: Math.max(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber),\n        heightInLines: lineChangeOriginalLength - lineChangeModifiedLength,\n        domNode: null\n      };\n    }\n\n    return null;\n  };\n\n  return SideBySideViewZonesComputer;\n}(ViewZonesComputer);\n\nvar DiffEditorWidgetInline =\n/** @class */\nfunction (_super) {\n  __extends(DiffEditorWidgetInline, _super);\n\n  function DiffEditorWidgetInline(dataSource, enableSplitViewResizing) {\n    var _this = _super.call(this, dataSource) || this;\n\n    _this.decorationsLeft = dataSource.getOriginalEditor().getLayoutInfo().decorationsLeft;\n\n    _this._register(dataSource.getOriginalEditor().onDidLayoutChange(function (layoutInfo) {\n      if (_this.decorationsLeft !== layoutInfo.decorationsLeft) {\n        _this.decorationsLeft = layoutInfo.decorationsLeft;\n        dataSource.relayoutEditors();\n      }\n    }));\n\n    return _this;\n  }\n\n  DiffEditorWidgetInline.prototype.setEnableSplitViewResizing = function (enableSplitViewResizing) {// Nothing to do..\n  };\n\n  DiffEditorWidgetInline.prototype._getViewZones = function (lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n    var computer = new InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators);\n    return computer.getViewZones();\n  };\n\n  DiffEditorWidgetInline.prototype._getOriginalEditorDecorations = function (lineChanges, ignoreTrimWhitespace, renderIndicators, originalEditor, modifiedEditor) {\n    var overviewZoneColor = String(this._removeColor);\n    var result = {\n      decorations: [],\n      overviewZones: []\n    };\n\n    for (var i = 0, length_8 = lineChanges.length; i < length_8; i++) {\n      var lineChange = lineChanges[i]; // Add overview zones in the overview ruler\n\n      if (isChangeOrDelete(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.originalStartLineNumber, 1, lineChange.originalEndLineNumber, Number.MAX_VALUE),\n          options: DECORATIONS.lineDeleteMargin\n        });\n        result.overviewZones.push(new OverviewRulerZone(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber, overviewZoneColor));\n      }\n    }\n\n    return result;\n  };\n\n  DiffEditorWidgetInline.prototype._getModifiedEditorDecorations = function (lineChanges, ignoreTrimWhitespace, renderIndicators, originalEditor, modifiedEditor) {\n    var overviewZoneColor = String(this._insertColor);\n    var result = {\n      decorations: [],\n      overviewZones: []\n    };\n    var modifiedModel = modifiedEditor.getModel();\n\n    for (var i = 0, length_9 = lineChanges.length; i < length_9; i++) {\n      var lineChange = lineChanges[i]; // Add decorations & overview zones\n\n      if (isChangeOrInsert(lineChange)) {\n        result.decorations.push({\n          range: new Range(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, Number.MAX_VALUE),\n          options: renderIndicators ? DECORATIONS.lineInsertWithSign : DECORATIONS.lineInsert\n        });\n        result.overviewZones.push(new OverviewRulerZone(lineChange.modifiedStartLineNumber, lineChange.modifiedEndLineNumber, overviewZoneColor));\n\n        if (lineChange.charChanges) {\n          for (var j = 0, lengthJ = lineChange.charChanges.length; j < lengthJ; j++) {\n            var charChange = lineChange.charChanges[j];\n\n            if (isChangeOrInsert(charChange)) {\n              if (ignoreTrimWhitespace) {\n                for (var lineNumber = charChange.modifiedStartLineNumber; lineNumber <= charChange.modifiedEndLineNumber; lineNumber++) {\n                  var startColumn = void 0;\n                  var endColumn = void 0;\n\n                  if (lineNumber === charChange.modifiedStartLineNumber) {\n                    startColumn = charChange.modifiedStartColumn;\n                  } else {\n                    startColumn = modifiedModel.getLineFirstNonWhitespaceColumn(lineNumber);\n                  }\n\n                  if (lineNumber === charChange.modifiedEndLineNumber) {\n                    endColumn = charChange.modifiedEndColumn;\n                  } else {\n                    endColumn = modifiedModel.getLineLastNonWhitespaceColumn(lineNumber);\n                  }\n\n                  result.decorations.push(createDecoration(lineNumber, startColumn, lineNumber, endColumn, DECORATIONS.charInsert));\n                }\n              } else {\n                result.decorations.push(createDecoration(charChange.modifiedStartLineNumber, charChange.modifiedStartColumn, charChange.modifiedEndLineNumber, charChange.modifiedEndColumn, DECORATIONS.charInsert));\n              }\n            }\n          }\n        } else {\n          result.decorations.push(createDecoration(lineChange.modifiedStartLineNumber, 1, lineChange.modifiedEndLineNumber, Number.MAX_VALUE, DECORATIONS.charInsertWholeLine));\n        }\n      }\n    }\n\n    return result;\n  };\n\n  DiffEditorWidgetInline.prototype.layout = function () {\n    // An editor should not be smaller than 5px\n    return Math.max(5, this.decorationsLeft);\n  };\n\n  return DiffEditorWidgetInline;\n}(DiffEditorWidgetStyle);\n\nvar InlineViewZonesComputer =\n/** @class */\nfunction (_super) {\n  __extends(InlineViewZonesComputer, _super);\n\n  function InlineViewZonesComputer(lineChanges, originalForeignVZ, modifiedForeignVZ, originalEditor, modifiedEditor, renderIndicators) {\n    var _this = _super.call(this, lineChanges, originalForeignVZ, modifiedForeignVZ) || this;\n\n    _this.originalModel = originalEditor.getModel();\n    _this.modifiedEditorConfiguration = modifiedEditor.getConfiguration();\n    _this.modifiedEditorTabSize = modifiedEditor.getModel().getOptions().tabSize;\n    _this.renderIndicators = renderIndicators;\n    return _this;\n  }\n\n  InlineViewZonesComputer.prototype._createOriginalMarginDomNodeForModifiedForeignViewZoneInAddedRegion = function () {\n    var result = document.createElement('div');\n    result.className = 'inline-added-margin-view-zone';\n    return result;\n  };\n\n  InlineViewZonesComputer.prototype._produceOriginalFromDiff = function (lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    var marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-added-margin-view-zone';\n    return {\n      afterLineNumber: Math.max(lineChange.originalStartLineNumber, lineChange.originalEndLineNumber),\n      heightInLines: lineChangeModifiedLength,\n      domNode: document.createElement('div'),\n      marginDomNode: marginDomNode\n    };\n  };\n\n  InlineViewZonesComputer.prototype._produceModifiedFromDiff = function (lineChange, lineChangeOriginalLength, lineChangeModifiedLength) {\n    var decorations = [];\n\n    if (lineChange.charChanges) {\n      for (var j = 0, lengthJ = lineChange.charChanges.length; j < lengthJ; j++) {\n        var charChange = lineChange.charChanges[j];\n\n        if (isChangeOrDelete(charChange)) {\n          decorations.push(new InlineDecoration(new Range(charChange.originalStartLineNumber, charChange.originalStartColumn, charChange.originalEndLineNumber, charChange.originalEndColumn), 'char-delete', 0\n          /* Regular */\n          ));\n        }\n      }\n    }\n\n    var sb = createStringBuilder(10000);\n    var marginHTML = [];\n    var lineDecorationsWidth = this.modifiedEditorConfiguration.layoutInfo.decorationsWidth;\n    var lineHeight = this.modifiedEditorConfiguration.lineHeight;\n    var typicalHalfwidthCharacterWidth = this.modifiedEditorConfiguration.fontInfo.typicalHalfwidthCharacterWidth;\n    var maxCharsPerLine = 0;\n    var originalContent = [];\n\n    for (var lineNumber = lineChange.originalStartLineNumber; lineNumber <= lineChange.originalEndLineNumber; lineNumber++) {\n      maxCharsPerLine = Math.max(maxCharsPerLine, this._renderOriginalLine(lineNumber - lineChange.originalStartLineNumber, this.originalModel, this.modifiedEditorConfiguration, this.modifiedEditorTabSize, lineNumber, decorations, sb));\n      originalContent.push(this.originalModel.getLineContent(lineNumber));\n\n      if (this.renderIndicators) {\n        var index = lineNumber - lineChange.originalStartLineNumber;\n        marginHTML = marginHTML.concat([\"<div class=\\\"delete-sign\\\" style=\\\"position:absolute;top:\" + index * lineHeight + \"px;width:\" + lineDecorationsWidth + \"px;height:\" + lineHeight + \"px;right:0;\\\"></div>\"]);\n      }\n    }\n\n    maxCharsPerLine += this.modifiedEditorConfiguration.viewInfo.scrollBeyondLastColumn;\n    var domNode = document.createElement('div');\n    domNode.className = 'view-lines line-delete';\n    domNode.innerHTML = sb.build();\n    Configuration.applyFontInfoSlow(domNode, this.modifiedEditorConfiguration.fontInfo);\n    var marginDomNode = document.createElement('div');\n    marginDomNode.className = 'inline-deleted-margin-view-zone';\n    marginDomNode.innerHTML = marginHTML.join('');\n    Configuration.applyFontInfoSlow(marginDomNode, this.modifiedEditorConfiguration.fontInfo);\n    return {\n      shouldNotShrink: true,\n      afterLineNumber: lineChange.modifiedEndLineNumber === 0 ? lineChange.modifiedStartLineNumber : lineChange.modifiedStartLineNumber - 1,\n      heightInLines: lineChangeOriginalLength,\n      minWidthInPx: maxCharsPerLine * typicalHalfwidthCharacterWidth,\n      domNode: domNode,\n      marginDomNode: marginDomNode,\n      diff: {\n        originalStartLineNumber: lineChange.originalStartLineNumber,\n        originalEndLineNumber: lineChange.originalEndLineNumber,\n        modifiedStartLineNumber: lineChange.modifiedStartLineNumber,\n        modifiedEndLineNumber: lineChange.modifiedEndLineNumber,\n        originalContent: originalContent\n      }\n    };\n  };\n\n  InlineViewZonesComputer.prototype._renderOriginalLine = function (count, originalModel, config, tabSize, lineNumber, decorations, sb) {\n    var lineTokens = originalModel.getLineTokens(lineNumber);\n    var lineContent = lineTokens.getLineContent();\n    var actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, lineContent.length + 1);\n    sb.appendASCIIString('<div class=\"view-line');\n\n    if (decorations.length === 0) {\n      // No char changes\n      sb.appendASCIIString(' char-delete');\n    }\n\n    sb.appendASCIIString('\" style=\"top:');\n    sb.appendASCIIString(String(count * config.lineHeight));\n    sb.appendASCIIString('px;width:1000000px;\">');\n    var isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, originalModel.mightContainNonBasicASCII());\n    var containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, originalModel.mightContainRTL());\n    var output = renderViewLine(new RenderLineInput(config.fontInfo.isMonospace && !config.viewInfo.disableMonospaceOptimizations, config.fontInfo.canUseHalfwidthRightwardsArrow, lineContent, false, isBasicASCII, containsRTL, 0, lineTokens, actualDecorations, tabSize, config.fontInfo.spaceWidth, config.viewInfo.stopRenderingLineAfter, config.viewInfo.renderWhitespace, config.viewInfo.renderControlCharacters, config.viewInfo.fontLigatures, null // Send no selections, original line cannot be selected\n    ), sb);\n    sb.appendASCIIString('</div>');\n    var absoluteOffsets = output.characterMapping.getAbsoluteOffsets();\n    return absoluteOffsets.length > 0 ? absoluteOffsets[absoluteOffsets.length - 1] : 0;\n  };\n\n  return InlineViewZonesComputer;\n}(ViewZonesComputer);\n\nfunction isChangeOrInsert(lineChange) {\n  return lineChange.modifiedEndLineNumber > 0;\n}\n\nfunction isChangeOrDelete(lineChange) {\n  return lineChange.originalEndLineNumber > 0;\n}\n\nfunction createFakeLinesDiv() {\n  var r = document.createElement('div');\n  r.className = 'diagonal-fill';\n  return r;\n}\n\nregisterThemingParticipant(function (theme, collector) {\n  var added = theme.getColor(diffInserted);\n\n  if (added) {\n    collector.addRule(\".monaco-editor .line-insert, .monaco-editor .char-insert { background-color: \" + added + \"; }\");\n    collector.addRule(\".monaco-diff-editor .line-insert, .monaco-diff-editor .char-insert { background-color: \" + added + \"; }\");\n    collector.addRule(\".monaco-editor .inline-added-margin-view-zone { background-color: \" + added + \"; }\");\n  }\n\n  var removed = theme.getColor(diffRemoved);\n\n  if (removed) {\n    collector.addRule(\".monaco-editor .line-delete, .monaco-editor .char-delete { background-color: \" + removed + \"; }\");\n    collector.addRule(\".monaco-diff-editor .line-delete, .monaco-diff-editor .char-delete { background-color: \" + removed + \"; }\");\n    collector.addRule(\".monaco-editor .inline-deleted-margin-view-zone { background-color: \" + removed + \"; }\");\n  }\n\n  var addedOutline = theme.getColor(diffInsertedOutline);\n\n  if (addedOutline) {\n    collector.addRule(\".monaco-editor .line-insert, .monaco-editor .char-insert { border: 1px \" + (theme.type === 'hc' ? 'dashed' : 'solid') + \" \" + addedOutline + \"; }\");\n  }\n\n  var removedOutline = theme.getColor(diffRemovedOutline);\n\n  if (removedOutline) {\n    collector.addRule(\".monaco-editor .line-delete, .monaco-editor .char-delete { border: 1px \" + (theme.type === 'hc' ? 'dashed' : 'solid') + \" \" + removedOutline + \"; }\");\n  }\n\n  var shadow = theme.getColor(scrollbarShadow);\n\n  if (shadow) {\n    collector.addRule(\".monaco-diff-editor.side-by-side .editor.modified { box-shadow: -6px 0 5px -5px \" + shadow + \"; }\");\n  }\n\n  var border = theme.getColor(diffBorder);\n\n  if (border) {\n    collector.addRule(\".monaco-diff-editor.side-by-side .editor.modified { border-left: 1px solid \" + border + \"; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}