{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../common/core/range.js';\n\nvar ReplaceAllCommand =\n/** @class */\nfunction () {\n  function ReplaceAllCommand(editorSelection, ranges, replaceStrings) {\n    this._editorSelection = editorSelection;\n    this._ranges = ranges;\n    this._replaceStrings = replaceStrings;\n    this._trackedEditorSelectionId = null;\n  }\n\n  ReplaceAllCommand.prototype.getEditOperations = function (model, builder) {\n    if (this._ranges.length > 0) {\n      // Collect all edit operations\n      var ops = [];\n\n      for (var i = 0; i < this._ranges.length; i++) {\n        ops.push({\n          range: this._ranges[i],\n          text: this._replaceStrings[i]\n        });\n      } // Sort them in ascending order by range starts\n\n\n      ops.sort(function (o1, o2) {\n        return Range.compareRangesUsingStarts(o1.range, o2.range);\n      }); // Merge operations that touch each other\n\n      var resultOps = [];\n      var previousOp = ops[0];\n\n      for (var i = 1; i < ops.length; i++) {\n        if (previousOp.range.endLineNumber === ops[i].range.startLineNumber && previousOp.range.endColumn === ops[i].range.startColumn) {\n          // These operations are one after another and can be merged\n          previousOp.range = previousOp.range.plusRange(ops[i].range);\n          previousOp.text = previousOp.text + ops[i].text;\n        } else {\n          resultOps.push(previousOp);\n          previousOp = ops[i];\n        }\n      }\n\n      resultOps.push(previousOp);\n\n      for (var _i = 0, resultOps_1 = resultOps; _i < resultOps_1.length; _i++) {\n        var op = resultOps_1[_i];\n        builder.addEditOperation(op.range, op.text);\n      }\n    }\n\n    this._trackedEditorSelectionId = builder.trackSelection(this._editorSelection);\n  };\n\n  ReplaceAllCommand.prototype.computeCursorState = function (model, helper) {\n    return helper.getTrackedSelection(this._trackedEditorSelectionId);\n  };\n\n  return ReplaceAllCommand;\n}();\n\nexport { ReplaceAllCommand };","map":null,"metadata":{},"sourceType":"module"}