{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isFunction } from '../../../common/types.js';\n\nvar DataSource =\n/** @class */\nfunction () {\n  function DataSource(arg) {\n    this.modelProvider = isFunction(arg.getModel) ? arg : {\n      getModel: function () {\n        return arg;\n      }\n    };\n  }\n\n  DataSource.prototype.getId = function (tree, element) {\n    if (!element) {\n      return null;\n    }\n\n    var model = this.modelProvider.getModel();\n    return model === element ? '__root__' : model.dataSource.getId(element);\n  };\n\n  DataSource.prototype.hasChildren = function (tree, element) {\n    var model = this.modelProvider.getModel();\n    return !!(model && model === element && model.entries.length > 0);\n  };\n\n  DataSource.prototype.getChildren = function (tree, element) {\n    var model = this.modelProvider.getModel();\n    return Promise.resolve(model === element ? model.entries : []);\n  };\n\n  DataSource.prototype.getParent = function (tree, element) {\n    return Promise.resolve(null);\n  };\n\n  return DataSource;\n}();\n\nexport { DataSource };\n\nvar AccessibilityProvider =\n/** @class */\nfunction () {\n  function AccessibilityProvider(modelProvider) {\n    this.modelProvider = modelProvider;\n  }\n\n  AccessibilityProvider.prototype.getAriaLabel = function (tree, element) {\n    var model = this.modelProvider.getModel();\n    return model.accessibilityProvider ? model.accessibilityProvider.getAriaLabel(element) : null;\n  };\n\n  AccessibilityProvider.prototype.getPosInSet = function (tree, element) {\n    var model = this.modelProvider.getModel();\n    var i = 0;\n\n    if (model.filter) {\n      for (var _i = 0, _a = model.entries; _i < _a.length; _i++) {\n        var entry = _a[_i];\n\n        if (model.filter.isVisible(entry)) {\n          i++;\n        }\n\n        if (entry === element) {\n          break;\n        }\n      }\n    } else {\n      i = model.entries.indexOf(element) + 1;\n    }\n\n    return String(i);\n  };\n\n  AccessibilityProvider.prototype.getSetSize = function () {\n    var model = this.modelProvider.getModel();\n    var n = 0;\n\n    if (model.filter) {\n      for (var _i = 0, _a = model.entries; _i < _a.length; _i++) {\n        var entry = _a[_i];\n\n        if (model.filter.isVisible(entry)) {\n          n++;\n        }\n      }\n    } else {\n      n = model.entries.length;\n    }\n\n    return String(n);\n  };\n\n  return AccessibilityProvider;\n}();\n\nexport { AccessibilityProvider };\n\nvar Filter =\n/** @class */\nfunction () {\n  function Filter(modelProvider) {\n    this.modelProvider = modelProvider;\n  }\n\n  Filter.prototype.isVisible = function (tree, element) {\n    var model = this.modelProvider.getModel();\n\n    if (!model.filter) {\n      return true;\n    }\n\n    return model.filter.isVisible(element);\n  };\n\n  return Filter;\n}();\n\nexport { Filter };\n\nvar Renderer =\n/** @class */\nfunction () {\n  function Renderer(modelProvider, styles) {\n    this.modelProvider = modelProvider;\n    this.styles = styles;\n  }\n\n  Renderer.prototype.updateStyles = function (styles) {\n    this.styles = styles;\n  };\n\n  Renderer.prototype.getHeight = function (tree, element) {\n    var model = this.modelProvider.getModel();\n    return model.renderer.getHeight(element);\n  };\n\n  Renderer.prototype.getTemplateId = function (tree, element) {\n    var model = this.modelProvider.getModel();\n    return model.renderer.getTemplateId(element);\n  };\n\n  Renderer.prototype.renderTemplate = function (tree, templateId, container) {\n    var model = this.modelProvider.getModel();\n    return model.renderer.renderTemplate(templateId, container, this.styles);\n  };\n\n  Renderer.prototype.renderElement = function (tree, element, templateId, templateData) {\n    var model = this.modelProvider.getModel();\n    model.renderer.renderElement(element, templateId, templateData, this.styles);\n  };\n\n  Renderer.prototype.disposeTemplate = function (tree, templateId, templateData) {\n    var model = this.modelProvider.getModel();\n    model.renderer.disposeTemplate(templateId, templateData);\n  };\n\n  return Renderer;\n}();\n\nexport { Renderer };","map":null,"metadata":{},"sourceType":"module"}