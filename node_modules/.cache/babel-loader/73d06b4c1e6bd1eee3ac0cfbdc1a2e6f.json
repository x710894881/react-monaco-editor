{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { Parser } from './parser/cssParser.js';\nimport { CSSCompletion } from './services/cssCompletion.js';\nimport { CSSHover } from './services/cssHover.js';\nimport { CSSNavigation } from './services/cssNavigation.js';\nimport { CSSCodeActions } from './services/cssCodeActions.js';\nimport { CSSValidation } from './services/cssValidation.js';\nimport { SCSSParser } from './parser/scssParser.js';\nimport { SCSSCompletion } from './services/scssCompletion.js';\nimport { LESSParser } from './parser/lessParser.js';\nimport { LESSCompletion } from './services/lessCompletion.js';\nimport { getFoldingRanges } from './services/cssFolding.js';\nimport { cssDataManager } from './languageFacts/facts.js';\nimport { getSelectionRanges } from './services/cssSelectionRange.js';\nexport * from './cssLanguageTypes.js';\nexport * from '../vscode-languageserver-types/main.js';\n\nfunction createFacade(parser, completion, hover, navigation, codeActions, validation) {\n  return {\n    configure: validation.configure.bind(validation),\n    doValidation: validation.doValidation.bind(validation),\n    parseStylesheet: parser.parseStylesheet.bind(parser),\n    doComplete: completion.doComplete.bind(completion),\n    setCompletionParticipants: completion.setCompletionParticipants.bind(completion),\n    doHover: hover.doHover.bind(hover),\n    findDefinition: navigation.findDefinition.bind(navigation),\n    findReferences: navigation.findReferences.bind(navigation),\n    findDocumentHighlights: navigation.findDocumentHighlights.bind(navigation),\n    findDocumentLinks: navigation.findDocumentLinks.bind(navigation),\n    findDocumentSymbols: navigation.findDocumentSymbols.bind(navigation),\n    doCodeActions: codeActions.doCodeActions.bind(codeActions),\n    doCodeActions2: codeActions.doCodeActions2.bind(codeActions),\n    findColorSymbols: function (d, s) {\n      return navigation.findDocumentColors(d, s).map(function (s) {\n        return s.range;\n      });\n    },\n    findDocumentColors: navigation.findDocumentColors.bind(navigation),\n    getColorPresentations: navigation.getColorPresentations.bind(navigation),\n    doRename: navigation.doRename.bind(navigation),\n    getFoldingRanges: getFoldingRanges,\n    getSelectionRanges: getSelectionRanges\n  };\n}\n\nfunction handleCustomData(options) {\n  if (options && options.customDataProviders) {\n    cssDataManager.addDataProviders(options.customDataProviders);\n  }\n}\n\nexport function getCSSLanguageService(options) {\n  handleCustomData(options);\n  return createFacade(new Parser(), new CSSCompletion(), new CSSHover(), new CSSNavigation(), new CSSCodeActions(), new CSSValidation());\n}\nexport function getSCSSLanguageService(options) {\n  handleCustomData(options);\n  return createFacade(new SCSSParser(), new SCSSCompletion(), new CSSHover(), new CSSNavigation(), new CSSCodeActions(), new CSSValidation());\n}\nexport function getLESSLanguageService(options) {\n  handleCustomData(options);\n  return createFacade(new LESSParser(), new LESSCompletion(), new CSSHover(), new CSSNavigation(), new CSSCodeActions(), new CSSValidation());\n}","map":null,"metadata":{},"sourceType":"module"}