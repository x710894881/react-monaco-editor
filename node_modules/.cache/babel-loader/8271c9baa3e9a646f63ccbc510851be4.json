{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { InlineDecoration, ViewModelDecoration } from './viewModel.js';\n\nvar ViewModelDecorations =\n/** @class */\nfunction () {\n  function ViewModelDecorations(editorId, model, configuration, linesCollection, coordinatesConverter) {\n    this.editorId = editorId;\n    this.model = model;\n    this.configuration = configuration;\n    this._linesCollection = linesCollection;\n    this._coordinatesConverter = coordinatesConverter;\n    this._decorationsCache = Object.create(null);\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  }\n\n  ViewModelDecorations.prototype._clearCachedModelDecorationsResolver = function () {\n    this._cachedModelDecorationsResolver = null;\n    this._cachedModelDecorationsResolverViewRange = null;\n  };\n\n  ViewModelDecorations.prototype.dispose = function () {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  };\n\n  ViewModelDecorations.prototype.reset = function () {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  };\n\n  ViewModelDecorations.prototype.onModelDecorationsChanged = function () {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  };\n\n  ViewModelDecorations.prototype.onLineMappingChanged = function () {\n    this._decorationsCache = Object.create(null);\n\n    this._clearCachedModelDecorationsResolver();\n  };\n\n  ViewModelDecorations.prototype._getOrCreateViewModelDecoration = function (modelDecoration) {\n    var id = modelDecoration.id;\n    var r = this._decorationsCache[id];\n\n    if (!r) {\n      var modelRange = modelDecoration.range;\n      var options = modelDecoration.options;\n      var viewRange = void 0;\n\n      if (options.isWholeLine) {\n        var start = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.startLineNumber, 1));\n\n        var end = this._coordinatesConverter.convertModelPositionToViewPosition(new Position(modelRange.endLineNumber, this.model.getLineMaxColumn(modelRange.endLineNumber)));\n\n        viewRange = new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n      } else {\n        viewRange = this._coordinatesConverter.convertModelRangeToViewRange(modelRange);\n      }\n\n      r = new ViewModelDecoration(viewRange, options);\n      this._decorationsCache[id] = r;\n    }\n\n    return r;\n  };\n\n  ViewModelDecorations.prototype.getDecorationsViewportData = function (viewRange) {\n    var cacheIsValid = this._cachedModelDecorationsResolver !== null;\n    cacheIsValid = cacheIsValid && viewRange.equalsRange(this._cachedModelDecorationsResolverViewRange);\n\n    if (!cacheIsValid) {\n      this._cachedModelDecorationsResolver = this._getDecorationsViewportData(viewRange);\n      this._cachedModelDecorationsResolverViewRange = viewRange;\n    }\n\n    return this._cachedModelDecorationsResolver;\n  };\n\n  ViewModelDecorations.prototype._getDecorationsViewportData = function (viewportRange) {\n    var modelDecorations = this._linesCollection.getDecorationsInRange(viewportRange, this.editorId, this.configuration.editor.readOnly);\n\n    var startLineNumber = viewportRange.startLineNumber;\n    var endLineNumber = viewportRange.endLineNumber;\n    var decorationsInViewport = [],\n        decorationsInViewportLen = 0;\n    var inlineDecorations = [];\n\n    for (var j = startLineNumber; j <= endLineNumber; j++) {\n      inlineDecorations[j - startLineNumber] = [];\n    }\n\n    for (var i = 0, len = modelDecorations.length; i < len; i++) {\n      var modelDecoration = modelDecorations[i];\n      var decorationOptions = modelDecoration.options;\n\n      var viewModelDecoration = this._getOrCreateViewModelDecoration(modelDecoration);\n\n      var viewRange = viewModelDecoration.range;\n      decorationsInViewport[decorationsInViewportLen++] = viewModelDecoration;\n\n      if (decorationOptions.inlineClassName) {\n        var inlineDecoration = new InlineDecoration(viewRange, decorationOptions.inlineClassName, decorationOptions.inlineClassNameAffectsLetterSpacing ? 3\n        /* RegularAffectingLetterSpacing */\n        : 0\n        /* Regular */\n        );\n        var intersectedStartLineNumber = Math.max(startLineNumber, viewRange.startLineNumber);\n        var intersectedEndLineNumber = Math.min(endLineNumber, viewRange.endLineNumber);\n\n        for (var j = intersectedStartLineNumber; j <= intersectedEndLineNumber; j++) {\n          inlineDecorations[j - startLineNumber].push(inlineDecoration);\n        }\n      }\n\n      if (decorationOptions.beforeContentClassName) {\n        if (startLineNumber <= viewRange.startLineNumber && viewRange.startLineNumber <= endLineNumber) {\n          var inlineDecoration = new InlineDecoration(new Range(viewRange.startLineNumber, viewRange.startColumn, viewRange.startLineNumber, viewRange.startColumn), decorationOptions.beforeContentClassName, 1\n          /* Before */\n          );\n          inlineDecorations[viewRange.startLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n\n      if (decorationOptions.afterContentClassName) {\n        if (startLineNumber <= viewRange.endLineNumber && viewRange.endLineNumber <= endLineNumber) {\n          var inlineDecoration = new InlineDecoration(new Range(viewRange.endLineNumber, viewRange.endColumn, viewRange.endLineNumber, viewRange.endColumn), decorationOptions.afterContentClassName, 2\n          /* After */\n          );\n          inlineDecorations[viewRange.endLineNumber - startLineNumber].push(inlineDecoration);\n        }\n      }\n    }\n\n    return {\n      decorations: decorationsInViewport,\n      inlineDecorations: inlineDecorations\n    };\n  };\n\n  return ViewModelDecorations;\n}();\n\nexport { ViewModelDecorations };","map":null,"metadata":{},"sourceType":"module"}