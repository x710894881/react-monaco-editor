{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './currentLineHighlight.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { editorLineHighlight, editorLineHighlightBorder } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\n\nvar CurrentLineHighlightOverlay =\n/** @class */\nfunction (_super) {\n  __extends(CurrentLineHighlightOverlay, _super);\n\n  function CurrentLineHighlightOverlay(context) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n    _this._lineHeight = _this._context.configuration.editor.lineHeight;\n    _this._renderLineHighlight = _this._context.configuration.editor.viewInfo.renderLineHighlight;\n    _this._selectionIsEmpty = true;\n    _this._primaryCursorLineNumber = 1;\n    _this._scrollWidth = 0;\n    _this._contentWidth = _this._context.configuration.editor.layoutInfo.contentWidth;\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  CurrentLineHighlightOverlay.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  CurrentLineHighlightOverlay.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._lineHeight = this._context.configuration.editor.lineHeight;\n    }\n\n    if (e.viewInfo) {\n      this._renderLineHighlight = this._context.configuration.editor.viewInfo.renderLineHighlight;\n    }\n\n    if (e.layoutInfo) {\n      this._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;\n    }\n\n    return true;\n  };\n\n  CurrentLineHighlightOverlay.prototype.onCursorStateChanged = function (e) {\n    var hasChanged = false;\n    var primaryCursorLineNumber = e.selections[0].positionLineNumber;\n\n    if (this._primaryCursorLineNumber !== primaryCursorLineNumber) {\n      this._primaryCursorLineNumber = primaryCursorLineNumber;\n      hasChanged = true;\n    }\n\n    var selectionIsEmpty = e.selections[0].isEmpty();\n\n    if (this._selectionIsEmpty !== selectionIsEmpty) {\n      this._selectionIsEmpty = selectionIsEmpty;\n      return true;\n    }\n\n    return hasChanged;\n  };\n\n  CurrentLineHighlightOverlay.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  CurrentLineHighlightOverlay.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  CurrentLineHighlightOverlay.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  CurrentLineHighlightOverlay.prototype.onScrollChanged = function (e) {\n    return e.scrollWidthChanged;\n  };\n\n  CurrentLineHighlightOverlay.prototype.onZonesChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n\n\n  CurrentLineHighlightOverlay.prototype.prepareRender = function (ctx) {\n    this._scrollWidth = ctx.scrollWidth;\n  };\n\n  CurrentLineHighlightOverlay.prototype.render = function (startLineNumber, lineNumber) {\n    if (lineNumber === this._primaryCursorLineNumber) {\n      if (this._shouldShowCurrentLine()) {\n        var paintedInMargin = this._willRenderMarginCurrentLine();\n\n        var className = 'current-line' + (paintedInMargin ? ' current-line-both' : '');\n        return '<div class=\"' + className + '\" style=\"width:' + String(Math.max(this._scrollWidth, this._contentWidth)) + 'px; height:' + String(this._lineHeight) + 'px;\"></div>';\n      } else {\n        return '';\n      }\n    }\n\n    return '';\n  };\n\n  CurrentLineHighlightOverlay.prototype._shouldShowCurrentLine = function () {\n    return (this._renderLineHighlight === 'line' || this._renderLineHighlight === 'all') && this._selectionIsEmpty;\n  };\n\n  CurrentLineHighlightOverlay.prototype._willRenderMarginCurrentLine = function () {\n    return this._renderLineHighlight === 'gutter' || this._renderLineHighlight === 'all';\n  };\n\n  return CurrentLineHighlightOverlay;\n}(DynamicViewOverlay);\n\nexport { CurrentLineHighlightOverlay };\nregisterThemingParticipant(function (theme, collector) {\n  var lineHighlight = theme.getColor(editorLineHighlight);\n\n  if (lineHighlight) {\n    collector.addRule(\".monaco-editor .view-overlays .current-line { background-color: \" + lineHighlight + \"; }\");\n  }\n\n  if (!lineHighlight || lineHighlight.isTransparent() || theme.defines(editorLineHighlightBorder)) {\n    var lineHighlightBorder = theme.getColor(editorLineHighlightBorder);\n\n    if (lineHighlightBorder) {\n      collector.addRule(\".monaco-editor .view-overlays .current-line { border: 2px solid \" + lineHighlightBorder + \"; }\");\n\n      if (theme.type === 'hc') {\n        collector.addRule(\".monaco-editor .view-overlays .current-line { border-width: 1px; }\");\n      }\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}