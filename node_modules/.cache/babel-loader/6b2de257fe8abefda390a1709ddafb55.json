{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { EDITOR_MODEL_DEFAULTS } from '../config/editorOptions.js';\nimport { TextModel } from '../model/textModel.js';\nimport { PLAINTEXT_LANGUAGE_IDENTIFIER } from '../modes/modesRegistry.js';\nimport { ITextResourcePropertiesService } from './resourceConfiguration.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\n\nfunction MODEL_ID(resource) {\n  return resource.toString();\n}\n\nvar ModelData =\n/** @class */\nfunction () {\n  function ModelData(model, onWillDispose, onDidChangeLanguage) {\n    this._modelEventListeners = new DisposableStore();\n    this.model = model;\n    this._languageSelection = null;\n    this._languageSelectionListener = null;\n\n    this._modelEventListeners.add(model.onWillDispose(function () {\n      return onWillDispose(model);\n    }));\n\n    this._modelEventListeners.add(model.onDidChangeLanguage(function (e) {\n      return onDidChangeLanguage(model, e);\n    }));\n  }\n\n  ModelData.prototype._disposeLanguageSelection = function () {\n    if (this._languageSelectionListener) {\n      this._languageSelectionListener.dispose();\n\n      this._languageSelectionListener = null;\n    }\n\n    if (this._languageSelection) {\n      this._languageSelection.dispose();\n\n      this._languageSelection = null;\n    }\n  };\n\n  ModelData.prototype.dispose = function () {\n    this._modelEventListeners.dispose();\n\n    this._disposeLanguageSelection();\n  };\n\n  ModelData.prototype.setLanguage = function (languageSelection) {\n    var _this = this;\n\n    this._disposeLanguageSelection();\n\n    this._languageSelection = languageSelection;\n    this._languageSelectionListener = this._languageSelection.onDidChange(function () {\n      return _this.model.setMode(languageSelection.languageIdentifier);\n    });\n    this.model.setMode(languageSelection.languageIdentifier);\n  };\n\n  return ModelData;\n}();\n\nvar DEFAULT_EOL = platform.isLinux || platform.isMacintosh ? 1\n/* LF */\n: 2\n/* CRLF */\n;\n\nvar ModelServiceImpl =\n/** @class */\nfunction (_super) {\n  __extends(ModelServiceImpl, _super);\n\n  function ModelServiceImpl(configurationService, resourcePropertiesService) {\n    var _this = _super.call(this) || this;\n\n    _this._onModelAdded = _this._register(new Emitter());\n    _this.onModelAdded = _this._onModelAdded.event;\n    _this._onModelRemoved = _this._register(new Emitter());\n    _this.onModelRemoved = _this._onModelRemoved.event;\n    _this._onModelModeChanged = _this._register(new Emitter());\n    _this.onModelModeChanged = _this._onModelModeChanged.event;\n    _this._configurationService = configurationService;\n    _this._resourcePropertiesService = resourcePropertiesService;\n    _this._models = {};\n    _this._modelCreationOptionsByLanguageAndResource = Object.create(null);\n    _this._configurationServiceSubscription = _this._configurationService.onDidChangeConfiguration(function (e) {\n      return _this._updateModelOptions();\n    });\n\n    _this._updateModelOptions();\n\n    return _this;\n  }\n\n  ModelServiceImpl._readModelOptions = function (config, isForSimpleWidget) {\n    var tabSize = EDITOR_MODEL_DEFAULTS.tabSize;\n\n    if (config.editor && typeof config.editor.tabSize !== 'undefined') {\n      var parsedTabSize = parseInt(config.editor.tabSize, 10);\n\n      if (!isNaN(parsedTabSize)) {\n        tabSize = parsedTabSize;\n      }\n\n      if (tabSize < 1) {\n        tabSize = 1;\n      }\n    }\n\n    var indentSize = tabSize;\n\n    if (config.editor && typeof config.editor.indentSize !== 'undefined' && config.editor.indentSize !== 'tabSize') {\n      var parsedIndentSize = parseInt(config.editor.indentSize, 10);\n\n      if (!isNaN(parsedIndentSize)) {\n        indentSize = parsedIndentSize;\n      }\n\n      if (indentSize < 1) {\n        indentSize = 1;\n      }\n    }\n\n    var insertSpaces = EDITOR_MODEL_DEFAULTS.insertSpaces;\n\n    if (config.editor && typeof config.editor.insertSpaces !== 'undefined') {\n      insertSpaces = config.editor.insertSpaces === 'false' ? false : Boolean(config.editor.insertSpaces);\n    }\n\n    var newDefaultEOL = DEFAULT_EOL;\n    var eol = config.eol;\n\n    if (eol === '\\r\\n') {\n      newDefaultEOL = 2\n      /* CRLF */\n      ;\n    } else if (eol === '\\n') {\n      newDefaultEOL = 1\n      /* LF */\n      ;\n    }\n\n    var trimAutoWhitespace = EDITOR_MODEL_DEFAULTS.trimAutoWhitespace;\n\n    if (config.editor && typeof config.editor.trimAutoWhitespace !== 'undefined') {\n      trimAutoWhitespace = config.editor.trimAutoWhitespace === 'false' ? false : Boolean(config.editor.trimAutoWhitespace);\n    }\n\n    var detectIndentation = EDITOR_MODEL_DEFAULTS.detectIndentation;\n\n    if (config.editor && typeof config.editor.detectIndentation !== 'undefined') {\n      detectIndentation = config.editor.detectIndentation === 'false' ? false : Boolean(config.editor.detectIndentation);\n    }\n\n    var largeFileOptimizations = EDITOR_MODEL_DEFAULTS.largeFileOptimizations;\n\n    if (config.editor && typeof config.editor.largeFileOptimizations !== 'undefined') {\n      largeFileOptimizations = config.editor.largeFileOptimizations === 'false' ? false : Boolean(config.editor.largeFileOptimizations);\n    }\n\n    return {\n      isForSimpleWidget: isForSimpleWidget,\n      tabSize: tabSize,\n      indentSize: indentSize,\n      insertSpaces: insertSpaces,\n      detectIndentation: detectIndentation,\n      defaultEOL: newDefaultEOL,\n      trimAutoWhitespace: trimAutoWhitespace,\n      largeFileOptimizations: largeFileOptimizations\n    };\n  };\n\n  ModelServiceImpl.prototype.getCreationOptions = function (language, resource, isForSimpleWidget) {\n    var creationOptions = this._modelCreationOptionsByLanguageAndResource[language + resource];\n\n    if (!creationOptions) {\n      var editor = this._configurationService.getValue('editor', {\n        overrideIdentifier: language,\n        resource: resource\n      });\n\n      var eol = this._resourcePropertiesService.getEOL(resource, language);\n\n      creationOptions = ModelServiceImpl._readModelOptions({\n        editor: editor,\n        eol: eol\n      }, isForSimpleWidget);\n      this._modelCreationOptionsByLanguageAndResource[language + resource] = creationOptions;\n    }\n\n    return creationOptions;\n  };\n\n  ModelServiceImpl.prototype._updateModelOptions = function () {\n    var oldOptionsByLanguageAndResource = this._modelCreationOptionsByLanguageAndResource;\n    this._modelCreationOptionsByLanguageAndResource = Object.create(null); // Update options on all models\n\n    var keys = Object.keys(this._models);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var modelId = keys[i];\n      var modelData = this._models[modelId];\n      var language = modelData.model.getLanguageIdentifier().language;\n      var uri = modelData.model.uri;\n      var oldOptions = oldOptionsByLanguageAndResource[language + uri];\n      var newOptions = this.getCreationOptions(language, uri, modelData.model.isForSimpleWidget);\n\n      ModelServiceImpl._setModelOptionsForModel(modelData.model, newOptions, oldOptions);\n    }\n  };\n\n  ModelServiceImpl._setModelOptionsForModel = function (model, newOptions, currentOptions) {\n    if (currentOptions && currentOptions.detectIndentation === newOptions.detectIndentation && currentOptions.insertSpaces === newOptions.insertSpaces && currentOptions.tabSize === newOptions.tabSize && currentOptions.indentSize === newOptions.indentSize && currentOptions.trimAutoWhitespace === newOptions.trimAutoWhitespace) {\n      // Same indent opts, no need to touch the model\n      return;\n    }\n\n    if (newOptions.detectIndentation) {\n      model.detectIndentation(newOptions.insertSpaces, newOptions.tabSize);\n      model.updateOptions({\n        trimAutoWhitespace: newOptions.trimAutoWhitespace\n      });\n    } else {\n      model.updateOptions({\n        insertSpaces: newOptions.insertSpaces,\n        tabSize: newOptions.tabSize,\n        indentSize: newOptions.indentSize,\n        trimAutoWhitespace: newOptions.trimAutoWhitespace\n      });\n    }\n  };\n\n  ModelServiceImpl.prototype.dispose = function () {\n    this._configurationServiceSubscription.dispose();\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin IModelService\n\n\n  ModelServiceImpl.prototype._createModelData = function (value, languageIdentifier, resource, isForSimpleWidget) {\n    var _this = this; // create & save the model\n\n\n    var options = this.getCreationOptions(languageIdentifier.language, resource, isForSimpleWidget);\n    var model = new TextModel(value, options, languageIdentifier, resource);\n    var modelId = MODEL_ID(model.uri);\n\n    if (this._models[modelId]) {\n      // There already exists a model with this id => this is a programmer error\n      throw new Error('ModelService: Cannot add model because it already exists!');\n    }\n\n    var modelData = new ModelData(model, function (model) {\n      return _this._onWillDispose(model);\n    }, function (model, e) {\n      return _this._onDidChangeLanguage(model, e);\n    });\n    this._models[modelId] = modelData;\n    return modelData;\n  };\n\n  ModelServiceImpl.prototype.createModel = function (value, languageSelection, resource, isForSimpleWidget) {\n    if (isForSimpleWidget === void 0) {\n      isForSimpleWidget = false;\n    }\n\n    var modelData;\n\n    if (languageSelection) {\n      modelData = this._createModelData(value, languageSelection.languageIdentifier, resource, isForSimpleWidget);\n      this.setMode(modelData.model, languageSelection);\n    } else {\n      modelData = this._createModelData(value, PLAINTEXT_LANGUAGE_IDENTIFIER, resource, isForSimpleWidget);\n    }\n\n    this._onModelAdded.fire(modelData.model);\n\n    return modelData.model;\n  };\n\n  ModelServiceImpl.prototype.setMode = function (model, languageSelection) {\n    if (!languageSelection) {\n      return;\n    }\n\n    var modelData = this._models[MODEL_ID(model.uri)];\n\n    if (!modelData) {\n      return;\n    }\n\n    modelData.setLanguage(languageSelection);\n  };\n\n  ModelServiceImpl.prototype.getModels = function () {\n    var ret = [];\n    var keys = Object.keys(this._models);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var modelId = keys[i];\n      ret.push(this._models[modelId].model);\n    }\n\n    return ret;\n  };\n\n  ModelServiceImpl.prototype.getModel = function (resource) {\n    var modelId = MODEL_ID(resource);\n    var modelData = this._models[modelId];\n\n    if (!modelData) {\n      return null;\n    }\n\n    return modelData.model;\n  }; // --- end IModelService\n\n\n  ModelServiceImpl.prototype._onWillDispose = function (model) {\n    var modelId = MODEL_ID(model.uri);\n    var modelData = this._models[modelId];\n    delete this._models[modelId];\n    modelData.dispose(); // clean up cache\n\n    delete this._modelCreationOptionsByLanguageAndResource[model.getLanguageIdentifier().language + model.uri];\n\n    this._onModelRemoved.fire(model);\n  };\n\n  ModelServiceImpl.prototype._onDidChangeLanguage = function (model, e) {\n    var oldModeId = e.oldLanguage;\n    var newModeId = model.getLanguageIdentifier().language;\n    var oldOptions = this.getCreationOptions(oldModeId, model.uri, model.isForSimpleWidget);\n    var newOptions = this.getCreationOptions(newModeId, model.uri, model.isForSimpleWidget);\n\n    ModelServiceImpl._setModelOptionsForModel(model, newOptions, oldOptions);\n\n    this._onModelModeChanged.fire({\n      model: model,\n      oldModeId: oldModeId\n    });\n  };\n\n  ModelServiceImpl = __decorate([__param(0, IConfigurationService), __param(1, ITextResourcePropertiesService)], ModelServiceImpl);\n  return ModelServiceImpl;\n}(Disposable);\n\nexport { ModelServiceImpl };","map":null,"metadata":{},"sourceType":"module"}