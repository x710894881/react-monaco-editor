{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { isEmptyObject } from '../../../base/common/types.js';\nimport { forEach } from '../../../base/common/collections.js';\n\nfunction newNode(data) {\n  return {\n    data: data,\n    incoming: Object.create(null),\n    outgoing: Object.create(null)\n  };\n}\n\nvar Graph =\n/** @class */\nfunction () {\n  function Graph(_hashFn) {\n    this._hashFn = _hashFn;\n    this._nodes = Object.create(null); // empty\n  }\n\n  Graph.prototype.roots = function () {\n    var ret = [];\n    forEach(this._nodes, function (entry) {\n      if (isEmptyObject(entry.value.outgoing)) {\n        ret.push(entry.value);\n      }\n    });\n    return ret;\n  };\n\n  Graph.prototype.insertEdge = function (from, to) {\n    var fromNode = this.lookupOrInsertNode(from),\n        toNode = this.lookupOrInsertNode(to);\n    fromNode.outgoing[this._hashFn(to)] = toNode;\n    toNode.incoming[this._hashFn(from)] = fromNode;\n  };\n\n  Graph.prototype.removeNode = function (data) {\n    var key = this._hashFn(data);\n\n    delete this._nodes[key];\n    forEach(this._nodes, function (entry) {\n      delete entry.value.outgoing[key];\n      delete entry.value.incoming[key];\n    });\n  };\n\n  Graph.prototype.lookupOrInsertNode = function (data) {\n    var key = this._hashFn(data);\n\n    var node = this._nodes[key];\n\n    if (!node) {\n      node = newNode(data);\n      this._nodes[key] = node;\n    }\n\n    return node;\n  };\n\n  Graph.prototype.isEmpty = function () {\n    for (var _key in this._nodes) {\n      return false;\n    }\n\n    return true;\n  };\n\n  Graph.prototype.toString = function () {\n    var data = [];\n    forEach(this._nodes, function (entry) {\n      data.push(entry.key + \", (incoming)[\" + Object.keys(entry.value.incoming).join(', ') + \"], (outgoing)[\" + Object.keys(entry.value.outgoing).join(',') + \"]\");\n    });\n    return data.join('\\n');\n  };\n\n  return Graph;\n}();\n\nexport { Graph };","map":null,"metadata":{},"sourceType":"module"}