{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\n\nvar CopyLinesCommand =\n/** @class */\nfunction () {\n  function CopyLinesCommand(selection, isCopyingDown) {\n    this._selection = selection;\n    this._isCopyingDown = isCopyingDown;\n    this._selectionDirection = 0\n    /* LTR */\n    ;\n    this._selectionId = null;\n    this._startLineNumberDelta = 0;\n    this._endLineNumberDelta = 0;\n  }\n\n  CopyLinesCommand.prototype.getEditOperations = function (model, builder) {\n    var s = this._selection;\n    this._startLineNumberDelta = 0;\n    this._endLineNumberDelta = 0;\n\n    if (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n      this._endLineNumberDelta = 1;\n      s = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n    }\n\n    var sourceLines = [];\n\n    for (var i = s.startLineNumber; i <= s.endLineNumber; i++) {\n      sourceLines.push(model.getLineContent(i));\n    }\n\n    var sourceText = sourceLines.join('\\n');\n\n    if (sourceText === '') {\n      // Duplicating empty line\n      if (this._isCopyingDown) {\n        this._startLineNumberDelta++;\n        this._endLineNumberDelta++;\n      }\n    }\n\n    if (!this._isCopyingDown) {\n      builder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + sourceText);\n    } else {\n      builder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), sourceText + '\\n');\n    }\n\n    this._selectionId = builder.trackSelection(s);\n    this._selectionDirection = this._selection.getDirection();\n  };\n\n  CopyLinesCommand.prototype.computeCursorState = function (model, helper) {\n    var result = helper.getTrackedSelection(this._selectionId);\n\n    if (this._startLineNumberDelta !== 0 || this._endLineNumberDelta !== 0) {\n      var startLineNumber = result.startLineNumber;\n      var startColumn = result.startColumn;\n      var endLineNumber = result.endLineNumber;\n      var endColumn = result.endColumn;\n\n      if (this._startLineNumberDelta !== 0) {\n        startLineNumber = startLineNumber + this._startLineNumberDelta;\n        startColumn = 1;\n      }\n\n      if (this._endLineNumberDelta !== 0) {\n        endLineNumber = endLineNumber + this._endLineNumberDelta;\n        endColumn = 1;\n      }\n\n      result = Selection.createWithDirection(startLineNumber, startColumn, endLineNumber, endColumn, this._selectionDirection);\n    }\n\n    return result;\n  };\n\n  return CopyLinesCommand;\n}();\n\nexport { CopyLinesCommand };","map":null,"metadata":{},"sourceType":"module"}