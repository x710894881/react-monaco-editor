{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as nls from '../../../nls.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport { createCancelablePromise, first, timeout } from '../../../base/common/async.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { onUnexpectedError, onUnexpectedExternalError } from '../../../base/common/errors.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerDefaultLanguageCommand, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { DocumentHighlightKind, DocumentHighlightProviderRegistry } from '../../common/modes.js';\nimport { IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { activeContrastBorder, editorSelectionHighlight, editorSelectionHighlightBorder, overviewRulerSelectionHighlightForeground, registerColor } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant, themeColorFromId } from '../../../platform/theme/common/themeService.js';\nexport var editorWordHighlight = registerColor('editor.wordHighlightBackground', {\n  dark: '#575757B8',\n  light: '#57575740',\n  hc: null\n}, nls.localize('wordHighlight', 'Background color of a symbol during read-access, like reading a variable. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorWordHighlightStrong = registerColor('editor.wordHighlightStrongBackground', {\n  dark: '#004972B8',\n  light: '#0e639c40',\n  hc: null\n}, nls.localize('wordHighlightStrong', 'Background color of a symbol during write-access, like writing to a variable. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorWordHighlightBorder = registerColor('editor.wordHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('wordHighlightBorder', 'Border color of a symbol during read-access, like reading a variable.'));\nexport var editorWordHighlightStrongBorder = registerColor('editor.wordHighlightStrongBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('wordHighlightStrongBorder', 'Border color of a symbol during write-access, like writing to a variable.'));\nexport var overviewRulerWordHighlightForeground = registerColor('editorOverviewRuler.wordHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hc: '#A0A0A0CC'\n}, nls.localize('overviewRulerWordHighlightForeground', 'Overview ruler marker color for symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var overviewRulerWordHighlightStrongForeground = registerColor('editorOverviewRuler.wordHighlightStrongForeground', {\n  dark: '#C0A0C0CC',\n  light: '#C0A0C0CC',\n  hc: '#C0A0C0CC'\n}, nls.localize('overviewRulerWordHighlightStrongForeground', 'Overview ruler marker color for write-access symbol highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var ctxHasWordHighlights = new RawContextKey('hasWordHighlights', false);\nexport function getOccurrencesAtPosition(model, position, token) {\n  var orderedByScore = DocumentHighlightProviderRegistry.ordered(model); // in order of score ask the occurrences provider\n  // until someone response with a good result\n  // (good = none empty array)\n\n  return first(orderedByScore.map(function (provider) {\n    return function () {\n      return Promise.resolve(provider.provideDocumentHighlights(model, position, token)).then(undefined, onUnexpectedExternalError);\n    };\n  }), arrays.isNonEmptyArray);\n}\n\nvar OccurenceAtPositionRequest =\n/** @class */\nfunction () {\n  function OccurenceAtPositionRequest(model, selection, wordSeparators) {\n    var _this = this;\n\n    this._wordRange = this._getCurrentWordRange(model, selection);\n    this.result = createCancelablePromise(function (token) {\n      return _this._compute(model, selection, wordSeparators, token);\n    });\n  }\n\n  OccurenceAtPositionRequest.prototype._getCurrentWordRange = function (model, selection) {\n    var word = model.getWordAtPosition(selection.getPosition());\n\n    if (word) {\n      return new Range(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n    }\n\n    return null;\n  };\n\n  OccurenceAtPositionRequest.prototype.isValid = function (model, selection, decorationIds) {\n    var lineNumber = selection.startLineNumber;\n    var startColumn = selection.startColumn;\n    var endColumn = selection.endColumn;\n\n    var currentWordRange = this._getCurrentWordRange(model, selection);\n\n    var requestIsValid = Boolean(this._wordRange && this._wordRange.equalsRange(currentWordRange)); // Even if we are on a different word, if that word is in the decorations ranges, the request is still valid\n    // (Same symbol)\n\n    for (var i = 0, len = decorationIds.length; !requestIsValid && i < len; i++) {\n      var range = model.getDecorationRange(decorationIds[i]);\n\n      if (range && range.startLineNumber === lineNumber) {\n        if (range.startColumn <= startColumn && range.endColumn >= endColumn) {\n          requestIsValid = true;\n        }\n      }\n    }\n\n    return requestIsValid;\n  };\n\n  OccurenceAtPositionRequest.prototype.cancel = function () {\n    this.result.cancel();\n  };\n\n  return OccurenceAtPositionRequest;\n}();\n\nvar SemanticOccurenceAtPositionRequest =\n/** @class */\nfunction (_super) {\n  __extends(SemanticOccurenceAtPositionRequest, _super);\n\n  function SemanticOccurenceAtPositionRequest() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  SemanticOccurenceAtPositionRequest.prototype._compute = function (model, selection, wordSeparators, token) {\n    return getOccurrencesAtPosition(model, selection.getPosition(), token).then(function (value) {\n      return value || [];\n    });\n  };\n\n  return SemanticOccurenceAtPositionRequest;\n}(OccurenceAtPositionRequest);\n\nvar TextualOccurenceAtPositionRequest =\n/** @class */\nfunction (_super) {\n  __extends(TextualOccurenceAtPositionRequest, _super);\n\n  function TextualOccurenceAtPositionRequest(model, selection, wordSeparators) {\n    var _this = _super.call(this, model, selection, wordSeparators) || this;\n\n    _this._selectionIsEmpty = selection.isEmpty();\n    return _this;\n  }\n\n  TextualOccurenceAtPositionRequest.prototype._compute = function (model, selection, wordSeparators, token) {\n    return timeout(250, token).then(function () {\n      if (!selection.isEmpty()) {\n        return [];\n      }\n\n      var word = model.getWordAtPosition(selection.getPosition());\n\n      if (!word) {\n        return [];\n      }\n\n      var matches = model.findMatches(word.word, true, false, true, wordSeparators, false);\n      return matches.map(function (m) {\n        return {\n          range: m.range,\n          kind: DocumentHighlightKind.Text\n        };\n      });\n    });\n  };\n\n  TextualOccurenceAtPositionRequest.prototype.isValid = function (model, selection, decorationIds) {\n    var currentSelectionIsEmpty = selection.isEmpty();\n\n    if (this._selectionIsEmpty !== currentSelectionIsEmpty) {\n      return false;\n    }\n\n    return _super.prototype.isValid.call(this, model, selection, decorationIds);\n  };\n\n  return TextualOccurenceAtPositionRequest;\n}(OccurenceAtPositionRequest);\n\nfunction computeOccurencesAtPosition(model, selection, wordSeparators) {\n  if (DocumentHighlightProviderRegistry.has(model)) {\n    return new SemanticOccurenceAtPositionRequest(model, selection, wordSeparators);\n  }\n\n  return new TextualOccurenceAtPositionRequest(model, selection, wordSeparators);\n}\n\nregisterDefaultLanguageCommand('_executeDocumentHighlights', function (model, position) {\n  return getOccurrencesAtPosition(model, position, CancellationToken.None);\n});\n\nvar WordHighlighter =\n/** @class */\nfunction () {\n  function WordHighlighter(editor, contextKeyService) {\n    var _this = this;\n\n    this.toUnhook = new DisposableStore();\n    this.workerRequestTokenId = 0;\n    this.workerRequestCompleted = false;\n    this.workerRequestValue = [];\n    this.lastCursorPositionChangeTime = 0;\n    this.renderDecorationsTimer = -1;\n    this.editor = editor;\n    this._hasWordHighlights = ctxHasWordHighlights.bindTo(contextKeyService);\n    this._ignorePositionChangeEvent = false;\n    this.occurrencesHighlight = this.editor.getConfiguration().contribInfo.occurrencesHighlight;\n    this.model = this.editor.getModel();\n    this.toUnhook.add(editor.onDidChangeCursorPosition(function (e) {\n      if (_this._ignorePositionChangeEvent) {\n        // We are changing the position => ignore this event\n        return;\n      }\n\n      if (!_this.occurrencesHighlight) {\n        // Early exit if nothing needs to be done!\n        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n        return;\n      }\n\n      _this._onPositionChanged(e);\n    }));\n    this.toUnhook.add(editor.onDidChangeModelContent(function (e) {\n      _this._stopAll();\n    }));\n    this.toUnhook.add(editor.onDidChangeConfiguration(function (e) {\n      var newValue = _this.editor.getConfiguration().contribInfo.occurrencesHighlight;\n\n      if (_this.occurrencesHighlight !== newValue) {\n        _this.occurrencesHighlight = newValue;\n\n        _this._stopAll();\n      }\n    }));\n    this._decorationIds = [];\n    this.workerRequestTokenId = 0;\n    this.workerRequest = null;\n    this.workerRequestCompleted = false;\n    this.lastCursorPositionChangeTime = 0;\n    this.renderDecorationsTimer = -1;\n  }\n\n  WordHighlighter.prototype.hasDecorations = function () {\n    return this._decorationIds.length > 0;\n  };\n\n  WordHighlighter.prototype.restore = function () {\n    if (!this.occurrencesHighlight) {\n      return;\n    }\n\n    this._run();\n  };\n\n  WordHighlighter.prototype._getSortedHighlights = function () {\n    var _this = this;\n\n    return arrays.coalesce(this._decorationIds.map(function (id) {\n      return _this.model.getDecorationRange(id);\n    }).sort(Range.compareRangesUsingStarts));\n  };\n\n  WordHighlighter.prototype.moveNext = function () {\n    var _this = this;\n\n    var highlights = this._getSortedHighlights();\n\n    var index = arrays.firstIndex(highlights, function (range) {\n      return range.containsPosition(_this.editor.getPosition());\n    });\n    var newIndex = (index + 1) % highlights.length;\n    var dest = highlights[newIndex];\n\n    try {\n      this._ignorePositionChangeEvent = true;\n      this.editor.setPosition(dest.getStartPosition());\n      this.editor.revealRangeInCenterIfOutsideViewport(dest);\n    } finally {\n      this._ignorePositionChangeEvent = false;\n    }\n  };\n\n  WordHighlighter.prototype.moveBack = function () {\n    var _this = this;\n\n    var highlights = this._getSortedHighlights();\n\n    var index = arrays.firstIndex(highlights, function (range) {\n      return range.containsPosition(_this.editor.getPosition());\n    });\n    var newIndex = (index - 1 + highlights.length) % highlights.length;\n    var dest = highlights[newIndex];\n\n    try {\n      this._ignorePositionChangeEvent = true;\n      this.editor.setPosition(dest.getStartPosition());\n      this.editor.revealRangeInCenterIfOutsideViewport(dest);\n    } finally {\n      this._ignorePositionChangeEvent = false;\n    }\n  };\n\n  WordHighlighter.prototype._removeDecorations = function () {\n    if (this._decorationIds.length > 0) {\n      // remove decorations\n      this._decorationIds = this.editor.deltaDecorations(this._decorationIds, []);\n\n      this._hasWordHighlights.set(false);\n    }\n  };\n\n  WordHighlighter.prototype._stopAll = function () {\n    // Remove any existing decorations\n    this._removeDecorations(); // Cancel any renderDecorationsTimer\n\n\n    if (this.renderDecorationsTimer !== -1) {\n      clearTimeout(this.renderDecorationsTimer);\n      this.renderDecorationsTimer = -1;\n    } // Cancel any worker request\n\n\n    if (this.workerRequest !== null) {\n      this.workerRequest.cancel();\n      this.workerRequest = null;\n    } // Invalidate any worker request callback\n\n\n    if (!this.workerRequestCompleted) {\n      this.workerRequestTokenId++;\n      this.workerRequestCompleted = true;\n    }\n  };\n\n  WordHighlighter.prototype._onPositionChanged = function (e) {\n    // disabled\n    if (!this.occurrencesHighlight) {\n      this._stopAll();\n\n      return;\n    } // ignore typing & other\n\n\n    if (e.reason !== 3\n    /* Explicit */\n    ) {\n        this._stopAll();\n\n        return;\n      }\n\n    this._run();\n  };\n\n  WordHighlighter.prototype._run = function () {\n    var _this = this;\n\n    var editorSelection = this.editor.getSelection(); // ignore multiline selection\n\n    if (editorSelection.startLineNumber !== editorSelection.endLineNumber) {\n      this._stopAll();\n\n      return;\n    }\n\n    var lineNumber = editorSelection.startLineNumber;\n    var startColumn = editorSelection.startColumn;\n    var endColumn = editorSelection.endColumn;\n    var word = this.model.getWordAtPosition({\n      lineNumber: lineNumber,\n      column: startColumn\n    }); // The selection must be inside a word or surround one word at most\n\n    if (!word || word.startColumn > startColumn || word.endColumn < endColumn) {\n      this._stopAll();\n\n      return;\n    } // All the effort below is trying to achieve this:\n    // - when cursor is moved to a word, trigger immediately a findOccurrences request\n    // - 250ms later after the last cursor move event, render the occurrences\n    // - no flickering!\n\n\n    var workerRequestIsValid = this.workerRequest && this.workerRequest.isValid(this.model, editorSelection, this._decorationIds); // There are 4 cases:\n    // a) old workerRequest is valid & completed, renderDecorationsTimer fired\n    // b) old workerRequest is valid & completed, renderDecorationsTimer not fired\n    // c) old workerRequest is valid, but not completed\n    // d) old workerRequest is not valid\n    // For a) no action is needed\n    // For c), member 'lastCursorPositionChangeTime' will be used when installing the timer so no action is needed\n\n    this.lastCursorPositionChangeTime = new Date().getTime();\n\n    if (workerRequestIsValid) {\n      if (this.workerRequestCompleted && this.renderDecorationsTimer !== -1) {\n        // case b)\n        // Delay the firing of renderDecorationsTimer by an extra 250 ms\n        clearTimeout(this.renderDecorationsTimer);\n        this.renderDecorationsTimer = -1;\n\n        this._beginRenderDecorations();\n      }\n    } else {\n      // case d)\n      // Stop all previous actions and start fresh\n      this._stopAll();\n\n      var myRequestId_1 = ++this.workerRequestTokenId;\n      this.workerRequestCompleted = false;\n      this.workerRequest = computeOccurencesAtPosition(this.model, this.editor.getSelection(), this.editor.getConfiguration().wordSeparators);\n      this.workerRequest.result.then(function (data) {\n        if (myRequestId_1 === _this.workerRequestTokenId) {\n          _this.workerRequestCompleted = true;\n          _this.workerRequestValue = data || [];\n\n          _this._beginRenderDecorations();\n        }\n      }, onUnexpectedError);\n    }\n  };\n\n  WordHighlighter.prototype._beginRenderDecorations = function () {\n    var _this = this;\n\n    var currentTime = new Date().getTime();\n    var minimumRenderTime = this.lastCursorPositionChangeTime + 250;\n\n    if (currentTime >= minimumRenderTime) {\n      // Synchronous\n      this.renderDecorationsTimer = -1;\n      this.renderDecorations();\n    } else {\n      // Asynchronous\n      this.renderDecorationsTimer = setTimeout(function () {\n        _this.renderDecorations();\n      }, minimumRenderTime - currentTime);\n    }\n  };\n\n  WordHighlighter.prototype.renderDecorations = function () {\n    this.renderDecorationsTimer = -1;\n    var decorations = [];\n\n    for (var i = 0, len = this.workerRequestValue.length; i < len; i++) {\n      var info = this.workerRequestValue[i];\n      decorations.push({\n        range: info.range,\n        options: WordHighlighter._getDecorationOptions(info.kind)\n      });\n    }\n\n    this._decorationIds = this.editor.deltaDecorations(this._decorationIds, decorations);\n\n    this._hasWordHighlights.set(this.hasDecorations());\n  };\n\n  WordHighlighter._getDecorationOptions = function (kind) {\n    if (kind === DocumentHighlightKind.Write) {\n      return this._WRITE_OPTIONS;\n    } else if (kind === DocumentHighlightKind.Text) {\n      return this._TEXT_OPTIONS;\n    } else {\n      return this._REGULAR_OPTIONS;\n    }\n  };\n\n  WordHighlighter.prototype.dispose = function () {\n    this._stopAll();\n\n    this.toUnhook.dispose();\n  };\n\n  WordHighlighter._WRITE_OPTIONS = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'wordHighlightStrong',\n    overviewRuler: {\n      color: themeColorFromId(overviewRulerWordHighlightStrongForeground),\n      position: OverviewRulerLane.Center\n    }\n  });\n  WordHighlighter._TEXT_OPTIONS = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'selectionHighlight',\n    overviewRuler: {\n      color: themeColorFromId(overviewRulerSelectionHighlightForeground),\n      position: OverviewRulerLane.Center\n    }\n  });\n  WordHighlighter._REGULAR_OPTIONS = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'wordHighlight',\n    overviewRuler: {\n      color: themeColorFromId(overviewRulerWordHighlightForeground),\n      position: OverviewRulerLane.Center\n    }\n  });\n  return WordHighlighter;\n}();\n\nvar WordHighlighterContribution =\n/** @class */\nfunction (_super) {\n  __extends(WordHighlighterContribution, _super);\n\n  function WordHighlighterContribution(editor, contextKeyService) {\n    var _this = _super.call(this) || this;\n\n    _this.wordHighligher = null;\n\n    var createWordHighlighterIfPossible = function () {\n      if (editor.hasModel()) {\n        _this.wordHighligher = new WordHighlighter(editor, contextKeyService);\n      }\n    };\n\n    _this._register(editor.onDidChangeModel(function (e) {\n      if (_this.wordHighligher) {\n        _this.wordHighligher.dispose();\n\n        _this.wordHighligher = null;\n      }\n\n      createWordHighlighterIfPossible();\n    }));\n\n    createWordHighlighterIfPossible();\n    return _this;\n  }\n\n  WordHighlighterContribution.get = function (editor) {\n    return editor.getContribution(WordHighlighterContribution.ID);\n  };\n\n  WordHighlighterContribution.prototype.getId = function () {\n    return WordHighlighterContribution.ID;\n  };\n\n  WordHighlighterContribution.prototype.saveViewState = function () {\n    if (this.wordHighligher && this.wordHighligher.hasDecorations()) {\n      return true;\n    }\n\n    return false;\n  };\n\n  WordHighlighterContribution.prototype.moveNext = function () {\n    if (this.wordHighligher) {\n      this.wordHighligher.moveNext();\n    }\n  };\n\n  WordHighlighterContribution.prototype.moveBack = function () {\n    if (this.wordHighligher) {\n      this.wordHighligher.moveBack();\n    }\n  };\n\n  WordHighlighterContribution.prototype.restoreViewState = function (state) {\n    if (this.wordHighligher && state) {\n      this.wordHighligher.restore();\n    }\n  };\n\n  WordHighlighterContribution.prototype.dispose = function () {\n    if (this.wordHighligher) {\n      this.wordHighligher.dispose();\n      this.wordHighligher = null;\n    }\n\n    _super.prototype.dispose.call(this);\n  };\n\n  WordHighlighterContribution.ID = 'editor.contrib.wordHighlighter';\n  WordHighlighterContribution = __decorate([__param(1, IContextKeyService)], WordHighlighterContribution);\n  return WordHighlighterContribution;\n}(Disposable);\n\nvar WordHighlightNavigationAction =\n/** @class */\nfunction (_super) {\n  __extends(WordHighlightNavigationAction, _super);\n\n  function WordHighlightNavigationAction(next, opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this._isNext = next;\n    return _this;\n  }\n\n  WordHighlightNavigationAction.prototype.run = function (accessor, editor) {\n    var controller = WordHighlighterContribution.get(editor);\n\n    if (!controller) {\n      return;\n    }\n\n    if (this._isNext) {\n      controller.moveNext();\n    } else {\n      controller.moveBack();\n    }\n  };\n\n  return WordHighlightNavigationAction;\n}(EditorAction);\n\nvar NextWordHighlightAction =\n/** @class */\nfunction (_super) {\n  __extends(NextWordHighlightAction, _super);\n\n  function NextWordHighlightAction() {\n    return _super.call(this, true, {\n      id: 'editor.action.wordHighlight.next',\n      label: nls.localize('wordHighlight.next.label', \"Go to Next Symbol Highlight\"),\n      alias: 'Go to Next Symbol Highlight',\n      precondition: ctxHasWordHighlights,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return NextWordHighlightAction;\n}(WordHighlightNavigationAction);\n\nvar PrevWordHighlightAction =\n/** @class */\nfunction (_super) {\n  __extends(PrevWordHighlightAction, _super);\n\n  function PrevWordHighlightAction() {\n    return _super.call(this, false, {\n      id: 'editor.action.wordHighlight.prev',\n      label: nls.localize('wordHighlight.previous.label', \"Go to Previous Symbol Highlight\"),\n      alias: 'Go to Previous Symbol Highlight',\n      precondition: ctxHasWordHighlights,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024\n        /* Shift */\n        | 65\n        /* F7 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return PrevWordHighlightAction;\n}(WordHighlightNavigationAction);\n\nvar TriggerWordHighlightAction =\n/** @class */\nfunction (_super) {\n  __extends(TriggerWordHighlightAction, _super);\n\n  function TriggerWordHighlightAction() {\n    return _super.call(this, {\n      id: 'editor.action.wordHighlight.trigger',\n      label: nls.localize('wordHighlight.trigger.label', \"Trigger Symbol Highlight\"),\n      alias: 'Trigger Symbol Highlight',\n      precondition: ctxHasWordHighlights.toNegated(),\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 0,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  TriggerWordHighlightAction.prototype.run = function (accessor, editor, args) {\n    var controller = WordHighlighterContribution.get(editor);\n\n    if (!controller) {\n      return;\n    }\n\n    controller.restoreViewState(true);\n  };\n\n  return TriggerWordHighlightAction;\n}(EditorAction);\n\nregisterEditorContribution(WordHighlighterContribution);\nregisterEditorAction(NextWordHighlightAction);\nregisterEditorAction(PrevWordHighlightAction);\nregisterEditorAction(TriggerWordHighlightAction);\nregisterThemingParticipant(function (theme, collector) {\n  var selectionHighlight = theme.getColor(editorSelectionHighlight);\n\n  if (selectionHighlight) {\n    collector.addRule(\".monaco-editor .focused .selectionHighlight { background-color: \" + selectionHighlight + \"; }\");\n    collector.addRule(\".monaco-editor .selectionHighlight { background-color: \" + selectionHighlight.transparent(0.5) + \"; }\");\n  }\n\n  var wordHighlight = theme.getColor(editorWordHighlight);\n\n  if (wordHighlight) {\n    collector.addRule(\".monaco-editor .wordHighlight { background-color: \" + wordHighlight + \"; }\");\n  }\n\n  var wordHighlightStrong = theme.getColor(editorWordHighlightStrong);\n\n  if (wordHighlightStrong) {\n    collector.addRule(\".monaco-editor .wordHighlightStrong { background-color: \" + wordHighlightStrong + \"; }\");\n  }\n\n  var selectionHighlightBorder = theme.getColor(editorSelectionHighlightBorder);\n\n  if (selectionHighlightBorder) {\n    collector.addRule(\".monaco-editor .selectionHighlight { border: 1px \" + (theme.type === 'hc' ? 'dotted' : 'solid') + \" \" + selectionHighlightBorder + \"; box-sizing: border-box; }\");\n  }\n\n  var wordHighlightBorder = theme.getColor(editorWordHighlightBorder);\n\n  if (wordHighlightBorder) {\n    collector.addRule(\".monaco-editor .wordHighlight { border: 1px \" + (theme.type === 'hc' ? 'dashed' : 'solid') + \" \" + wordHighlightBorder + \"; box-sizing: border-box; }\");\n  }\n\n  var wordHighlightStrongBorder = theme.getColor(editorWordHighlightStrongBorder);\n\n  if (wordHighlightStrongBorder) {\n    collector.addRule(\".monaco-editor .wordHighlightStrong { border: 1px \" + (theme.type === 'hc' ? 'dashed' : 'solid') + \" \" + wordHighlightStrongBorder + \"; box-sizing: border-box; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}