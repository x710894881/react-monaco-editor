{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as dom from '../../../../base/browser/dom.js';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { SmoothScrollableElement } from '../../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\nimport { getThemeTypeSelector } from '../../../../platform/theme/common/themeService.js';\n\nvar EditorScrollbar =\n/** @class */\nfunction (_super) {\n  __extends(EditorScrollbar, _super);\n\n  function EditorScrollbar(context, linesContent, viewDomNode, overflowGuardDomNode) {\n    var _this = _super.call(this, context) || this;\n\n    var editor = _this._context.configuration.editor;\n    var configScrollbarOpts = editor.viewInfo.scrollbar;\n    var scrollbarOptions = {\n      listenOnDomNode: viewDomNode.domNode,\n      className: 'editor-scrollable' + ' ' + getThemeTypeSelector(context.theme.type),\n      useShadows: false,\n      lazyRender: true,\n      vertical: configScrollbarOpts.vertical,\n      horizontal: configScrollbarOpts.horizontal,\n      verticalHasArrows: configScrollbarOpts.verticalHasArrows,\n      horizontalHasArrows: configScrollbarOpts.horizontalHasArrows,\n      verticalScrollbarSize: configScrollbarOpts.verticalScrollbarSize,\n      verticalSliderSize: configScrollbarOpts.verticalSliderSize,\n      horizontalScrollbarSize: configScrollbarOpts.horizontalScrollbarSize,\n      horizontalSliderSize: configScrollbarOpts.horizontalSliderSize,\n      handleMouseWheel: configScrollbarOpts.handleMouseWheel,\n      arrowSize: configScrollbarOpts.arrowSize,\n      mouseWheelScrollSensitivity: configScrollbarOpts.mouseWheelScrollSensitivity,\n      fastScrollSensitivity: configScrollbarOpts.fastScrollSensitivity\n    };\n    _this.scrollbar = _this._register(new SmoothScrollableElement(linesContent.domNode, scrollbarOptions, _this._context.viewLayout.scrollable));\n    PartFingerprints.write(_this.scrollbar.getDomNode(), 5\n    /* ScrollableElement */\n    );\n    _this.scrollbarDomNode = createFastDomNode(_this.scrollbar.getDomNode());\n\n    _this.scrollbarDomNode.setPosition('absolute');\n\n    _this._setLayout(); // When having a zone widget that calls .focus() on one of its dom elements,\n    // the browser will try desperately to reveal that dom node, unexpectedly\n    // changing the .scrollTop of this.linesContent\n\n\n    var onBrowserDesperateReveal = function (domNode, lookAtScrollTop, lookAtScrollLeft) {\n      var newScrollPosition = {};\n\n      if (lookAtScrollTop) {\n        var deltaTop = domNode.scrollTop;\n\n        if (deltaTop) {\n          newScrollPosition.scrollTop = _this._context.viewLayout.getCurrentScrollTop() + deltaTop;\n          domNode.scrollTop = 0;\n        }\n      }\n\n      if (lookAtScrollLeft) {\n        var deltaLeft = domNode.scrollLeft;\n\n        if (deltaLeft) {\n          newScrollPosition.scrollLeft = _this._context.viewLayout.getCurrentScrollLeft() + deltaLeft;\n          domNode.scrollLeft = 0;\n        }\n      }\n\n      _this._context.viewLayout.setScrollPositionNow(newScrollPosition);\n    }; // I've seen this happen both on the view dom node & on the lines content dom node.\n\n\n    _this._register(dom.addDisposableListener(viewDomNode.domNode, 'scroll', function (e) {\n      return onBrowserDesperateReveal(viewDomNode.domNode, true, true);\n    }));\n\n    _this._register(dom.addDisposableListener(linesContent.domNode, 'scroll', function (e) {\n      return onBrowserDesperateReveal(linesContent.domNode, true, false);\n    }));\n\n    _this._register(dom.addDisposableListener(overflowGuardDomNode.domNode, 'scroll', function (e) {\n      return onBrowserDesperateReveal(overflowGuardDomNode.domNode, true, false);\n    }));\n\n    _this._register(dom.addDisposableListener(_this.scrollbarDomNode.domNode, 'scroll', function (e) {\n      return onBrowserDesperateReveal(_this.scrollbarDomNode.domNode, true, false);\n    }));\n\n    return _this;\n  }\n\n  EditorScrollbar.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n\n  EditorScrollbar.prototype._setLayout = function () {\n    var layoutInfo = this._context.configuration.editor.layoutInfo;\n    this.scrollbarDomNode.setLeft(layoutInfo.contentLeft);\n    var side = this._context.configuration.editor.viewInfo.minimap.side;\n\n    if (side === 'right') {\n      this.scrollbarDomNode.setWidth(layoutInfo.contentWidth + layoutInfo.minimapWidth);\n    } else {\n      this.scrollbarDomNode.setWidth(layoutInfo.contentWidth);\n    }\n\n    this.scrollbarDomNode.setHeight(layoutInfo.contentHeight);\n  };\n\n  EditorScrollbar.prototype.getOverviewRulerLayoutInfo = function () {\n    return this.scrollbar.getOverviewRulerLayoutInfo();\n  };\n\n  EditorScrollbar.prototype.getDomNode = function () {\n    return this.scrollbarDomNode;\n  };\n\n  EditorScrollbar.prototype.delegateVerticalScrollbarMouseDown = function (browserEvent) {\n    this.scrollbar.delegateVerticalScrollbarMouseDown(browserEvent);\n  }; // --- begin event handlers\n\n\n  EditorScrollbar.prototype.onConfigurationChanged = function (e) {\n    if (e.viewInfo) {\n      var editor = this._context.configuration.editor;\n      var newOpts = {\n        handleMouseWheel: editor.viewInfo.scrollbar.handleMouseWheel,\n        mouseWheelScrollSensitivity: editor.viewInfo.scrollbar.mouseWheelScrollSensitivity,\n        fastScrollSensitivity: editor.viewInfo.scrollbar.fastScrollSensitivity\n      };\n      this.scrollbar.updateOptions(newOpts);\n    }\n\n    if (e.layoutInfo) {\n      this._setLayout();\n    }\n\n    return true;\n  };\n\n  EditorScrollbar.prototype.onScrollChanged = function (e) {\n    return true;\n  };\n\n  EditorScrollbar.prototype.onThemeChanged = function (e) {\n    this.scrollbar.updateClassName('editor-scrollable' + ' ' + getThemeTypeSelector(this._context.theme.type));\n    return true;\n  }; // --- end event handlers\n\n\n  EditorScrollbar.prototype.prepareRender = function (ctx) {// Nothing to do\n  };\n\n  EditorScrollbar.prototype.render = function (ctx) {\n    this.scrollbar.renderNow();\n  };\n\n  return EditorScrollbar;\n}(ViewPart);\n\nexport { EditorScrollbar };","map":null,"metadata":{},"sourceType":"module"}