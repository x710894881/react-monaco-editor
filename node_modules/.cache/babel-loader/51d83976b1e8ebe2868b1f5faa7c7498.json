{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nfunction roundFloat(number, decimalPoints) {\n  var decimal = Math.pow(10, decimalPoints);\n  return Math.round(number * decimal) / decimal;\n}\n\nvar RGBA =\n/** @class */\nfunction () {\n  function RGBA(r, g, b, a) {\n    if (a === void 0) {\n      a = 1;\n    }\n\n    this.r = Math.min(255, Math.max(0, r)) | 0;\n    this.g = Math.min(255, Math.max(0, g)) | 0;\n    this.b = Math.min(255, Math.max(0, b)) | 0;\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  RGBA.equals = function (a, b) {\n    return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;\n  };\n\n  return RGBA;\n}();\n\nexport { RGBA };\n\nvar HSLA =\n/** @class */\nfunction () {\n  function HSLA(h, s, l, a) {\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.l = roundFloat(Math.max(Math.min(1, l), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  HSLA.equals = function (a, b) {\n    return a.h === b.h && a.s === b.s && a.l === b.l && a.a === b.a;\n  };\n  /**\n   * Converts an RGB color value to HSL. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes r, g, and b are contained in the set [0, 255] and\n   * returns h in the set [0, 360], s, and l in the set [0, 1].\n   */\n\n\n  HSLA.fromRGBA = function (rgba) {\n    var r = rgba.r / 255;\n    var g = rgba.g / 255;\n    var b = rgba.b / 255;\n    var a = rgba.a;\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (min + max) / 2;\n    var chroma = max - min;\n\n    if (chroma > 0) {\n      s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n\n      switch (max) {\n        case r:\n          h = (g - b) / chroma + (g < b ? 6 : 0);\n          break;\n\n        case g:\n          h = (b - r) / chroma + 2;\n          break;\n\n        case b:\n          h = (r - g) / chroma + 4;\n          break;\n      }\n\n      h *= 60;\n      h = Math.round(h);\n    }\n\n    return new HSLA(h, s, l, a);\n  };\n\n  HSLA._hue2rgb = function (p, q, t) {\n    if (t < 0) {\n      t += 1;\n    }\n\n    if (t > 1) {\n      t -= 1;\n    }\n\n    if (t < 1 / 6) {\n      return p + (q - p) * 6 * t;\n    }\n\n    if (t < 1 / 2) {\n      return q;\n    }\n\n    if (t < 2 / 3) {\n      return p + (q - p) * (2 / 3 - t) * 6;\n    }\n\n    return p;\n  };\n  /**\n   * Converts an HSL color value to RGB. Conversion formula\n   * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\n   * Assumes h in the set [0, 360] s, and l are contained in the set [0, 1] and\n   * returns r, g, and b in the set [0, 255].\n   */\n\n\n  HSLA.toRGBA = function (hsla) {\n    var h = hsla.h / 360;\n    var s = hsla.s,\n        l = hsla.l,\n        a = hsla.a;\n    var r, g, b;\n\n    if (s === 0) {\n      r = g = b = l; // achromatic\n    } else {\n      var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n      var p = 2 * l - q;\n      r = HSLA._hue2rgb(p, q, h + 1 / 3);\n      g = HSLA._hue2rgb(p, q, h);\n      b = HSLA._hue2rgb(p, q, h - 1 / 3);\n    }\n\n    return new RGBA(Math.round(r * 255), Math.round(g * 255), Math.round(b * 255), a);\n  };\n\n  return HSLA;\n}();\n\nexport { HSLA };\n\nvar HSVA =\n/** @class */\nfunction () {\n  function HSVA(h, s, v, a) {\n    this.h = Math.max(Math.min(360, h), 0) | 0;\n    this.s = roundFloat(Math.max(Math.min(1, s), 0), 3);\n    this.v = roundFloat(Math.max(Math.min(1, v), 0), 3);\n    this.a = roundFloat(Math.max(Math.min(1, a), 0), 3);\n  }\n\n  HSVA.equals = function (a, b) {\n    return a.h === b.h && a.s === b.s && a.v === b.v && a.a === b.a;\n  }; // from http://www.rapidtables.com/convert/color/rgb-to-hsv.htm\n\n\n  HSVA.fromRGBA = function (rgba) {\n    var r = rgba.r / 255;\n    var g = rgba.g / 255;\n    var b = rgba.b / 255;\n    var cmax = Math.max(r, g, b);\n    var cmin = Math.min(r, g, b);\n    var delta = cmax - cmin;\n    var s = cmax === 0 ? 0 : delta / cmax;\n    var m;\n\n    if (delta === 0) {\n      m = 0;\n    } else if (cmax === r) {\n      m = ((g - b) / delta % 6 + 6) % 6;\n    } else if (cmax === g) {\n      m = (b - r) / delta + 2;\n    } else {\n      m = (r - g) / delta + 4;\n    }\n\n    return new HSVA(Math.round(m * 60), s, cmax, rgba.a);\n  }; // from http://www.rapidtables.com/convert/color/hsv-to-rgb.htm\n\n\n  HSVA.toRGBA = function (hsva) {\n    var h = hsva.h,\n        s = hsva.s,\n        v = hsva.v,\n        a = hsva.a;\n    var c = v * s;\n    var x = c * (1 - Math.abs(h / 60 % 2 - 1));\n    var m = v - c;\n    var _a = [0, 0, 0],\n        r = _a[0],\n        g = _a[1],\n        b = _a[2];\n\n    if (h < 60) {\n      r = c;\n      g = x;\n    } else if (h < 120) {\n      r = x;\n      g = c;\n    } else if (h < 180) {\n      g = c;\n      b = x;\n    } else if (h < 240) {\n      g = x;\n      b = c;\n    } else if (h < 300) {\n      r = x;\n      b = c;\n    } else if (h < 360) {\n      r = c;\n      b = x;\n    }\n\n    r = Math.round((r + m) * 255);\n    g = Math.round((g + m) * 255);\n    b = Math.round((b + m) * 255);\n    return new RGBA(r, g, b, a);\n  };\n\n  return HSVA;\n}();\n\nexport { HSVA };\n\nvar Color =\n/** @class */\nfunction () {\n  function Color(arg) {\n    if (!arg) {\n      throw new Error('Color needs a value');\n    } else if (arg instanceof RGBA) {\n      this.rgba = arg;\n    } else if (arg instanceof HSLA) {\n      this._hsla = arg;\n      this.rgba = HSLA.toRGBA(arg);\n    } else if (arg instanceof HSVA) {\n      this._hsva = arg;\n      this.rgba = HSVA.toRGBA(arg);\n    } else {\n      throw new Error('Invalid color ctor argument');\n    }\n  }\n\n  Color.fromHex = function (hex) {\n    return Color.Format.CSS.parseHex(hex) || Color.red;\n  };\n\n  Object.defineProperty(Color.prototype, \"hsla\", {\n    get: function () {\n      if (this._hsla) {\n        return this._hsla;\n      } else {\n        return HSLA.fromRGBA(this.rgba);\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Color.prototype, \"hsva\", {\n    get: function () {\n      if (this._hsva) {\n        return this._hsva;\n      }\n\n      return HSVA.fromRGBA(this.rgba);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Color.prototype.equals = function (other) {\n    return !!other && RGBA.equals(this.rgba, other.rgba) && HSLA.equals(this.hsla, other.hsla) && HSVA.equals(this.hsva, other.hsva);\n  };\n  /**\n   * http://www.w3.org/TR/WCAG20/#relativeluminancedef\n   * Returns the number in the set [0, 1]. O => Darkest Black. 1 => Lightest white.\n   */\n\n\n  Color.prototype.getRelativeLuminance = function () {\n    var R = Color._relativeLuminanceForComponent(this.rgba.r);\n\n    var G = Color._relativeLuminanceForComponent(this.rgba.g);\n\n    var B = Color._relativeLuminanceForComponent(this.rgba.b);\n\n    var luminance = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    return roundFloat(luminance, 4);\n  };\n\n  Color._relativeLuminanceForComponent = function (color) {\n    var c = color / 255;\n    return c <= 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);\n  };\n  /**\n   *\thttp://24ways.org/2010/calculating-color-contrast\n   *  Return 'true' if lighter color otherwise 'false'\n   */\n\n\n  Color.prototype.isLighter = function () {\n    var yiq = (this.rgba.r * 299 + this.rgba.g * 587 + this.rgba.b * 114) / 1000;\n    return yiq >= 128;\n  };\n\n  Color.prototype.isLighterThan = function (another) {\n    var lum1 = this.getRelativeLuminance();\n    var lum2 = another.getRelativeLuminance();\n    return lum1 > lum2;\n  };\n\n  Color.prototype.isDarkerThan = function (another) {\n    var lum1 = this.getRelativeLuminance();\n    var lum2 = another.getRelativeLuminance();\n    return lum1 < lum2;\n  };\n\n  Color.prototype.lighten = function (factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l + this.hsla.l * factor, this.hsla.a));\n  };\n\n  Color.prototype.darken = function (factor) {\n    return new Color(new HSLA(this.hsla.h, this.hsla.s, this.hsla.l - this.hsla.l * factor, this.hsla.a));\n  };\n\n  Color.prototype.transparent = function (factor) {\n    var _a = this.rgba,\n        r = _a.r,\n        g = _a.g,\n        b = _a.b,\n        a = _a.a;\n    return new Color(new RGBA(r, g, b, a * factor));\n  };\n\n  Color.prototype.isTransparent = function () {\n    return this.rgba.a === 0;\n  };\n\n  Color.prototype.isOpaque = function () {\n    return this.rgba.a === 1;\n  };\n\n  Color.prototype.opposite = function () {\n    return new Color(new RGBA(255 - this.rgba.r, 255 - this.rgba.g, 255 - this.rgba.b, this.rgba.a));\n  };\n\n  Color.prototype.toString = function () {\n    return '' + Color.Format.CSS.format(this);\n  };\n\n  Color.getLighterColor = function (of, relative, factor) {\n    if (of.isLighterThan(relative)) {\n      return of;\n    }\n\n    factor = factor ? factor : 0.5;\n    var lum1 = of.getRelativeLuminance();\n    var lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum2 - lum1) / lum2;\n    return of.lighten(factor);\n  };\n\n  Color.getDarkerColor = function (of, relative, factor) {\n    if (of.isDarkerThan(relative)) {\n      return of;\n    }\n\n    factor = factor ? factor : 0.5;\n    var lum1 = of.getRelativeLuminance();\n    var lum2 = relative.getRelativeLuminance();\n    factor = factor * (lum1 - lum2) / lum1;\n    return of.darken(factor);\n  };\n\n  Color.white = new Color(new RGBA(255, 255, 255, 1));\n  Color.black = new Color(new RGBA(0, 0, 0, 1));\n  Color.red = new Color(new RGBA(255, 0, 0, 1));\n  Color.blue = new Color(new RGBA(0, 0, 255, 1));\n  Color.cyan = new Color(new RGBA(0, 255, 255, 1));\n  Color.lightgrey = new Color(new RGBA(211, 211, 211, 1));\n  Color.transparent = new Color(new RGBA(0, 0, 0, 0));\n  return Color;\n}();\n\nexport { Color };\n\n(function (Color) {\n  var Format;\n\n  (function (Format) {\n    var CSS;\n\n    (function (CSS) {\n      function formatRGB(color) {\n        if (color.rgba.a === 1) {\n          return \"rgb(\" + color.rgba.r + \", \" + color.rgba.g + \", \" + color.rgba.b + \")\";\n        }\n\n        return Color.Format.CSS.formatRGBA(color);\n      }\n\n      CSS.formatRGB = formatRGB;\n\n      function formatRGBA(color) {\n        return \"rgba(\" + color.rgba.r + \", \" + color.rgba.g + \", \" + color.rgba.b + \", \" + +color.rgba.a.toFixed(2) + \")\";\n      }\n\n      CSS.formatRGBA = formatRGBA;\n\n      function formatHSL(color) {\n        if (color.hsla.a === 1) {\n          return \"hsl(\" + color.hsla.h + \", \" + (color.hsla.s * 100).toFixed(2) + \"%, \" + (color.hsla.l * 100).toFixed(2) + \"%)\";\n        }\n\n        return Color.Format.CSS.formatHSLA(color);\n      }\n\n      CSS.formatHSL = formatHSL;\n\n      function formatHSLA(color) {\n        return \"hsla(\" + color.hsla.h + \", \" + (color.hsla.s * 100).toFixed(2) + \"%, \" + (color.hsla.l * 100).toFixed(2) + \"%, \" + color.hsla.a.toFixed(2) + \")\";\n      }\n\n      CSS.formatHSLA = formatHSLA;\n\n      function _toTwoDigitHex(n) {\n        var r = n.toString(16);\n        return r.length !== 2 ? '0' + r : r;\n      }\n      /**\n       * Formats the color as #RRGGBB\n       */\n\n\n      function formatHex(color) {\n        return \"#\" + _toTwoDigitHex(color.rgba.r) + _toTwoDigitHex(color.rgba.g) + _toTwoDigitHex(color.rgba.b);\n      }\n\n      CSS.formatHex = formatHex;\n      /**\n       * Formats the color as #RRGGBBAA\n       * If 'compact' is set, colors without transparancy will be printed as #RRGGBB\n       */\n\n      function formatHexA(color, compact) {\n        if (compact === void 0) {\n          compact = false;\n        }\n\n        if (compact && color.rgba.a === 1) {\n          return Color.Format.CSS.formatHex(color);\n        }\n\n        return \"#\" + _toTwoDigitHex(color.rgba.r) + _toTwoDigitHex(color.rgba.g) + _toTwoDigitHex(color.rgba.b) + _toTwoDigitHex(Math.round(color.rgba.a * 255));\n      }\n\n      CSS.formatHexA = formatHexA;\n      /**\n       * The default format will use HEX if opaque and RGBA otherwise.\n       */\n\n      function format(color) {\n        if (!color) {\n          return null;\n        }\n\n        if (color.isOpaque()) {\n          return Color.Format.CSS.formatHex(color);\n        }\n\n        return Color.Format.CSS.formatRGBA(color);\n      }\n\n      CSS.format = format;\n      /**\n       * Converts an Hex color value to a Color.\n       * returns r, g, and b are contained in the set [0, 255]\n       * @param hex string (#RGB, #RGBA, #RRGGBB or #RRGGBBAA).\n       */\n\n      function parseHex(hex) {\n        if (!hex) {\n          // Invalid color\n          return null;\n        }\n\n        var length = hex.length;\n\n        if (length === 0) {\n          // Invalid color\n          return null;\n        }\n\n        if (hex.charCodeAt(0) !== 35\n        /* Hash */\n        ) {\n            // Does not begin with a #\n            return null;\n          }\n\n        if (length === 7) {\n          // #RRGGBB format\n          var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n\n          var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n\n          var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n\n          return new Color(new RGBA(r, g, b, 1));\n        }\n\n        if (length === 9) {\n          // #RRGGBBAA format\n          var r = 16 * _parseHexDigit(hex.charCodeAt(1)) + _parseHexDigit(hex.charCodeAt(2));\n\n          var g = 16 * _parseHexDigit(hex.charCodeAt(3)) + _parseHexDigit(hex.charCodeAt(4));\n\n          var b = 16 * _parseHexDigit(hex.charCodeAt(5)) + _parseHexDigit(hex.charCodeAt(6));\n\n          var a = 16 * _parseHexDigit(hex.charCodeAt(7)) + _parseHexDigit(hex.charCodeAt(8));\n\n          return new Color(new RGBA(r, g, b, a / 255));\n        }\n\n        if (length === 4) {\n          // #RGB format\n          var r = _parseHexDigit(hex.charCodeAt(1));\n\n          var g = _parseHexDigit(hex.charCodeAt(2));\n\n          var b = _parseHexDigit(hex.charCodeAt(3));\n\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b));\n        }\n\n        if (length === 5) {\n          // #RGBA format\n          var r = _parseHexDigit(hex.charCodeAt(1));\n\n          var g = _parseHexDigit(hex.charCodeAt(2));\n\n          var b = _parseHexDigit(hex.charCodeAt(3));\n\n          var a = _parseHexDigit(hex.charCodeAt(4));\n\n          return new Color(new RGBA(16 * r + r, 16 * g + g, 16 * b + b, (16 * a + a) / 255));\n        } // Invalid color\n\n\n        return null;\n      }\n\n      CSS.parseHex = parseHex;\n\n      function _parseHexDigit(charCode) {\n        switch (charCode) {\n          case 48\n          /* Digit0 */\n          :\n            return 0;\n\n          case 49\n          /* Digit1 */\n          :\n            return 1;\n\n          case 50\n          /* Digit2 */\n          :\n            return 2;\n\n          case 51\n          /* Digit3 */\n          :\n            return 3;\n\n          case 52\n          /* Digit4 */\n          :\n            return 4;\n\n          case 53\n          /* Digit5 */\n          :\n            return 5;\n\n          case 54\n          /* Digit6 */\n          :\n            return 6;\n\n          case 55\n          /* Digit7 */\n          :\n            return 7;\n\n          case 56\n          /* Digit8 */\n          :\n            return 8;\n\n          case 57\n          /* Digit9 */\n          :\n            return 9;\n\n          case 97\n          /* a */\n          :\n            return 10;\n\n          case 65\n          /* A */\n          :\n            return 10;\n\n          case 98\n          /* b */\n          :\n            return 11;\n\n          case 66\n          /* B */\n          :\n            return 11;\n\n          case 99\n          /* c */\n          :\n            return 12;\n\n          case 67\n          /* C */\n          :\n            return 12;\n\n          case 100\n          /* d */\n          :\n            return 13;\n\n          case 68\n          /* D */\n          :\n            return 13;\n\n          case 101\n          /* e */\n          :\n            return 14;\n\n          case 69\n          /* E */\n          :\n            return 14;\n\n          case 102\n          /* f */\n          :\n            return 15;\n\n          case 70\n          /* F */\n          :\n            return 15;\n        }\n\n        return 0;\n      }\n    })(CSS = Format.CSS || (Format.CSS = {}));\n  })(Format = Color.Format || (Color.Format = {}));\n})(Color || (Color = {}));","map":null,"metadata":{},"sourceType":"module"}