{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as objects from '../../../common/objects.js';\nimport { renderOcticons } from '../octiconLabel/octiconLabel.js';\nimport { escape } from '../../../common/strings.js';\n\nvar HighlightedLabel =\n/** @class */\nfunction () {\n  function HighlightedLabel(container, supportOcticons) {\n    this.supportOcticons = supportOcticons;\n    this.domNode = document.createElement('span');\n    this.domNode.className = 'monaco-highlighted-label';\n    this.didEverRender = false;\n    container.appendChild(this.domNode);\n  }\n\n  Object.defineProperty(HighlightedLabel.prototype, \"element\", {\n    get: function () {\n      return this.domNode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  HighlightedLabel.prototype.set = function (text, highlights, title, escapeNewLines) {\n    if (highlights === void 0) {\n      highlights = [];\n    }\n\n    if (title === void 0) {\n      title = '';\n    }\n\n    if (!text) {\n      text = '';\n    }\n\n    if (escapeNewLines) {\n      // adjusts highlights inplace\n      text = HighlightedLabel.escapeNewLines(text, highlights);\n    }\n\n    if (this.didEverRender && this.text === text && this.title === title && objects.equals(this.highlights, highlights)) {\n      return;\n    }\n\n    if (!Array.isArray(highlights)) {\n      highlights = [];\n    }\n\n    this.text = text;\n    this.title = title;\n    this.highlights = highlights;\n    this.render();\n  };\n\n  HighlightedLabel.prototype.render = function () {\n    var htmlContent = '';\n    var pos = 0;\n\n    for (var _i = 0, _a = this.highlights; _i < _a.length; _i++) {\n      var highlight = _a[_i];\n\n      if (highlight.end === highlight.start) {\n        continue;\n      }\n\n      if (pos < highlight.start) {\n        htmlContent += '<span>';\n        var substring_1 = this.text.substring(pos, highlight.start);\n        htmlContent += this.supportOcticons ? renderOcticons(substring_1) : escape(substring_1);\n        htmlContent += '</span>';\n        pos = highlight.end;\n      }\n\n      htmlContent += '<span class=\"highlight\">';\n      var substring = this.text.substring(highlight.start, highlight.end);\n      htmlContent += this.supportOcticons ? renderOcticons(substring) : escape(substring);\n      htmlContent += '</span>';\n      pos = highlight.end;\n    }\n\n    if (pos < this.text.length) {\n      htmlContent += '<span>';\n      var substring = this.text.substring(pos);\n      htmlContent += this.supportOcticons ? renderOcticons(substring) : escape(substring);\n      htmlContent += '</span>';\n    }\n\n    this.domNode.innerHTML = htmlContent;\n    this.domNode.title = this.title;\n    this.didEverRender = true;\n  };\n\n  HighlightedLabel.escapeNewLines = function (text, highlights) {\n    var total = 0;\n    var extra = 0;\n    return text.replace(/\\r\\n|\\r|\\n/g, function (match, offset) {\n      extra = match === '\\r\\n' ? -1 : 0;\n      offset += total;\n\n      for (var _i = 0, highlights_1 = highlights; _i < highlights_1.length; _i++) {\n        var highlight = highlights_1[_i];\n\n        if (highlight.end <= offset) {\n          continue;\n        }\n\n        if (highlight.start >= offset) {\n          highlight.start += extra;\n        }\n\n        if (highlight.end >= offset) {\n          highlight.end += extra;\n        }\n      }\n\n      total += extra;\n      return '\\u23CE';\n    });\n  };\n\n  return HighlightedLabel;\n}();\n\nexport { HighlightedLabel };","map":null,"metadata":{},"sourceType":"module"}