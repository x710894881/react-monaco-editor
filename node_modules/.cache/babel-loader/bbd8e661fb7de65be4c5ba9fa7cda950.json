{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { activeContrastBorder, editorBackground, editorForeground, registerColor, editorWarningForeground, editorInfoForeground, editorWarningBorder, editorInfoBorder, contrastBorder } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\n/**\n * Definition of the editor colors\n */\n\nexport var editorLineHighlight = registerColor('editor.lineHighlightBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('lineHighlight', 'Background color for the highlight of line at the cursor position.'));\nexport var editorLineHighlightBorder = registerColor('editor.lineHighlightBorder', {\n  dark: '#282828',\n  light: '#eeeeee',\n  hc: '#f38518'\n}, nls.localize('lineHighlightBorderBox', 'Background color for the border around the line at the cursor position.'));\nexport var editorRangeHighlight = registerColor('editor.rangeHighlightBackground', {\n  dark: '#ffffff0b',\n  light: '#fdff0033',\n  hc: null\n}, nls.localize('rangeHighlight', 'Background color of highlighted ranges, like by quick open and find features. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorRangeHighlightBorder = registerColor('editor.rangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: activeContrastBorder\n}, nls.localize('rangeHighlightBorder', 'Background color of the border around highlighted ranges.'), true);\nexport var editorCursorForeground = registerColor('editorCursor.foreground', {\n  dark: '#AEAFAD',\n  light: Color.black,\n  hc: Color.white\n}, nls.localize('caret', 'Color of the editor cursor.'));\nexport var editorCursorBackground = registerColor('editorCursor.background', null, nls.localize('editorCursorBackground', 'The background color of the editor cursor. Allows customizing the color of a character overlapped by a block cursor.'));\nexport var editorWhitespaces = registerColor('editorWhitespace.foreground', {\n  dark: '#e3e4e229',\n  light: '#33333333',\n  hc: '#e3e4e229'\n}, nls.localize('editorWhitespaces', 'Color of whitespace characters in the editor.'));\nexport var editorIndentGuides = registerColor('editorIndentGuide.background', {\n  dark: editorWhitespaces,\n  light: editorWhitespaces,\n  hc: editorWhitespaces\n}, nls.localize('editorIndentGuides', 'Color of the editor indentation guides.'));\nexport var editorActiveIndentGuides = registerColor('editorIndentGuide.activeBackground', {\n  dark: editorWhitespaces,\n  light: editorWhitespaces,\n  hc: editorWhitespaces\n}, nls.localize('editorActiveIndentGuide', 'Color of the active editor indentation guides.'));\nexport var editorLineNumbers = registerColor('editorLineNumber.foreground', {\n  dark: '#858585',\n  light: '#237893',\n  hc: Color.white\n}, nls.localize('editorLineNumbers', 'Color of editor line numbers.'));\nvar deprecatedEditorActiveLineNumber = registerColor('editorActiveLineNumber.foreground', {\n  dark: '#c6c6c6',\n  light: '#0B216F',\n  hc: activeContrastBorder\n}, nls.localize('editorActiveLineNumber', 'Color of editor active line number'), false, nls.localize('deprecatedEditorActiveLineNumber', 'Id is deprecated. Use \\'editorLineNumber.activeForeground\\' instead.'));\nexport var editorActiveLineNumber = registerColor('editorLineNumber.activeForeground', {\n  dark: deprecatedEditorActiveLineNumber,\n  light: deprecatedEditorActiveLineNumber,\n  hc: deprecatedEditorActiveLineNumber\n}, nls.localize('editorActiveLineNumber', 'Color of editor active line number'));\nexport var editorRuler = registerColor('editorRuler.foreground', {\n  dark: '#5A5A5A',\n  light: Color.lightgrey,\n  hc: Color.white\n}, nls.localize('editorRuler', 'Color of the editor rulers.'));\nexport var editorCodeLensForeground = registerColor('editorCodeLens.foreground', {\n  dark: '#999999',\n  light: '#999999',\n  hc: '#999999'\n}, nls.localize('editorCodeLensForeground', 'Foreground color of editor code lenses'));\nexport var editorBracketMatchBackground = registerColor('editorBracketMatch.background', {\n  dark: '#0064001a',\n  light: '#0064001a',\n  hc: '#0064001a'\n}, nls.localize('editorBracketMatchBackground', 'Background color behind matching brackets'));\nexport var editorBracketMatchBorder = registerColor('editorBracketMatch.border', {\n  dark: '#888',\n  light: '#B9B9B9',\n  hc: contrastBorder\n}, nls.localize('editorBracketMatchBorder', 'Color for matching brackets boxes'));\nexport var editorOverviewRulerBorder = registerColor('editorOverviewRuler.border', {\n  dark: '#7f7f7f4d',\n  light: '#7f7f7f4d',\n  hc: '#7f7f7f4d'\n}, nls.localize('editorOverviewRulerBorder', 'Color of the overview ruler border.'));\nexport var editorGutter = registerColor('editorGutter.background', {\n  dark: editorBackground,\n  light: editorBackground,\n  hc: editorBackground\n}, nls.localize('editorGutter', 'Background color of the editor gutter. The gutter contains the glyph margins and the line numbers.'));\nexport var editorUnnecessaryCodeBorder = registerColor('editorUnnecessaryCode.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#fff').transparent(0.8)\n}, nls.localize('unnecessaryCodeBorder', 'Border color of unnecessary (unused) source code in the editor.'));\nexport var editorUnnecessaryCodeOpacity = registerColor('editorUnnecessaryCode.opacity', {\n  dark: Color.fromHex('#000a'),\n  light: Color.fromHex('#0007'),\n  hc: null\n}, nls.localize('unnecessaryCodeOpacity', 'Opacity of unnecessary (unused) source code in the editor. For example, \"#000000c0\" will render the code with 75% opacity. For high contrast themes, use the  \\'editorUnnecessaryCode.border\\' theme color to underline unnecessary code instead of fading it out.'));\nexport var overviewRulerError = registerColor('editorOverviewRuler.errorForeground', {\n  dark: new Color(new RGBA(255, 18, 18, 0.7)),\n  light: new Color(new RGBA(255, 18, 18, 0.7)),\n  hc: new Color(new RGBA(255, 50, 50, 1))\n}, nls.localize('overviewRuleError', 'Overview ruler marker color for errors.'));\nexport var overviewRulerWarning = registerColor('editorOverviewRuler.warningForeground', {\n  dark: editorWarningForeground,\n  light: editorWarningForeground,\n  hc: editorWarningBorder\n}, nls.localize('overviewRuleWarning', 'Overview ruler marker color for warnings.'));\nexport var overviewRulerInfo = registerColor('editorOverviewRuler.infoForeground', {\n  dark: editorInfoForeground,\n  light: editorInfoForeground,\n  hc: editorInfoBorder\n}, nls.localize('overviewRuleInfo', 'Overview ruler marker color for infos.')); // contains all color rules that used to defined in editor/browser/widget/editor.css\n\nregisterThemingParticipant(function (theme, collector) {\n  var background = theme.getColor(editorBackground);\n\n  if (background) {\n    collector.addRule(\".monaco-editor, .monaco-editor-background, .monaco-editor .inputarea.ime-input { background-color: \" + background + \"; }\");\n  }\n\n  var foreground = theme.getColor(editorForeground);\n\n  if (foreground) {\n    collector.addRule(\".monaco-editor, .monaco-editor .inputarea.ime-input { color: \" + foreground + \"; }\");\n  }\n\n  var gutter = theme.getColor(editorGutter);\n\n  if (gutter) {\n    collector.addRule(\".monaco-editor .margin { background-color: \" + gutter + \"; }\");\n  }\n\n  var rangeHighlight = theme.getColor(editorRangeHighlight);\n\n  if (rangeHighlight) {\n    collector.addRule(\".monaco-editor .rangeHighlight { background-color: \" + rangeHighlight + \"; }\");\n  }\n\n  var rangeHighlightBorder = theme.getColor(editorRangeHighlightBorder);\n\n  if (rangeHighlightBorder) {\n    collector.addRule(\".monaco-editor .rangeHighlight { border: 1px \" + (theme.type === 'hc' ? 'dotted' : 'solid') + \" \" + rangeHighlightBorder + \"; }\");\n  }\n\n  var invisibles = theme.getColor(editorWhitespaces);\n\n  if (invisibles) {\n    collector.addRule(\".vs-whitespace { color: \" + invisibles + \" !important; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}