{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { $, removeClass } from '../../dom.js';\n\nfunction removeFromParent(element) {\n  try {\n    if (element.parentElement) {\n      element.parentElement.removeChild(element);\n    }\n  } catch (e) {// this will throw if this happens due to a blur event, nasty business\n  }\n}\n\nvar RowCache =\n/** @class */\nfunction () {\n  function RowCache(renderers) {\n    this.renderers = renderers;\n    this.cache = new Map();\n  }\n  /**\n   * Returns a row either by creating a new one or reusing\n   * a previously released row which shares the same templateId.\n   */\n\n\n  RowCache.prototype.alloc = function (templateId) {\n    var result = this.getTemplateCache(templateId).pop();\n\n    if (!result) {\n      var domNode = $('.monaco-list-row');\n      var renderer = this.getRenderer(templateId);\n      var templateData = renderer.renderTemplate(domNode);\n      result = {\n        domNode: domNode,\n        templateId: templateId,\n        templateData: templateData\n      };\n    }\n\n    return result;\n  };\n  /**\n   * Releases the row for eventual reuse.\n   */\n\n\n  RowCache.prototype.release = function (row) {\n    if (!row) {\n      return;\n    }\n\n    this.releaseRow(row);\n  };\n\n  RowCache.prototype.releaseRow = function (row) {\n    var domNode = row.domNode,\n        templateId = row.templateId;\n\n    if (domNode) {\n      removeClass(domNode, 'scrolling');\n      removeFromParent(domNode);\n    }\n\n    var cache = this.getTemplateCache(templateId);\n    cache.push(row);\n  };\n\n  RowCache.prototype.getTemplateCache = function (templateId) {\n    var result = this.cache.get(templateId);\n\n    if (!result) {\n      result = [];\n      this.cache.set(templateId, result);\n    }\n\n    return result;\n  };\n\n  RowCache.prototype.garbageCollect = function () {\n    var _this = this;\n\n    if (!this.renderers) {\n      return;\n    }\n\n    this.cache.forEach(function (cachedRows, templateId) {\n      for (var _i = 0, cachedRows_1 = cachedRows; _i < cachedRows_1.length; _i++) {\n        var cachedRow = cachedRows_1[_i];\n\n        var renderer = _this.getRenderer(templateId);\n\n        renderer.disposeTemplate(cachedRow.templateData);\n        cachedRow.domNode = null;\n        cachedRow.templateData = null;\n      }\n    });\n    this.cache.clear();\n  };\n\n  RowCache.prototype.dispose = function () {\n    this.garbageCollect();\n    this.cache.clear();\n    this.renderers = null; // StrictNullOverride: nulling out ok in dispose\n  };\n\n  RowCache.prototype.getRenderer = function (templateId) {\n    var renderer = this.renderers.get(templateId);\n\n    if (!renderer) {\n      throw new Error(\"No renderer found for \" + templateId);\n    }\n\n    return renderer;\n  };\n\n  return RowCache;\n}();\n\nexport { RowCache };","map":null,"metadata":{},"sourceType":"module"}