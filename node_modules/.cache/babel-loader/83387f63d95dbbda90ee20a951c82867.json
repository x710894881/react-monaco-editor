{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as dom from '../../dom.js';\nimport { createFastDomNode } from '../../fastDomNode.js';\nimport { GlobalMouseMoveMonitor, standardMouseMoveMerger } from '../../globalMouseMoveMonitor.js';\nimport { ScrollbarArrow } from './scrollbarArrow.js';\nimport { ScrollbarVisibilityController } from './scrollbarVisibilityController.js';\nimport { Widget } from '../widget.js';\nimport * as platform from '../../../common/platform.js';\n/**\n * The orthogonal distance to the slider at which dragging \"resets\". This implements \"snapping\"\n */\n\nvar MOUSE_DRAG_RESET_DISTANCE = 140;\n\nvar AbstractScrollbar =\n/** @class */\nfunction (_super) {\n  __extends(AbstractScrollbar, _super);\n\n  function AbstractScrollbar(opts) {\n    var _this = _super.call(this) || this;\n\n    _this._lazyRender = opts.lazyRender;\n    _this._host = opts.host;\n    _this._scrollable = opts.scrollable;\n    _this._scrollbarState = opts.scrollbarState;\n    _this._visibilityController = _this._register(new ScrollbarVisibilityController(opts.visibility, 'visible scrollbar ' + opts.extraScrollbarClassName, 'invisible scrollbar ' + opts.extraScrollbarClassName));\n    _this._mouseMoveMonitor = _this._register(new GlobalMouseMoveMonitor());\n    _this._shouldRender = true;\n    _this.domNode = createFastDomNode(document.createElement('div'));\n\n    _this.domNode.setAttribute('role', 'presentation');\n\n    _this.domNode.setAttribute('aria-hidden', 'true');\n\n    _this._visibilityController.setDomNode(_this.domNode);\n\n    _this.domNode.setPosition('absolute');\n\n    _this.onmousedown(_this.domNode.domNode, function (e) {\n      return _this._domNodeMouseDown(e);\n    });\n\n    return _this;\n  } // ----------------- creation\n\n  /**\n   * Creates the dom node for an arrow & adds it to the container\n   */\n\n\n  AbstractScrollbar.prototype._createArrow = function (opts) {\n    var arrow = this._register(new ScrollbarArrow(opts));\n\n    this.domNode.domNode.appendChild(arrow.bgDomNode);\n    this.domNode.domNode.appendChild(arrow.domNode);\n  };\n  /**\n   * Creates the slider dom node, adds it to the container & hooks up the events\n   */\n\n\n  AbstractScrollbar.prototype._createSlider = function (top, left, width, height) {\n    var _this = this;\n\n    this.slider = createFastDomNode(document.createElement('div'));\n    this.slider.setClassName('slider');\n    this.slider.setPosition('absolute');\n    this.slider.setTop(top);\n    this.slider.setLeft(left);\n\n    if (typeof width === 'number') {\n      this.slider.setWidth(width);\n    }\n\n    if (typeof height === 'number') {\n      this.slider.setHeight(height);\n    }\n\n    this.slider.setLayerHinting(true);\n    this.domNode.domNode.appendChild(this.slider.domNode);\n    this.onmousedown(this.slider.domNode, function (e) {\n      if (e.leftButton) {\n        e.preventDefault();\n\n        _this._sliderMouseDown(e, function () {});\n      }\n    });\n    this.onclick(this.slider.domNode, function (e) {\n      if (e.leftButton) {\n        e.stopPropagation();\n      }\n    });\n  }; // ----------------- Update state\n\n\n  AbstractScrollbar.prototype._onElementSize = function (visibleSize) {\n    if (this._scrollbarState.setVisibleSize(visibleSize)) {\n      this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\n      this._shouldRender = true;\n\n      if (!this._lazyRender) {\n        this.render();\n      }\n    }\n\n    return this._shouldRender;\n  };\n\n  AbstractScrollbar.prototype._onElementScrollSize = function (elementScrollSize) {\n    if (this._scrollbarState.setScrollSize(elementScrollSize)) {\n      this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\n      this._shouldRender = true;\n\n      if (!this._lazyRender) {\n        this.render();\n      }\n    }\n\n    return this._shouldRender;\n  };\n\n  AbstractScrollbar.prototype._onElementScrollPosition = function (elementScrollPosition) {\n    if (this._scrollbarState.setScrollPosition(elementScrollPosition)) {\n      this._visibilityController.setIsNeeded(this._scrollbarState.isNeeded());\n\n      this._shouldRender = true;\n\n      if (!this._lazyRender) {\n        this.render();\n      }\n    }\n\n    return this._shouldRender;\n  }; // ----------------- rendering\n\n\n  AbstractScrollbar.prototype.beginReveal = function () {\n    this._visibilityController.setShouldBeVisible(true);\n  };\n\n  AbstractScrollbar.prototype.beginHide = function () {\n    this._visibilityController.setShouldBeVisible(false);\n  };\n\n  AbstractScrollbar.prototype.render = function () {\n    if (!this._shouldRender) {\n      return;\n    }\n\n    this._shouldRender = false;\n\n    this._renderDomNode(this._scrollbarState.getRectangleLargeSize(), this._scrollbarState.getRectangleSmallSize());\n\n    this._updateSlider(this._scrollbarState.getSliderSize(), this._scrollbarState.getArrowSize() + this._scrollbarState.getSliderPosition());\n  }; // ----------------- DOM events\n\n\n  AbstractScrollbar.prototype._domNodeMouseDown = function (e) {\n    if (e.target !== this.domNode.domNode) {\n      return;\n    }\n\n    this._onMouseDown(e);\n  };\n\n  AbstractScrollbar.prototype.delegateMouseDown = function (e) {\n    var domTop = this.domNode.domNode.getClientRects()[0].top;\n\n    var sliderStart = domTop + this._scrollbarState.getSliderPosition();\n\n    var sliderStop = domTop + this._scrollbarState.getSliderPosition() + this._scrollbarState.getSliderSize();\n\n    var mousePos = this._sliderMousePosition(e);\n\n    if (sliderStart <= mousePos && mousePos <= sliderStop) {\n      // Act as if it was a mouse down on the slider\n      if (e.leftButton) {\n        e.preventDefault();\n\n        this._sliderMouseDown(e, function () {});\n      }\n    } else {\n      // Act as if it was a mouse down on the scrollbar\n      this._onMouseDown(e);\n    }\n  };\n\n  AbstractScrollbar.prototype._onMouseDown = function (e) {\n    var offsetX;\n    var offsetY;\n\n    if (e.target === this.domNode.domNode && typeof e.browserEvent.offsetX === 'number' && typeof e.browserEvent.offsetY === 'number') {\n      offsetX = e.browserEvent.offsetX;\n      offsetY = e.browserEvent.offsetY;\n    } else {\n      var domNodePosition = dom.getDomNodePagePosition(this.domNode.domNode);\n      offsetX = e.posx - domNodePosition.left;\n      offsetY = e.posy - domNodePosition.top;\n    }\n\n    this._setDesiredScrollPositionNow(this._scrollbarState.getDesiredScrollPositionFromOffset(this._mouseDownRelativePosition(offsetX, offsetY)));\n\n    if (e.leftButton) {\n      e.preventDefault();\n\n      this._sliderMouseDown(e, function () {});\n    }\n  };\n\n  AbstractScrollbar.prototype._sliderMouseDown = function (e, onDragFinished) {\n    var _this = this;\n\n    var initialMousePosition = this._sliderMousePosition(e);\n\n    var initialMouseOrthogonalPosition = this._sliderOrthogonalMousePosition(e);\n\n    var initialScrollbarState = this._scrollbarState.clone();\n\n    this.slider.toggleClassName('active', true);\n\n    this._mouseMoveMonitor.startMonitoring(standardMouseMoveMerger, function (mouseMoveData) {\n      var mouseOrthogonalPosition = _this._sliderOrthogonalMousePosition(mouseMoveData);\n\n      var mouseOrthogonalDelta = Math.abs(mouseOrthogonalPosition - initialMouseOrthogonalPosition);\n\n      if (platform.isWindows && mouseOrthogonalDelta > MOUSE_DRAG_RESET_DISTANCE) {\n        // The mouse has wondered away from the scrollbar => reset dragging\n        _this._setDesiredScrollPositionNow(initialScrollbarState.getScrollPosition());\n\n        return;\n      }\n\n      var mousePosition = _this._sliderMousePosition(mouseMoveData);\n\n      var mouseDelta = mousePosition - initialMousePosition;\n\n      _this._setDesiredScrollPositionNow(initialScrollbarState.getDesiredScrollPositionFromDelta(mouseDelta));\n    }, function () {\n      _this.slider.toggleClassName('active', false);\n\n      _this._host.onDragEnd();\n\n      onDragFinished();\n    });\n\n    this._host.onDragStart();\n  };\n\n  AbstractScrollbar.prototype._setDesiredScrollPositionNow = function (_desiredScrollPosition) {\n    var desiredScrollPosition = {};\n    this.writeScrollPosition(desiredScrollPosition, _desiredScrollPosition);\n\n    this._scrollable.setScrollPositionNow(desiredScrollPosition);\n  };\n\n  return AbstractScrollbar;\n}(Widget);\n\nexport { AbstractScrollbar };","map":null,"metadata":{},"sourceType":"module"}