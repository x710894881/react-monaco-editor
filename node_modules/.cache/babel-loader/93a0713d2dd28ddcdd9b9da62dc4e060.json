{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Range } from '../../common/core/range.js';\n\nvar SortLinesCommand =\n/** @class */\nfunction () {\n  function SortLinesCommand(selection, descending) {\n    this.selection = selection;\n    this.descending = descending;\n    this.selectionId = null;\n  }\n\n  SortLinesCommand.prototype.getEditOperations = function (model, builder) {\n    var op = sortLines(model, this.selection, this.descending);\n\n    if (op) {\n      builder.addEditOperation(op.range, op.text);\n    }\n\n    this.selectionId = builder.trackSelection(this.selection);\n  };\n\n  SortLinesCommand.prototype.computeCursorState = function (model, helper) {\n    return helper.getTrackedSelection(this.selectionId);\n  };\n\n  SortLinesCommand.canRun = function (model, selection, descending) {\n    if (model === null) {\n      return false;\n    }\n\n    var data = getSortData(model, selection, descending);\n\n    if (!data) {\n      return false;\n    }\n\n    for (var i = 0, len = data.before.length; i < len; i++) {\n      if (data.before[i] !== data.after[i]) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  return SortLinesCommand;\n}();\n\nexport { SortLinesCommand };\n\nfunction getSortData(model, selection, descending) {\n  var startLineNumber = selection.startLineNumber;\n  var endLineNumber = selection.endLineNumber;\n\n  if (selection.endColumn === 1) {\n    endLineNumber--;\n  } // Nothing to sort if user didn't select anything.\n\n\n  if (startLineNumber >= endLineNumber) {\n    return null;\n  }\n\n  var linesToSort = []; // Get the contents of the selection to be sorted.\n\n  for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n    linesToSort.push(model.getLineContent(lineNumber));\n  }\n\n  var sorted = linesToSort.slice(0);\n  sorted.sort(function (a, b) {\n    return a.toLowerCase().localeCompare(b.toLowerCase());\n  }); // If descending, reverse the order.\n\n  if (descending === true) {\n    sorted = sorted.reverse();\n  }\n\n  return {\n    startLineNumber: startLineNumber,\n    endLineNumber: endLineNumber,\n    before: linesToSort,\n    after: sorted\n  };\n}\n/**\n * Generate commands for sorting lines on a model.\n */\n\n\nfunction sortLines(model, selection, descending) {\n  var data = getSortData(model, selection, descending);\n\n  if (!data) {\n    return null;\n  }\n\n  return EditOperation.replace(new Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)), data.after.join('\\n'));\n}","map":null,"metadata":{},"sourceType":"module"}