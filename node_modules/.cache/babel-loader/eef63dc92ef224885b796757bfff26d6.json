{"ast":null,"code":"import { Registry } from '../../registry/common/platform.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Extensions } from './configurationRegistry.js';\nexport var IConfigurationService = createDecorator('configurationService');\nexport function toValuesTree(properties, conflictReporter) {\n  var root = Object.create(null);\n\n  for (var key in properties) {\n    addToValueTree(root, key, properties[key], conflictReporter);\n  }\n\n  return root;\n}\nexport function addToValueTree(settingsTreeRoot, key, value, conflictReporter) {\n  var segments = key.split('.');\n  var last = segments.pop();\n  var curr = settingsTreeRoot;\n\n  for (var i = 0; i < segments.length; i++) {\n    var s = segments[i];\n    var obj = curr[s];\n\n    switch (typeof obj) {\n      case 'undefined':\n        obj = curr[s] = Object.create(null);\n        break;\n\n      case 'object':\n        break;\n\n      default:\n        conflictReporter(\"Ignoring \" + key + \" as \" + segments.slice(0, i + 1).join('.') + \" is \" + JSON.stringify(obj));\n        return;\n    }\n\n    curr = obj;\n  }\n\n  if (typeof curr === 'object') {\n    curr[last] = value; // workaround https://github.com/Microsoft/vscode/issues/13606\n  } else {\n    conflictReporter(\"Ignoring \" + key + \" as \" + segments.join('.') + \" is \" + JSON.stringify(curr));\n  }\n}\nexport function removeFromValueTree(valueTree, key) {\n  var segments = key.split('.');\n  doRemoveFromValueTree(valueTree, segments);\n}\n\nfunction doRemoveFromValueTree(valueTree, segments) {\n  var first = segments.shift();\n\n  if (segments.length === 0) {\n    // Reached last segment\n    delete valueTree[first];\n    return;\n  }\n\n  if (Object.keys(valueTree).indexOf(first) !== -1) {\n    var value = valueTree[first];\n\n    if (typeof value === 'object' && !Array.isArray(value)) {\n      doRemoveFromValueTree(value, segments);\n\n      if (Object.keys(value).length === 0) {\n        delete valueTree[first];\n      }\n    }\n  }\n}\n/**\n * A helper function to get the configuration value with a specific settings path (e.g. config.some.setting)\n */\n\n\nexport function getConfigurationValue(config, settingPath, defaultValue) {\n  function accessSetting(config, path) {\n    var current = config;\n\n    for (var _i = 0, path_1 = path; _i < path_1.length; _i++) {\n      var component = path_1[_i];\n\n      if (typeof current !== 'object' || current === null) {\n        return undefined;\n      }\n\n      current = current[component];\n    }\n\n    return current;\n  }\n\n  var path = settingPath.split('.');\n  var result = accessSetting(config, path);\n  return typeof result === 'undefined' ? defaultValue : result;\n}\nexport function getConfigurationKeys() {\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n  return Object.keys(properties);\n}\nexport function getDefaultValues() {\n  var valueTreeRoot = Object.create(null);\n  var properties = Registry.as(Extensions.Configuration).getConfigurationProperties();\n\n  for (var key in properties) {\n    var value = properties[key].default;\n    addToValueTree(valueTreeRoot, key, value, function (message) {\n      return console.error(\"Conflict in default settings: \" + message);\n    });\n  }\n\n  return valueTreeRoot;\n}\nexport function overrideIdentifierFromKey(key) {\n  return key.substring(1, key.length - 1);\n}\nexport function getMigratedSettingValue(configurationService, currentSettingName, legacySettingName) {\n  var setting = configurationService.inspect(currentSettingName);\n  var legacySetting = configurationService.inspect(legacySettingName);\n\n  if (typeof setting.user !== 'undefined' || typeof setting.workspace !== 'undefined' || typeof setting.workspaceFolder !== 'undefined') {\n    return setting.value;\n  } else if (typeof legacySetting.user !== 'undefined' || typeof legacySetting.workspace !== 'undefined' || typeof legacySetting.workspaceFolder !== 'undefined') {\n    return legacySetting.value;\n  } else {\n    return setting.default;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}