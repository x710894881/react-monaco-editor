{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ResourceMap } from '../../../base/common/map.js';\nimport * as arrays from '../../../base/common/arrays.js';\nimport * as types from '../../../base/common/types.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { OVERRIDE_PROPERTY_PATTERN } from './configurationRegistry.js';\nimport { overrideIdentifierFromKey, addToValueTree, toValuesTree, getConfigurationValue, getDefaultValues, getConfigurationKeys, removeFromValueTree } from './configuration.js';\n\nvar ConfigurationModel =\n/** @class */\nfunction () {\n  function ConfigurationModel(_contents, _keys, _overrides) {\n    if (_contents === void 0) {\n      _contents = {};\n    }\n\n    if (_keys === void 0) {\n      _keys = [];\n    }\n\n    if (_overrides === void 0) {\n      _overrides = [];\n    }\n\n    this._contents = _contents;\n    this._keys = _keys;\n    this._overrides = _overrides;\n    this.isFrozen = false;\n  }\n\n  Object.defineProperty(ConfigurationModel.prototype, \"contents\", {\n    get: function () {\n      return this.checkAndFreeze(this._contents);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConfigurationModel.prototype, \"overrides\", {\n    get: function () {\n      return this.checkAndFreeze(this._overrides);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ConfigurationModel.prototype, \"keys\", {\n    get: function () {\n      return this.checkAndFreeze(this._keys);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ConfigurationModel.prototype.isEmpty = function () {\n    return this._keys.length === 0 && Object.keys(this._contents).length === 0 && this._overrides.length === 0;\n  };\n\n  ConfigurationModel.prototype.getValue = function (section) {\n    return section ? getConfigurationValue(this.contents, section) : this.contents;\n  };\n\n  ConfigurationModel.prototype.override = function (identifier) {\n    var overrideContents = this.getContentsForOverrideIdentifer(identifier);\n\n    if (!overrideContents || typeof overrideContents !== 'object' || !Object.keys(overrideContents).length) {\n      // If there are no valid overrides, return self\n      return this;\n    }\n\n    var contents = {};\n\n    for (var _i = 0, _a = arrays.distinct(Object.keys(this.contents).concat(Object.keys(overrideContents))); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var contentsForKey = this.contents[key];\n      var overrideContentsForKey = overrideContents[key]; // If there are override contents for the key, clone and merge otherwise use base contents\n\n      if (overrideContentsForKey) {\n        // Clone and merge only if base contents and override contents are of type object otherwise just override\n        if (typeof contentsForKey === 'object' && typeof overrideContentsForKey === 'object') {\n          contentsForKey = objects.deepClone(contentsForKey);\n          this.mergeContents(contentsForKey, overrideContentsForKey);\n        } else {\n          contentsForKey = overrideContentsForKey;\n        }\n      }\n\n      contents[key] = contentsForKey;\n    }\n\n    return new ConfigurationModel(contents);\n  };\n\n  ConfigurationModel.prototype.merge = function () {\n    var others = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      others[_i] = arguments[_i];\n    }\n\n    var contents = objects.deepClone(this.contents);\n    var overrides = objects.deepClone(this.overrides);\n    var keys = this.keys.slice();\n\n    for (var _a = 0, others_1 = others; _a < others_1.length; _a++) {\n      var other = others_1[_a];\n      this.mergeContents(contents, other.contents);\n\n      var _loop_1 = function (otherOverride) {\n        var override = overrides.filter(function (o) {\n          return arrays.equals(o.identifiers, otherOverride.identifiers);\n        })[0];\n\n        if (override) {\n          this_1.mergeContents(override.contents, otherOverride.contents);\n        } else {\n          overrides.push(objects.deepClone(otherOverride));\n        }\n      };\n\n      var this_1 = this;\n\n      for (var _b = 0, _c = other.overrides; _b < _c.length; _b++) {\n        var otherOverride = _c[_b];\n\n        _loop_1(otherOverride);\n      }\n\n      for (var _d = 0, _e = other.keys; _d < _e.length; _d++) {\n        var key = _e[_d];\n\n        if (keys.indexOf(key) === -1) {\n          keys.push(key);\n        }\n      }\n    }\n\n    return new ConfigurationModel(contents, keys, overrides);\n  };\n\n  ConfigurationModel.prototype.freeze = function () {\n    this.isFrozen = true;\n    return this;\n  };\n\n  ConfigurationModel.prototype.mergeContents = function (source, target) {\n    for (var _i = 0, _a = Object.keys(target); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (key in source) {\n        if (types.isObject(source[key]) && types.isObject(target[key])) {\n          this.mergeContents(source[key], target[key]);\n          continue;\n        }\n      }\n\n      source[key] = objects.deepClone(target[key]);\n    }\n  };\n\n  ConfigurationModel.prototype.checkAndFreeze = function (data) {\n    if (this.isFrozen && !Object.isFrozen(data)) {\n      return objects.deepFreeze(data);\n    }\n\n    return data;\n  };\n\n  ConfigurationModel.prototype.getContentsForOverrideIdentifer = function (identifier) {\n    for (var _i = 0, _a = this.overrides; _i < _a.length; _i++) {\n      var override = _a[_i];\n\n      if (override.identifiers.indexOf(identifier) !== -1) {\n        return override.contents;\n      }\n    }\n\n    return null;\n  };\n\n  ConfigurationModel.prototype.toJSON = function () {\n    return {\n      contents: this.contents,\n      overrides: this.overrides,\n      keys: this.keys\n    };\n  }; // Update methods\n\n\n  ConfigurationModel.prototype.setValue = function (key, value) {\n    this.addKey(key);\n    addToValueTree(this.contents, key, value, function (e) {\n      throw new Error(e);\n    });\n  };\n\n  ConfigurationModel.prototype.removeValue = function (key) {\n    if (this.removeKey(key)) {\n      removeFromValueTree(this.contents, key);\n    }\n  };\n\n  ConfigurationModel.prototype.addKey = function (key) {\n    var index = this.keys.length;\n\n    for (var i = 0; i < index; i++) {\n      if (key.indexOf(this.keys[i]) === 0) {\n        index = i;\n      }\n    }\n\n    this.keys.splice(index, 1, key);\n  };\n\n  ConfigurationModel.prototype.removeKey = function (key) {\n    var index = this.keys.indexOf(key);\n\n    if (index !== -1) {\n      this.keys.splice(index, 1);\n      return true;\n    }\n\n    return false;\n  };\n\n  return ConfigurationModel;\n}();\n\nexport { ConfigurationModel };\n\nvar DefaultConfigurationModel =\n/** @class */\nfunction (_super) {\n  __extends(DefaultConfigurationModel, _super);\n\n  function DefaultConfigurationModel() {\n    var _this = this;\n\n    var contents = getDefaultValues();\n    var keys = getConfigurationKeys();\n    var overrides = [];\n\n    for (var _i = 0, _a = Object.keys(contents); _i < _a.length; _i++) {\n      var key = _a[_i];\n\n      if (OVERRIDE_PROPERTY_PATTERN.test(key)) {\n        overrides.push({\n          identifiers: [overrideIdentifierFromKey(key).trim()],\n          contents: toValuesTree(contents[key], function (message) {\n            return console.error(\"Conflict in default settings file: \" + message);\n          })\n        });\n      }\n    }\n\n    _this = _super.call(this, contents, keys, overrides) || this;\n    return _this;\n  }\n\n  return DefaultConfigurationModel;\n}(ConfigurationModel);\n\nexport { DefaultConfigurationModel };\n\nvar Configuration =\n/** @class */\nfunction () {\n  function Configuration(_defaultConfiguration, _localUserConfiguration, _remoteUserConfiguration, _workspaceConfiguration, _folderConfigurations, _memoryConfiguration, _memoryConfigurationByResource, _freeze) {\n    if (_remoteUserConfiguration === void 0) {\n      _remoteUserConfiguration = new ConfigurationModel();\n    }\n\n    if (_workspaceConfiguration === void 0) {\n      _workspaceConfiguration = new ConfigurationModel();\n    }\n\n    if (_folderConfigurations === void 0) {\n      _folderConfigurations = new ResourceMap();\n    }\n\n    if (_memoryConfiguration === void 0) {\n      _memoryConfiguration = new ConfigurationModel();\n    }\n\n    if (_memoryConfigurationByResource === void 0) {\n      _memoryConfigurationByResource = new ResourceMap();\n    }\n\n    if (_freeze === void 0) {\n      _freeze = true;\n    }\n\n    this._defaultConfiguration = _defaultConfiguration;\n    this._localUserConfiguration = _localUserConfiguration;\n    this._remoteUserConfiguration = _remoteUserConfiguration;\n    this._workspaceConfiguration = _workspaceConfiguration;\n    this._folderConfigurations = _folderConfigurations;\n    this._memoryConfiguration = _memoryConfiguration;\n    this._memoryConfigurationByResource = _memoryConfigurationByResource;\n    this._freeze = _freeze;\n    this._workspaceConsolidatedConfiguration = null;\n    this._foldersConsolidatedConfigurations = new ResourceMap();\n  }\n\n  Configuration.prototype.getValue = function (section, overrides, workspace) {\n    var consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n    return consolidateConfigurationModel.getValue(section);\n  };\n\n  Configuration.prototype.updateValue = function (key, value, overrides) {\n    if (overrides === void 0) {\n      overrides = {};\n    }\n\n    var memoryConfiguration;\n\n    if (overrides.resource) {\n      memoryConfiguration = this._memoryConfigurationByResource.get(overrides.resource);\n\n      if (!memoryConfiguration) {\n        memoryConfiguration = new ConfigurationModel();\n\n        this._memoryConfigurationByResource.set(overrides.resource, memoryConfiguration);\n      }\n    } else {\n      memoryConfiguration = this._memoryConfiguration;\n    }\n\n    if (value === undefined) {\n      memoryConfiguration.removeValue(key);\n    } else {\n      memoryConfiguration.setValue(key, value);\n    }\n\n    if (!overrides.resource) {\n      this._workspaceConsolidatedConfiguration = null;\n    }\n  };\n\n  Configuration.prototype.inspect = function (key, overrides, workspace) {\n    var consolidateConfigurationModel = this.getConsolidateConfigurationModel(overrides, workspace);\n    var folderConfigurationModel = this.getFolderConfigurationModelForResource(overrides.resource, workspace);\n    var memoryConfigurationModel = overrides.resource ? this._memoryConfigurationByResource.get(overrides.resource) || this._memoryConfiguration : this._memoryConfiguration;\n    return {\n      default: overrides.overrideIdentifier ? this._defaultConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._defaultConfiguration.freeze().getValue(key),\n      user: overrides.overrideIdentifier ? this.userConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.userConfiguration.freeze().getValue(key),\n      userLocal: overrides.overrideIdentifier ? this.localUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.localUserConfiguration.freeze().getValue(key),\n      userRemote: overrides.overrideIdentifier ? this.remoteUserConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this.remoteUserConfiguration.freeze().getValue(key),\n      workspace: workspace ? overrides.overrideIdentifier ? this._workspaceConfiguration.freeze().override(overrides.overrideIdentifier).getValue(key) : this._workspaceConfiguration.freeze().getValue(key) : undefined,\n      workspaceFolder: folderConfigurationModel ? overrides.overrideIdentifier ? folderConfigurationModel.freeze().override(overrides.overrideIdentifier).getValue(key) : folderConfigurationModel.freeze().getValue(key) : undefined,\n      memory: overrides.overrideIdentifier ? memoryConfigurationModel.override(overrides.overrideIdentifier).getValue(key) : memoryConfigurationModel.getValue(key),\n      value: consolidateConfigurationModel.getValue(key)\n    };\n  };\n\n  Object.defineProperty(Configuration.prototype, \"userConfiguration\", {\n    get: function () {\n      if (!this._userConfiguration) {\n        this._userConfiguration = this._remoteUserConfiguration.isEmpty() ? this._localUserConfiguration : this._localUserConfiguration.merge(this._remoteUserConfiguration);\n\n        if (this._freeze) {\n          this._userConfiguration.freeze();\n        }\n      }\n\n      return this._userConfiguration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Configuration.prototype, \"localUserConfiguration\", {\n    get: function () {\n      return this._localUserConfiguration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Configuration.prototype, \"remoteUserConfiguration\", {\n    get: function () {\n      return this._remoteUserConfiguration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Configuration.prototype.getConsolidateConfigurationModel = function (overrides, workspace) {\n    var configurationModel = this.getConsolidatedConfigurationModelForResource(overrides, workspace);\n    return overrides.overrideIdentifier ? configurationModel.override(overrides.overrideIdentifier) : configurationModel;\n  };\n\n  Configuration.prototype.getConsolidatedConfigurationModelForResource = function (_a, workspace) {\n    var resource = _a.resource;\n    var consolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n    if (workspace && resource) {\n      var root = workspace.getFolder(resource);\n\n      if (root) {\n        consolidateConfiguration = this.getFolderConsolidatedConfiguration(root.uri) || consolidateConfiguration;\n      }\n\n      var memoryConfigurationForResource = this._memoryConfigurationByResource.get(resource);\n\n      if (memoryConfigurationForResource) {\n        consolidateConfiguration = consolidateConfiguration.merge(memoryConfigurationForResource);\n      }\n    }\n\n    return consolidateConfiguration;\n  };\n\n  Configuration.prototype.getWorkspaceConsolidatedConfiguration = function () {\n    if (!this._workspaceConsolidatedConfiguration) {\n      this._workspaceConsolidatedConfiguration = this._defaultConfiguration.merge(this.userConfiguration, this._workspaceConfiguration, this._memoryConfiguration);\n\n      if (this._freeze) {\n        this._workspaceConfiguration = this._workspaceConfiguration.freeze();\n      }\n    }\n\n    return this._workspaceConsolidatedConfiguration;\n  };\n\n  Configuration.prototype.getFolderConsolidatedConfiguration = function (folder) {\n    var folderConsolidatedConfiguration = this._foldersConsolidatedConfigurations.get(folder);\n\n    if (!folderConsolidatedConfiguration) {\n      var workspaceConsolidateConfiguration = this.getWorkspaceConsolidatedConfiguration();\n\n      var folderConfiguration = this._folderConfigurations.get(folder);\n\n      if (folderConfiguration) {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration.merge(folderConfiguration);\n\n        if (this._freeze) {\n          folderConsolidatedConfiguration = folderConsolidatedConfiguration.freeze();\n        }\n\n        this._foldersConsolidatedConfigurations.set(folder, folderConsolidatedConfiguration);\n      } else {\n        folderConsolidatedConfiguration = workspaceConsolidateConfiguration;\n      }\n    }\n\n    return folderConsolidatedConfiguration;\n  };\n\n  Configuration.prototype.getFolderConfigurationModelForResource = function (resource, workspace) {\n    if (workspace && resource) {\n      var root = workspace.getFolder(resource);\n\n      if (root) {\n        return types.withUndefinedAsNull(this._folderConfigurations.get(root.uri));\n      }\n    }\n\n    return null;\n  };\n\n  return Configuration;\n}();\n\nexport { Configuration };","map":null,"metadata":{},"sourceType":"module"}