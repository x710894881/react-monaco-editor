{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Selection } from '../core/selection.js';\n\nvar ReplaceCommand =\n/** @class */\nfunction () {\n  function ReplaceCommand(range, text, insertsAutoWhitespace) {\n    if (insertsAutoWhitespace === void 0) {\n      insertsAutoWhitespace = false;\n    }\n\n    this._range = range;\n    this._text = text;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  ReplaceCommand.prototype.getEditOperations = function (model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  };\n\n  ReplaceCommand.prototype.computeCursorState = function (model, helper) {\n    var inverseEditOperations = helper.getInverseEditOperations();\n    var srcRange = inverseEditOperations[0].range;\n    return new Selection(srcRange.endLineNumber, srcRange.endColumn, srcRange.endLineNumber, srcRange.endColumn);\n  };\n\n  return ReplaceCommand;\n}();\n\nexport { ReplaceCommand };\n\nvar ReplaceCommandWithoutChangingPosition =\n/** @class */\nfunction () {\n  function ReplaceCommandWithoutChangingPosition(range, text, insertsAutoWhitespace) {\n    if (insertsAutoWhitespace === void 0) {\n      insertsAutoWhitespace = false;\n    }\n\n    this._range = range;\n    this._text = text;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  ReplaceCommandWithoutChangingPosition.prototype.getEditOperations = function (model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  };\n\n  ReplaceCommandWithoutChangingPosition.prototype.computeCursorState = function (model, helper) {\n    var inverseEditOperations = helper.getInverseEditOperations();\n    var srcRange = inverseEditOperations[0].range;\n    return new Selection(srcRange.startLineNumber, srcRange.startColumn, srcRange.startLineNumber, srcRange.startColumn);\n  };\n\n  return ReplaceCommandWithoutChangingPosition;\n}();\n\nexport { ReplaceCommandWithoutChangingPosition };\n\nvar ReplaceCommandWithOffsetCursorState =\n/** @class */\nfunction () {\n  function ReplaceCommandWithOffsetCursorState(range, text, lineNumberDeltaOffset, columnDeltaOffset, insertsAutoWhitespace) {\n    if (insertsAutoWhitespace === void 0) {\n      insertsAutoWhitespace = false;\n    }\n\n    this._range = range;\n    this._text = text;\n    this._columnDeltaOffset = columnDeltaOffset;\n    this._lineNumberDeltaOffset = lineNumberDeltaOffset;\n    this.insertsAutoWhitespace = insertsAutoWhitespace;\n  }\n\n  ReplaceCommandWithOffsetCursorState.prototype.getEditOperations = function (model, builder) {\n    builder.addTrackedEditOperation(this._range, this._text);\n  };\n\n  ReplaceCommandWithOffsetCursorState.prototype.computeCursorState = function (model, helper) {\n    var inverseEditOperations = helper.getInverseEditOperations();\n    var srcRange = inverseEditOperations[0].range;\n    return new Selection(srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset, srcRange.endLineNumber + this._lineNumberDeltaOffset, srcRange.endColumn + this._columnDeltaOffset);\n  };\n\n  return ReplaceCommandWithOffsetCursorState;\n}();\n\nexport { ReplaceCommandWithOffsetCursorState };\n\nvar ReplaceCommandThatPreservesSelection =\n/** @class */\nfunction () {\n  function ReplaceCommandThatPreservesSelection(editRange, text, initialSelection) {\n    this._range = editRange;\n    this._text = text;\n    this._initialSelection = initialSelection;\n    this._selectionId = null;\n  }\n\n  ReplaceCommandThatPreservesSelection.prototype.getEditOperations = function (model, builder) {\n    builder.addEditOperation(this._range, this._text);\n    this._selectionId = builder.trackSelection(this._initialSelection);\n  };\n\n  ReplaceCommandThatPreservesSelection.prototype.computeCursorState = function (model, helper) {\n    return helper.getTrackedSelection(this._selectionId);\n  };\n\n  return ReplaceCommandThatPreservesSelection;\n}();\n\nexport { ReplaceCommandThatPreservesSelection };","map":null,"metadata":{},"sourceType":"module"}