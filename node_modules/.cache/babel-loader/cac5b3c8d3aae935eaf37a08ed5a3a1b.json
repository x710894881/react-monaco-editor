{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { Position } from '../../../common/core/position.js';\n\nvar ViewZones =\n/** @class */\nfunction (_super) {\n  __extends(ViewZones, _super);\n\n  function ViewZones(context) {\n    var _this = _super.call(this, context) || this;\n\n    _this._lineHeight = _this._context.configuration.editor.lineHeight;\n    _this._contentWidth = _this._context.configuration.editor.layoutInfo.contentWidth;\n    _this._contentLeft = _this._context.configuration.editor.layoutInfo.contentLeft;\n    _this.domNode = createFastDomNode(document.createElement('div'));\n\n    _this.domNode.setClassName('view-zones');\n\n    _this.domNode.setPosition('absolute');\n\n    _this.domNode.setAttribute('role', 'presentation');\n\n    _this.domNode.setAttribute('aria-hidden', 'true');\n\n    _this.marginDomNode = createFastDomNode(document.createElement('div'));\n\n    _this.marginDomNode.setClassName('margin-view-zones');\n\n    _this.marginDomNode.setPosition('absolute');\n\n    _this.marginDomNode.setAttribute('role', 'presentation');\n\n    _this.marginDomNode.setAttribute('aria-hidden', 'true');\n\n    _this._zones = {};\n    return _this;\n  }\n\n  ViewZones.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._zones = {};\n  }; // ---- begin view event handlers\n\n\n  ViewZones.prototype._recomputeWhitespacesProps = function () {\n    var hadAChange = false;\n    var keys = Object.keys(this._zones);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var id = keys[i];\n      var zone = this._zones[id];\n\n      var props = this._computeWhitespaceProps(zone.delegate);\n\n      if (this._context.viewLayout.changeWhitespace(id, props.afterViewLineNumber, props.heightInPx)) {\n        this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n\n        hadAChange = true;\n      }\n    }\n\n    return hadAChange;\n  };\n\n  ViewZones.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._lineHeight = this._context.configuration.editor.lineHeight;\n      return this._recomputeWhitespacesProps();\n    }\n\n    if (e.layoutInfo) {\n      this._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;\n      this._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n    }\n\n    return true;\n  };\n\n  ViewZones.prototype.onLineMappingChanged = function (e) {\n    var hadAChange = this._recomputeWhitespacesProps();\n\n    if (hadAChange) {\n      this._context.viewLayout.onHeightMaybeChanged();\n    }\n\n    return hadAChange;\n  };\n\n  ViewZones.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  ViewZones.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged || e.scrollWidthChanged;\n  };\n\n  ViewZones.prototype.onZonesChanged = function (e) {\n    return true;\n  };\n\n  ViewZones.prototype.onLinesInserted = function (e) {\n    return true;\n  }; // ---- end view event handlers\n\n\n  ViewZones.prototype._getZoneOrdinal = function (zone) {\n    if (typeof zone.afterColumn !== 'undefined') {\n      return zone.afterColumn;\n    }\n\n    return 10000;\n  };\n\n  ViewZones.prototype._computeWhitespaceProps = function (zone) {\n    if (zone.afterLineNumber === 0) {\n      return {\n        afterViewLineNumber: 0,\n        heightInPx: this._heightInPixels(zone),\n        minWidthInPx: this._minWidthInPixels(zone)\n      };\n    }\n\n    var zoneAfterModelPosition;\n\n    if (typeof zone.afterColumn !== 'undefined') {\n      zoneAfterModelPosition = this._context.model.validateModelPosition({\n        lineNumber: zone.afterLineNumber,\n        column: zone.afterColumn\n      });\n    } else {\n      var validAfterLineNumber = this._context.model.validateModelPosition({\n        lineNumber: zone.afterLineNumber,\n        column: 1\n      }).lineNumber;\n\n      zoneAfterModelPosition = new Position(validAfterLineNumber, this._context.model.getModelLineMaxColumn(validAfterLineNumber));\n    }\n\n    var zoneBeforeModelPosition;\n\n    if (zoneAfterModelPosition.column === this._context.model.getModelLineMaxColumn(zoneAfterModelPosition.lineNumber)) {\n      zoneBeforeModelPosition = this._context.model.validateModelPosition({\n        lineNumber: zoneAfterModelPosition.lineNumber + 1,\n        column: 1\n      });\n    } else {\n      zoneBeforeModelPosition = this._context.model.validateModelPosition({\n        lineNumber: zoneAfterModelPosition.lineNumber,\n        column: zoneAfterModelPosition.column + 1\n      });\n    }\n\n    var viewPosition = this._context.model.coordinatesConverter.convertModelPositionToViewPosition(zoneAfterModelPosition);\n\n    var isVisible = this._context.model.coordinatesConverter.modelPositionIsVisible(zoneBeforeModelPosition);\n\n    return {\n      afterViewLineNumber: viewPosition.lineNumber,\n      heightInPx: isVisible ? this._heightInPixels(zone) : 0,\n      minWidthInPx: this._minWidthInPixels(zone)\n    };\n  };\n\n  ViewZones.prototype.addZone = function (zone) {\n    var props = this._computeWhitespaceProps(zone);\n\n    var whitespaceId = this._context.viewLayout.addWhitespace(props.afterViewLineNumber, this._getZoneOrdinal(zone), props.heightInPx, props.minWidthInPx);\n\n    var myZone = {\n      whitespaceId: whitespaceId,\n      delegate: zone,\n      isVisible: false,\n      domNode: createFastDomNode(zone.domNode),\n      marginDomNode: zone.marginDomNode ? createFastDomNode(zone.marginDomNode) : null\n    };\n\n    this._safeCallOnComputedHeight(myZone.delegate, props.heightInPx);\n\n    myZone.domNode.setPosition('absolute');\n    myZone.domNode.domNode.style.width = '100%';\n    myZone.domNode.setDisplay('none');\n    myZone.domNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n    this.domNode.appendChild(myZone.domNode);\n\n    if (myZone.marginDomNode) {\n      myZone.marginDomNode.setPosition('absolute');\n      myZone.marginDomNode.domNode.style.width = '100%';\n      myZone.marginDomNode.setDisplay('none');\n      myZone.marginDomNode.setAttribute('monaco-view-zone', myZone.whitespaceId);\n      this.marginDomNode.appendChild(myZone.marginDomNode);\n    }\n\n    this._zones[myZone.whitespaceId] = myZone;\n    this.setShouldRender();\n    return myZone.whitespaceId;\n  };\n\n  ViewZones.prototype.removeZone = function (id) {\n    if (this._zones.hasOwnProperty(id)) {\n      var zone = this._zones[id];\n      delete this._zones[id];\n\n      this._context.viewLayout.removeWhitespace(zone.whitespaceId);\n\n      zone.domNode.removeAttribute('monaco-visible-view-zone');\n      zone.domNode.removeAttribute('monaco-view-zone');\n      zone.domNode.domNode.parentNode.removeChild(zone.domNode.domNode);\n\n      if (zone.marginDomNode) {\n        zone.marginDomNode.removeAttribute('monaco-visible-view-zone');\n        zone.marginDomNode.removeAttribute('monaco-view-zone');\n        zone.marginDomNode.domNode.parentNode.removeChild(zone.marginDomNode.domNode);\n      }\n\n      this.setShouldRender();\n      return true;\n    }\n\n    return false;\n  };\n\n  ViewZones.prototype.layoutZone = function (id) {\n    var changed = false;\n\n    if (this._zones.hasOwnProperty(id)) {\n      var zone = this._zones[id];\n\n      var props = this._computeWhitespaceProps(zone.delegate); // const newOrdinal = this._getZoneOrdinal(zone.delegate);\n\n\n      changed = this._context.viewLayout.changeWhitespace(zone.whitespaceId, props.afterViewLineNumber, props.heightInPx) || changed; // TODO@Alex: change `newOrdinal` too\n\n      if (changed) {\n        this._safeCallOnComputedHeight(zone.delegate, props.heightInPx);\n\n        this.setShouldRender();\n      }\n    }\n\n    return changed;\n  };\n\n  ViewZones.prototype.shouldSuppressMouseDownOnViewZone = function (id) {\n    if (this._zones.hasOwnProperty(id)) {\n      var zone = this._zones[id];\n      return Boolean(zone.delegate.suppressMouseDown);\n    }\n\n    return false;\n  };\n\n  ViewZones.prototype._heightInPixels = function (zone) {\n    if (typeof zone.heightInPx === 'number') {\n      return zone.heightInPx;\n    }\n\n    if (typeof zone.heightInLines === 'number') {\n      return this._lineHeight * zone.heightInLines;\n    }\n\n    return this._lineHeight;\n  };\n\n  ViewZones.prototype._minWidthInPixels = function (zone) {\n    if (typeof zone.minWidthInPx === 'number') {\n      return zone.minWidthInPx;\n    }\n\n    return 0;\n  };\n\n  ViewZones.prototype._safeCallOnComputedHeight = function (zone, height) {\n    if (typeof zone.onComputedHeight === 'function') {\n      try {\n        zone.onComputedHeight(height);\n      } catch (e) {\n        onUnexpectedError(e);\n      }\n    }\n  };\n\n  ViewZones.prototype._safeCallOnDomNodeTop = function (zone, top) {\n    if (typeof zone.onDomNodeTop === 'function') {\n      try {\n        zone.onDomNodeTop(top);\n      } catch (e) {\n        onUnexpectedError(e);\n      }\n    }\n  };\n\n  ViewZones.prototype.prepareRender = function (ctx) {// Nothing to read\n  };\n\n  ViewZones.prototype.render = function (ctx) {\n    var visibleWhitespaces = ctx.viewportData.whitespaceViewportData;\n    var visibleZones = {};\n    var hasVisibleZone = false;\n\n    for (var i = 0, len = visibleWhitespaces.length; i < len; i++) {\n      visibleZones[visibleWhitespaces[i].id] = visibleWhitespaces[i];\n      hasVisibleZone = true;\n    }\n\n    var keys = Object.keys(this._zones);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var id = keys[i];\n      var zone = this._zones[id];\n      var newTop = 0;\n      var newHeight = 0;\n      var newDisplay = 'none';\n\n      if (visibleZones.hasOwnProperty(id)) {\n        newTop = visibleZones[id].verticalOffset - ctx.bigNumbersDelta;\n        newHeight = visibleZones[id].height;\n        newDisplay = 'block'; // zone is visible\n\n        if (!zone.isVisible) {\n          zone.domNode.setAttribute('monaco-visible-view-zone', 'true');\n          zone.isVisible = true;\n        }\n\n        this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(visibleZones[id].verticalOffset));\n      } else {\n        if (zone.isVisible) {\n          zone.domNode.removeAttribute('monaco-visible-view-zone');\n          zone.isVisible = false;\n        }\n\n        this._safeCallOnDomNodeTop(zone.delegate, ctx.getScrolledTopFromAbsoluteTop(-1000000));\n      }\n\n      zone.domNode.setTop(newTop);\n      zone.domNode.setHeight(newHeight);\n      zone.domNode.setDisplay(newDisplay);\n\n      if (zone.marginDomNode) {\n        zone.marginDomNode.setTop(newTop);\n        zone.marginDomNode.setHeight(newHeight);\n        zone.marginDomNode.setDisplay(newDisplay);\n      }\n    }\n\n    if (hasVisibleZone) {\n      this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n      this.marginDomNode.setWidth(this._contentLeft);\n    }\n  };\n\n  return ViewZones;\n}(ViewPart);\n\nexport { ViewZones };","map":null,"metadata":{},"sourceType":"module"}