{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { AbstractTree } from './abstractTree.js';\nimport { ObjectTreeModel } from './objectTreeModel.js';\n\nvar DataTree =\n/** @class */\nfunction (_super) {\n  __extends(DataTree, _super);\n\n  function DataTree(container, delegate, renderers, dataSource, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this, container, delegate, renderers, options) || this;\n\n    _this.dataSource = dataSource;\n    _this.identityProvider = options.identityProvider;\n    return _this;\n  }\n\n  DataTree.prototype.createModel = function (view, options) {\n    return new ObjectTreeModel(view, options);\n  };\n\n  return DataTree;\n}(AbstractTree);\n\nexport { DataTree };","map":null,"metadata":{},"sourceType":"module"}