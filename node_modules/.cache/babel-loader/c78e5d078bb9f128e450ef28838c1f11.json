{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as platform from '../../registry/common/platform.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as nls from '../../../nls.js';\nimport { Extensions as JSONExtensions } from '../../jsonschemas/common/jsonContributionRegistry.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js'; // color registry\n\nexport var Extensions = {\n  ColorContribution: 'base.contributions.colors'\n};\n\nvar ColorRegistry =\n/** @class */\nfunction () {\n  function ColorRegistry() {\n    this._onDidChangeSchema = new Emitter();\n    this.onDidChangeSchema = this._onDidChangeSchema.event;\n    this.colorSchema = {\n      type: 'object',\n      properties: {}\n    };\n    this.colorReferenceSchema = {\n      type: 'string',\n      enum: [],\n      enumDescriptions: []\n    };\n    this.colorsById = {};\n  }\n\n  ColorRegistry.prototype.registerColor = function (id, defaults, description, needsTransparency, deprecationMessage) {\n    if (needsTransparency === void 0) {\n      needsTransparency = false;\n    }\n\n    var colorContribution = {\n      id: id,\n      description: description,\n      defaults: defaults,\n      needsTransparency: needsTransparency,\n      deprecationMessage: deprecationMessage\n    };\n    this.colorsById[id] = colorContribution;\n    var propertySchema = {\n      type: 'string',\n      description: description,\n      format: 'color-hex',\n      default: '#ff0000'\n    };\n\n    if (deprecationMessage) {\n      propertySchema.deprecationMessage = deprecationMessage;\n    }\n\n    this.colorSchema.properties[id] = propertySchema;\n    this.colorReferenceSchema.enum.push(id);\n    this.colorReferenceSchema.enumDescriptions.push(description);\n\n    this._onDidChangeSchema.fire();\n\n    return id;\n  };\n\n  ColorRegistry.prototype.resolveDefaultColor = function (id, theme) {\n    var colorDesc = this.colorsById[id];\n\n    if (colorDesc && colorDesc.defaults) {\n      var colorValue = colorDesc.defaults[theme.type];\n      return resolveColorValue(colorValue, theme);\n    }\n\n    return undefined;\n  };\n\n  ColorRegistry.prototype.getColorSchema = function () {\n    return this.colorSchema;\n  };\n\n  ColorRegistry.prototype.toString = function () {\n    var _this = this;\n\n    var sorter = function (a, b) {\n      var cat1 = a.indexOf('.') === -1 ? 0 : 1;\n      var cat2 = b.indexOf('.') === -1 ? 0 : 1;\n\n      if (cat1 !== cat2) {\n        return cat1 - cat2;\n      }\n\n      return a.localeCompare(b);\n    };\n\n    return Object.keys(this.colorsById).sort(sorter).map(function (k) {\n      return \"- `\" + k + \"`: \" + _this.colorsById[k].description;\n    }).join('\\n');\n  };\n\n  return ColorRegistry;\n}();\n\nvar colorRegistry = new ColorRegistry();\nplatform.Registry.add(Extensions.ColorContribution, colorRegistry);\nexport function registerColor(id, defaults, description, needsTransparency, deprecationMessage) {\n  return colorRegistry.registerColor(id, defaults, description, needsTransparency, deprecationMessage);\n} // ----- base colors\n\nexport var foreground = registerColor('foreground', {\n  dark: '#CCCCCC',\n  light: '#616161',\n  hc: '#FFFFFF'\n}, nls.localize('foreground', \"Overall foreground color. This color is only used if not overridden by a component.\"));\nexport var errorForeground = registerColor('errorForeground', {\n  dark: '#F48771',\n  light: '#A1260D',\n  hc: '#F48771'\n}, nls.localize('errorForeground', \"Overall foreground color for error messages. This color is only used if not overridden by a component.\"));\nexport var focusBorder = registerColor('focusBorder', {\n  dark: Color.fromHex('#0E639C').transparent(0.8),\n  light: Color.fromHex('#007ACC').transparent(0.4),\n  hc: '#F38518'\n}, nls.localize('focusBorder', \"Overall border color for focused elements. This color is only used if not overridden by a component.\"));\nexport var contrastBorder = registerColor('contrastBorder', {\n  light: null,\n  dark: null,\n  hc: '#6FC3DF'\n}, nls.localize('contrastBorder', \"An extra border around elements to separate them from others for greater contrast.\"));\nexport var activeContrastBorder = registerColor('contrastActiveBorder', {\n  light: null,\n  dark: null,\n  hc: focusBorder\n}, nls.localize('activeContrastBorder', \"An extra border around active elements to separate them from others for greater contrast.\"));\nexport var textLinkForeground = registerColor('textLink.foreground', {\n  light: '#006AB1',\n  dark: '#3794FF',\n  hc: '#3794FF'\n}, nls.localize('textLinkForeground', \"Foreground color for links in text.\"));\nexport var textCodeBlockBackground = registerColor('textCodeBlock.background', {\n  light: '#dcdcdc66',\n  dark: '#0a0a0a66',\n  hc: Color.black\n}, nls.localize('textCodeBlockBackground', \"Background color for code blocks in text.\")); // ----- widgets\n\nexport var widgetShadow = registerColor('widget.shadow', {\n  dark: '#000000',\n  light: '#A8A8A8',\n  hc: null\n}, nls.localize('widgetShadow', 'Shadow color of widgets such as find/replace inside the editor.'));\nexport var inputBackground = registerColor('input.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('inputBoxBackground', \"Input box background.\"));\nexport var inputForeground = registerColor('input.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('inputBoxForeground', \"Input box foreground.\"));\nexport var inputBorder = registerColor('input.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('inputBoxBorder', \"Input box border.\"));\nexport var inputActiveOptionBorder = registerColor('inputOption.activeBorder', {\n  dark: '#007ACC00',\n  light: '#007ACC00',\n  hc: contrastBorder\n}, nls.localize('inputBoxActiveOptionBorder', \"Border color of activated options in input fields.\"));\nexport var inputActiveOptionBackground = registerColor('inputOption.activeBackground', {\n  dark: transparent(focusBorder, 0.5),\n  light: transparent(focusBorder, 0.3),\n  hc: null\n}, nls.localize('inputOption.activeBackground', \"Background color of activated options in input fields.\"));\nexport var inputValidationInfoBackground = registerColor('inputValidation.infoBackground', {\n  dark: '#063B49',\n  light: '#D6ECF2',\n  hc: Color.black\n}, nls.localize('inputValidationInfoBackground', \"Input validation background color for information severity.\"));\nexport var inputValidationInfoForeground = registerColor('inputValidation.infoForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationInfoForeground', \"Input validation foreground color for information severity.\"));\nexport var inputValidationInfoBorder = registerColor('inputValidation.infoBorder', {\n  dark: '#007acc',\n  light: '#007acc',\n  hc: contrastBorder\n}, nls.localize('inputValidationInfoBorder', \"Input validation border color for information severity.\"));\nexport var inputValidationWarningBackground = registerColor('inputValidation.warningBackground', {\n  dark: '#352A05',\n  light: '#F6F5D2',\n  hc: Color.black\n}, nls.localize('inputValidationWarningBackground', \"Input validation background color for warning severity.\"));\nexport var inputValidationWarningForeground = registerColor('inputValidation.warningForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationWarningForeground', \"Input validation foreground color for warning severity.\"));\nexport var inputValidationWarningBorder = registerColor('inputValidation.warningBorder', {\n  dark: '#B89500',\n  light: '#B89500',\n  hc: contrastBorder\n}, nls.localize('inputValidationWarningBorder', \"Input validation border color for warning severity.\"));\nexport var inputValidationErrorBackground = registerColor('inputValidation.errorBackground', {\n  dark: '#5A1D1D',\n  light: '#F2DEDE',\n  hc: Color.black\n}, nls.localize('inputValidationErrorBackground', \"Input validation background color for error severity.\"));\nexport var inputValidationErrorForeground = registerColor('inputValidation.errorForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('inputValidationErrorForeground', \"Input validation foreground color for error severity.\"));\nexport var inputValidationErrorBorder = registerColor('inputValidation.errorBorder', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('inputValidationErrorBorder', \"Input validation border color for error severity.\"));\nexport var selectBackground = registerColor('dropdown.background', {\n  dark: '#3C3C3C',\n  light: Color.white,\n  hc: Color.black\n}, nls.localize('dropdownBackground', \"Dropdown background.\"));\nexport var selectForeground = registerColor('dropdown.foreground', {\n  dark: '#F0F0F0',\n  light: null,\n  hc: Color.white\n}, nls.localize('dropdownForeground', \"Dropdown foreground.\"));\nexport var listFocusBackground = registerColor('list.focusBackground', {\n  dark: '#062F4A',\n  light: '#D6EBFF',\n  hc: null\n}, nls.localize('listFocusBackground', \"List/Tree background color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listFocusForeground = registerColor('list.focusForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listFocusForeground', \"List/Tree foreground color for the focused item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listActiveSelectionBackground = registerColor('list.activeSelectionBackground', {\n  dark: '#094771',\n  light: '#0074E8',\n  hc: null\n}, nls.localize('listActiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listActiveSelectionForeground = registerColor('list.activeSelectionForeground', {\n  dark: Color.white,\n  light: Color.white,\n  hc: null\n}, nls.localize('listActiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is active. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listInactiveSelectionBackground = registerColor('list.inactiveSelectionBackground', {\n  dark: '#37373D',\n  light: '#E4E6F1',\n  hc: null\n}, nls.localize('listInactiveSelectionBackground', \"List/Tree background color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listInactiveSelectionForeground = registerColor('list.inactiveSelectionForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveSelectionForeground', \"List/Tree foreground color for the selected item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listInactiveFocusBackground = registerColor('list.inactiveFocusBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listInactiveFocusBackground', \"List/Tree background color for the focused item when the list/tree is inactive. An active list/tree has keyboard focus, an inactive does not.\"));\nexport var listHoverBackground = registerColor('list.hoverBackground', {\n  dark: '#2A2D2E',\n  light: '#F0F0F0',\n  hc: null\n}, nls.localize('listHoverBackground', \"List/Tree background when hovering over items using the mouse.\"));\nexport var listHoverForeground = registerColor('list.hoverForeground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('listHoverForeground', \"List/Tree foreground when hovering over items using the mouse.\"));\nexport var listDropBackground = registerColor('list.dropBackground', {\n  dark: listFocusBackground,\n  light: listFocusBackground,\n  hc: null\n}, nls.localize('listDropBackground', \"List/Tree drag and drop background when moving items around using the mouse.\"));\nexport var listHighlightForeground = registerColor('list.highlightForeground', {\n  dark: '#0097fb',\n  light: '#0066BF',\n  hc: focusBorder\n}, nls.localize('highlight', 'List/Tree foreground color of the match highlights when searching inside the list/tree.'));\nexport var listFilterWidgetBackground = registerColor('listFilterWidget.background', {\n  light: '#efc1ad',\n  dark: '#653723',\n  hc: Color.black\n}, nls.localize('listFilterWidgetBackground', 'Background color of the type filter widget in lists and trees.'));\nexport var listFilterWidgetOutline = registerColor('listFilterWidget.outline', {\n  dark: Color.transparent,\n  light: Color.transparent,\n  hc: '#f38518'\n}, nls.localize('listFilterWidgetOutline', 'Outline color of the type filter widget in lists and trees.'));\nexport var listFilterWidgetNoMatchesOutline = registerColor('listFilterWidget.noMatchesOutline', {\n  dark: '#BE1100',\n  light: '#BE1100',\n  hc: contrastBorder\n}, nls.localize('listFilterWidgetNoMatchesOutline', 'Outline color of the type filter widget in lists and trees, when there are no matches.'));\nexport var treeIndentGuidesStroke = registerColor('tree.indentGuidesStroke', {\n  dark: '#585858',\n  light: '#a9a9a9',\n  hc: '#a9a9a9'\n}, nls.localize('treeIndentGuidesStroke', \"Tree stroke color for the indentation guides.\"));\nexport var pickerGroupForeground = registerColor('pickerGroup.foreground', {\n  dark: '#3794FF',\n  light: '#0066BF',\n  hc: Color.white\n}, nls.localize('pickerGroupForeground', \"Quick picker color for grouping labels.\"));\nexport var pickerGroupBorder = registerColor('pickerGroup.border', {\n  dark: '#3F3F46',\n  light: '#CCCEDB',\n  hc: Color.white\n}, nls.localize('pickerGroupBorder', \"Quick picker color for grouping borders.\"));\nexport var badgeBackground = registerColor('badge.background', {\n  dark: '#4D4D4D',\n  light: '#C4C4C4',\n  hc: Color.black\n}, nls.localize('badgeBackground', \"Badge background color. Badges are small information labels, e.g. for search results count.\"));\nexport var badgeForeground = registerColor('badge.foreground', {\n  dark: Color.white,\n  light: '#333',\n  hc: Color.white\n}, nls.localize('badgeForeground', \"Badge foreground color. Badges are small information labels, e.g. for search results count.\"));\nexport var scrollbarShadow = registerColor('scrollbar.shadow', {\n  dark: '#000000',\n  light: '#DDDDDD',\n  hc: null\n}, nls.localize('scrollbarShadow', \"Scrollbar shadow to indicate that the view is scrolled.\"));\nexport var scrollbarSliderBackground = registerColor('scrollbarSlider.background', {\n  dark: Color.fromHex('#797979').transparent(0.4),\n  light: Color.fromHex('#646464').transparent(0.4),\n  hc: transparent(contrastBorder, 0.6)\n}, nls.localize('scrollbarSliderBackground', \"Scrollbar slider background color.\"));\nexport var scrollbarSliderHoverBackground = registerColor('scrollbarSlider.hoverBackground', {\n  dark: Color.fromHex('#646464').transparent(0.7),\n  light: Color.fromHex('#646464').transparent(0.7),\n  hc: transparent(contrastBorder, 0.8)\n}, nls.localize('scrollbarSliderHoverBackground', \"Scrollbar slider background color when hovering.\"));\nexport var scrollbarSliderActiveBackground = registerColor('scrollbarSlider.activeBackground', {\n  dark: Color.fromHex('#BFBFBF').transparent(0.4),\n  light: Color.fromHex('#000000').transparent(0.6),\n  hc: contrastBorder\n}, nls.localize('scrollbarSliderActiveBackground', \"Scrollbar slider background color when clicked on.\"));\nexport var progressBarBackground = registerColor('progressBar.background', {\n  dark: Color.fromHex('#0E70C0'),\n  light: Color.fromHex('#0E70C0'),\n  hc: contrastBorder\n}, nls.localize('progressBarBackground', \"Background color of the progress bar that can show for long running operations.\"));\nexport var menuBorder = registerColor('menu.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('menuBorder', \"Border color of menus.\"));\nexport var menuForeground = registerColor('menu.foreground', {\n  dark: selectForeground,\n  light: foreground,\n  hc: selectForeground\n}, nls.localize('menuForeground', \"Foreground color of menu items.\"));\nexport var menuBackground = registerColor('menu.background', {\n  dark: selectBackground,\n  light: selectBackground,\n  hc: selectBackground\n}, nls.localize('menuBackground', \"Background color of menu items.\"));\nexport var menuSelectionForeground = registerColor('menu.selectionForeground', {\n  dark: listActiveSelectionForeground,\n  light: listActiveSelectionForeground,\n  hc: listActiveSelectionForeground\n}, nls.localize('menuSelectionForeground', \"Foreground color of the selected menu item in menus.\"));\nexport var menuSelectionBackground = registerColor('menu.selectionBackground', {\n  dark: listActiveSelectionBackground,\n  light: listActiveSelectionBackground,\n  hc: listActiveSelectionBackground\n}, nls.localize('menuSelectionBackground', \"Background color of the selected menu item in menus.\"));\nexport var menuSelectionBorder = registerColor('menu.selectionBorder', {\n  dark: null,\n  light: null,\n  hc: activeContrastBorder\n}, nls.localize('menuSelectionBorder', \"Border color of the selected menu item in menus.\"));\nexport var menuSeparatorBackground = registerColor('menu.separatorBackground', {\n  dark: '#BBBBBB',\n  light: '#888888',\n  hc: contrastBorder\n}, nls.localize('menuSeparatorBackground', \"Color of a separator menu item in menus.\"));\nexport var editorErrorForeground = registerColor('editorError.foreground', {\n  dark: '#F48771',\n  light: '#E51400',\n  hc: null\n}, nls.localize('editorError.foreground', 'Foreground color of error squigglies in the editor.'));\nexport var editorErrorBorder = registerColor('editorError.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#E47777').transparent(0.8)\n}, nls.localize('errorBorder', 'Border color of error boxes in the editor.'));\nexport var editorWarningForeground = registerColor('editorWarning.foreground', {\n  dark: '#CCA700',\n  light: '#E9A700',\n  hc: null\n}, nls.localize('editorWarning.foreground', 'Foreground color of warning squigglies in the editor.'));\nexport var editorWarningBorder = registerColor('editorWarning.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#FFCC00').transparent(0.8)\n}, nls.localize('warningBorder', 'Border color of warning boxes in the editor.'));\nexport var editorInfoForeground = registerColor('editorInfo.foreground', {\n  dark: '#75BEFF',\n  light: '#75BEFF',\n  hc: null\n}, nls.localize('editorInfo.foreground', 'Foreground color of info squigglies in the editor.'));\nexport var editorInfoBorder = registerColor('editorInfo.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#75BEFF').transparent(0.8)\n}, nls.localize('infoBorder', 'Border color of info boxes in the editor.'));\nexport var editorHintForeground = registerColor('editorHint.foreground', {\n  dark: Color.fromHex('#eeeeee').transparent(0.7),\n  light: '#6c6c6c',\n  hc: null\n}, nls.localize('editorHint.foreground', 'Foreground color of hint squigglies in the editor.'));\nexport var editorHintBorder = registerColor('editorHint.border', {\n  dark: null,\n  light: null,\n  hc: Color.fromHex('#eeeeee').transparent(0.8)\n}, nls.localize('hintBorder', 'Border color of hint boxes in the editor.'));\n/**\n * Editor background color.\n * Because of bug https://monacotools.visualstudio.com/DefaultCollection/Monaco/_workitems/edit/13254\n * we are *not* using the color white (or #ffffff, rgba(255,255,255)) but something very close to white.\n */\n\nexport var editorBackground = registerColor('editor.background', {\n  light: '#fffffe',\n  dark: '#1E1E1E',\n  hc: Color.black\n}, nls.localize('editorBackground', \"Editor background color.\"));\n/**\n * Editor foreground color.\n */\n\nexport var editorForeground = registerColor('editor.foreground', {\n  light: '#333333',\n  dark: '#BBBBBB',\n  hc: Color.white\n}, nls.localize('editorForeground', \"Editor default foreground color.\"));\n/**\n * Editor widgets\n */\n\nexport var editorWidgetBackground = registerColor('editorWidget.background', {\n  dark: '#252526',\n  light: '#F3F3F3',\n  hc: '#0C141F'\n}, nls.localize('editorWidgetBackground', 'Background color of editor widgets, such as find/replace.'));\nexport var editorWidgetForeground = registerColor('editorWidget.foreground', {\n  dark: foreground,\n  light: foreground,\n  hc: foreground\n}, nls.localize('editorWidgetForeground', 'Foreground color of editor widgets, such as find/replace.'));\nexport var editorWidgetBorder = registerColor('editorWidget.border', {\n  dark: '#454545',\n  light: '#C8C8C8',\n  hc: contrastBorder\n}, nls.localize('editorWidgetBorder', 'Border color of editor widgets. The color is only used if the widget chooses to have a border and if the color is not overridden by a widget.'));\nexport var editorWidgetResizeBorder = registerColor('editorWidget.resizeBorder', {\n  light: null,\n  dark: null,\n  hc: null\n}, nls.localize('editorWidgetResizeBorder', \"Border color of the resize bar of editor widgets. The color is only used if the widget chooses to have a resize border and if the color is not overridden by a widget.\"));\n/**\n * Editor selection colors.\n */\n\nexport var editorSelectionBackground = registerColor('editor.selectionBackground', {\n  light: '#ADD6FF',\n  dark: '#264F78',\n  hc: '#f3f518'\n}, nls.localize('editorSelectionBackground', \"Color of the editor selection.\"));\nexport var editorSelectionForeground = registerColor('editor.selectionForeground', {\n  light: null,\n  dark: null,\n  hc: '#000000'\n}, nls.localize('editorSelectionForeground', \"Color of the selected text for high contrast.\"));\nexport var editorInactiveSelection = registerColor('editor.inactiveSelectionBackground', {\n  light: transparent(editorSelectionBackground, 0.5),\n  dark: transparent(editorSelectionBackground, 0.5),\n  hc: transparent(editorSelectionBackground, 0.5)\n}, nls.localize('editorInactiveSelection', \"Color of the selection in an inactive editor. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorSelectionHighlight = registerColor('editor.selectionHighlightBackground', {\n  light: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  dark: lessProminent(editorSelectionBackground, editorBackground, 0.3, 0.6),\n  hc: null\n}, nls.localize('editorSelectionHighlight', 'Color for regions with the same content as the selection. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorSelectionHighlightBorder = registerColor('editor.selectionHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorSelectionHighlightBorder', \"Border color for regions with the same content as the selection.\"));\n/**\n * Editor find match colors.\n */\n\nexport var editorFindMatch = registerColor('editor.findMatchBackground', {\n  light: '#A8AC94',\n  dark: '#515C6A',\n  hc: null\n}, nls.localize('editorFindMatch', \"Color of the current search match.\"));\nexport var editorFindMatchHighlight = registerColor('editor.findMatchHighlightBackground', {\n  light: '#EA5C0055',\n  dark: '#EA5C0055',\n  hc: null\n}, nls.localize('findMatchHighlight', \"Color of the other search matches. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorFindRangeHighlight = registerColor('editor.findRangeHighlightBackground', {\n  dark: '#3a3d4166',\n  light: '#b4b4b44d',\n  hc: null\n}, nls.localize('findRangeHighlight', \"Color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\nexport var editorFindMatchBorder = registerColor('editor.findMatchBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('editorFindMatchBorder', \"Border color of the current search match.\"));\nexport var editorFindMatchHighlightBorder = registerColor('editor.findMatchHighlightBorder', {\n  light: null,\n  dark: null,\n  hc: activeContrastBorder\n}, nls.localize('findMatchHighlightBorder', \"Border color of the other search matches.\"));\nexport var editorFindRangeHighlightBorder = registerColor('editor.findRangeHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: transparent(activeContrastBorder, 0.4)\n}, nls.localize('findRangeHighlightBorder', \"Border color of the range limiting the search. The color must not be opaque so as not to hide underlying decorations.\"), true);\n/**\n * Editor hover\n */\n\nexport var editorHoverHighlight = registerColor('editor.hoverHighlightBackground', {\n  light: '#ADD6FF26',\n  dark: '#264f7840',\n  hc: '#ADD6FF26'\n}, nls.localize('hoverHighlight', 'Highlight below the word for which a hover is shown. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var editorHoverBackground = registerColor('editorHoverWidget.background', {\n  light: editorWidgetBackground,\n  dark: editorWidgetBackground,\n  hc: editorWidgetBackground\n}, nls.localize('hoverBackground', 'Background color of the editor hover.'));\nexport var editorHoverBorder = registerColor('editorHoverWidget.border', {\n  light: editorWidgetBorder,\n  dark: editorWidgetBorder,\n  hc: editorWidgetBorder\n}, nls.localize('hoverBorder', 'Border color of the editor hover.'));\nexport var editorHoverStatusBarBackground = registerColor('editorHoverWidget.statusBarBackground', {\n  dark: lighten(editorHoverBackground, 0.2),\n  light: darken(editorHoverBackground, 0.05),\n  hc: editorWidgetBackground\n}, nls.localize('statusBarBackground', \"Background color of the editor hover status bar.\"));\n/**\n * Editor link colors\n */\n\nexport var editorActiveLinkForeground = registerColor('editorLink.activeForeground', {\n  dark: '#4E94CE',\n  light: Color.blue,\n  hc: Color.cyan\n}, nls.localize('activeLinkForeground', 'Color of active links.'));\n/**\n * Diff Editor Colors\n */\n\nexport var defaultInsertColor = new Color(new RGBA(155, 185, 85, 0.2));\nexport var defaultRemoveColor = new Color(new RGBA(255, 0, 0, 0.2));\nexport var diffInserted = registerColor('diffEditor.insertedTextBackground', {\n  dark: defaultInsertColor,\n  light: defaultInsertColor,\n  hc: null\n}, nls.localize('diffEditorInserted', 'Background color for text that got inserted. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffRemoved = registerColor('diffEditor.removedTextBackground', {\n  dark: defaultRemoveColor,\n  light: defaultRemoveColor,\n  hc: null\n}, nls.localize('diffEditorRemoved', 'Background color for text that got removed. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var diffInsertedOutline = registerColor('diffEditor.insertedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#33ff2eff'\n}, nls.localize('diffEditorInsertedOutline', 'Outline color for the text that got inserted.'));\nexport var diffRemovedOutline = registerColor('diffEditor.removedTextBorder', {\n  dark: null,\n  light: null,\n  hc: '#FF008F'\n}, nls.localize('diffEditorRemovedOutline', 'Outline color for text that got removed.'));\nexport var diffBorder = registerColor('diffEditor.border', {\n  dark: null,\n  light: null,\n  hc: contrastBorder\n}, nls.localize('diffEditorBorder', 'Border color between the two text editors.'));\n/**\n * Snippet placeholder colors\n */\n\nexport var snippetTabstopHighlightBackground = registerColor('editor.snippetTabstopHighlightBackground', {\n  dark: new Color(new RGBA(124, 124, 124, 0.3)),\n  light: new Color(new RGBA(10, 50, 100, 0.2)),\n  hc: new Color(new RGBA(124, 124, 124, 0.3))\n}, nls.localize('snippetTabstopHighlightBackground', \"Highlight background color of a snippet tabstop.\"));\nexport var snippetTabstopHighlightBorder = registerColor('editor.snippetTabstopHighlightBorder', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetTabstopHighlightBorder', \"Highlight border color of a snippet tabstop.\"));\nexport var snippetFinalTabstopHighlightBackground = registerColor('editor.snippetFinalTabstopHighlightBackground', {\n  dark: null,\n  light: null,\n  hc: null\n}, nls.localize('snippetFinalTabstopHighlightBackground', \"Highlight background color of the final tabstop of a snippet.\"));\nexport var snippetFinalTabstopHighlightBorder = registerColor('editor.snippetFinalTabstopHighlightBorder', {\n  dark: '#525252',\n  light: new Color(new RGBA(10, 50, 100, 0.5)),\n  hc: '#525252'\n}, nls.localize('snippetFinalTabstopHighlightBorder', \"Highlight border color of the final stabstop of a snippet.\"));\nexport var overviewRulerFindMatchForeground = registerColor('editorOverviewRuler.findMatchForeground', {\n  dark: '#d186167e',\n  light: '#d186167e',\n  hc: '#AB5A00'\n}, nls.localize('overviewRulerFindMatchForeground', 'Overview ruler marker color for find matches. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var overviewRulerSelectionHighlightForeground = registerColor('editorOverviewRuler.selectionHighlightForeground', {\n  dark: '#A0A0A0CC',\n  light: '#A0A0A0CC',\n  hc: '#A0A0A0CC'\n}, nls.localize('overviewRulerSelectionHighlightForeground', 'Overview ruler marker color for selection highlights. The color must not be opaque so as not to hide underlying decorations.'), true);\nexport var minimapFindMatch = registerColor('minimap.findMatchHighlight', {\n  light: '#d18616',\n  dark: '#d18616',\n  hc: '#AB5A00'\n}, nls.localize('minimapFindMatchHighlight', 'Minimap marker color for find matches.'), true); // ----- color functions\n\nexport function darken(colorValue, factor) {\n  return function (theme) {\n    var color = resolveColorValue(colorValue, theme);\n\n    if (color) {\n      return color.darken(factor);\n    }\n\n    return undefined;\n  };\n}\nexport function lighten(colorValue, factor) {\n  return function (theme) {\n    var color = resolveColorValue(colorValue, theme);\n\n    if (color) {\n      return color.lighten(factor);\n    }\n\n    return undefined;\n  };\n}\nexport function transparent(colorValue, factor) {\n  return function (theme) {\n    var color = resolveColorValue(colorValue, theme);\n\n    if (color) {\n      return color.transparent(factor);\n    }\n\n    return undefined;\n  };\n}\nexport function oneOf() {\n  var colorValues = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    colorValues[_i] = arguments[_i];\n  }\n\n  return function (theme) {\n    for (var _i = 0, colorValues_1 = colorValues; _i < colorValues_1.length; _i++) {\n      var colorValue = colorValues_1[_i];\n      var color = resolveColorValue(colorValue, theme);\n\n      if (color) {\n        return color;\n      }\n    }\n\n    return undefined;\n  };\n}\n\nfunction lessProminent(colorValue, backgroundColorValue, factor, transparency) {\n  return function (theme) {\n    var from = resolveColorValue(colorValue, theme);\n\n    if (from) {\n      var backgroundColor = resolveColorValue(backgroundColorValue, theme);\n\n      if (backgroundColor) {\n        if (from.isDarkerThan(backgroundColor)) {\n          return Color.getLighterColor(from, backgroundColor, factor).transparent(transparency);\n        }\n\n        return Color.getDarkerColor(from, backgroundColor, factor).transparent(transparency);\n      }\n\n      return from.transparent(factor * transparency);\n    }\n\n    return undefined;\n  };\n} // ----- implementation\n\n/**\n * @param colorValue Resolve a color value in the context of a theme\n */\n\n\nfunction resolveColorValue(colorValue, theme) {\n  if (colorValue === null) {\n    return undefined;\n  } else if (typeof colorValue === 'string') {\n    if (colorValue[0] === '#') {\n      return Color.fromHex(colorValue);\n    }\n\n    return theme.getColor(colorValue);\n  } else if (colorValue instanceof Color) {\n    return colorValue;\n  } else if (typeof colorValue === 'function') {\n    return colorValue(theme);\n  }\n\n  return undefined;\n}\n\nexport var workbenchColorsSchemaId = 'vscode://schemas/workbench-colors';\nvar schemaRegistry = platform.Registry.as(JSONExtensions.JSONContribution);\nschemaRegistry.registerSchema(workbenchColorsSchemaId, colorRegistry.getColorSchema());\nvar delayer = new RunOnceScheduler(function () {\n  return schemaRegistry.notifySchemaChanged(workbenchColorsSchemaId);\n}, 200);\ncolorRegistry.onDidChangeSchema(function () {\n  if (!delayer.isScheduled()) {\n    delayer.schedule();\n  }\n}); // setTimeout(_ => console.log(colorRegistry.toString()), 5000);","map":null,"metadata":{},"sourceType":"module"}