{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nodes from '../parser/cssNodes.js';\nimport * as nls from '../../../fillers/vscode-nls.js';\nvar localize = nls.loadMessageBundle();\nexport var colorFunctions = [{\n  func: 'rgb($red, $green, $blue)',\n  desc: localize('css.builtin.rgb', 'Creates a Color from red, green, and blue values.')\n}, {\n  func: 'rgba($red, $green, $blue, $alpha)',\n  desc: localize('css.builtin.rgba', 'Creates a Color from red, green, blue, and alpha values.')\n}, {\n  func: 'hsl($hue, $saturation, $lightness)',\n  desc: localize('css.builtin.hsl', 'Creates a Color from hue, saturation, and lightness values.')\n}, {\n  func: 'hsla($hue, $saturation, $lightness, $alpha)',\n  desc: localize('css.builtin.hsla', 'Creates a Color from hue, saturation, lightness, and alpha values.')\n}];\nexport var colors = {\n  aliceblue: '#f0f8ff',\n  antiquewhite: '#faebd7',\n  aqua: '#00ffff',\n  aquamarine: '#7fffd4',\n  azure: '#f0ffff',\n  beige: '#f5f5dc',\n  bisque: '#ffe4c4',\n  black: '#000000',\n  blanchedalmond: '#ffebcd',\n  blue: '#0000ff',\n  blueviolet: '#8a2be2',\n  brown: '#a52a2a',\n  burlywood: '#deb887',\n  cadetblue: '#5f9ea0',\n  chartreuse: '#7fff00',\n  chocolate: '#d2691e',\n  coral: '#ff7f50',\n  cornflowerblue: '#6495ed',\n  cornsilk: '#fff8dc',\n  crimson: '#dc143c',\n  cyan: '#00ffff',\n  darkblue: '#00008b',\n  darkcyan: '#008b8b',\n  darkgoldenrod: '#b8860b',\n  darkgray: '#a9a9a9',\n  darkgrey: '#a9a9a9',\n  darkgreen: '#006400',\n  darkkhaki: '#bdb76b',\n  darkmagenta: '#8b008b',\n  darkolivegreen: '#556b2f',\n  darkorange: '#ff8c00',\n  darkorchid: '#9932cc',\n  darkred: '#8b0000',\n  darksalmon: '#e9967a',\n  darkseagreen: '#8fbc8f',\n  darkslateblue: '#483d8b',\n  darkslategray: '#2f4f4f',\n  darkslategrey: '#2f4f4f',\n  darkturquoise: '#00ced1',\n  darkviolet: '#9400d3',\n  deeppink: '#ff1493',\n  deepskyblue: '#00bfff',\n  dimgray: '#696969',\n  dimgrey: '#696969',\n  dodgerblue: '#1e90ff',\n  firebrick: '#b22222',\n  floralwhite: '#fffaf0',\n  forestgreen: '#228b22',\n  fuchsia: '#ff00ff',\n  gainsboro: '#dcdcdc',\n  ghostwhite: '#f8f8ff',\n  gold: '#ffd700',\n  goldenrod: '#daa520',\n  gray: '#808080',\n  grey: '#808080',\n  green: '#008000',\n  greenyellow: '#adff2f',\n  honeydew: '#f0fff0',\n  hotpink: '#ff69b4',\n  indianred: '#cd5c5c',\n  indigo: '#4b0082',\n  ivory: '#fffff0',\n  khaki: '#f0e68c',\n  lavender: '#e6e6fa',\n  lavenderblush: '#fff0f5',\n  lawngreen: '#7cfc00',\n  lemonchiffon: '#fffacd',\n  lightblue: '#add8e6',\n  lightcoral: '#f08080',\n  lightcyan: '#e0ffff',\n  lightgoldenrodyellow: '#fafad2',\n  lightgray: '#d3d3d3',\n  lightgrey: '#d3d3d3',\n  lightgreen: '#90ee90',\n  lightpink: '#ffb6c1',\n  lightsalmon: '#ffa07a',\n  lightseagreen: '#20b2aa',\n  lightskyblue: '#87cefa',\n  lightslategray: '#778899',\n  lightslategrey: '#778899',\n  lightsteelblue: '#b0c4de',\n  lightyellow: '#ffffe0',\n  lime: '#00ff00',\n  limegreen: '#32cd32',\n  linen: '#faf0e6',\n  magenta: '#ff00ff',\n  maroon: '#800000',\n  mediumaquamarine: '#66cdaa',\n  mediumblue: '#0000cd',\n  mediumorchid: '#ba55d3',\n  mediumpurple: '#9370d8',\n  mediumseagreen: '#3cb371',\n  mediumslateblue: '#7b68ee',\n  mediumspringgreen: '#00fa9a',\n  mediumturquoise: '#48d1cc',\n  mediumvioletred: '#c71585',\n  midnightblue: '#191970',\n  mintcream: '#f5fffa',\n  mistyrose: '#ffe4e1',\n  moccasin: '#ffe4b5',\n  navajowhite: '#ffdead',\n  navy: '#000080',\n  oldlace: '#fdf5e6',\n  olive: '#808000',\n  olivedrab: '#6b8e23',\n  orange: '#ffa500',\n  orangered: '#ff4500',\n  orchid: '#da70d6',\n  palegoldenrod: '#eee8aa',\n  palegreen: '#98fb98',\n  paleturquoise: '#afeeee',\n  palevioletred: '#d87093',\n  papayawhip: '#ffefd5',\n  peachpuff: '#ffdab9',\n  peru: '#cd853f',\n  pink: '#ffc0cb',\n  plum: '#dda0dd',\n  powderblue: '#b0e0e6',\n  purple: '#800080',\n  red: '#ff0000',\n  rebeccapurple: '#663399',\n  rosybrown: '#bc8f8f',\n  royalblue: '#4169e1',\n  saddlebrown: '#8b4513',\n  salmon: '#fa8072',\n  sandybrown: '#f4a460',\n  seagreen: '#2e8b57',\n  seashell: '#fff5ee',\n  sienna: '#a0522d',\n  silver: '#c0c0c0',\n  skyblue: '#87ceeb',\n  slateblue: '#6a5acd',\n  slategray: '#708090',\n  slategrey: '#708090',\n  snow: '#fffafa',\n  springgreen: '#00ff7f',\n  steelblue: '#4682b4',\n  tan: '#d2b48c',\n  teal: '#008080',\n  thistle: '#d8bfd8',\n  tomato: '#ff6347',\n  turquoise: '#40e0d0',\n  violet: '#ee82ee',\n  wheat: '#f5deb3',\n  white: '#ffffff',\n  whitesmoke: '#f5f5f5',\n  yellow: '#ffff00',\n  yellowgreen: '#9acd32'\n};\nexport var colorKeywords = {\n  'currentColor': 'The value of the \\'color\\' property. The computed value of the \\'currentColor\\' keyword is the computed value of the \\'color\\' property. If the \\'currentColor\\' keyword is set on the \\'color\\' property itself, it is treated as \\'color:inherit\\' at parse time.',\n  'transparent': 'Fully transparent. This keyword can be considered a shorthand for rgba(0,0,0,0) which is its computed value.'\n};\n\nfunction getNumericValue(node, factor) {\n  var val = node.getText();\n  var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(%?)$/);\n\n  if (m) {\n    if (m[2]) {\n      factor = 100.0;\n    }\n\n    var result = parseFloat(m[1]) / factor;\n\n    if (result >= 0 && result <= 1) {\n      return result;\n    }\n  }\n\n  throw new Error();\n}\n\nfunction getAngle(node) {\n  var val = node.getText();\n  var m = val.match(/^([-+]?[0-9]*\\.?[0-9]+)(deg)?$/);\n\n  if (m) {\n    return parseFloat(val) % 360;\n  }\n\n  throw new Error();\n}\n\nexport function isColorConstructor(node) {\n  var name = node.getName();\n\n  if (!name) {\n    return false;\n  }\n\n  return /^(rgb|rgba|hsl|hsla)$/gi.test(name);\n}\n/**\n * Returns true if the node is a color value - either\n * defined a hex number, as rgb or rgba function, or\n * as color name.\n */\n\nexport function isColorValue(node) {\n  if (node.type === nodes.NodeType.HexColorValue) {\n    return true;\n  } else if (node.type === nodes.NodeType.Function) {\n    return isColorConstructor(node);\n  } else if (node.type === nodes.NodeType.Identifier) {\n    if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n      return false;\n    }\n\n    var candidateColor = node.getText().toLowerCase();\n\n    if (candidateColor === 'none') {\n      return false;\n    }\n\n    if (colors[candidateColor]) {\n      return true;\n    }\n  }\n\n  return false;\n}\nvar Digit0 = 48;\nvar Digit9 = 57;\nvar A = 65;\nvar F = 70;\nvar a = 97;\nvar f = 102;\nexport function hexDigit(charCode) {\n  if (charCode < Digit0) {\n    return 0;\n  }\n\n  if (charCode <= Digit9) {\n    return charCode - Digit0;\n  }\n\n  if (charCode < a) {\n    charCode += a - A;\n  }\n\n  if (charCode >= a && charCode <= f) {\n    return charCode - a + 10;\n  }\n\n  return 0;\n}\nexport function colorFromHex(text) {\n  if (text[0] !== '#') {\n    return null;\n  }\n\n  switch (text.length) {\n    case 4:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: 1\n      };\n\n    case 5:\n      return {\n        red: hexDigit(text.charCodeAt(1)) * 0x11 / 255.0,\n        green: hexDigit(text.charCodeAt(2)) * 0x11 / 255.0,\n        blue: hexDigit(text.charCodeAt(3)) * 0x11 / 255.0,\n        alpha: hexDigit(text.charCodeAt(4)) * 0x11 / 255.0\n      };\n\n    case 7:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: 1\n      };\n\n    case 9:\n      return {\n        red: (hexDigit(text.charCodeAt(1)) * 0x10 + hexDigit(text.charCodeAt(2))) / 255.0,\n        green: (hexDigit(text.charCodeAt(3)) * 0x10 + hexDigit(text.charCodeAt(4))) / 255.0,\n        blue: (hexDigit(text.charCodeAt(5)) * 0x10 + hexDigit(text.charCodeAt(6))) / 255.0,\n        alpha: (hexDigit(text.charCodeAt(7)) * 0x10 + hexDigit(text.charCodeAt(8))) / 255.0\n      };\n  }\n\n  return null;\n}\nexport function colorFrom256RGB(red, green, blue, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n\n  return {\n    red: red / 255.0,\n    green: green / 255.0,\n    blue: blue / 255.0,\n    alpha: alpha\n  };\n}\nexport function colorFromHSL(hue, sat, light, alpha) {\n  if (alpha === void 0) {\n    alpha = 1.0;\n  }\n\n  hue = hue / 60.0;\n\n  if (sat === 0) {\n    return {\n      red: light,\n      green: light,\n      blue: light,\n      alpha: alpha\n    };\n  } else {\n    var hueToRgb = function (t1, t2, hue) {\n      while (hue < 0) {\n        hue += 6;\n      }\n\n      while (hue >= 6) {\n        hue -= 6;\n      }\n\n      if (hue < 1) {\n        return (t2 - t1) * hue + t1;\n      }\n\n      if (hue < 3) {\n        return t2;\n      }\n\n      if (hue < 4) {\n        return (t2 - t1) * (4 - hue) + t1;\n      }\n\n      return t1;\n    };\n\n    var t2 = light <= 0.5 ? light * (sat + 1) : light + sat - light * sat;\n    var t1 = light * 2 - t2;\n    return {\n      red: hueToRgb(t1, t2, hue + 2),\n      green: hueToRgb(t1, t2, hue),\n      blue: hueToRgb(t1, t2, hue - 2),\n      alpha: alpha\n    };\n  }\n}\nexport function hslFromColor(rgba) {\n  var r = rgba.red;\n  var g = rgba.green;\n  var b = rgba.blue;\n  var a = rgba.alpha;\n  var max = Math.max(r, g, b);\n  var min = Math.min(r, g, b);\n  var h = 0;\n  var s = 0;\n  var l = (min + max) / 2;\n  var chroma = max - min;\n\n  if (chroma > 0) {\n    s = Math.min(l <= 0.5 ? chroma / (2 * l) : chroma / (2 - 2 * l), 1);\n\n    switch (max) {\n      case r:\n        h = (g - b) / chroma + (g < b ? 6 : 0);\n        break;\n\n      case g:\n        h = (b - r) / chroma + 2;\n        break;\n\n      case b:\n        h = (r - g) / chroma + 4;\n        break;\n    }\n\n    h *= 60;\n    h = Math.round(h);\n  }\n\n  return {\n    h: h,\n    s: s,\n    l: l,\n    a: a\n  };\n}\nexport function getColorValue(node) {\n  if (node.type === nodes.NodeType.HexColorValue) {\n    var text = node.getText();\n    return colorFromHex(text);\n  } else if (node.type === nodes.NodeType.Function) {\n    var functionNode = node;\n    var name = functionNode.getName();\n    var colorValues = functionNode.getArguments().getChildren();\n\n    if (!name || colorValues.length < 3 || colorValues.length > 4) {\n      return null;\n    }\n\n    try {\n      var alpha = colorValues.length === 4 ? getNumericValue(colorValues[3], 1) : 1;\n\n      if (name === 'rgb' || name === 'rgba') {\n        return {\n          red: getNumericValue(colorValues[0], 255.0),\n          green: getNumericValue(colorValues[1], 255.0),\n          blue: getNumericValue(colorValues[2], 255.0),\n          alpha: alpha\n        };\n      } else if (name === 'hsl' || name === 'hsla') {\n        var h = getAngle(colorValues[0]);\n        var s = getNumericValue(colorValues[1], 100.0);\n        var l = getNumericValue(colorValues[2], 100.0);\n        return colorFromHSL(h, s, l, alpha);\n      }\n    } catch (e) {\n      // parse error on numeric value\n      return null;\n    }\n  } else if (node.type === nodes.NodeType.Identifier) {\n    if (node.parent && node.parent.type !== nodes.NodeType.Term) {\n      return null;\n    }\n\n    var term = node.parent;\n\n    if (term.parent && term.parent.type === nodes.NodeType.BinaryExpression) {\n      var expression = term.parent;\n\n      if (expression.parent && expression.parent.type === nodes.NodeType.ListEntry && expression.parent.key === expression) {\n        return null;\n      }\n    }\n\n    var candidateColor = node.getText().toLowerCase();\n\n    if (candidateColor === 'none') {\n      return null;\n    }\n\n    var colorHex = colors[candidateColor];\n\n    if (colorHex) {\n      return colorFromHex(colorHex);\n    }\n  }\n\n  return null;\n}","map":null,"metadata":{},"sourceType":"module"}