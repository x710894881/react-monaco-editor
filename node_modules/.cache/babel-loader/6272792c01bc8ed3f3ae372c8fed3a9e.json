{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './rulers.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { ViewPart } from '../../view/viewPart.js';\nimport { editorRuler } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\n\nvar Rulers =\n/** @class */\nfunction (_super) {\n  __extends(Rulers, _super);\n\n  function Rulers(context) {\n    var _this = _super.call(this, context) || this;\n\n    _this.domNode = createFastDomNode(document.createElement('div'));\n\n    _this.domNode.setAttribute('role', 'presentation');\n\n    _this.domNode.setAttribute('aria-hidden', 'true');\n\n    _this.domNode.setClassName('view-rulers');\n\n    _this._renderedRulers = [];\n    _this._rulers = _this._context.configuration.editor.viewInfo.rulers;\n    _this._typicalHalfwidthCharacterWidth = _this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n    return _this;\n  }\n\n  Rulers.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  Rulers.prototype.onConfigurationChanged = function (e) {\n    if (e.viewInfo || e.layoutInfo || e.fontInfo) {\n      this._rulers = this._context.configuration.editor.viewInfo.rulers;\n      this._typicalHalfwidthCharacterWidth = this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n      return true;\n    }\n\n    return false;\n  };\n\n  Rulers.prototype.onScrollChanged = function (e) {\n    return e.scrollHeightChanged;\n  }; // --- end event handlers\n\n\n  Rulers.prototype.prepareRender = function (ctx) {// Nothing to read\n  };\n\n  Rulers.prototype._ensureRulersCount = function () {\n    var currentCount = this._renderedRulers.length;\n    var desiredCount = this._rulers.length;\n\n    if (currentCount === desiredCount) {\n      // Nothing to do\n      return;\n    }\n\n    if (currentCount < desiredCount) {\n      var tabSize = this._context.model.getOptions().tabSize;\n\n      var rulerWidth = tabSize;\n      var addCount = desiredCount - currentCount;\n\n      while (addCount > 0) {\n        var node = createFastDomNode(document.createElement('div'));\n        node.setClassName('view-ruler');\n        node.setWidth(rulerWidth);\n        this.domNode.appendChild(node);\n\n        this._renderedRulers.push(node);\n\n        addCount--;\n      }\n\n      return;\n    }\n\n    var removeCount = currentCount - desiredCount;\n\n    while (removeCount > 0) {\n      var node = this._renderedRulers.pop();\n\n      this.domNode.removeChild(node);\n      removeCount--;\n    }\n  };\n\n  Rulers.prototype.render = function (ctx) {\n    this._ensureRulersCount();\n\n    for (var i = 0, len = this._rulers.length; i < len; i++) {\n      var node = this._renderedRulers[i];\n      node.setHeight(Math.min(ctx.scrollHeight, 1000000));\n      node.setLeft(this._rulers[i] * this._typicalHalfwidthCharacterWidth);\n    }\n  };\n\n  return Rulers;\n}(ViewPart);\n\nexport { Rulers };\nregisterThemingParticipant(function (theme, collector) {\n  var rulerColor = theme.getColor(editorRuler);\n\n  if (rulerColor) {\n    collector.addRule(\".monaco-editor .view-ruler { box-shadow: 1px 0 0 0 \" + rulerColor + \" inset; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}