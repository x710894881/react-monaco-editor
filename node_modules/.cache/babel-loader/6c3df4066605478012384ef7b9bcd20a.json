{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './gotoLine.css';\nimport * as strings from '../../../../base/common/strings.js';\nimport { QuickOpenEntry, QuickOpenModel } from '../../../../base/parts/quickopen/browser/quickOpenModel.js';\nimport { isCodeEditor } from '../../../browser/editorBrowser.js';\nimport { registerEditorAction } from '../../../browser/editorExtensions.js';\nimport { Position } from '../../../common/core/position.js';\nimport { Range } from '../../../common/core/range.js';\nimport { EditorContextKeys } from '../../../common/editorContextKeys.js';\nimport { BaseEditorQuickOpenAction } from './editorQuickOpen.js';\nimport { GoToLineNLS } from '../../../common/standaloneStrings.js';\n\nvar GotoLineEntry =\n/** @class */\nfunction (_super) {\n  __extends(GotoLineEntry, _super);\n\n  function GotoLineEntry(line, editor, decorator) {\n    var _this = _super.call(this) || this;\n\n    _this.editor = editor;\n    _this.decorator = decorator;\n    _this.parseResult = _this.parseInput(line);\n    return _this;\n  }\n\n  GotoLineEntry.prototype.parseInput = function (line) {\n    var numbers = line.split(',').map(function (part) {\n      return parseInt(part, 10);\n    }).filter(function (part) {\n      return !isNaN(part);\n    });\n    var position;\n\n    if (numbers.length === 0) {\n      position = new Position(-1, -1);\n    } else if (numbers.length === 1) {\n      position = new Position(numbers[0], 1);\n    } else {\n      position = new Position(numbers[0], numbers[1]);\n    }\n\n    var model;\n\n    if (isCodeEditor(this.editor)) {\n      model = this.editor.getModel();\n    } else {\n      var diffModel = this.editor.getModel();\n      model = diffModel ? diffModel.modified : null;\n    }\n\n    var isValid = model ? model.validatePosition(position).equals(position) : false;\n    var label;\n\n    if (isValid) {\n      if (position.column && position.column > 1) {\n        label = strings.format(GoToLineNLS.gotoLineLabelValidLineAndColumn, position.lineNumber, position.column);\n      } else {\n        label = strings.format(GoToLineNLS.gotoLineLabelValidLine, position.lineNumber);\n      }\n    } else if (position.lineNumber < 1 || position.lineNumber > (model ? model.getLineCount() : 0)) {\n      label = strings.format(GoToLineNLS.gotoLineLabelEmptyWithLineLimit, model ? model.getLineCount() : 0);\n    } else {\n      label = strings.format(GoToLineNLS.gotoLineLabelEmptyWithLineAndColumnLimit, model ? model.getLineMaxColumn(position.lineNumber) : 0);\n    }\n\n    return {\n      position: position,\n      isValid: isValid,\n      label: label\n    };\n  };\n\n  GotoLineEntry.prototype.getLabel = function () {\n    return this.parseResult.label;\n  };\n\n  GotoLineEntry.prototype.getAriaLabel = function () {\n    var position = this.editor.getPosition();\n    var currentLine = position ? position.lineNumber : 0;\n    return strings.format(GoToLineNLS.gotoLineAriaLabel, currentLine, this.parseResult.label);\n  };\n\n  GotoLineEntry.prototype.run = function (mode, _context) {\n    if (mode === 1\n    /* OPEN */\n    ) {\n        return this.runOpen();\n      }\n\n    return this.runPreview();\n  };\n\n  GotoLineEntry.prototype.runOpen = function () {\n    // No-op if range is not valid\n    if (!this.parseResult.isValid) {\n      return false;\n    } // Apply selection and focus\n\n\n    var range = this.toSelection();\n    this.editor.setSelection(range);\n    this.editor.revealRangeInCenter(range, 0\n    /* Smooth */\n    );\n    this.editor.focus();\n    return true;\n  };\n\n  GotoLineEntry.prototype.runPreview = function () {\n    // No-op if range is not valid\n    if (!this.parseResult.isValid) {\n      this.decorator.clearDecorations();\n      return false;\n    } // Select Line Position\n\n\n    var range = this.toSelection();\n    this.editor.revealRangeInCenter(range, 0\n    /* Smooth */\n    ); // Decorate if possible\n\n    this.decorator.decorateLine(range, this.editor);\n    return false;\n  };\n\n  GotoLineEntry.prototype.toSelection = function () {\n    return new Range(this.parseResult.position.lineNumber, this.parseResult.position.column, this.parseResult.position.lineNumber, this.parseResult.position.column);\n  };\n\n  return GotoLineEntry;\n}(QuickOpenEntry);\n\nexport { GotoLineEntry };\n\nvar GotoLineAction =\n/** @class */\nfunction (_super) {\n  __extends(GotoLineAction, _super);\n\n  function GotoLineAction() {\n    return _super.call(this, GoToLineNLS.gotoLineActionInput, {\n      id: 'editor.action.gotoLine',\n      label: GoToLineNLS.gotoLineActionLabel,\n      alias: 'Go to Line...',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048\n        /* CtrlCmd */\n        | 37\n        /* KEY_G */\n        ,\n        mac: {\n          primary: 256\n          /* WinCtrl */\n          | 37\n          /* KEY_G */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  GotoLineAction.prototype.run = function (accessor, editor) {\n    var _this = this;\n\n    this._show(this.getController(editor), {\n      getModel: function (value) {\n        return new QuickOpenModel([new GotoLineEntry(value, editor, _this.getController(editor))]);\n      },\n      getAutoFocus: function (searchValue) {\n        return {\n          autoFocusFirstEntry: searchValue.length > 0\n        };\n      }\n    });\n  };\n\n  return GotoLineAction;\n}(BaseEditorQuickOpenAction);\n\nexport { GotoLineAction };\nregisterEditorAction(GotoLineAction);","map":null,"metadata":{},"sourceType":"module"}