{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\n\nvar ColorPickerModel =\n/** @class */\nfunction () {\n  function ColorPickerModel(color, availableColorPresentations, presentationIndex) {\n    this.presentationIndex = presentationIndex;\n    this._onColorFlushed = new Emitter();\n    this.onColorFlushed = this._onColorFlushed.event;\n    this._onDidChangeColor = new Emitter();\n    this.onDidChangeColor = this._onDidChangeColor.event;\n    this._onDidChangePresentation = new Emitter();\n    this.onDidChangePresentation = this._onDidChangePresentation.event;\n    this.originalColor = color;\n    this._color = color;\n    this._colorPresentations = availableColorPresentations;\n  }\n\n  Object.defineProperty(ColorPickerModel.prototype, \"color\", {\n    get: function () {\n      return this._color;\n    },\n    set: function (color) {\n      if (this._color.equals(color)) {\n        return;\n      }\n\n      this._color = color;\n\n      this._onDidChangeColor.fire(color);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorPickerModel.prototype, \"presentation\", {\n    get: function () {\n      return this.colorPresentations[this.presentationIndex];\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ColorPickerModel.prototype, \"colorPresentations\", {\n    get: function () {\n      return this._colorPresentations;\n    },\n    set: function (colorPresentations) {\n      this._colorPresentations = colorPresentations;\n\n      if (this.presentationIndex > colorPresentations.length - 1) {\n        this.presentationIndex = 0;\n      }\n\n      this._onDidChangePresentation.fire(this.presentation);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ColorPickerModel.prototype.selectNextColorPresentation = function () {\n    this.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;\n    this.flushColor();\n\n    this._onDidChangePresentation.fire(this.presentation);\n  };\n\n  ColorPickerModel.prototype.guessColorPresentation = function (color, originalText) {\n    for (var i = 0; i < this.colorPresentations.length; i++) {\n      if (originalText === this.colorPresentations[i].label) {\n        this.presentationIndex = i;\n\n        this._onDidChangePresentation.fire(this.presentation);\n\n        break;\n      }\n    }\n  };\n\n  ColorPickerModel.prototype.flushColor = function () {\n    this._onColorFlushed.fire(this._color);\n  };\n\n  return ColorPickerModel;\n}();\n\nexport { ColorPickerModel };","map":null,"metadata":{},"sourceType":"module"}