{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar SpacesDiffResult =\n/** @class */\nfunction () {\n  function SpacesDiffResult() {\n    this.spacesDiff = 0;\n    this.looksLikeAlignment = false;\n  }\n\n  return SpacesDiffResult;\n}();\n/**\n * Compute the diff in spaces between two line's indentation.\n */\n\n\nfunction spacesDiff(a, aLength, b, bLength, result) {\n  result.spacesDiff = 0;\n  result.looksLikeAlignment = false; // This can go both ways (e.g.):\n  //  - a: \"\\t\"\n  //  - b: \"\\t    \"\n  //  => This should count 1 tab and 4 spaces\n\n  var i;\n\n  for (i = 0; i < aLength && i < bLength; i++) {\n    var aCharCode = a.charCodeAt(i);\n    var bCharCode = b.charCodeAt(i);\n\n    if (aCharCode !== bCharCode) {\n      break;\n    }\n  }\n\n  var aSpacesCnt = 0,\n      aTabsCount = 0;\n\n  for (var j = i; j < aLength; j++) {\n    var aCharCode = a.charCodeAt(j);\n\n    if (aCharCode === 32\n    /* Space */\n    ) {\n        aSpacesCnt++;\n      } else {\n      aTabsCount++;\n    }\n  }\n\n  var bSpacesCnt = 0,\n      bTabsCount = 0;\n\n  for (var j = i; j < bLength; j++) {\n    var bCharCode = b.charCodeAt(j);\n\n    if (bCharCode === 32\n    /* Space */\n    ) {\n        bSpacesCnt++;\n      } else {\n      bTabsCount++;\n    }\n  }\n\n  if (aSpacesCnt > 0 && aTabsCount > 0) {\n    return;\n  }\n\n  if (bSpacesCnt > 0 && bTabsCount > 0) {\n    return;\n  }\n\n  var tabsDiff = Math.abs(aTabsCount - bTabsCount);\n  var spacesDiff = Math.abs(aSpacesCnt - bSpacesCnt);\n\n  if (tabsDiff === 0) {\n    // check if the indentation difference might be caused by alignment reasons\n    // sometime folks like to align their code, but this should not be used as a hint\n    result.spacesDiff = spacesDiff;\n\n    if (spacesDiff > 0 && 0 <= bSpacesCnt - 1 && bSpacesCnt - 1 < a.length && bSpacesCnt < b.length) {\n      if (b.charCodeAt(bSpacesCnt) !== 32\n      /* Space */\n      && a.charCodeAt(bSpacesCnt - 1) === 32\n      /* Space */\n      ) {\n          // This looks like an alignment desire: e.g.\n          // const a = b + c,\n          //       d = b - c;\n          result.looksLikeAlignment = true;\n        }\n    }\n\n    return;\n  }\n\n  if (spacesDiff % tabsDiff === 0) {\n    result.spacesDiff = spacesDiff / tabsDiff;\n    return;\n  }\n}\n\nexport function guessIndentation(source, defaultTabSize, defaultInsertSpaces) {\n  // Look at most at the first 10k lines\n  var linesCount = Math.min(source.getLineCount(), 10000);\n  var linesIndentedWithTabsCount = 0; // number of lines that contain at least one tab in indentation\n\n  var linesIndentedWithSpacesCount = 0; // number of lines that contain only spaces in indentation\n\n  var previousLineText = ''; // content of latest line that contained non-whitespace chars\n\n  var previousLineIndentation = 0; // index at which latest line contained the first non-whitespace char\n\n  var ALLOWED_TAB_SIZE_GUESSES = [2, 4, 6, 8, 3, 5, 7]; // prefer even guesses for `tabSize`, limit to [2, 8].\n\n  var MAX_ALLOWED_TAB_SIZE_GUESS = 8; // max(ALLOWED_TAB_SIZE_GUESSES) = 8\n\n  var spacesDiffCount = [0, 0, 0, 0, 0, 0, 0, 0, 0]; // `tabSize` scores\n\n  var tmp = new SpacesDiffResult();\n\n  for (var lineNumber = 1; lineNumber <= linesCount; lineNumber++) {\n    var currentLineLength = source.getLineLength(lineNumber);\n    var currentLineText = source.getLineContent(lineNumber); // if the text buffer is chunk based, so long lines are cons-string, v8 will flattern the string when we check charCode.\n    // checking charCode on chunks directly is cheaper.\n\n    var useCurrentLineText = currentLineLength <= 65536;\n    var currentLineHasContent = false; // does `currentLineText` contain non-whitespace chars\n\n    var currentLineIndentation = 0; // index at which `currentLineText` contains the first non-whitespace char\n\n    var currentLineSpacesCount = 0; // count of spaces found in `currentLineText` indentation\n\n    var currentLineTabsCount = 0; // count of tabs found in `currentLineText` indentation\n\n    for (var j = 0, lenJ = currentLineLength; j < lenJ; j++) {\n      var charCode = useCurrentLineText ? currentLineText.charCodeAt(j) : source.getLineCharCode(lineNumber, j);\n\n      if (charCode === 9\n      /* Tab */\n      ) {\n          currentLineTabsCount++;\n        } else if (charCode === 32\n      /* Space */\n      ) {\n          currentLineSpacesCount++;\n        } else {\n        // Hit non whitespace character on this line\n        currentLineHasContent = true;\n        currentLineIndentation = j;\n        break;\n      }\n    } // Ignore empty or only whitespace lines\n\n\n    if (!currentLineHasContent) {\n      continue;\n    }\n\n    if (currentLineTabsCount > 0) {\n      linesIndentedWithTabsCount++;\n    } else if (currentLineSpacesCount > 1) {\n      linesIndentedWithSpacesCount++;\n    }\n\n    spacesDiff(previousLineText, previousLineIndentation, currentLineText, currentLineIndentation, tmp);\n\n    if (tmp.looksLikeAlignment) {\n      // if defaultInsertSpaces === true && the spaces count == tabSize, we may want to count it as valid indentation\n      //\n      // - item1\n      //   - item2\n      //\n      // otherwise skip this line entirely\n      //\n      // const a = 1,\n      //       b = 2;\n      if (!(defaultInsertSpaces && defaultTabSize === tmp.spacesDiff)) {\n        continue;\n      }\n    }\n\n    var currentSpacesDiff = tmp.spacesDiff;\n\n    if (currentSpacesDiff <= MAX_ALLOWED_TAB_SIZE_GUESS) {\n      spacesDiffCount[currentSpacesDiff]++;\n    }\n\n    previousLineText = currentLineText;\n    previousLineIndentation = currentLineIndentation;\n  }\n\n  var insertSpaces = defaultInsertSpaces;\n\n  if (linesIndentedWithTabsCount !== linesIndentedWithSpacesCount) {\n    insertSpaces = linesIndentedWithTabsCount < linesIndentedWithSpacesCount;\n  }\n\n  var tabSize = defaultTabSize; // Guess tabSize only if inserting spaces...\n\n  if (insertSpaces) {\n    var tabSizeScore_1 = insertSpaces ? 0 : 0.1 * linesCount; // console.log(\"score threshold: \" + tabSizeScore);\n\n    ALLOWED_TAB_SIZE_GUESSES.forEach(function (possibleTabSize) {\n      var possibleTabSizeScore = spacesDiffCount[possibleTabSize];\n\n      if (possibleTabSizeScore > tabSizeScore_1) {\n        tabSizeScore_1 = possibleTabSizeScore;\n        tabSize = possibleTabSize;\n      }\n    }); // Let a tabSize of 2 win even if it is not the maximum\n    // (only in case 4 was guessed)\n\n    if (tabSize === 4 && spacesDiffCount[4] > 0 && spacesDiffCount[2] > 0 && spacesDiffCount[2] >= spacesDiffCount[4] / 2) {\n      tabSize = 2;\n    }\n  } // console.log('--------------------------');\n  // console.log('linesIndentedWithTabsCount: ' + linesIndentedWithTabsCount + ', linesIndentedWithSpacesCount: ' + linesIndentedWithSpacesCount);\n  // console.log('spacesDiffCount: ' + spacesDiffCount);\n  // console.log('tabSize: ' + tabSize + ', tabSizeScore: ' + tabSizeScore);\n\n\n  return {\n    insertSpaces: insertSpaces,\n    tabSize: tabSize\n  };\n}","map":null,"metadata":{},"sourceType":"module"}