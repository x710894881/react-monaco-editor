{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Disposable } from '../../../base/common/lifecycle.js';\n\nvar ViewEventHandler =\n/** @class */\nfunction (_super) {\n  __extends(ViewEventHandler, _super);\n\n  function ViewEventHandler() {\n    var _this = _super.call(this) || this;\n\n    _this._shouldRender = true;\n    return _this;\n  }\n\n  ViewEventHandler.prototype.shouldRender = function () {\n    return this._shouldRender;\n  };\n\n  ViewEventHandler.prototype.forceShouldRender = function () {\n    this._shouldRender = true;\n  };\n\n  ViewEventHandler.prototype.setShouldRender = function () {\n    this._shouldRender = true;\n  };\n\n  ViewEventHandler.prototype.onDidRender = function () {\n    this._shouldRender = false;\n  }; // --- begin event handlers\n\n\n  ViewEventHandler.prototype.onConfigurationChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onCursorStateChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onDecorationsChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onFlushed = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onFocusChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onLanguageConfigurationChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onLineMappingChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onLinesChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onLinesDeleted = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onLinesInserted = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onRevealRangeRequest = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onScrollChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onTokensChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onTokensColorsChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onZonesChanged = function (e) {\n    return false;\n  };\n\n  ViewEventHandler.prototype.onThemeChanged = function (e) {\n    return false;\n  }; // --- end event handlers\n\n\n  ViewEventHandler.prototype.handleEvents = function (events) {\n    var shouldRender = false;\n\n    for (var i = 0, len = events.length; i < len; i++) {\n      var e = events[i];\n\n      switch (e.type) {\n        case 1\n        /* ViewConfigurationChanged */\n        :\n          if (this.onConfigurationChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 2\n        /* ViewCursorStateChanged */\n        :\n          if (this.onCursorStateChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 3\n        /* ViewDecorationsChanged */\n        :\n          if (this.onDecorationsChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 4\n        /* ViewFlushed */\n        :\n          if (this.onFlushed(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 5\n        /* ViewFocusChanged */\n        :\n          if (this.onFocusChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 16\n        /* ViewLanguageConfigurationChanged */\n        :\n          if (this.onLanguageConfigurationChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 6\n        /* ViewLineMappingChanged */\n        :\n          if (this.onLineMappingChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 7\n        /* ViewLinesChanged */\n        :\n          if (this.onLinesChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 8\n        /* ViewLinesDeleted */\n        :\n          if (this.onLinesDeleted(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 9\n        /* ViewLinesInserted */\n        :\n          if (this.onLinesInserted(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 10\n        /* ViewRevealRangeRequest */\n        :\n          if (this.onRevealRangeRequest(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 11\n        /* ViewScrollChanged */\n        :\n          if (this.onScrollChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 12\n        /* ViewTokensChanged */\n        :\n          if (this.onTokensChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 13\n        /* ViewTokensColorsChanged */\n        :\n          if (this.onTokensColorsChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 14\n        /* ViewZonesChanged */\n        :\n          if (this.onZonesChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        case 15\n        /* ViewThemeChanged */\n        :\n          if (this.onThemeChanged(e)) {\n            shouldRender = true;\n          }\n\n          break;\n\n        default:\n          console.info('View received unknown event: ');\n          console.info(e);\n      }\n    }\n\n    if (shouldRender) {\n      this._shouldRender = true;\n    }\n  };\n\n  return ViewEventHandler;\n}(Disposable);\n\nexport { ViewEventHandler };","map":null,"metadata":{},"sourceType":"module"}