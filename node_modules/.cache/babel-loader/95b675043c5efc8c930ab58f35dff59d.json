{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nexport var createStringBuilder;\n\nif (typeof TextDecoder !== 'undefined') {\n  createStringBuilder = function (capacity) {\n    return new StringBuilder(capacity);\n  };\n} else {\n  createStringBuilder = function (capacity) {\n    return new CompatStringBuilder();\n  };\n}\n\nvar StringBuilder =\n/** @class */\nfunction () {\n  function StringBuilder(capacity) {\n    this._decoder = new TextDecoder('UTF-16LE');\n    this._capacity = capacity | 0;\n    this._buffer = new Uint16Array(this._capacity);\n    this._completedStrings = null;\n    this._bufferLength = 0;\n  }\n\n  StringBuilder.prototype.reset = function () {\n    this._completedStrings = null;\n    this._bufferLength = 0;\n  };\n\n  StringBuilder.prototype.build = function () {\n    if (this._completedStrings !== null) {\n      this._flushBuffer();\n\n      return this._completedStrings.join('');\n    }\n\n    return this._buildBuffer();\n  };\n\n  StringBuilder.prototype._buildBuffer = function () {\n    if (this._bufferLength === 0) {\n      return '';\n    }\n\n    var view = new Uint16Array(this._buffer.buffer, 0, this._bufferLength);\n    return this._decoder.decode(view);\n  };\n\n  StringBuilder.prototype._flushBuffer = function () {\n    var bufferString = this._buildBuffer();\n\n    this._bufferLength = 0;\n\n    if (this._completedStrings === null) {\n      this._completedStrings = [bufferString];\n    } else {\n      this._completedStrings[this._completedStrings.length] = bufferString;\n    }\n  };\n\n  StringBuilder.prototype.write1 = function (charCode) {\n    var remainingSpace = this._capacity - this._bufferLength;\n\n    if (remainingSpace <= 1) {\n      if (remainingSpace === 0 || strings.isHighSurrogate(charCode)) {\n        this._flushBuffer();\n      }\n    }\n\n    this._buffer[this._bufferLength++] = charCode;\n  };\n\n  StringBuilder.prototype.appendASCII = function (charCode) {\n    if (this._bufferLength === this._capacity) {\n      // buffer is full\n      this._flushBuffer();\n    }\n\n    this._buffer[this._bufferLength++] = charCode;\n  };\n\n  StringBuilder.prototype.appendASCIIString = function (str) {\n    var strLen = str.length;\n\n    if (this._bufferLength + strLen >= this._capacity) {\n      // This string does not fit in the remaining buffer space\n      this._flushBuffer();\n\n      this._completedStrings[this._completedStrings.length] = str;\n      return;\n    }\n\n    for (var i = 0; i < strLen; i++) {\n      this._buffer[this._bufferLength++] = str.charCodeAt(i);\n    }\n  };\n\n  return StringBuilder;\n}();\n\nvar CompatStringBuilder =\n/** @class */\nfunction () {\n  function CompatStringBuilder() {\n    this._pieces = [];\n    this._piecesLen = 0;\n  }\n\n  CompatStringBuilder.prototype.reset = function () {\n    this._pieces = [];\n    this._piecesLen = 0;\n  };\n\n  CompatStringBuilder.prototype.build = function () {\n    return this._pieces.join('');\n  };\n\n  CompatStringBuilder.prototype.write1 = function (charCode) {\n    this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n  };\n\n  CompatStringBuilder.prototype.appendASCII = function (charCode) {\n    this._pieces[this._piecesLen++] = String.fromCharCode(charCode);\n  };\n\n  CompatStringBuilder.prototype.appendASCIIString = function (str) {\n    this._pieces[this._piecesLen++] = str;\n  };\n\n  return CompatStringBuilder;\n}();","map":null,"metadata":{},"sourceType":"module"}