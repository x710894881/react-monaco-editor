{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport './editorQuickOpen.css';\nimport { EditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { ModelDecorationOptions } from '../../../common/model/textModel.js';\nimport { QuickOpenEditorWidget } from './quickOpenEditorWidget.js';\nimport { IThemeService } from '../../../../platform/theme/common/themeService.js';\n\nvar QuickOpenController =\n/** @class */\nfunction () {\n  function QuickOpenController(editor, themeService) {\n    this.themeService = themeService;\n    this.widget = null;\n    this.rangeHighlightDecorationId = null;\n    this.lastKnownEditorSelection = null;\n    this.editor = editor;\n  }\n\n  QuickOpenController.get = function (editor) {\n    return editor.getContribution(QuickOpenController.ID);\n  };\n\n  QuickOpenController.prototype.getId = function () {\n    return QuickOpenController.ID;\n  };\n\n  QuickOpenController.prototype.dispose = function () {\n    // Dispose widget\n    if (this.widget) {\n      this.widget.destroy();\n      this.widget = null;\n    }\n  };\n\n  QuickOpenController.prototype.run = function (opts) {\n    var _this = this;\n\n    if (this.widget) {\n      this.widget.destroy();\n      this.widget = null;\n    } // Create goto line widget\n\n\n    var onClose = function (canceled) {\n      // Clear Highlight Decorations if present\n      _this.clearDecorations(); // Restore selection if canceled\n\n\n      if (canceled && _this.lastKnownEditorSelection) {\n        _this.editor.setSelection(_this.lastKnownEditorSelection);\n\n        _this.editor.revealRangeInCenterIfOutsideViewport(_this.lastKnownEditorSelection, 0\n        /* Smooth */\n        );\n      }\n\n      _this.lastKnownEditorSelection = null; // Return focus to the editor if\n      // - focus is back on the <body> element because no other focusable element was clicked\n      // - a command was picked from the picker which indicates the editor should get focused\n\n      if (document.activeElement === document.body || !canceled) {\n        _this.editor.focus();\n      }\n    };\n\n    this.widget = new QuickOpenEditorWidget(this.editor, function () {\n      return onClose(false);\n    }, function () {\n      return onClose(true);\n    }, function (value) {\n      _this.widget.setInput(opts.getModel(value), opts.getAutoFocus(value));\n    }, {\n      inputAriaLabel: opts.inputAriaLabel\n    }, this.themeService); // Remember selection to be able to restore on cancel\n\n    if (!this.lastKnownEditorSelection) {\n      this.lastKnownEditorSelection = this.editor.getSelection();\n    } // Show\n\n\n    this.widget.show('');\n  };\n\n  QuickOpenController.prototype.decorateLine = function (range, editor) {\n    var oldDecorations = [];\n\n    if (this.rangeHighlightDecorationId) {\n      oldDecorations.push(this.rangeHighlightDecorationId);\n      this.rangeHighlightDecorationId = null;\n    }\n\n    var newDecorations = [{\n      range: range,\n      options: QuickOpenController._RANGE_HIGHLIGHT_DECORATION\n    }];\n    var decorations = editor.deltaDecorations(oldDecorations, newDecorations);\n    this.rangeHighlightDecorationId = decorations[0];\n  };\n\n  QuickOpenController.prototype.clearDecorations = function () {\n    if (this.rangeHighlightDecorationId) {\n      this.editor.deltaDecorations([this.rangeHighlightDecorationId], []);\n      this.rangeHighlightDecorationId = null;\n    }\n  };\n\n  QuickOpenController.ID = 'editor.controller.quickOpenController';\n  QuickOpenController._RANGE_HIGHLIGHT_DECORATION = ModelDecorationOptions.register({\n    className: 'rangeHighlight',\n    isWholeLine: true\n  });\n  QuickOpenController = __decorate([__param(1, IThemeService)], QuickOpenController);\n  return QuickOpenController;\n}();\n\nexport { QuickOpenController };\n/**\n * Base class for providing quick open in the editor.\n */\n\nvar BaseEditorQuickOpenAction =\n/** @class */\nfunction (_super) {\n  __extends(BaseEditorQuickOpenAction, _super);\n\n  function BaseEditorQuickOpenAction(inputAriaLabel, opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this._inputAriaLabel = inputAriaLabel;\n    return _this;\n  }\n\n  BaseEditorQuickOpenAction.prototype.getController = function (editor) {\n    return QuickOpenController.get(editor);\n  };\n\n  BaseEditorQuickOpenAction.prototype._show = function (controller, opts) {\n    controller.run({\n      inputAriaLabel: this._inputAriaLabel,\n      getModel: function (value) {\n        return opts.getModel(value);\n      },\n      getAutoFocus: function (searchValue) {\n        return opts.getAutoFocus(searchValue);\n      }\n    });\n  };\n\n  return BaseEditorQuickOpenAction;\n}(EditorAction);\n\nexport { BaseEditorQuickOpenAction };\nregisterEditorContribution(QuickOpenController);","map":null,"metadata":{},"sourceType":"module"}