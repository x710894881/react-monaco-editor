{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../../base/common/strings.js';\nimport { Range } from '../../core/range.js';\n\nvar RichEditBracket =\n/** @class */\nfunction () {\n  function RichEditBracket(languageIdentifier, open, close, forwardRegex, reversedRegex) {\n    this.languageIdentifier = languageIdentifier;\n    this.open = open;\n    this.close = close;\n    this.forwardRegex = forwardRegex;\n    this.reversedRegex = reversedRegex;\n  }\n\n  return RichEditBracket;\n}();\n\nexport { RichEditBracket };\n\nvar RichEditBrackets =\n/** @class */\nfunction () {\n  function RichEditBrackets(languageIdentifier, brackets) {\n    var _this = this;\n\n    this.brackets = brackets.map(function (b) {\n      return new RichEditBracket(languageIdentifier, b[0], b[1], getRegexForBracketPair({\n        open: b[0],\n        close: b[1]\n      }), getReversedRegexForBracketPair({\n        open: b[0],\n        close: b[1]\n      }));\n    });\n    this.forwardRegex = getRegexForBrackets(this.brackets);\n    this.reversedRegex = getReversedRegexForBrackets(this.brackets);\n    this.textIsBracket = {};\n    this.textIsOpenBracket = {};\n    var maxBracketLength = 0;\n    this.brackets.forEach(function (b) {\n      _this.textIsBracket[b.open.toLowerCase()] = b;\n      _this.textIsBracket[b.close.toLowerCase()] = b;\n      _this.textIsOpenBracket[b.open.toLowerCase()] = true;\n      _this.textIsOpenBracket[b.close.toLowerCase()] = false;\n      maxBracketLength = Math.max(maxBracketLength, b.open.length);\n      maxBracketLength = Math.max(maxBracketLength, b.close.length);\n    });\n    this.maxBracketLength = maxBracketLength;\n  }\n\n  return RichEditBrackets;\n}();\n\nexport { RichEditBrackets };\n\nfunction once(keyFn, computeFn) {\n  var cache = {};\n  return function (input) {\n    var key = keyFn(input);\n\n    if (!cache.hasOwnProperty(key)) {\n      cache[key] = computeFn(input);\n    }\n\n    return cache[key];\n  };\n}\n\nvar getRegexForBracketPair = once(function (input) {\n  return input.open + \";\" + input.close;\n}, function (input) {\n  return createBracketOrRegExp([input.open, input.close]);\n});\nvar getReversedRegexForBracketPair = once(function (input) {\n  return input.open + \";\" + input.close;\n}, function (input) {\n  return createBracketOrRegExp([toReversedString(input.open), toReversedString(input.close)]);\n});\nvar getRegexForBrackets = once(function (input) {\n  return input.map(function (b) {\n    return b.open + \";\" + b.close;\n  }).join(';');\n}, function (input) {\n  var pieces = [];\n  input.forEach(function (b) {\n    pieces.push(b.open);\n    pieces.push(b.close);\n  });\n  return createBracketOrRegExp(pieces);\n});\nvar getReversedRegexForBrackets = once(function (input) {\n  return input.map(function (b) {\n    return b.open + \";\" + b.close;\n  }).join(';');\n}, function (input) {\n  var pieces = [];\n  input.forEach(function (b) {\n    pieces.push(toReversedString(b.open));\n    pieces.push(toReversedString(b.close));\n  });\n  return createBracketOrRegExp(pieces);\n});\n\nfunction prepareBracketForRegExp(str) {\n  // This bracket pair uses letters like e.g. \"begin\" - \"end\"\n  var insertWordBoundaries = /^[\\w]+$/.test(str);\n  str = strings.escapeRegExpCharacters(str);\n  return insertWordBoundaries ? \"\\\\b\" + str + \"\\\\b\" : str;\n}\n\nfunction createBracketOrRegExp(pieces) {\n  var regexStr = \"(\" + pieces.map(prepareBracketForRegExp).join(')|(') + \")\";\n  return strings.createRegExp(regexStr, true);\n}\n\nvar toReversedString = function () {\n  function reverse(str) {\n    var reversedStr = '';\n\n    for (var i = str.length - 1; i >= 0; i--) {\n      reversedStr += str.charAt(i);\n    }\n\n    return reversedStr;\n  }\n\n  var lastInput = null;\n  var lastOutput = null;\n  return function toReversedString(str) {\n    if (lastInput !== str) {\n      lastInput = str;\n      lastOutput = reverse(lastInput);\n    }\n\n    return lastOutput;\n  };\n}();\n\nvar BracketsUtils =\n/** @class */\nfunction () {\n  function BracketsUtils() {}\n\n  BracketsUtils._findPrevBracketInText = function (reversedBracketRegex, lineNumber, reversedText, offset) {\n    var m = reversedText.match(reversedBracketRegex);\n\n    if (!m) {\n      return null;\n    }\n\n    var matchOffset = reversedText.length - (m.index || 0);\n    var matchLength = m[0].length;\n    var absoluteMatchOffset = offset + matchOffset;\n    return new Range(lineNumber, absoluteMatchOffset - matchLength + 1, lineNumber, absoluteMatchOffset + 1);\n  };\n\n  BracketsUtils.findPrevBracketInToken = function (reversedBracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd) {\n    // Because JS does not support backwards regex search, we search forwards in a reversed string with a reversed regex ;)\n    var reversedLineText = toReversedString(lineText);\n    var reversedTokenText = reversedLineText.substring(lineText.length - currentTokenEnd, lineText.length - currentTokenStart);\n    return this._findPrevBracketInText(reversedBracketRegex, lineNumber, reversedTokenText, currentTokenStart);\n  };\n\n  BracketsUtils.findNextBracketInText = function (bracketRegex, lineNumber, text, offset) {\n    var m = text.match(bracketRegex);\n\n    if (!m) {\n      return null;\n    }\n\n    var matchOffset = m.index || 0;\n    var matchLength = m[0].length;\n\n    if (matchLength === 0) {\n      return null;\n    }\n\n    var absoluteMatchOffset = offset + matchOffset;\n    return new Range(lineNumber, absoluteMatchOffset + 1, lineNumber, absoluteMatchOffset + 1 + matchLength);\n  };\n\n  BracketsUtils.findNextBracketInToken = function (bracketRegex, lineNumber, lineText, currentTokenStart, currentTokenEnd) {\n    var currentTokenText = lineText.substring(currentTokenStart, currentTokenEnd);\n    return this.findNextBracketInText(bracketRegex, lineNumber, currentTokenText, currentTokenStart);\n  };\n\n  return BracketsUtils;\n}();\n\nexport { BracketsUtils };","map":null,"metadata":{},"sourceType":"module"}