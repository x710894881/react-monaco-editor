{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './overlayWidgets.css';\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { PartFingerprints, ViewPart } from '../../view/viewPart.js';\n\nvar ViewOverlayWidgets =\n/** @class */\nfunction (_super) {\n  __extends(ViewOverlayWidgets, _super);\n\n  function ViewOverlayWidgets(context) {\n    var _this = _super.call(this, context) || this;\n\n    _this._widgets = {};\n    _this._verticalScrollbarWidth = _this._context.configuration.editor.layoutInfo.verticalScrollbarWidth;\n    _this._minimapWidth = _this._context.configuration.editor.layoutInfo.minimapWidth;\n    _this._horizontalScrollbarHeight = _this._context.configuration.editor.layoutInfo.horizontalScrollbarHeight;\n    _this._editorHeight = _this._context.configuration.editor.layoutInfo.height;\n    _this._editorWidth = _this._context.configuration.editor.layoutInfo.width;\n    _this._domNode = createFastDomNode(document.createElement('div'));\n    PartFingerprints.write(_this._domNode, 4\n    /* OverlayWidgets */\n    );\n\n    _this._domNode.setClassName('overlayWidgets');\n\n    return _this;\n  }\n\n  ViewOverlayWidgets.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._widgets = {};\n  };\n\n  ViewOverlayWidgets.prototype.getDomNode = function () {\n    return this._domNode;\n  }; // ---- begin view event handlers\n\n\n  ViewOverlayWidgets.prototype.onConfigurationChanged = function (e) {\n    if (e.layoutInfo) {\n      this._verticalScrollbarWidth = this._context.configuration.editor.layoutInfo.verticalScrollbarWidth;\n      this._minimapWidth = this._context.configuration.editor.layoutInfo.minimapWidth;\n      this._horizontalScrollbarHeight = this._context.configuration.editor.layoutInfo.horizontalScrollbarHeight;\n      this._editorHeight = this._context.configuration.editor.layoutInfo.height;\n      this._editorWidth = this._context.configuration.editor.layoutInfo.width;\n      return true;\n    }\n\n    return false;\n  }; // ---- end view event handlers\n\n\n  ViewOverlayWidgets.prototype.addWidget = function (widget) {\n    var domNode = createFastDomNode(widget.getDomNode());\n    this._widgets[widget.getId()] = {\n      widget: widget,\n      preference: null,\n      domNode: domNode\n    }; // This is sync because a widget wants to be in the dom\n\n    domNode.setPosition('absolute');\n    domNode.setAttribute('widgetId', widget.getId());\n\n    this._domNode.appendChild(domNode);\n\n    this.setShouldRender();\n  };\n\n  ViewOverlayWidgets.prototype.setWidgetPosition = function (widget, preference) {\n    var widgetData = this._widgets[widget.getId()];\n\n    if (widgetData.preference === preference) {\n      return false;\n    }\n\n    widgetData.preference = preference;\n    this.setShouldRender();\n    return true;\n  };\n\n  ViewOverlayWidgets.prototype.removeWidget = function (widget) {\n    var widgetId = widget.getId();\n\n    if (this._widgets.hasOwnProperty(widgetId)) {\n      var widgetData = this._widgets[widgetId];\n      var domNode = widgetData.domNode.domNode;\n      delete this._widgets[widgetId];\n      domNode.parentNode.removeChild(domNode);\n      this.setShouldRender();\n    }\n  };\n\n  ViewOverlayWidgets.prototype._renderWidget = function (widgetData) {\n    var domNode = widgetData.domNode;\n\n    if (widgetData.preference === null) {\n      domNode.unsetTop();\n      return;\n    }\n\n    if (widgetData.preference === 0\n    /* TOP_RIGHT_CORNER */\n    ) {\n        domNode.setTop(0);\n        domNode.setRight(2 * this._verticalScrollbarWidth + this._minimapWidth);\n      } else if (widgetData.preference === 1\n    /* BOTTOM_RIGHT_CORNER */\n    ) {\n        var widgetHeight = domNode.domNode.clientHeight;\n        domNode.setTop(this._editorHeight - widgetHeight - 2 * this._horizontalScrollbarHeight);\n        domNode.setRight(2 * this._verticalScrollbarWidth + this._minimapWidth);\n      } else if (widgetData.preference === 2\n    /* TOP_CENTER */\n    ) {\n        domNode.setTop(0);\n        domNode.domNode.style.right = '50%';\n      }\n  };\n\n  ViewOverlayWidgets.prototype.prepareRender = function (ctx) {// Nothing to read\n  };\n\n  ViewOverlayWidgets.prototype.render = function (ctx) {\n    this._domNode.setWidth(this._editorWidth);\n\n    var keys = Object.keys(this._widgets);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var widgetId = keys[i];\n\n      this._renderWidget(this._widgets[widgetId]);\n    }\n  };\n\n  return ViewOverlayWidgets;\n}(ViewPart);\n\nexport { ViewOverlayWidgets };","map":null,"metadata":{},"sourceType":"module"}