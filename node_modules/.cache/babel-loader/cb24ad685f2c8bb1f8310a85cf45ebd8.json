{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\n\nvar ColumnSelection =\n/** @class */\nfunction () {\n  function ColumnSelection() {}\n\n  ColumnSelection.columnSelect = function (config, model, fromLineNumber, fromVisibleColumn, toLineNumber, toVisibleColumn) {\n    var lineCount = Math.abs(toLineNumber - fromLineNumber) + 1;\n    var reversed = fromLineNumber > toLineNumber;\n    var isRTL = fromVisibleColumn > toVisibleColumn;\n    var isLTR = fromVisibleColumn < toVisibleColumn;\n    var result = []; // console.log(`fromVisibleColumn: ${fromVisibleColumn}, toVisibleColumn: ${toVisibleColumn}`);\n\n    for (var i = 0; i < lineCount; i++) {\n      var lineNumber = fromLineNumber + (reversed ? -i : i);\n      var startColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, fromVisibleColumn);\n      var endColumn = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, toVisibleColumn);\n      var visibleStartColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, startColumn));\n      var visibleEndColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, endColumn)); // console.log(`lineNumber: ${lineNumber}: visibleStartColumn: ${visibleStartColumn}, visibleEndColumn: ${visibleEndColumn}`);\n\n      if (isLTR) {\n        if (visibleStartColumn > toVisibleColumn) {\n          continue;\n        }\n\n        if (visibleEndColumn < fromVisibleColumn) {\n          continue;\n        }\n      }\n\n      if (isRTL) {\n        if (visibleEndColumn > fromVisibleColumn) {\n          continue;\n        }\n\n        if (visibleStartColumn < toVisibleColumn) {\n          continue;\n        }\n      }\n\n      result.push(new SingleCursorState(new Range(lineNumber, startColumn, lineNumber, startColumn), 0, new Position(lineNumber, endColumn), 0));\n    }\n\n    if (result.length === 0) {\n      // We are after all the lines, so add cursor at the end of each line\n      for (var i = 0; i < lineCount; i++) {\n        var lineNumber = fromLineNumber + (reversed ? -i : i);\n        var maxColumn = model.getLineMaxColumn(lineNumber);\n        result.push(new SingleCursorState(new Range(lineNumber, maxColumn, lineNumber, maxColumn), 0, new Position(lineNumber, maxColumn), 0));\n      }\n    }\n\n    return {\n      viewStates: result,\n      reversed: reversed,\n      fromLineNumber: fromLineNumber,\n      fromVisualColumn: fromVisibleColumn,\n      toLineNumber: toLineNumber,\n      toVisualColumn: toVisibleColumn\n    };\n  };\n\n  ColumnSelection.columnSelectLeft = function (config, model, prevColumnSelectData) {\n    var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n    if (toViewVisualColumn > 1) {\n      toViewVisualColumn--;\n    }\n\n    return ColumnSelection.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  };\n\n  ColumnSelection.columnSelectRight = function (config, model, prevColumnSelectData) {\n    var maxVisualViewColumn = 0;\n    var minViewLineNumber = Math.min(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n    var maxViewLineNumber = Math.max(prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.toViewLineNumber);\n\n    for (var lineNumber = minViewLineNumber; lineNumber <= maxViewLineNumber; lineNumber++) {\n      var lineMaxViewColumn = model.getLineMaxColumn(lineNumber);\n      var lineMaxVisualViewColumn = CursorColumns.visibleColumnFromColumn2(config, model, new Position(lineNumber, lineMaxViewColumn));\n      maxVisualViewColumn = Math.max(maxVisualViewColumn, lineMaxVisualViewColumn);\n    }\n\n    var toViewVisualColumn = prevColumnSelectData.toViewVisualColumn;\n\n    if (toViewVisualColumn < maxVisualViewColumn) {\n      toViewVisualColumn++;\n    }\n\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, prevColumnSelectData.toViewLineNumber, toViewVisualColumn);\n  };\n\n  ColumnSelection.columnSelectUp = function (config, model, prevColumnSelectData, isPaged) {\n    var linesCount = isPaged ? config.pageSize : 1;\n    var toViewLineNumber = Math.max(1, prevColumnSelectData.toViewLineNumber - linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  };\n\n  ColumnSelection.columnSelectDown = function (config, model, prevColumnSelectData, isPaged) {\n    var linesCount = isPaged ? config.pageSize : 1;\n    var toViewLineNumber = Math.min(model.getLineCount(), prevColumnSelectData.toViewLineNumber + linesCount);\n    return this.columnSelect(config, model, prevColumnSelectData.fromViewLineNumber, prevColumnSelectData.fromViewVisualColumn, toViewLineNumber, prevColumnSelectData.toViewVisualColumn);\n  };\n\n  return ColumnSelection;\n}();\n\nexport { ColumnSelection };","map":null,"metadata":{},"sourceType":"module"}