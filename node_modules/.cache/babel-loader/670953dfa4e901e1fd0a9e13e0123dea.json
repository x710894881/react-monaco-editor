{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nls from '../../../nls.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { EditorAction, registerEditorAction } from '../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { BlockCommentCommand } from './blockCommentCommand.js';\nimport { LineCommentCommand } from './lineCommentCommand.js';\n\nvar CommentLineAction =\n/** @class */\nfunction (_super) {\n  __extends(CommentLineAction, _super);\n\n  function CommentLineAction(type, opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this._type = type;\n    return _this;\n  }\n\n  CommentLineAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var model = editor.getModel();\n    var commands = [];\n    var selections = editor.getSelections();\n    var opts = model.getOptions();\n\n    for (var _i = 0, selections_1 = selections; _i < selections_1.length; _i++) {\n      var selection = selections_1[_i];\n      commands.push(new LineCommentCommand(selection, opts.tabSize, this._type));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  };\n\n  return CommentLineAction;\n}(EditorAction);\n\nvar ToggleCommentLineAction =\n/** @class */\nfunction (_super) {\n  __extends(ToggleCommentLineAction, _super);\n\n  function ToggleCommentLineAction() {\n    return _super.call(this, 0\n    /* Toggle */\n    , {\n      id: 'editor.action.commentLine',\n      label: nls.localize('comment.line', \"Toggle Line Comment\"),\n      alias: 'Toggle Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 85\n        /* US_SLASH */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menubarOpts: {\n        menuId: 14\n        /* MenubarEditMenu */\n        ,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleLineComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Toggle Line Comment\"),\n        order: 1\n      }\n    }) || this;\n  }\n\n  return ToggleCommentLineAction;\n}(CommentLineAction);\n\nvar AddLineCommentAction =\n/** @class */\nfunction (_super) {\n  __extends(AddLineCommentAction, _super);\n\n  function AddLineCommentAction() {\n    return _super.call(this, 1\n    /* ForceAdd */\n    , {\n      id: 'editor.action.addCommentLine',\n      label: nls.localize('comment.line.add', \"Add Line Comment\"),\n      alias: 'Add Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KEY_K */\n        , 2048\n        /* CtrlCmd */\n        | 33\n        /* KEY_C */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return AddLineCommentAction;\n}(CommentLineAction);\n\nvar RemoveLineCommentAction =\n/** @class */\nfunction (_super) {\n  __extends(RemoveLineCommentAction, _super);\n\n  function RemoveLineCommentAction() {\n    return _super.call(this, 2\n    /* ForceRemove */\n    , {\n      id: 'editor.action.removeCommentLine',\n      label: nls.localize('comment.line.remove', \"Remove Line Comment\"),\n      alias: 'Remove Line Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KEY_K */\n        , 2048\n        /* CtrlCmd */\n        | 51\n        /* KEY_U */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  return RemoveLineCommentAction;\n}(CommentLineAction);\n\nvar BlockCommentAction =\n/** @class */\nfunction (_super) {\n  __extends(BlockCommentAction, _super);\n\n  function BlockCommentAction() {\n    return _super.call(this, {\n      id: 'editor.action.blockComment',\n      label: nls.localize('comment.block', \"Toggle Block Comment\"),\n      alias: 'Toggle Block Comment',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024\n        /* Shift */\n        | 512\n        /* Alt */\n        | 31\n        /* KEY_A */\n        ,\n        linux: {\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 31\n          /* KEY_A */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menubarOpts: {\n        menuId: 14\n        /* MenubarEditMenu */\n        ,\n        group: '5_insert',\n        title: nls.localize({\n          key: 'miToggleBlockComment',\n          comment: ['&& denotes a mnemonic']\n        }, \"Toggle &&Block Comment\"),\n        order: 2\n      }\n    }) || this;\n  }\n\n  BlockCommentAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var commands = [];\n    var selections = editor.getSelections();\n\n    for (var _i = 0, selections_2 = selections; _i < selections_2.length; _i++) {\n      var selection = selections_2[_i];\n      commands.push(new BlockCommentCommand(selection));\n    }\n\n    editor.pushUndoStop();\n    editor.executeCommands(this.id, commands);\n    editor.pushUndoStop();\n  };\n\n  return BlockCommentAction;\n}(EditorAction);\n\nregisterEditorAction(ToggleCommentLineAction);\nregisterEditorAction(AddLineCommentAction);\nregisterEditorAction(RemoveLineCommentAction);\nregisterEditorAction(BlockCommentAction);","map":null,"metadata":{},"sourceType":"module"}