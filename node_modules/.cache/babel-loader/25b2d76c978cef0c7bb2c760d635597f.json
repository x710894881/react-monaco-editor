{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { Iterator, getSequenceIterator } from '../../../common/iterator.js';\nimport { IndexTreeModel } from './indexTreeModel.js';\n\nvar ObjectTreeModel =\n/** @class */\nfunction () {\n  function ObjectTreeModel(list, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    this.nodes = new Map();\n    this.nodesByIdentity = new Map();\n    this.model = new IndexTreeModel(list, null, options);\n    this.onDidSplice = this.model.onDidSplice;\n    this.onDidChangeCollapseState = this.model.onDidChangeCollapseState;\n    this.onDidChangeRenderNodeCount = this.model.onDidChangeRenderNodeCount;\n\n    if (options.sorter) {\n      this.sorter = {\n        compare: function (a, b) {\n          return options.sorter.compare(a.element, b.element);\n        }\n      };\n    }\n\n    this.identityProvider = options.identityProvider;\n  }\n\n  ObjectTreeModel.prototype.setChildren = function (element, children, onDidCreateNode, onDidDeleteNode) {\n    var location = this.getElementLocation(element);\n    return this._setChildren(location, this.preserveCollapseState(children), onDidCreateNode, onDidDeleteNode);\n  };\n\n  ObjectTreeModel.prototype._setChildren = function (location, children, onDidCreateNode, onDidDeleteNode) {\n    var _this = this;\n\n    var insertedElements = new Set();\n    var insertedElementIds = new Set();\n\n    var _onDidCreateNode = function (node) {\n      insertedElements.add(node.element);\n\n      _this.nodes.set(node.element, node);\n\n      if (_this.identityProvider) {\n        var id = _this.identityProvider.getId(node.element).toString();\n\n        insertedElementIds.add(id);\n\n        _this.nodesByIdentity.set(id, node);\n      }\n\n      if (onDidCreateNode) {\n        onDidCreateNode(node);\n      }\n    };\n\n    var _onDidDeleteNode = function (node) {\n      if (!insertedElements.has(node.element)) {\n        _this.nodes.delete(node.element);\n      }\n\n      if (_this.identityProvider) {\n        var id = _this.identityProvider.getId(node.element).toString();\n\n        if (!insertedElementIds.has(id)) {\n          _this.nodesByIdentity.delete(id);\n        }\n      }\n\n      if (onDidDeleteNode) {\n        onDidDeleteNode(node);\n      }\n    };\n\n    var result = this.model.splice(location.concat([0]), Number.MAX_VALUE, children, _onDidCreateNode, _onDidDeleteNode);\n    return result;\n  };\n\n  ObjectTreeModel.prototype.preserveCollapseState = function (elements) {\n    var _this = this;\n\n    var iterator = elements ? getSequenceIterator(elements) : Iterator.empty();\n\n    if (this.sorter) {\n      iterator = Iterator.fromArray(Iterator.collect(iterator).sort(this.sorter.compare.bind(this.sorter)));\n    }\n\n    return Iterator.map(iterator, function (treeElement) {\n      var node = _this.nodes.get(treeElement.element);\n\n      if (!node && _this.identityProvider) {\n        var id = _this.identityProvider.getId(treeElement.element).toString();\n\n        node = _this.nodesByIdentity.get(id);\n      }\n\n      if (!node) {\n        return __assign({}, treeElement, {\n          children: _this.preserveCollapseState(treeElement.children)\n        });\n      }\n\n      var collapsible = typeof treeElement.collapsible === 'boolean' ? treeElement.collapsible : node.collapsible;\n      var collapsed = typeof treeElement.collapsed !== 'undefined' ? treeElement.collapsed : node.collapsed;\n      return __assign({}, treeElement, {\n        collapsible: collapsible,\n        collapsed: collapsed,\n        children: _this.preserveCollapseState(treeElement.children)\n      });\n    });\n  };\n\n  ObjectTreeModel.prototype.rerender = function (element) {\n    var location = this.getElementLocation(element);\n    this.model.rerender(location);\n  };\n\n  ObjectTreeModel.prototype.getListIndex = function (element) {\n    var location = this.getElementLocation(element);\n    return this.model.getListIndex(location);\n  };\n\n  ObjectTreeModel.prototype.getListRenderCount = function (element) {\n    var location = this.getElementLocation(element);\n    return this.model.getListRenderCount(location);\n  };\n\n  ObjectTreeModel.prototype.isCollapsed = function (element) {\n    var location = this.getElementLocation(element);\n    return this.model.isCollapsed(location);\n  };\n\n  ObjectTreeModel.prototype.setCollapsed = function (element, collapsed, recursive) {\n    var location = this.getElementLocation(element);\n    return this.model.setCollapsed(location, collapsed, recursive);\n  };\n\n  ObjectTreeModel.prototype.expandTo = function (element) {\n    var location = this.getElementLocation(element);\n    this.model.expandTo(location);\n  };\n\n  ObjectTreeModel.prototype.refilter = function () {\n    this.model.refilter();\n  };\n\n  ObjectTreeModel.prototype.getNode = function (element) {\n    if (element === void 0) {\n      element = null;\n    }\n\n    if (element === null) {\n      return this.model.getNode(this.model.rootRef);\n    }\n\n    var node = this.nodes.get(element);\n\n    if (!node) {\n      throw new Error(\"Tree element not found: \" + element);\n    }\n\n    return node;\n  };\n\n  ObjectTreeModel.prototype.getNodeLocation = function (node) {\n    return node.element;\n  };\n\n  ObjectTreeModel.prototype.getParentNodeLocation = function (element) {\n    if (element === null) {\n      throw new Error(\"Invalid getParentNodeLocation call\");\n    }\n\n    var node = this.nodes.get(element);\n\n    if (!node) {\n      throw new Error(\"Tree element not found: \" + element);\n    }\n\n    return node.parent.element;\n  };\n\n  ObjectTreeModel.prototype.getElementLocation = function (element) {\n    if (element === null) {\n      return [];\n    }\n\n    var node = this.nodes.get(element);\n\n    if (!node) {\n      throw new Error(\"Tree element not found: \" + element);\n    }\n\n    return this.model.getNodeLocation(node);\n  };\n\n  return ObjectTreeModel;\n}();\n\nexport { ObjectTreeModel };","map":null,"metadata":{},"sourceType":"module"}