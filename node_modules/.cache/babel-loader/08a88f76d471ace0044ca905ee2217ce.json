{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './codelensWidget.css';\nimport * as dom from '../../../base/browser/dom.js';\nimport { coalesce, isFalsyOrEmpty } from '../../../base/common/arrays.js';\nimport { escape } from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { editorCodeLensForeground } from '../../common/view/editorColorRegistry.js';\nimport { editorActiveLinkForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\n\nvar CodeLensViewZone =\n/** @class */\nfunction () {\n  function CodeLensViewZone(afterLineNumber, onHeight) {\n    this.afterLineNumber = afterLineNumber;\n    this._onHeight = onHeight;\n    this.heightInLines = 1;\n    this.suppressMouseDown = true;\n    this.domNode = document.createElement('div');\n  }\n\n  CodeLensViewZone.prototype.onComputedHeight = function (height) {\n    if (this._lastHeight === undefined) {\n      this._lastHeight = height;\n    } else if (this._lastHeight !== height) {\n      this._lastHeight = height;\n\n      this._onHeight();\n    }\n  };\n\n  return CodeLensViewZone;\n}();\n\nvar CodeLensContentWidget =\n/** @class */\nfunction () {\n  function CodeLensContentWidget(editor, symbolRange, data) {\n    // Editor.IContentWidget.allowEditorOverflow\n    this.allowEditorOverflow = false;\n    this.suppressMouseDown = true;\n    this._commands = new Map();\n    this._id = 'codeLensWidget' + ++CodeLensContentWidget._idPool;\n    this._editor = editor;\n    this.setSymbolRange(symbolRange);\n    this._domNode = document.createElement('span');\n    this._domNode.innerHTML = '&nbsp;';\n    dom.addClass(this._domNode, 'codelens-decoration');\n    this.updateHeight();\n    this.withCommands(data.map(function (data) {\n      return data.symbol;\n    }), false);\n  }\n\n  CodeLensContentWidget.prototype.updateHeight = function () {\n    var _a = this._editor.getConfiguration(),\n        fontInfo = _a.fontInfo,\n        lineHeight = _a.lineHeight;\n\n    this._domNode.style.height = Math.round(lineHeight * 1.1) + \"px\";\n    this._domNode.style.lineHeight = lineHeight + \"px\";\n    this._domNode.style.fontSize = Math.round(fontInfo.fontSize * 0.9) + \"px\";\n    this._domNode.style.paddingRight = Math.round(fontInfo.fontSize * 0.45) + \"px\";\n    this._domNode.innerHTML = '&nbsp;';\n  };\n\n  CodeLensContentWidget.prototype.withCommands = function (inSymbols, animate) {\n    this._commands.clear();\n\n    var symbols = coalesce(inSymbols);\n\n    if (isFalsyOrEmpty(symbols)) {\n      this._domNode.innerHTML = '<span>no commands</span>';\n      return;\n    }\n\n    var html = [];\n\n    for (var i = 0; i < symbols.length; i++) {\n      var command = symbols[i].command;\n\n      if (command) {\n        var title = escape(command.title);\n        var part = void 0;\n\n        if (command.id) {\n          part = \"<a id=\" + i + \">\" + title + \"</a>\";\n\n          this._commands.set(String(i), command);\n        } else {\n          part = \"<span>\" + title + \"</span>\";\n        }\n\n        html.push(part);\n      }\n    }\n\n    var wasEmpty = this._domNode.innerHTML === '' || this._domNode.innerHTML === '&nbsp;';\n    this._domNode.innerHTML = html.join('<span>&nbsp;|&nbsp;</span>');\n\n    this._editor.layoutContentWidget(this);\n\n    if (wasEmpty && animate) {\n      dom.addClass(this._domNode, 'fadein');\n    }\n  };\n\n  CodeLensContentWidget.prototype.getCommand = function (link) {\n    return link.parentElement === this._domNode ? this._commands.get(link.id) : undefined;\n  };\n\n  CodeLensContentWidget.prototype.getId = function () {\n    return this._id;\n  };\n\n  CodeLensContentWidget.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  CodeLensContentWidget.prototype.setSymbolRange = function (range) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    var lineNumber = range.startLineNumber;\n\n    var column = this._editor.getModel().getLineFirstNonWhitespaceColumn(lineNumber);\n\n    this._widgetPosition = {\n      position: {\n        lineNumber: lineNumber,\n        column: column\n      },\n      preference: [1\n      /* ABOVE */\n      ]\n    };\n  };\n\n  CodeLensContentWidget.prototype.getPosition = function () {\n    return this._widgetPosition || null;\n  };\n\n  CodeLensContentWidget.prototype.isVisible = function () {\n    return this._domNode.hasAttribute('monaco-visible-content-widget');\n  };\n\n  CodeLensContentWidget._idPool = 0;\n  return CodeLensContentWidget;\n}();\n\nvar CodeLensHelper =\n/** @class */\nfunction () {\n  function CodeLensHelper() {\n    this._removeDecorations = [];\n    this._addDecorations = [];\n    this._addDecorationsCallbacks = [];\n  }\n\n  CodeLensHelper.prototype.addDecoration = function (decoration, callback) {\n    this._addDecorations.push(decoration);\n\n    this._addDecorationsCallbacks.push(callback);\n  };\n\n  CodeLensHelper.prototype.removeDecoration = function (decorationId) {\n    this._removeDecorations.push(decorationId);\n  };\n\n  CodeLensHelper.prototype.commit = function (changeAccessor) {\n    var resultingDecorations = changeAccessor.deltaDecorations(this._removeDecorations, this._addDecorations);\n\n    for (var i = 0, len = resultingDecorations.length; i < len; i++) {\n      this._addDecorationsCallbacks[i](resultingDecorations[i]);\n    }\n  };\n\n  return CodeLensHelper;\n}();\n\nexport { CodeLensHelper };\n\nvar CodeLensWidget =\n/** @class */\nfunction () {\n  function CodeLensWidget(data, editor, helper, viewZoneChangeAccessor, updateCallback) {\n    var _this = this;\n\n    this._editor = editor;\n    this._data = data;\n    this._decorationIds = new Array(this._data.length);\n    var range;\n\n    this._data.forEach(function (codeLensData, i) {\n      helper.addDecoration({\n        range: codeLensData.symbol.range,\n        options: ModelDecorationOptions.EMPTY\n      }, function (id) {\n        return _this._decorationIds[i] = id;\n      }); // the range contains all lenses on this line\n\n      if (!range) {\n        range = Range.lift(codeLensData.symbol.range);\n      } else {\n        range = Range.plusRange(range, codeLensData.symbol.range);\n      }\n    });\n\n    if (range) {\n      this._contentWidget = new CodeLensContentWidget(editor, range, this._data);\n      this._viewZone = new CodeLensViewZone(range.startLineNumber - 1, updateCallback);\n      this._viewZoneId = viewZoneChangeAccessor.addZone(this._viewZone);\n\n      this._editor.addContentWidget(this._contentWidget);\n    }\n  }\n\n  CodeLensWidget.prototype.dispose = function (helper, viewZoneChangeAccessor) {\n    while (this._decorationIds.length) {\n      helper.removeDecoration(this._decorationIds.pop());\n    }\n\n    if (viewZoneChangeAccessor) {\n      viewZoneChangeAccessor.removeZone(this._viewZoneId);\n    }\n\n    this._editor.removeContentWidget(this._contentWidget);\n  };\n\n  CodeLensWidget.prototype.isValid = function () {\n    var _this = this;\n\n    if (!this._editor.hasModel()) {\n      return false;\n    }\n\n    var model = this._editor.getModel();\n\n    return this._decorationIds.some(function (id, i) {\n      var range = model.getDecorationRange(id);\n      var symbol = _this._data[i].symbol;\n      return !!(range && Range.isEmpty(symbol.range) === range.isEmpty());\n    });\n  };\n\n  CodeLensWidget.prototype.updateCodeLensSymbols = function (data, helper) {\n    var _this = this;\n\n    while (this._decorationIds.length) {\n      helper.removeDecoration(this._decorationIds.pop());\n    }\n\n    this._data = data;\n    this._decorationIds = new Array(this._data.length);\n\n    this._data.forEach(function (codeLensData, i) {\n      helper.addDecoration({\n        range: codeLensData.symbol.range,\n        options: ModelDecorationOptions.EMPTY\n      }, function (id) {\n        return _this._decorationIds[i] = id;\n      });\n    });\n  };\n\n  CodeLensWidget.prototype.computeIfNecessary = function (model) {\n    if (!this._contentWidget.isVisible()) {\n      return null;\n    } // Read editor current state\n\n\n    for (var i = 0; i < this._decorationIds.length; i++) {\n      var range = model.getDecorationRange(this._decorationIds[i]);\n\n      if (range) {\n        this._data[i].symbol.range = range;\n      }\n    }\n\n    return this._data;\n  };\n\n  CodeLensWidget.prototype.updateCommands = function (symbols) {\n    this._contentWidget.withCommands(symbols, true);\n\n    for (var i = 0; i < this._data.length; i++) {\n      var resolved = symbols[i];\n\n      if (resolved) {\n        var symbol = this._data[i].symbol;\n        symbol.command = resolved.command || symbol.command;\n      }\n    }\n  };\n\n  CodeLensWidget.prototype.updateHeight = function () {\n    this._contentWidget.updateHeight();\n  };\n\n  CodeLensWidget.prototype.getCommand = function (link) {\n    return this._contentWidget.getCommand(link);\n  };\n\n  CodeLensWidget.prototype.getLineNumber = function () {\n    if (this._editor.hasModel()) {\n      var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n\n      if (range) {\n        return range.startLineNumber;\n      }\n    }\n\n    return -1;\n  };\n\n  CodeLensWidget.prototype.update = function (viewZoneChangeAccessor) {\n    if (this.isValid() && this._editor.hasModel()) {\n      var range = this._editor.getModel().getDecorationRange(this._decorationIds[0]);\n\n      if (range) {\n        this._viewZone.afterLineNumber = range.startLineNumber - 1;\n        viewZoneChangeAccessor.layoutZone(this._viewZoneId);\n\n        this._contentWidget.setSymbolRange(range);\n\n        this._editor.layoutContentWidget(this._contentWidget);\n      }\n    }\n  };\n\n  return CodeLensWidget;\n}();\n\nexport { CodeLensWidget };\nregisterThemingParticipant(function (theme, collector) {\n  var codeLensForeground = theme.getColor(editorCodeLensForeground);\n\n  if (codeLensForeground) {\n    collector.addRule(\".monaco-editor .codelens-decoration { color: \" + codeLensForeground + \"; }\");\n  }\n\n  var activeLinkForeground = theme.getColor(editorActiveLinkForeground);\n\n  if (activeLinkForeground) {\n    collector.addRule(\".monaco-editor .codelens-decoration > a:hover { color: \" + activeLinkForeground + \" !important; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}