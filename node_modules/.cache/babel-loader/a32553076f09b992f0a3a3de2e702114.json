{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport './inspectTokens.css';\nimport { Color } from '../../../../base/common/color.js';\nimport { Disposable } from '../../../../base/common/lifecycle.js';\nimport { escape } from '../../../../base/common/strings.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../../browser/editorExtensions.js';\nimport { TokenMetadata, TokenizationRegistry } from '../../../common/modes.js';\nimport { NULL_STATE, nullTokenize, nullTokenize2 } from '../../../common/modes/nullMode.js';\nimport { IModeService } from '../../../common/services/modeService.js';\nimport { IStandaloneThemeService } from '../../common/standaloneThemeService.js';\nimport { editorHoverBackground, editorHoverBorder } from '../../../../platform/theme/common/colorRegistry.js';\nimport { HIGH_CONTRAST, registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\nimport { InspectTokensNLS } from '../../../common/standaloneStrings.js';\n\nvar InspectTokensController =\n/** @class */\nfunction (_super) {\n  __extends(InspectTokensController, _super);\n\n  function InspectTokensController(editor, standaloneColorService, modeService) {\n    var _this = _super.call(this) || this;\n\n    _this._editor = editor;\n    _this._modeService = modeService;\n    _this._widget = null;\n\n    _this._register(_this._editor.onDidChangeModel(function (e) {\n      return _this.stop();\n    }));\n\n    _this._register(_this._editor.onDidChangeModelLanguage(function (e) {\n      return _this.stop();\n    }));\n\n    _this._register(TokenizationRegistry.onDidChange(function (e) {\n      return _this.stop();\n    }));\n\n    return _this;\n  }\n\n  InspectTokensController.get = function (editor) {\n    return editor.getContribution(InspectTokensController.ID);\n  };\n\n  InspectTokensController.prototype.getId = function () {\n    return InspectTokensController.ID;\n  };\n\n  InspectTokensController.prototype.dispose = function () {\n    this.stop();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  InspectTokensController.prototype.launch = function () {\n    if (this._widget) {\n      return;\n    }\n\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    this._widget = new InspectTokensWidget(this._editor, this._modeService);\n  };\n\n  InspectTokensController.prototype.stop = function () {\n    if (this._widget) {\n      this._widget.dispose();\n\n      this._widget = null;\n    }\n  };\n\n  InspectTokensController.ID = 'editor.contrib.inspectTokens';\n  InspectTokensController = __decorate([__param(1, IStandaloneThemeService), __param(2, IModeService)], InspectTokensController);\n  return InspectTokensController;\n}(Disposable);\n\nvar InspectTokens =\n/** @class */\nfunction (_super) {\n  __extends(InspectTokens, _super);\n\n  function InspectTokens() {\n    return _super.call(this, {\n      id: 'editor.action.inspectTokens',\n      label: InspectTokensNLS.inspectTokensAction,\n      alias: 'Developer: Inspect Tokens',\n      precondition: undefined\n    }) || this;\n  }\n\n  InspectTokens.prototype.run = function (accessor, editor) {\n    var controller = InspectTokensController.get(editor);\n\n    if (controller) {\n      controller.launch();\n    }\n  };\n\n  return InspectTokens;\n}(EditorAction);\n\nfunction renderTokenText(tokenText) {\n  var result = '';\n\n  for (var charIndex = 0, len = tokenText.length; charIndex < len; charIndex++) {\n    var charCode = tokenText.charCodeAt(charIndex);\n\n    switch (charCode) {\n      case 9\n      /* Tab */\n      :\n        result += '&rarr;';\n        break;\n\n      case 32\n      /* Space */\n      :\n        result += '&middot;';\n        break;\n\n      case 60\n      /* LessThan */\n      :\n        result += '&lt;';\n        break;\n\n      case 62\n      /* GreaterThan */\n      :\n        result += '&gt;';\n        break;\n\n      case 38\n      /* Ampersand */\n      :\n        result += '&amp;';\n        break;\n\n      default:\n        result += String.fromCharCode(charCode);\n    }\n  }\n\n  return result;\n}\n\nfunction getSafeTokenizationSupport(languageIdentifier) {\n  var tokenizationSupport = TokenizationRegistry.get(languageIdentifier.language);\n\n  if (tokenizationSupport) {\n    return tokenizationSupport;\n  }\n\n  return {\n    getInitialState: function () {\n      return NULL_STATE;\n    },\n    tokenize: function (line, state, deltaOffset) {\n      return nullTokenize(languageIdentifier.language, line, state, deltaOffset);\n    },\n    tokenize2: function (line, state, deltaOffset) {\n      return nullTokenize2(languageIdentifier.id, line, state, deltaOffset);\n    }\n  };\n}\n\nvar InspectTokensWidget =\n/** @class */\nfunction (_super) {\n  __extends(InspectTokensWidget, _super);\n\n  function InspectTokensWidget(editor, modeService) {\n    var _this = _super.call(this) || this; // Editor.IContentWidget.allowEditorOverflow\n\n\n    _this.allowEditorOverflow = true;\n    _this._editor = editor;\n    _this._modeService = modeService;\n    _this._model = _this._editor.getModel();\n    _this._domNode = document.createElement('div');\n    _this._domNode.className = 'tokens-inspect-widget';\n    _this._tokenizationSupport = getSafeTokenizationSupport(_this._model.getLanguageIdentifier());\n\n    _this._compute(_this._editor.getPosition());\n\n    _this._register(_this._editor.onDidChangeCursorPosition(function (e) {\n      return _this._compute(_this._editor.getPosition());\n    }));\n\n    _this._editor.addContentWidget(_this);\n\n    return _this;\n  }\n\n  InspectTokensWidget.prototype.dispose = function () {\n    this._editor.removeContentWidget(this);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  InspectTokensWidget.prototype.getId = function () {\n    return InspectTokensWidget._ID;\n  };\n\n  InspectTokensWidget.prototype._compute = function (position) {\n    var data = this._getTokensAtLine(position.lineNumber);\n\n    var token1Index = 0;\n\n    for (var i = data.tokens1.length - 1; i >= 0; i--) {\n      var t = data.tokens1[i];\n\n      if (position.column - 1 >= t.offset) {\n        token1Index = i;\n        break;\n      }\n    }\n\n    var token2Index = 0;\n\n    for (var i = data.tokens2.length >>> 1; i >= 0; i--) {\n      if (position.column - 1 >= data.tokens2[i << 1]) {\n        token2Index = i;\n        break;\n      }\n    }\n\n    var result = '';\n\n    var lineContent = this._model.getLineContent(position.lineNumber);\n\n    var tokenText = '';\n\n    if (token1Index < data.tokens1.length) {\n      var tokenStartIndex = data.tokens1[token1Index].offset;\n      var tokenEndIndex = token1Index + 1 < data.tokens1.length ? data.tokens1[token1Index + 1].offset : lineContent.length;\n      tokenText = lineContent.substring(tokenStartIndex, tokenEndIndex);\n    }\n\n    result += \"<h2 class=\\\"tm-token\\\">\" + renderTokenText(tokenText) + \"<span class=\\\"tm-token-length\\\">(\" + tokenText.length + \" \" + (tokenText.length === 1 ? 'char' : 'chars') + \")</span></h2>\";\n    result += \"<hr class=\\\"tokens-inspect-separator\\\" style=\\\"clear:both\\\"/>\";\n\n    var metadata = this._decodeMetadata(data.tokens2[(token2Index << 1) + 1]);\n\n    result += \"<table class=\\\"tm-metadata-table\\\"><tbody>\";\n    result += \"<tr><td class=\\\"tm-metadata-key\\\">language</td><td class=\\\"tm-metadata-value\\\">\" + escape(metadata.languageIdentifier.language) + \"</td>\";\n    result += \"<tr><td class=\\\"tm-metadata-key\\\">token type</td><td class=\\\"tm-metadata-value\\\">\" + this._tokenTypeToString(metadata.tokenType) + \"</td>\";\n    result += \"<tr><td class=\\\"tm-metadata-key\\\">font style</td><td class=\\\"tm-metadata-value\\\">\" + this._fontStyleToString(metadata.fontStyle) + \"</td>\";\n    result += \"<tr><td class=\\\"tm-metadata-key\\\">foreground</td><td class=\\\"tm-metadata-value\\\">\" + Color.Format.CSS.formatHex(metadata.foreground) + \"</td>\";\n    result += \"<tr><td class=\\\"tm-metadata-key\\\">background</td><td class=\\\"tm-metadata-value\\\">\" + Color.Format.CSS.formatHex(metadata.background) + \"</td>\";\n    result += \"</tbody></table>\";\n    result += \"<hr class=\\\"tokens-inspect-separator\\\"/>\";\n\n    if (token1Index < data.tokens1.length) {\n      result += \"<span class=\\\"tm-token-type\\\">\" + escape(data.tokens1[token1Index].type) + \"</span>\";\n    }\n\n    this._domNode.innerHTML = result;\n\n    this._editor.layoutContentWidget(this);\n  };\n\n  InspectTokensWidget.prototype._decodeMetadata = function (metadata) {\n    var colorMap = TokenizationRegistry.getColorMap();\n    var languageId = TokenMetadata.getLanguageId(metadata);\n    var tokenType = TokenMetadata.getTokenType(metadata);\n    var fontStyle = TokenMetadata.getFontStyle(metadata);\n    var foreground = TokenMetadata.getForeground(metadata);\n    var background = TokenMetadata.getBackground(metadata);\n    return {\n      languageIdentifier: this._modeService.getLanguageIdentifier(languageId),\n      tokenType: tokenType,\n      fontStyle: fontStyle,\n      foreground: colorMap[foreground],\n      background: colorMap[background]\n    };\n  };\n\n  InspectTokensWidget.prototype._tokenTypeToString = function (tokenType) {\n    switch (tokenType) {\n      case 0\n      /* Other */\n      :\n        return 'Other';\n\n      case 1\n      /* Comment */\n      :\n        return 'Comment';\n\n      case 2\n      /* String */\n      :\n        return 'String';\n\n      case 4\n      /* RegEx */\n      :\n        return 'RegEx';\n    }\n\n    return '??';\n  };\n\n  InspectTokensWidget.prototype._fontStyleToString = function (fontStyle) {\n    var r = '';\n\n    if (fontStyle & 1\n    /* Italic */\n    ) {\n        r += 'italic ';\n      }\n\n    if (fontStyle & 2\n    /* Bold */\n    ) {\n        r += 'bold ';\n      }\n\n    if (fontStyle & 4\n    /* Underline */\n    ) {\n        r += 'underline ';\n      }\n\n    if (r.length === 0) {\n      r = '---';\n    }\n\n    return r;\n  };\n\n  InspectTokensWidget.prototype._getTokensAtLine = function (lineNumber) {\n    var stateBeforeLine = this._getStateBeforeLine(lineNumber);\n\n    var tokenizationResult1 = this._tokenizationSupport.tokenize(this._model.getLineContent(lineNumber), stateBeforeLine, 0);\n\n    var tokenizationResult2 = this._tokenizationSupport.tokenize2(this._model.getLineContent(lineNumber), stateBeforeLine, 0);\n\n    return {\n      startState: stateBeforeLine,\n      tokens1: tokenizationResult1.tokens,\n      tokens2: tokenizationResult2.tokens,\n      endState: tokenizationResult1.endState\n    };\n  };\n\n  InspectTokensWidget.prototype._getStateBeforeLine = function (lineNumber) {\n    var state = this._tokenizationSupport.getInitialState();\n\n    for (var i = 1; i < lineNumber; i++) {\n      var tokenizationResult = this._tokenizationSupport.tokenize(this._model.getLineContent(i), state, 0);\n\n      state = tokenizationResult.endState;\n    }\n\n    return state;\n  };\n\n  InspectTokensWidget.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  InspectTokensWidget.prototype.getPosition = function () {\n    return {\n      position: this._editor.getPosition(),\n      preference: [2\n      /* BELOW */\n      , 1\n      /* ABOVE */\n      ]\n    };\n  };\n\n  InspectTokensWidget._ID = 'editor.contrib.inspectTokensWidget';\n  return InspectTokensWidget;\n}(Disposable);\n\nregisterEditorContribution(InspectTokensController);\nregisterEditorAction(InspectTokens);\nregisterThemingParticipant(function (theme, collector) {\n  var border = theme.getColor(editorHoverBorder);\n\n  if (border) {\n    var borderWidth = theme.type === HIGH_CONTRAST ? 2 : 1;\n    collector.addRule(\".monaco-editor .tokens-inspect-widget { border: \" + borderWidth + \"px solid \" + border + \"; }\");\n    collector.addRule(\".monaco-editor .tokens-inspect-widget .tokens-inspect-separator { background-color: \" + border + \"; }\");\n  }\n\n  var background = theme.getColor(editorHoverBackground);\n\n  if (background) {\n    collector.addRule(\".monaco-editor .tokens-inspect-widget { background-color: \" + background + \"; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}