{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as objects from '../utils/objects.js';\n\nvar CSSDataManager =\n/** @class */\nfunction () {\n  function CSSDataManager(dataProviders) {\n    this.dataProviders = dataProviders;\n    this._propertySet = {};\n    this._atDirectiveSet = {};\n    this._pseudoClassSet = {};\n    this._pseudoElementSet = {};\n    this._properties = [];\n    this._atDirectives = [];\n    this._pseudoClasses = [];\n    this._pseudoElements = [];\n    this.collectData();\n  }\n\n  CSSDataManager.prototype.addDataProviders = function (providers) {\n    this.dataProviders = this.dataProviders.concat(providers);\n    this.collectData();\n  };\n  /**\n   * Collect all data  & handle duplicates\n   */\n\n\n  CSSDataManager.prototype.collectData = function () {\n    var _this = this;\n\n    this.dataProviders.forEach(function (provider) {\n      provider.provideProperties().forEach(function (p) {\n        if (!_this._propertySet[p.name]) {\n          _this._propertySet[p.name] = p;\n        }\n      });\n      provider.provideAtDirectives().forEach(function (p) {\n        if (!_this._atDirectiveSet[p.name]) {\n          _this._atDirectiveSet[p.name] = p;\n        }\n      });\n      provider.providePseudoClasses().forEach(function (p) {\n        if (!_this._pseudoClassSet[p.name]) {\n          _this._pseudoClassSet[p.name] = p;\n        }\n      });\n      provider.providePseudoElements().forEach(function (p) {\n        if (!_this._pseudoElementSet[p.name]) {\n          _this._pseudoElementSet[p.name] = p;\n        }\n      });\n    });\n    this._properties = objects.values(this._propertySet);\n    this._atDirectives = objects.values(this._atDirectiveSet);\n    this._pseudoClasses = objects.values(this._pseudoClassSet);\n    this._pseudoElements = objects.values(this._pseudoElementSet);\n  };\n\n  CSSDataManager.prototype.getProperty = function (name) {\n    return this._propertySet[name];\n  };\n\n  CSSDataManager.prototype.getAtDirective = function (name) {\n    return this._atDirectiveSet[name];\n  };\n\n  CSSDataManager.prototype.getPseudoClass = function (name) {\n    return this._pseudoClassSet[name];\n  };\n\n  CSSDataManager.prototype.getPseudoElement = function (name) {\n    return this._pseudoElementSet[name];\n  };\n\n  CSSDataManager.prototype.getProperties = function (majorBrowserSupport) {\n    if (majorBrowserSupport === void 0) {\n      majorBrowserSupport = true;\n    }\n\n    if (!majorBrowserSupport) {\n      return this._properties;\n    } else {\n      return this._properties.filter(supportedInMoreThanOneBrowser);\n    }\n  };\n\n  CSSDataManager.prototype.getAtDirectives = function (majorBrowserSupport) {\n    if (majorBrowserSupport === void 0) {\n      majorBrowserSupport = true;\n    }\n\n    if (!majorBrowserSupport) {\n      return this._atDirectives;\n    } else {\n      return this._atDirectives.filter(supportedInMoreThanOneBrowser);\n    }\n  };\n\n  CSSDataManager.prototype.getPseudoClasses = function (majorBrowserSupport) {\n    if (majorBrowserSupport === void 0) {\n      majorBrowserSupport = true;\n    }\n\n    if (!majorBrowserSupport) {\n      return this._pseudoClasses;\n    } else {\n      return this._pseudoClasses.filter(supportedInMoreThanOneBrowser);\n    }\n  };\n\n  CSSDataManager.prototype.getPseudoElements = function (majorBrowserSupport) {\n    if (majorBrowserSupport === void 0) {\n      majorBrowserSupport = true;\n    }\n\n    if (!majorBrowserSupport) {\n      return this._pseudoElements;\n    } else {\n      return this._pseudoElements.filter(supportedInMoreThanOneBrowser);\n    }\n  };\n\n  CSSDataManager.prototype.isKnownProperty = function (name) {\n    return name.toLowerCase() in this._propertySet;\n  };\n\n  CSSDataManager.prototype.isStandardProperty = function (name) {\n    return this.isKnownProperty(name) && (!this._propertySet[name.toLowerCase()].status || this._propertySet[name.toLowerCase()].status === 'standard');\n  };\n\n  return CSSDataManager;\n}();\n\nexport { CSSDataManager };\nexport function supportedInMoreThanOneBrowser(entry) {\n  if (!entry.browsers) {\n    return true;\n  }\n\n  return entry.browsers.length > 1;\n}","map":null,"metadata":{},"sourceType":"module"}