{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { LineTokens } from '../core/lineTokens.js';\nimport { NULL_STATE, nullTokenize2 } from './nullMode.js';\nvar fallback = {\n  getInitialState: function () {\n    return NULL_STATE;\n  },\n  tokenize2: function (buffer, state, deltaOffset) {\n    return nullTokenize2(0\n    /* Null */\n    , buffer, state, deltaOffset);\n  }\n};\nexport function tokenizeToString(text, tokenizationSupport) {\n  if (tokenizationSupport === void 0) {\n    tokenizationSupport = fallback;\n  }\n\n  return _tokenizeToString(text, tokenizationSupport || fallback);\n}\nexport function tokenizeLineToHTML(text, viewLineTokens, colorMap, startOffset, endOffset, tabSize) {\n  var result = \"<div>\";\n  var charIndex = startOffset;\n  var tabsCharDelta = 0;\n\n  for (var tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n    var tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n\n    if (tokenEndIndex <= startOffset) {\n      continue;\n    }\n\n    var partContent = '';\n\n    for (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n      var charCode = text.charCodeAt(charIndex);\n\n      switch (charCode) {\n        case 9\n        /* Tab */\n        :\n          var insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n          tabsCharDelta += insertSpacesCount - 1;\n\n          while (insertSpacesCount > 0) {\n            partContent += '&nbsp;';\n            insertSpacesCount--;\n          }\n\n          break;\n\n        case 60\n        /* LessThan */\n        :\n          partContent += '&lt;';\n          break;\n\n        case 62\n        /* GreaterThan */\n        :\n          partContent += '&gt;';\n          break;\n\n        case 38\n        /* Ampersand */\n        :\n          partContent += '&amp;';\n          break;\n\n        case 0\n        /* Null */\n        :\n          partContent += '&#00;';\n          break;\n\n        case 65279\n        /* UTF8_BOM */\n        :\n        case 8232\n        /* LINE_SEPARATOR_2028 */\n        :\n          partContent += '\\ufffd';\n          break;\n\n        case 13\n        /* CarriageReturn */\n        :\n          // zero width space, because carriage return would introduce a line break\n          partContent += '&#8203';\n          break;\n\n        case 32\n        /* Space */\n        :\n          partContent += '&nbsp;';\n          break;\n\n        default:\n          partContent += String.fromCharCode(charCode);\n      }\n    }\n\n    result += \"<span style=\\\"\" + viewLineTokens.getInlineStyle(tokenIndex, colorMap) + \"\\\">\" + partContent + \"</span>\";\n\n    if (tokenEndIndex > endOffset || charIndex >= endOffset) {\n      break;\n    }\n  }\n\n  result += \"</div>\";\n  return result;\n}\n\nfunction _tokenizeToString(text, tokenizationSupport) {\n  var result = \"<div class=\\\"monaco-tokenized-source\\\">\";\n  var lines = text.split(/\\r\\n|\\r|\\n/);\n  var currentState = tokenizationSupport.getInitialState();\n\n  for (var i = 0, len = lines.length; i < len; i++) {\n    var line = lines[i];\n\n    if (i > 0) {\n      result += \"<br/>\";\n    }\n\n    var tokenizationResult = tokenizationSupport.tokenize2(line, currentState, 0);\n    LineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n    var lineTokens = new LineTokens(tokenizationResult.tokens, line);\n    var viewLineTokens = lineTokens.inflate();\n    var startOffset = 0;\n\n    for (var j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n      var type = viewLineTokens.getClassName(j);\n      var endIndex = viewLineTokens.getEndOffset(j);\n      result += \"<span class=\\\"\" + type + \"\\\">\" + strings.escape(line.substring(startOffset, endIndex)) + \"</span>\";\n      startOffset = endIndex;\n    }\n\n    currentState = tokenizationResult.endState;\n  }\n\n  result += \"</div>\";\n  return result;\n}","map":null,"metadata":{},"sourceType":"module"}