{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { Action } from '../../../base/common/actions.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Range } from '../../common/core/range.js';\n\nvar InlineDiffMargin =\n/** @class */\nfunction (_super) {\n  __extends(InlineDiffMargin, _super);\n\n  function InlineDiffMargin(_viewZoneId, _marginDomNode, editor, diff, _contextMenuService, _clipboardService) {\n    var _this = _super.call(this) || this;\n\n    _this._viewZoneId = _viewZoneId;\n    _this._marginDomNode = _marginDomNode;\n    _this.editor = editor;\n    _this.diff = diff;\n    _this._contextMenuService = _contextMenuService;\n    _this._clipboardService = _clipboardService;\n    _this._visibility = false; // make sure the diff margin shows above overlay.\n\n    _this._marginDomNode.style.zIndex = '10';\n    _this._diffActions = document.createElement('div');\n    _this._diffActions.className = 'lightbulb-glyph';\n    _this._diffActions.style.position = 'absolute';\n    var lineHeight = editor.getConfiguration().lineHeight;\n    var lineFeed = editor.getModel().getEOL();\n    _this._diffActions.style.right = '0px';\n    _this._diffActions.style.visibility = 'hidden';\n    _this._diffActions.style.height = lineHeight + \"px\";\n    _this._diffActions.style.lineHeight = lineHeight + \"px\";\n\n    _this._marginDomNode.appendChild(_this._diffActions);\n\n    var actions = []; // default action\n\n    actions.push(new Action('diff.clipboard.copyDeletedContent', diff.originalEndLineNumber > diff.modifiedStartLineNumber ? nls.localize('diff.clipboard.copyDeletedLinesContent.label', \"Copy deleted lines\") : nls.localize('diff.clipboard.copyDeletedLinesContent.single.label', \"Copy deleted line\"), undefined, true, function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              return [4\n              /*yield*/\n              , this._clipboardService.writeText(diff.originalContent.join(lineFeed) + lineFeed)];\n\n            case 1:\n              _a.sent();\n\n              return [2\n              /*return*/\n              ];\n          }\n        });\n      });\n    }));\n    var currentLineNumberOffset = 0;\n    var copyLineAction = undefined;\n\n    if (diff.originalEndLineNumber > diff.modifiedStartLineNumber) {\n      copyLineAction = new Action('diff.clipboard.copyDeletedLineContent', nls.localize('diff.clipboard.copyDeletedLineContent.label', \"Copy deleted line ({0})\", diff.originalStartLineNumber), undefined, true, function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                return [4\n                /*yield*/\n                , this._clipboardService.writeText(diff.originalContent[currentLineNumberOffset])];\n\n              case 1:\n                _a.sent();\n\n                return [2\n                /*return*/\n                ];\n            }\n          });\n        });\n      });\n      actions.push(copyLineAction);\n    }\n\n    var readOnly = editor.getConfiguration().readOnly;\n\n    if (!readOnly) {\n      actions.push(new Action('diff.inline.revertChange', nls.localize('diff.inline.revertChange.label', \"Revert this change\"), undefined, true, function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var column, column;\n          return __generator(this, function (_a) {\n            if (diff.modifiedEndLineNumber === 0) {\n              column = editor.getModel().getLineMaxColumn(diff.modifiedStartLineNumber);\n              editor.executeEdits('diffEditor', [{\n                range: new Range(diff.modifiedStartLineNumber, column, diff.modifiedStartLineNumber, column),\n                text: lineFeed + diff.originalContent.join(lineFeed)\n              }]);\n            } else {\n              column = editor.getModel().getLineMaxColumn(diff.modifiedEndLineNumber);\n              editor.executeEdits('diffEditor', [{\n                range: new Range(diff.modifiedStartLineNumber, 1, diff.modifiedEndLineNumber, column),\n                text: diff.originalContent.join(lineFeed)\n              }]);\n            }\n\n            return [2\n            /*return*/\n            ];\n          });\n        });\n      }));\n    }\n\n    _this._register(dom.addStandardDisposableListener(_this._diffActions, 'mousedown', function (e) {\n      var _a = dom.getDomNodePagePosition(_this._diffActions),\n          top = _a.top,\n          height = _a.height;\n\n      var pad = Math.floor(lineHeight / 3);\n      e.preventDefault();\n\n      _this._contextMenuService.showContextMenu({\n        getAnchor: function () {\n          return {\n            x: e.posx,\n            y: top + height + pad\n          };\n        },\n        getActions: function () {\n          if (copyLineAction) {\n            copyLineAction.label = nls.localize('diff.clipboard.copyDeletedLineContent.label', \"Copy deleted line ({0})\", diff.originalStartLineNumber + currentLineNumberOffset);\n          }\n\n          return actions;\n        },\n        autoSelectFirstItem: true\n      });\n    }));\n\n    _this._register(editor.onMouseMove(function (e) {\n      if (e.target.type === 8\n      /* CONTENT_VIEW_ZONE */\n      || e.target.type === 5\n      /* GUTTER_VIEW_ZONE */\n      ) {\n          var viewZoneId = e.target.detail.viewZoneId;\n\n          if (viewZoneId === _this._viewZoneId) {\n            _this.visibility = true;\n            currentLineNumberOffset = _this._updateLightBulbPosition(_this._marginDomNode, e.event.browserEvent.y, lineHeight);\n          } else {\n            _this.visibility = false;\n          }\n        } else {\n        _this.visibility = false;\n      }\n    }));\n\n    return _this;\n  }\n\n  Object.defineProperty(InlineDiffMargin.prototype, \"visibility\", {\n    get: function () {\n      return this._visibility;\n    },\n    set: function (_visibility) {\n      if (this._visibility !== _visibility) {\n        this._visibility = _visibility;\n\n        if (_visibility) {\n          this._diffActions.style.visibility = 'visible';\n        } else {\n          this._diffActions.style.visibility = 'hidden';\n        }\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  InlineDiffMargin.prototype._updateLightBulbPosition = function (marginDomNode, y, lineHeight) {\n    var top = dom.getDomNodePagePosition(marginDomNode).top;\n    var offset = y - top;\n    var lineNumberOffset = Math.floor(offset / lineHeight);\n    var newTop = lineNumberOffset * lineHeight;\n    this._diffActions.style.top = newTop + \"px\";\n    return lineNumberOffset;\n  };\n\n  return InlineDiffMargin;\n}(Disposable);\n\nexport { InlineDiffMargin };","map":null,"metadata":{},"sourceType":"module"}