{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './findWidget.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { alert as alertFn } from '../../../base/browser/ui/aria/aria.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { Widget } from '../../../base/browser/ui/widget.js';\nimport { Delayer } from '../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Range } from '../../common/core/range.js';\nimport { CONTEXT_FIND_INPUT_FOCUSED, CONTEXT_REPLACE_INPUT_FOCUSED, FIND_IDS, MATCHES_LIMIT } from './findModel.js';\nimport { contrastBorder, editorFindMatch, editorFindMatchBorder, editorFindMatchHighlight, editorFindMatchHighlightBorder, editorFindRangeHighlight, editorFindRangeHighlightBorder, editorWidgetBackground, editorWidgetBorder, editorWidgetResizeBorder, errorForeground, inputActiveOptionBorder, inputActiveOptionBackground, inputBackground, inputBorder, inputForeground, inputValidationErrorBackground, inputValidationErrorBorder, inputValidationErrorForeground, inputValidationInfoBackground, inputValidationInfoBorder, inputValidationInfoForeground, inputValidationWarningBackground, inputValidationWarningBorder, inputValidationWarningForeground, widgetShadow, editorWidgetForeground, focusBorder } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport { ContextScopedFindInput, ContextScopedReplaceInput } from '../../../platform/browser/contextScopedHistoryWidget.js';\nvar NLS_FIND_INPUT_LABEL = nls.localize('label.find', \"Find\");\nvar NLS_FIND_INPUT_PLACEHOLDER = nls.localize('placeholder.find', \"Find\");\nvar NLS_PREVIOUS_MATCH_BTN_LABEL = nls.localize('label.previousMatchButton', \"Previous match\");\nvar NLS_NEXT_MATCH_BTN_LABEL = nls.localize('label.nextMatchButton', \"Next match\");\nvar NLS_TOGGLE_SELECTION_FIND_TITLE = nls.localize('label.toggleSelectionFind', \"Find in selection\");\nvar NLS_CLOSE_BTN_LABEL = nls.localize('label.closeButton', \"Close\");\nvar NLS_REPLACE_INPUT_LABEL = nls.localize('label.replace', \"Replace\");\nvar NLS_REPLACE_INPUT_PLACEHOLDER = nls.localize('placeholder.replace', \"Replace\");\nvar NLS_REPLACE_BTN_LABEL = nls.localize('label.replaceButton', \"Replace\");\nvar NLS_REPLACE_ALL_BTN_LABEL = nls.localize('label.replaceAllButton', \"Replace All\");\nvar NLS_TOGGLE_REPLACE_MODE_BTN_LABEL = nls.localize('label.toggleReplaceButton', \"Toggle Replace mode\");\nvar NLS_MATCHES_COUNT_LIMIT_TITLE = nls.localize('title.matchesCountLimit', \"Only the first {0} results are highlighted, but all find operations work on the entire text.\", MATCHES_LIMIT);\nvar NLS_MATCHES_LOCATION = nls.localize('label.matchesLocation', \"{0} of {1}\");\nvar NLS_NO_RESULTS = nls.localize('label.noResults', \"No Results\");\nvar FIND_WIDGET_INITIAL_WIDTH = 419;\nvar PART_WIDTH = 275;\nvar FIND_INPUT_AREA_WIDTH = PART_WIDTH - 54;\nvar MAX_MATCHES_COUNT_WIDTH = 69;\nvar FIND_ALL_CONTROLS_WIDTH = 17\n/** Find Input margin-left */\n+ (MAX_MATCHES_COUNT_WIDTH + 3 + 1)\n/** Match Results */\n+ 23\n/** Button */\n* 4 + 2\n/** sash */\n;\nvar FIND_INPUT_AREA_HEIGHT = 33; // The height of Find Widget when Replace Input is not visible.\n\nvar ctrlEnterReplaceAllWarningPromptedKey = 'ctrlEnterReplaceAll.windows.donotask';\nvar ctrlKeyMod = platform.isMacintosh ? 256\n/* WinCtrl */\n: 2048\n/* CtrlCmd */\n;\n\nvar FindWidgetViewZone =\n/** @class */\nfunction () {\n  function FindWidgetViewZone(afterLineNumber) {\n    this.afterLineNumber = afterLineNumber;\n    this.heightInPx = FIND_INPUT_AREA_HEIGHT;\n    this.suppressMouseDown = false;\n    this.domNode = document.createElement('div');\n    this.domNode.className = 'dock-find-viewzone';\n  }\n\n  return FindWidgetViewZone;\n}();\n\nexport { FindWidgetViewZone };\n\nfunction stopPropagationForMultiLineUpwards(event, value, textarea) {\n  var isMultiline = !!value.match(/\\n/);\n\n  if (textarea && isMultiline && textarea.selectionStart > 0) {\n    event.stopPropagation();\n    return;\n  }\n}\n\nfunction stopPropagationForMultiLineDownwards(event, value, textarea) {\n  var isMultiline = !!value.match(/\\n/);\n\n  if (textarea && isMultiline && textarea.selectionEnd < textarea.value.length) {\n    event.stopPropagation();\n    return;\n  }\n}\n\nvar FindWidget =\n/** @class */\nfunction (_super) {\n  __extends(FindWidget, _super);\n\n  function FindWidget(codeEditor, controller, state, contextViewProvider, keybindingService, contextKeyService, themeService, storageService, notificationService) {\n    var _this = _super.call(this) || this;\n\n    _this._codeEditor = codeEditor;\n    _this._controller = controller;\n    _this._state = state;\n    _this._contextViewProvider = contextViewProvider;\n    _this._keybindingService = keybindingService;\n    _this._contextKeyService = contextKeyService;\n    _this._storageService = storageService;\n    _this._notificationService = notificationService;\n    _this._ctrlEnterReplaceAllWarningPrompted = !!storageService.getBoolean(ctrlEnterReplaceAllWarningPromptedKey, 0\n    /* GLOBAL */\n    );\n    _this._isVisible = false;\n    _this._isReplaceVisible = false;\n    _this._ignoreChangeEvent = false;\n    _this._updateHistoryDelayer = new Delayer(500);\n\n    _this._register(toDisposable(function () {\n      return _this._updateHistoryDelayer.cancel();\n    }));\n\n    _this._register(_this._state.onFindReplaceStateChange(function (e) {\n      return _this._onStateChanged(e);\n    }));\n\n    _this._buildDomNode();\n\n    _this._updateButtons();\n\n    _this._tryUpdateWidgetWidth();\n\n    _this._findInput.inputBox.layout();\n\n    _this._register(_this._codeEditor.onDidChangeConfiguration(function (e) {\n      if (e.readOnly) {\n        if (_this._codeEditor.getConfiguration().readOnly) {\n          // Hide replace part if editor becomes read only\n          _this._state.change({\n            isReplaceRevealed: false\n          }, false);\n        }\n\n        _this._updateButtons();\n      }\n\n      if (e.layoutInfo) {\n        _this._tryUpdateWidgetWidth();\n      }\n\n      if (e.accessibilitySupport) {\n        _this.updateAccessibilitySupport();\n      }\n\n      if (e.contribInfo) {\n        var addExtraSpaceOnTop = _this._codeEditor.getConfiguration().contribInfo.find.addExtraSpaceOnTop;\n\n        if (addExtraSpaceOnTop && !_this._viewZone) {\n          _this._viewZone = new FindWidgetViewZone(0);\n\n          _this._showViewZone();\n        }\n\n        if (!addExtraSpaceOnTop && _this._viewZone) {\n          _this._removeViewZone();\n        }\n      }\n    }));\n\n    _this.updateAccessibilitySupport();\n\n    _this._register(_this._codeEditor.onDidChangeCursorSelection(function () {\n      if (_this._isVisible) {\n        _this._updateToggleSelectionFindButton();\n      }\n    }));\n\n    _this._register(_this._codeEditor.onDidFocusEditorWidget(function () {\n      if (_this._isVisible) {\n        var globalBufferTerm = _this._controller.getGlobalBufferTerm();\n\n        if (globalBufferTerm && globalBufferTerm !== _this._state.searchString) {\n          _this._state.change({\n            searchString: globalBufferTerm\n          }, true);\n\n          _this._findInput.select();\n        }\n      }\n    }));\n\n    _this._findInputFocused = CONTEXT_FIND_INPUT_FOCUSED.bindTo(contextKeyService);\n    _this._findFocusTracker = _this._register(dom.trackFocus(_this._findInput.inputBox.inputElement));\n\n    _this._register(_this._findFocusTracker.onDidFocus(function () {\n      _this._findInputFocused.set(true);\n\n      _this._updateSearchScope();\n    }));\n\n    _this._register(_this._findFocusTracker.onDidBlur(function () {\n      _this._findInputFocused.set(false);\n    }));\n\n    _this._replaceInputFocused = CONTEXT_REPLACE_INPUT_FOCUSED.bindTo(contextKeyService);\n    _this._replaceFocusTracker = _this._register(dom.trackFocus(_this._replaceInput.inputBox.inputElement));\n\n    _this._register(_this._replaceFocusTracker.onDidFocus(function () {\n      _this._replaceInputFocused.set(true);\n\n      _this._updateSearchScope();\n    }));\n\n    _this._register(_this._replaceFocusTracker.onDidBlur(function () {\n      _this._replaceInputFocused.set(false);\n    }));\n\n    _this._codeEditor.addOverlayWidget(_this);\n\n    if (_this._codeEditor.getConfiguration().contribInfo.find.addExtraSpaceOnTop) {\n      _this._viewZone = new FindWidgetViewZone(0); // Put it before the first line then users can scroll beyond the first line.\n    }\n\n    _this._applyTheme(themeService.getTheme());\n\n    _this._register(themeService.onThemeChange(_this._applyTheme.bind(_this)));\n\n    _this._register(_this._codeEditor.onDidChangeModel(function () {\n      if (!_this._isVisible) {\n        return;\n      }\n\n      _this._viewZoneId = undefined;\n    }));\n\n    _this._register(_this._codeEditor.onDidScrollChange(function (e) {\n      if (e.scrollTopChanged) {\n        _this._layoutViewZone();\n\n        return;\n      } // for other scroll changes, layout the viewzone in next tick to avoid ruining current rendering.\n\n\n      setTimeout(function () {\n        _this._layoutViewZone();\n      }, 0);\n    }));\n\n    return _this;\n  } // ----- IOverlayWidget API\n\n\n  FindWidget.prototype.getId = function () {\n    return FindWidget.ID;\n  };\n\n  FindWidget.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  FindWidget.prototype.getPosition = function () {\n    if (this._isVisible) {\n      return {\n        preference: 0\n        /* TOP_RIGHT_CORNER */\n\n      };\n    }\n\n    return null;\n  }; // ----- React to state changes\n\n\n  FindWidget.prototype._onStateChanged = function (e) {\n    if (e.searchString) {\n      if (this._state.searchString.indexOf('\\n') >= 0) {\n        dom.addClass(this._domNode, 'multipleline');\n      } else {\n        dom.removeClass(this._domNode, 'multipleline');\n      }\n\n      try {\n        this._ignoreChangeEvent = true;\n\n        this._findInput.setValue(this._state.searchString);\n      } finally {\n        this._ignoreChangeEvent = false;\n      }\n\n      this._updateButtons();\n    }\n\n    if (e.replaceString) {\n      this._replaceInput.inputBox.value = this._state.replaceString;\n    }\n\n    if (e.isRevealed) {\n      if (this._state.isRevealed) {\n        this._reveal();\n      } else {\n        this._hide(true);\n      }\n    }\n\n    if (e.isReplaceRevealed) {\n      if (this._state.isReplaceRevealed) {\n        if (!this._codeEditor.getConfiguration().readOnly && !this._isReplaceVisible) {\n          this._isReplaceVisible = true;\n          this._replaceInput.width = dom.getTotalWidth(this._findInput.domNode);\n\n          this._updateButtons();\n\n          this._replaceInput.inputBox.layout();\n        }\n      } else {\n        if (this._isReplaceVisible) {\n          this._isReplaceVisible = false;\n\n          this._updateButtons();\n        }\n      }\n    }\n\n    if ((e.isRevealed || e.isReplaceRevealed) && (this._state.isRevealed || this._state.isReplaceRevealed)) {\n      if (this._tryUpdateHeight()) {\n        this._showViewZone();\n      }\n    }\n\n    if (e.isRegex) {\n      this._findInput.setRegex(this._state.isRegex);\n    }\n\n    if (e.wholeWord) {\n      this._findInput.setWholeWords(this._state.wholeWord);\n    }\n\n    if (e.matchCase) {\n      this._findInput.setCaseSensitive(this._state.matchCase);\n    }\n\n    if (e.searchScope) {\n      if (this._state.searchScope) {\n        this._toggleSelectionFind.checked = true;\n      } else {\n        this._toggleSelectionFind.checked = false;\n      }\n\n      this._updateToggleSelectionFindButton();\n    }\n\n    if (e.searchString || e.matchesCount || e.matchesPosition) {\n      var showRedOutline = this._state.searchString.length > 0 && this._state.matchesCount === 0;\n      dom.toggleClass(this._domNode, 'no-results', showRedOutline);\n\n      this._updateMatchesCount();\n\n      this._updateButtons();\n    }\n\n    if (e.searchString || e.currentMatch) {\n      this._layoutViewZone();\n    }\n\n    if (e.updateHistory) {\n      this._delayedUpdateHistory();\n    }\n  };\n\n  FindWidget.prototype._delayedUpdateHistory = function () {\n    this._updateHistoryDelayer.trigger(this._updateHistory.bind(this));\n  };\n\n  FindWidget.prototype._updateHistory = function () {\n    if (this._state.searchString) {\n      this._findInput.inputBox.addToHistory();\n    }\n\n    if (this._state.replaceString) {\n      this._replaceInput.inputBox.addToHistory();\n    }\n  };\n\n  FindWidget.prototype._updateMatchesCount = function () {\n    this._matchesCount.style.minWidth = MAX_MATCHES_COUNT_WIDTH + 'px';\n\n    if (this._state.matchesCount >= MATCHES_LIMIT) {\n      this._matchesCount.title = NLS_MATCHES_COUNT_LIMIT_TITLE;\n    } else {\n      this._matchesCount.title = '';\n    } // remove previous content\n\n\n    if (this._matchesCount.firstChild) {\n      this._matchesCount.removeChild(this._matchesCount.firstChild);\n    }\n\n    var label;\n\n    if (this._state.matchesCount > 0) {\n      var matchesCount = String(this._state.matchesCount);\n\n      if (this._state.matchesCount >= MATCHES_LIMIT) {\n        matchesCount += '+';\n      }\n\n      var matchesPosition = String(this._state.matchesPosition);\n\n      if (matchesPosition === '0') {\n        matchesPosition = '?';\n      }\n\n      label = strings.format(NLS_MATCHES_LOCATION, matchesPosition, matchesCount);\n    } else {\n      label = NLS_NO_RESULTS;\n    }\n\n    this._matchesCount.appendChild(document.createTextNode(label));\n\n    alertFn(this._getAriaLabel(label, this._state.currentMatch, this._state.searchString), true);\n    MAX_MATCHES_COUNT_WIDTH = Math.max(MAX_MATCHES_COUNT_WIDTH, this._matchesCount.clientWidth);\n  }; // ----- actions\n\n\n  FindWidget.prototype._getAriaLabel = function (label, currentMatch, searchString) {\n    if (label === NLS_NO_RESULTS) {\n      return searchString === '' ? nls.localize('ariaSearchNoResultEmpty', \"{0} found\", label) : nls.localize('ariaSearchNoResult', \"{0} found for {1}\", label, searchString);\n    }\n\n    return currentMatch ? nls.localize('ariaSearchNoResultWithLineNum', \"{0} found for {1} at {2}\", label, searchString, currentMatch.startLineNumber + ':' + currentMatch.startColumn) : nls.localize('ariaSearchNoResultWithLineNumNoCurrentMatch', \"{0} found for {1}\", label, searchString);\n  };\n  /**\n   * If 'selection find' is ON we should not disable the button (its function is to cancel 'selection find').\n   * If 'selection find' is OFF we enable the button only if there is a selection.\n   */\n\n\n  FindWidget.prototype._updateToggleSelectionFindButton = function () {\n    var selection = this._codeEditor.getSelection();\n\n    var isSelection = selection ? selection.startLineNumber !== selection.endLineNumber || selection.startColumn !== selection.endColumn : false;\n    var isChecked = this._toggleSelectionFind.checked;\n\n    this._toggleSelectionFind.setEnabled(this._isVisible && (isChecked || isSelection));\n  };\n\n  FindWidget.prototype._updateButtons = function () {\n    this._findInput.setEnabled(this._isVisible);\n\n    this._replaceInput.setEnabled(this._isVisible && this._isReplaceVisible);\n\n    this._updateToggleSelectionFindButton();\n\n    this._closeBtn.setEnabled(this._isVisible);\n\n    var findInputIsNonEmpty = this._state.searchString.length > 0;\n    var matchesCount = this._state.matchesCount ? true : false;\n\n    this._prevBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount);\n\n    this._nextBtn.setEnabled(this._isVisible && findInputIsNonEmpty && matchesCount);\n\n    this._replaceBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);\n\n    this._replaceAllBtn.setEnabled(this._isVisible && this._isReplaceVisible && findInputIsNonEmpty);\n\n    dom.toggleClass(this._domNode, 'replaceToggled', this._isReplaceVisible);\n\n    this._toggleReplaceBtn.toggleClass('collapse', !this._isReplaceVisible);\n\n    this._toggleReplaceBtn.toggleClass('expand', this._isReplaceVisible);\n\n    this._toggleReplaceBtn.setExpanded(this._isReplaceVisible);\n\n    var canReplace = !this._codeEditor.getConfiguration().readOnly;\n\n    this._toggleReplaceBtn.setEnabled(this._isVisible && canReplace);\n  };\n\n  FindWidget.prototype._reveal = function () {\n    var _this = this;\n\n    if (!this._isVisible) {\n      this._isVisible = true;\n\n      var selection = this._codeEditor.getSelection();\n\n      var isSelection = selection ? selection.startLineNumber !== selection.endLineNumber || selection.startColumn !== selection.endColumn : false;\n\n      if (isSelection && this._codeEditor.getConfiguration().contribInfo.find.autoFindInSelection) {\n        this._toggleSelectionFind.checked = true;\n      } else {\n        this._toggleSelectionFind.checked = false;\n      }\n\n      this._tryUpdateWidgetWidth();\n\n      this._updateButtons();\n\n      setTimeout(function () {\n        dom.addClass(_this._domNode, 'visible');\n\n        _this._domNode.setAttribute('aria-hidden', 'false');\n      }, 0); // validate query again as it's being dismissed when we hide the find widget.\n\n      setTimeout(function () {\n        _this._findInput.validate();\n      }, 200);\n\n      this._codeEditor.layoutOverlayWidget(this);\n\n      var adjustEditorScrollTop = true;\n\n      if (this._codeEditor.getConfiguration().contribInfo.find.seedSearchStringFromSelection && selection) {\n        var domNode = this._codeEditor.getDomNode();\n\n        if (domNode) {\n          var editorCoords = dom.getDomNodePagePosition(domNode);\n\n          var startCoords = this._codeEditor.getScrolledVisiblePosition(selection.getStartPosition());\n\n          var startLeft = editorCoords.left + (startCoords ? startCoords.left : 0);\n          var startTop = startCoords ? startCoords.top : 0;\n\n          if (this._viewZone && startTop < this._viewZone.heightInPx) {\n            if (selection.endLineNumber > selection.startLineNumber) {\n              adjustEditorScrollTop = false;\n            }\n\n            var leftOfFindWidget = dom.getTopLeftOffset(this._domNode).left;\n\n            if (startLeft > leftOfFindWidget) {\n              adjustEditorScrollTop = false;\n            }\n\n            var endCoords = this._codeEditor.getScrolledVisiblePosition(selection.getEndPosition());\n\n            var endLeft = editorCoords.left + (endCoords ? endCoords.left : 0);\n\n            if (endLeft > leftOfFindWidget) {\n              adjustEditorScrollTop = false;\n            }\n          }\n        }\n      }\n\n      this._showViewZone(adjustEditorScrollTop);\n    }\n  };\n\n  FindWidget.prototype._hide = function (focusTheEditor) {\n    if (this._isVisible) {\n      this._isVisible = false;\n\n      this._updateButtons();\n\n      dom.removeClass(this._domNode, 'visible');\n\n      this._domNode.setAttribute('aria-hidden', 'true');\n\n      this._findInput.clearMessage();\n\n      if (focusTheEditor) {\n        this._codeEditor.focus();\n      }\n\n      this._codeEditor.layoutOverlayWidget(this);\n\n      this._removeViewZone();\n    }\n  };\n\n  FindWidget.prototype._layoutViewZone = function () {\n    var _this = this;\n\n    var addExtraSpaceOnTop = this._codeEditor.getConfiguration().contribInfo.find.addExtraSpaceOnTop;\n\n    if (!addExtraSpaceOnTop) {\n      this._removeViewZone();\n\n      return;\n    }\n\n    if (!this._isVisible) {\n      return;\n    }\n\n    var viewZone = this._viewZone;\n\n    if (this._viewZoneId !== undefined || !viewZone) {\n      return;\n    }\n\n    this._codeEditor.changeViewZones(function (accessor) {\n      viewZone.heightInPx = _this._getHeight();\n      _this._viewZoneId = accessor.addZone(viewZone); // scroll top adjust to make sure the editor doesn't scroll when adding viewzone at the beginning.\n\n      _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + viewZone.heightInPx);\n    });\n  };\n\n  FindWidget.prototype._showViewZone = function (adjustScroll) {\n    var _this = this;\n\n    if (adjustScroll === void 0) {\n      adjustScroll = true;\n    }\n\n    if (!this._isVisible) {\n      return;\n    }\n\n    var addExtraSpaceOnTop = this._codeEditor.getConfiguration().contribInfo.find.addExtraSpaceOnTop;\n\n    if (!addExtraSpaceOnTop) {\n      return;\n    }\n\n    if (this._viewZone === undefined) {\n      this._viewZone = new FindWidgetViewZone(0);\n    }\n\n    var viewZone = this._viewZone;\n\n    this._codeEditor.changeViewZones(function (accessor) {\n      if (_this._viewZoneId !== undefined) {\n        // the view zone already exists, we need to update the height\n        var newHeight = _this._getHeight();\n\n        if (newHeight === viewZone.heightInPx) {\n          return;\n        }\n\n        var scrollAdjustment = newHeight - viewZone.heightInPx;\n        viewZone.heightInPx = newHeight;\n        accessor.layoutZone(_this._viewZoneId);\n\n        if (adjustScroll) {\n          _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + scrollAdjustment);\n        }\n\n        return;\n      } else {\n        var scrollAdjustment = _this._getHeight();\n\n        viewZone.heightInPx = scrollAdjustment;\n        _this._viewZoneId = accessor.addZone(viewZone);\n\n        if (adjustScroll) {\n          _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() + scrollAdjustment);\n        }\n      }\n    });\n  };\n\n  FindWidget.prototype._removeViewZone = function () {\n    var _this = this;\n\n    this._codeEditor.changeViewZones(function (accessor) {\n      if (_this._viewZoneId !== undefined) {\n        accessor.removeZone(_this._viewZoneId);\n        _this._viewZoneId = undefined;\n\n        if (_this._viewZone) {\n          _this._codeEditor.setScrollTop(_this._codeEditor.getScrollTop() - _this._viewZone.heightInPx);\n\n          _this._viewZone = undefined;\n        }\n      }\n    });\n  };\n\n  FindWidget.prototype._applyTheme = function (theme) {\n    var inputStyles = {\n      inputActiveOptionBorder: theme.getColor(inputActiveOptionBorder),\n      inputActiveOptionBackground: theme.getColor(inputActiveOptionBackground),\n      inputBackground: theme.getColor(inputBackground),\n      inputForeground: theme.getColor(inputForeground),\n      inputBorder: theme.getColor(inputBorder),\n      inputValidationInfoBackground: theme.getColor(inputValidationInfoBackground),\n      inputValidationInfoForeground: theme.getColor(inputValidationInfoForeground),\n      inputValidationInfoBorder: theme.getColor(inputValidationInfoBorder),\n      inputValidationWarningBackground: theme.getColor(inputValidationWarningBackground),\n      inputValidationWarningForeground: theme.getColor(inputValidationWarningForeground),\n      inputValidationWarningBorder: theme.getColor(inputValidationWarningBorder),\n      inputValidationErrorBackground: theme.getColor(inputValidationErrorBackground),\n      inputValidationErrorForeground: theme.getColor(inputValidationErrorForeground),\n      inputValidationErrorBorder: theme.getColor(inputValidationErrorBorder)\n    };\n\n    this._findInput.style(inputStyles);\n\n    this._replaceInput.style(inputStyles);\n  };\n\n  FindWidget.prototype._tryUpdateWidgetWidth = function () {\n    if (!this._isVisible) {\n      return;\n    }\n\n    var editorContentWidth = this._codeEditor.getConfiguration().layoutInfo.contentWidth;\n\n    if (editorContentWidth <= 0) {\n      // for example, diff view original editor\n      dom.addClass(this._domNode, 'hiddenEditor');\n      return;\n    } else if (dom.hasClass(this._domNode, 'hiddenEditor')) {\n      dom.removeClass(this._domNode, 'hiddenEditor');\n    }\n\n    var editorWidth = this._codeEditor.getConfiguration().layoutInfo.width;\n\n    var minimapWidth = this._codeEditor.getConfiguration().layoutInfo.minimapWidth;\n\n    var collapsedFindWidget = false;\n    var reducedFindWidget = false;\n    var narrowFindWidget = false;\n\n    if (this._resized) {\n      var widgetWidth = dom.getTotalWidth(this._domNode);\n\n      if (widgetWidth > FIND_WIDGET_INITIAL_WIDTH) {\n        // as the widget is resized by users, we may need to change the max width of the widget as the editor width changes.\n        this._domNode.style.maxWidth = editorWidth - 28 - minimapWidth - 15 + \"px\";\n        this._replaceInput.width = dom.getTotalWidth(this._findInput.domNode);\n        return;\n      }\n    }\n\n    if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth >= editorWidth) {\n      reducedFindWidget = true;\n    }\n\n    if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - MAX_MATCHES_COUNT_WIDTH >= editorWidth) {\n      narrowFindWidget = true;\n    }\n\n    if (FIND_WIDGET_INITIAL_WIDTH + 28 + minimapWidth - MAX_MATCHES_COUNT_WIDTH >= editorWidth + 50) {\n      collapsedFindWidget = true;\n    }\n\n    dom.toggleClass(this._domNode, 'collapsed-find-widget', collapsedFindWidget);\n    dom.toggleClass(this._domNode, 'narrow-find-widget', narrowFindWidget);\n    dom.toggleClass(this._domNode, 'reduced-find-widget', reducedFindWidget);\n\n    if (!narrowFindWidget && !collapsedFindWidget) {\n      // the minimal left offset of findwidget is 15px.\n      this._domNode.style.maxWidth = editorWidth - 28 - minimapWidth - 15 + \"px\";\n    }\n\n    if (this._resized) {\n      this._findInput.inputBox.layout();\n\n      var findInputWidth = this._findInput.inputBox.width;\n\n      if (findInputWidth > 0) {\n        this._replaceInput.width = findInputWidth;\n      }\n    }\n  };\n\n  FindWidget.prototype._getHeight = function () {\n    var totalheight = 0; // find input margin top\n\n    totalheight += 4; // find input height\n\n    totalheight += this._findInput.inputBox.height + 2\n    /** input box border */\n    ;\n\n    if (this._isReplaceVisible) {\n      // replace input margin\n      totalheight += 4;\n      totalheight += this._replaceInput.inputBox.height + 2\n      /** input box border */\n      ;\n    } // margin bottom\n\n\n    totalheight += 4;\n    return totalheight;\n  };\n\n  FindWidget.prototype._tryUpdateHeight = function () {\n    var totalHeight = this._getHeight();\n\n    if (this._cachedHeight !== null && this._cachedHeight === totalHeight) {\n      return false;\n    }\n\n    this._cachedHeight = totalHeight;\n    this._domNode.style.height = totalHeight + \"px\";\n    return true;\n  }; // ----- Public\n\n\n  FindWidget.prototype.focusFindInput = function () {\n    this._findInput.select(); // Edge browser requires focus() in addition to select()\n\n\n    this._findInput.focus();\n  };\n\n  FindWidget.prototype.focusReplaceInput = function () {\n    this._replaceInput.select(); // Edge browser requires focus() in addition to select()\n\n\n    this._replaceInput.focus();\n  };\n\n  FindWidget.prototype.highlightFindOptions = function () {\n    this._findInput.highlightFindOptions();\n  };\n\n  FindWidget.prototype._updateSearchScope = function () {\n    if (!this._codeEditor.hasModel()) {\n      return;\n    }\n\n    if (this._toggleSelectionFind.checked) {\n      var selection = this._codeEditor.getSelection();\n\n      if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {\n        selection = selection.setEndPosition(selection.endLineNumber - 1, this._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));\n      }\n\n      var currentMatch = this._state.currentMatch;\n\n      if (selection.startLineNumber !== selection.endLineNumber) {\n        if (!Range.equalsRange(selection, currentMatch)) {\n          // Reseed find scope\n          this._state.change({\n            searchScope: selection\n          }, true);\n        }\n      }\n    }\n  };\n\n  FindWidget.prototype._onFindInputMouseDown = function (e) {\n    // on linux, middle key does pasting.\n    if (e.middleButton) {\n      e.stopPropagation();\n    }\n  };\n\n  FindWidget.prototype._onFindInputKeyDown = function (e) {\n    if (e.equals(ctrlKeyMod | 3\n    /* Enter */\n    )) {\n      var inputElement = this._findInput.inputBox.inputElement;\n      var start = inputElement.selectionStart;\n      var end = inputElement.selectionEnd;\n      var content = inputElement.value;\n\n      if (start !== null && end !== null) {\n        var value = content.substr(0, start) + '\\n' + content.substr(end);\n        this._findInput.inputBox.value = value;\n        inputElement.setSelectionRange(start + 1, start + 1);\n\n        this._findInput.inputBox.layout();\n\n        e.preventDefault();\n        return;\n      }\n    }\n\n    if (e.equals(2\n    /* Tab */\n    )) {\n      if (this._isReplaceVisible) {\n        this._replaceInput.focus();\n      } else {\n        this._findInput.focusOnCaseSensitive();\n      }\n\n      e.preventDefault();\n      return;\n    }\n\n    if (e.equals(2048\n    /* CtrlCmd */\n    | 18\n    /* DownArrow */\n    )) {\n      this._codeEditor.focus();\n\n      e.preventDefault();\n      return;\n    }\n\n    if (e.equals(16\n    /* UpArrow */\n    )) {\n      return stopPropagationForMultiLineUpwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector('textarea'));\n    }\n\n    if (e.equals(18\n    /* DownArrow */\n    )) {\n      return stopPropagationForMultiLineDownwards(e, this._findInput.getValue(), this._findInput.domNode.querySelector('textarea'));\n    }\n  };\n\n  FindWidget.prototype._onReplaceInputKeyDown = function (e) {\n    if (e.equals(ctrlKeyMod | 3\n    /* Enter */\n    )) {\n      if (platform.isWindows && platform.isNative && !this._ctrlEnterReplaceAllWarningPrompted) {\n        // this is the first time when users press Ctrl + Enter to replace all\n        this._notificationService.info(nls.localize('ctrlEnter.keybindingChanged', 'Ctrl+Enter now inserts line break instead of replacing all. You can modify the keybinding for editor.action.replaceAll to override this behavior.'));\n\n        this._ctrlEnterReplaceAllWarningPrompted = true;\n\n        this._storageService.store(ctrlEnterReplaceAllWarningPromptedKey, true, 0\n        /* GLOBAL */\n        );\n      }\n\n      var inputElement = this._replaceInput.inputBox.inputElement;\n      var start = inputElement.selectionStart;\n      var end = inputElement.selectionEnd;\n      var content = inputElement.value;\n\n      if (start !== null && end !== null) {\n        var value = content.substr(0, start) + '\\n' + content.substr(end);\n        this._replaceInput.inputBox.value = value;\n        inputElement.setSelectionRange(start + 1, start + 1);\n\n        this._replaceInput.inputBox.layout();\n\n        e.preventDefault();\n        return;\n      }\n    }\n\n    if (e.equals(2\n    /* Tab */\n    )) {\n      this._findInput.focusOnCaseSensitive();\n\n      e.preventDefault();\n      return;\n    }\n\n    if (e.equals(1024\n    /* Shift */\n    | 2\n    /* Tab */\n    )) {\n      this._findInput.focus();\n\n      e.preventDefault();\n      return;\n    }\n\n    if (e.equals(2048\n    /* CtrlCmd */\n    | 18\n    /* DownArrow */\n    )) {\n      this._codeEditor.focus();\n\n      e.preventDefault();\n      return;\n    }\n\n    if (e.equals(16\n    /* UpArrow */\n    )) {\n      return stopPropagationForMultiLineUpwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector('textarea'));\n    }\n\n    if (e.equals(18\n    /* DownArrow */\n    )) {\n      return stopPropagationForMultiLineDownwards(e, this._replaceInput.inputBox.value, this._replaceInput.inputBox.element.querySelector('textarea'));\n    }\n  }; // ----- sash\n\n\n  FindWidget.prototype.getHorizontalSashTop = function (_sash) {\n    return 0;\n  };\n\n  FindWidget.prototype.getHorizontalSashLeft = function (_sash) {\n    return 0;\n  };\n\n  FindWidget.prototype.getHorizontalSashWidth = function (_sash) {\n    return 500;\n  }; // ----- initialization\n\n\n  FindWidget.prototype._keybindingLabelFor = function (actionId) {\n    var kb = this._keybindingService.lookupKeybinding(actionId);\n\n    if (!kb) {\n      return '';\n    }\n\n    return \" (\" + kb.getLabel() + \")\";\n  };\n\n  FindWidget.prototype._buildDomNode = function () {\n    var _this = this;\n\n    var flexibleHeight = true;\n    var flexibleWidth = true; // Find input\n\n    this._findInput = this._register(new ContextScopedFindInput(null, this._contextViewProvider, {\n      width: FIND_INPUT_AREA_WIDTH,\n      label: NLS_FIND_INPUT_LABEL,\n      placeholder: NLS_FIND_INPUT_PLACEHOLDER,\n      appendCaseSensitiveLabel: this._keybindingLabelFor(FIND_IDS.ToggleCaseSensitiveCommand),\n      appendWholeWordsLabel: this._keybindingLabelFor(FIND_IDS.ToggleWholeWordCommand),\n      appendRegexLabel: this._keybindingLabelFor(FIND_IDS.ToggleRegexCommand),\n      validation: function (value) {\n        if (value.length === 0 || !_this._findInput.getRegex()) {\n          return null;\n        }\n\n        try {\n          /* tslint:disable-next-line:no-unused-expression */\n          new RegExp(value);\n          return null;\n        } catch (e) {\n          return {\n            content: e.message\n          };\n        }\n      },\n      flexibleHeight: flexibleHeight,\n      flexibleWidth: flexibleWidth,\n      flexibleMaxHeight: 118\n    }, this._contextKeyService, true));\n\n    this._findInput.setRegex(!!this._state.isRegex);\n\n    this._findInput.setCaseSensitive(!!this._state.matchCase);\n\n    this._findInput.setWholeWords(!!this._state.wholeWord);\n\n    this._register(this._findInput.onKeyDown(function (e) {\n      return _this._onFindInputKeyDown(e);\n    }));\n\n    this._register(this._findInput.inputBox.onDidChange(function () {\n      if (_this._ignoreChangeEvent) {\n        return;\n      }\n\n      _this._state.change({\n        searchString: _this._findInput.getValue()\n      }, true);\n    }));\n\n    this._register(this._findInput.onDidOptionChange(function () {\n      _this._state.change({\n        isRegex: _this._findInput.getRegex(),\n        wholeWord: _this._findInput.getWholeWords(),\n        matchCase: _this._findInput.getCaseSensitive()\n      }, true);\n    }));\n\n    this._register(this._findInput.onCaseSensitiveKeyDown(function (e) {\n      if (e.equals(1024\n      /* Shift */\n      | 2\n      /* Tab */\n      )) {\n        if (_this._isReplaceVisible) {\n          _this._replaceInput.focus();\n\n          e.preventDefault();\n        }\n      }\n    }));\n\n    this._register(this._findInput.onRegexKeyDown(function (e) {\n      if (e.equals(2\n      /* Tab */\n      )) {\n        if (_this._isReplaceVisible) {\n          _this._replaceInput.focusOnPreserve();\n\n          e.preventDefault();\n        }\n      }\n    }));\n\n    this._register(this._findInput.inputBox.onDidHeightChange(function (e) {\n      if (_this._tryUpdateHeight()) {\n        _this._showViewZone();\n      }\n    }));\n\n    if (platform.isLinux) {\n      this._register(this._findInput.onMouseDown(function (e) {\n        return _this._onFindInputMouseDown(e);\n      }));\n    }\n\n    this._matchesCount = document.createElement('div');\n    this._matchesCount.className = 'matchesCount';\n\n    this._updateMatchesCount(); // Previous button\n\n\n    this._prevBtn = this._register(new SimpleButton({\n      label: NLS_PREVIOUS_MATCH_BTN_LABEL + this._keybindingLabelFor(FIND_IDS.PreviousMatchFindAction),\n      className: 'previous',\n      onTrigger: function () {\n        _this._codeEditor.getAction(FIND_IDS.PreviousMatchFindAction).run().then(undefined, onUnexpectedError);\n      }\n    })); // Next button\n\n    this._nextBtn = this._register(new SimpleButton({\n      label: NLS_NEXT_MATCH_BTN_LABEL + this._keybindingLabelFor(FIND_IDS.NextMatchFindAction),\n      className: 'next',\n      onTrigger: function () {\n        _this._codeEditor.getAction(FIND_IDS.NextMatchFindAction).run().then(undefined, onUnexpectedError);\n      }\n    }));\n    var findPart = document.createElement('div');\n    findPart.className = 'find-part';\n    findPart.appendChild(this._findInput.domNode);\n    var actionsContainer = document.createElement('div');\n    actionsContainer.className = 'find-actions';\n    findPart.appendChild(actionsContainer);\n    actionsContainer.appendChild(this._matchesCount);\n    actionsContainer.appendChild(this._prevBtn.domNode);\n    actionsContainer.appendChild(this._nextBtn.domNode); // Toggle selection button\n\n    this._toggleSelectionFind = this._register(new SimpleCheckbox({\n      parent: actionsContainer,\n      title: NLS_TOGGLE_SELECTION_FIND_TITLE + this._keybindingLabelFor(FIND_IDS.ToggleSearchScopeCommand),\n      onChange: function () {\n        if (_this._toggleSelectionFind.checked) {\n          if (_this._codeEditor.hasModel()) {\n            var selection = _this._codeEditor.getSelection();\n\n            if (selection.endColumn === 1 && selection.endLineNumber > selection.startLineNumber) {\n              selection = selection.setEndPosition(selection.endLineNumber - 1, _this._codeEditor.getModel().getLineMaxColumn(selection.endLineNumber - 1));\n            }\n\n            if (!selection.isEmpty()) {\n              _this._state.change({\n                searchScope: selection\n              }, true);\n            }\n          }\n        } else {\n          _this._state.change({\n            searchScope: null\n          }, true);\n        }\n      }\n    })); // Close button\n\n    this._closeBtn = this._register(new SimpleButton({\n      label: NLS_CLOSE_BTN_LABEL + this._keybindingLabelFor(FIND_IDS.CloseFindWidgetCommand),\n      className: 'close-fw',\n      onTrigger: function () {\n        _this._state.change({\n          isRevealed: false,\n          searchScope: null\n        }, false);\n      },\n      onKeyDown: function (e) {\n        if (e.equals(2\n        /* Tab */\n        )) {\n          if (_this._isReplaceVisible) {\n            if (_this._replaceBtn.isEnabled()) {\n              _this._replaceBtn.focus();\n            } else {\n              _this._codeEditor.focus();\n            }\n\n            e.preventDefault();\n          }\n        }\n      }\n    }));\n    actionsContainer.appendChild(this._closeBtn.domNode); // Replace input\n\n    this._replaceInput = this._register(new ContextScopedReplaceInput(null, undefined, {\n      label: NLS_REPLACE_INPUT_LABEL,\n      placeholder: NLS_REPLACE_INPUT_PLACEHOLDER,\n      history: [],\n      flexibleHeight: flexibleHeight,\n      flexibleWidth: flexibleWidth,\n      flexibleMaxHeight: 118\n    }, this._contextKeyService, true));\n\n    this._replaceInput.setPreserveCase(!!this._state.preserveCase);\n\n    this._register(this._replaceInput.onKeyDown(function (e) {\n      return _this._onReplaceInputKeyDown(e);\n    }));\n\n    this._register(this._replaceInput.inputBox.onDidChange(function () {\n      _this._state.change({\n        replaceString: _this._replaceInput.inputBox.value\n      }, false);\n    }));\n\n    this._register(this._replaceInput.inputBox.onDidHeightChange(function (e) {\n      if (_this._isReplaceVisible && _this._tryUpdateHeight()) {\n        _this._showViewZone();\n      }\n    }));\n\n    this._register(this._replaceInput.onDidOptionChange(function () {\n      _this._state.change({\n        preserveCase: _this._replaceInput.getPreserveCase()\n      }, true);\n    }));\n\n    this._register(this._replaceInput.onPreserveCaseKeyDown(function (e) {\n      if (e.equals(2\n      /* Tab */\n      )) {\n        if (_this._prevBtn.isEnabled()) {\n          _this._prevBtn.focus();\n        } else if (_this._nextBtn.isEnabled()) {\n          _this._nextBtn.focus();\n        } else if (_this._toggleSelectionFind.isEnabled()) {\n          _this._toggleSelectionFind.focus();\n        } else if (_this._closeBtn.isEnabled()) {\n          _this._closeBtn.focus();\n        }\n\n        e.preventDefault();\n      }\n    })); // Replace one button\n\n\n    this._replaceBtn = this._register(new SimpleButton({\n      label: NLS_REPLACE_BTN_LABEL + this._keybindingLabelFor(FIND_IDS.ReplaceOneAction),\n      className: 'replace',\n      onTrigger: function () {\n        _this._controller.replace();\n      },\n      onKeyDown: function (e) {\n        if (e.equals(1024\n        /* Shift */\n        | 2\n        /* Tab */\n        )) {\n          _this._closeBtn.focus();\n\n          e.preventDefault();\n        }\n      }\n    })); // Replace all button\n\n    this._replaceAllBtn = this._register(new SimpleButton({\n      label: NLS_REPLACE_ALL_BTN_LABEL + this._keybindingLabelFor(FIND_IDS.ReplaceAllAction),\n      className: 'replace-all',\n      onTrigger: function () {\n        _this._controller.replaceAll();\n      }\n    }));\n    var replacePart = document.createElement('div');\n    replacePart.className = 'replace-part';\n    replacePart.appendChild(this._replaceInput.domNode);\n    var replaceActionsContainer = document.createElement('div');\n    replaceActionsContainer.className = 'replace-actions';\n    replacePart.appendChild(replaceActionsContainer);\n    replaceActionsContainer.appendChild(this._replaceBtn.domNode);\n    replaceActionsContainer.appendChild(this._replaceAllBtn.domNode); // Toggle replace button\n\n    this._toggleReplaceBtn = this._register(new SimpleButton({\n      label: NLS_TOGGLE_REPLACE_MODE_BTN_LABEL,\n      className: 'toggle left',\n      onTrigger: function () {\n        _this._state.change({\n          isReplaceRevealed: !_this._isReplaceVisible\n        }, false);\n\n        if (_this._isReplaceVisible) {\n          _this._replaceInput.width = dom.getTotalWidth(_this._findInput.domNode);\n\n          _this._replaceInput.inputBox.layout();\n        }\n\n        _this._showViewZone();\n      }\n    }));\n\n    this._toggleReplaceBtn.toggleClass('expand', this._isReplaceVisible);\n\n    this._toggleReplaceBtn.toggleClass('collapse', !this._isReplaceVisible);\n\n    this._toggleReplaceBtn.setExpanded(this._isReplaceVisible); // Widget\n\n\n    this._domNode = document.createElement('div');\n    this._domNode.className = 'editor-widget find-widget';\n\n    this._domNode.setAttribute('aria-hidden', 'true'); // We need to set this explicitly, otherwise on IE11, the width inheritence of flex doesn't work.\n\n\n    this._domNode.style.width = FIND_WIDGET_INITIAL_WIDTH + \"px\";\n\n    this._domNode.appendChild(this._toggleReplaceBtn.domNode);\n\n    this._domNode.appendChild(findPart);\n\n    this._domNode.appendChild(replacePart);\n\n    this._resizeSash = new Sash(this._domNode, this, {\n      orientation: 0\n      /* VERTICAL */\n\n    });\n    this._resized = false;\n    var originalWidth = FIND_WIDGET_INITIAL_WIDTH;\n\n    this._register(this._resizeSash.onDidStart(function () {\n      originalWidth = dom.getTotalWidth(_this._domNode);\n    }));\n\n    this._register(this._resizeSash.onDidChange(function (evt) {\n      _this._resized = true;\n      var width = originalWidth + evt.startX - evt.currentX;\n\n      if (width < FIND_WIDGET_INITIAL_WIDTH) {\n        // narrow down the find widget should be handled by CSS.\n        return;\n      }\n\n      var inputBoxWidth = width - FIND_ALL_CONTROLS_WIDTH;\n      var maxWidth = parseFloat(dom.getComputedStyle(_this._domNode).maxWidth) || 0;\n\n      if (width > maxWidth) {\n        return;\n      }\n\n      _this._domNode.style.width = width + \"px\";\n      _this._findInput.inputBox.width = inputBoxWidth;\n\n      if (_this._isReplaceVisible) {\n        _this._replaceInput.width = dom.getTotalWidth(_this._findInput.domNode);\n      }\n\n      _this._findInput.inputBox.layout();\n\n      _this._tryUpdateHeight();\n    }));\n\n    this._register(this._resizeSash.onDidReset(function () {\n      // users double click on the sash\n      var currentWidth = dom.getTotalWidth(_this._domNode);\n\n      if (currentWidth < FIND_WIDGET_INITIAL_WIDTH) {\n        // The editor is narrow and the width of the find widget is controlled fully by CSS.\n        return;\n      }\n\n      var width = FIND_WIDGET_INITIAL_WIDTH;\n\n      if (!_this._resized || currentWidth === FIND_WIDGET_INITIAL_WIDTH) {\n        // 1. never resized before, double click should maximizes it\n        // 2. users resized it already but its width is the same as default\n        width = _this._codeEditor.getConfiguration().layoutInfo.width - 28 - _this._codeEditor.getConfiguration().layoutInfo.minimapWidth - 15;\n        _this._resized = true;\n      } else {\n        /**\n         * no op, the find widget should be shrinked to its default size.\n         */\n      }\n\n      var inputBoxWidth = width - FIND_ALL_CONTROLS_WIDTH;\n      _this._domNode.style.width = width + \"px\";\n      _this._findInput.inputBox.width = inputBoxWidth;\n\n      if (_this._isReplaceVisible) {\n        _this._replaceInput.width = dom.getTotalWidth(_this._findInput.domNode);\n      }\n\n      _this._findInput.inputBox.layout();\n    }));\n  };\n\n  FindWidget.prototype.updateAccessibilitySupport = function () {\n    var value = this._codeEditor.getConfiguration().accessibilitySupport;\n\n    this._findInput.setFocusInputOnOptionClick(value !== 2\n    /* Enabled */\n    );\n  };\n\n  FindWidget.ID = 'editor.contrib.findWidget';\n  return FindWidget;\n}(Widget);\n\nexport { FindWidget };\n\nvar SimpleCheckbox =\n/** @class */\nfunction (_super) {\n  __extends(SimpleCheckbox, _super);\n\n  function SimpleCheckbox(opts) {\n    var _this = _super.call(this) || this;\n\n    _this._opts = opts;\n    _this._domNode = document.createElement('div');\n    _this._domNode.className = 'monaco-checkbox';\n    _this._domNode.title = _this._opts.title;\n    _this._domNode.tabIndex = 0;\n    _this._checkbox = document.createElement('input');\n    _this._checkbox.type = 'checkbox';\n    _this._checkbox.className = 'checkbox';\n    _this._checkbox.id = 'checkbox-' + SimpleCheckbox._COUNTER++;\n    _this._checkbox.tabIndex = -1;\n    _this._label = document.createElement('label');\n    _this._label.className = 'label'; // Connect the label and the checkbox. Checkbox will get checked when the label receives a click.\n\n    _this._label.htmlFor = _this._checkbox.id;\n    _this._label.tabIndex = -1;\n\n    _this._domNode.appendChild(_this._checkbox);\n\n    _this._domNode.appendChild(_this._label);\n\n    _this._opts.parent.appendChild(_this._domNode);\n\n    _this.onchange(_this._checkbox, function () {\n      _this._opts.onChange();\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(SimpleCheckbox.prototype, \"domNode\", {\n    get: function () {\n      return this._domNode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SimpleCheckbox.prototype.isEnabled = function () {\n    return this._domNode.tabIndex >= 0;\n  };\n\n  Object.defineProperty(SimpleCheckbox.prototype, \"checked\", {\n    get: function () {\n      return this._checkbox.checked;\n    },\n    set: function (newValue) {\n      this._checkbox.checked = newValue;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SimpleCheckbox.prototype.focus = function () {\n    this._domNode.focus();\n  };\n\n  SimpleCheckbox.prototype.enable = function () {\n    this._checkbox.removeAttribute('disabled');\n  };\n\n  SimpleCheckbox.prototype.disable = function () {\n    this._checkbox.disabled = true;\n  };\n\n  SimpleCheckbox.prototype.setEnabled = function (enabled) {\n    if (enabled) {\n      this.enable();\n      this.domNode.tabIndex = 0;\n    } else {\n      this.disable();\n      this.domNode.tabIndex = -1;\n    }\n  };\n\n  SimpleCheckbox._COUNTER = 0;\n  return SimpleCheckbox;\n}(Widget);\n\nvar SimpleButton =\n/** @class */\nfunction (_super) {\n  __extends(SimpleButton, _super);\n\n  function SimpleButton(opts) {\n    var _this = _super.call(this) || this;\n\n    _this._opts = opts;\n    _this._domNode = document.createElement('div');\n    _this._domNode.title = _this._opts.label;\n    _this._domNode.tabIndex = 0;\n    _this._domNode.className = 'button ' + _this._opts.className;\n\n    _this._domNode.setAttribute('role', 'button');\n\n    _this._domNode.setAttribute('aria-label', _this._opts.label);\n\n    _this.onclick(_this._domNode, function (e) {\n      _this._opts.onTrigger();\n\n      e.preventDefault();\n    });\n\n    _this.onkeydown(_this._domNode, function (e) {\n      if (e.equals(10\n      /* Space */\n      ) || e.equals(3\n      /* Enter */\n      )) {\n        _this._opts.onTrigger();\n\n        e.preventDefault();\n        return;\n      }\n\n      if (_this._opts.onKeyDown) {\n        _this._opts.onKeyDown(e);\n      }\n    });\n\n    return _this;\n  }\n\n  Object.defineProperty(SimpleButton.prototype, \"domNode\", {\n    get: function () {\n      return this._domNode;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SimpleButton.prototype.isEnabled = function () {\n    return this._domNode.tabIndex >= 0;\n  };\n\n  SimpleButton.prototype.focus = function () {\n    this._domNode.focus();\n  };\n\n  SimpleButton.prototype.setEnabled = function (enabled) {\n    dom.toggleClass(this._domNode, 'disabled', !enabled);\n\n    this._domNode.setAttribute('aria-disabled', String(!enabled));\n\n    this._domNode.tabIndex = enabled ? 0 : -1;\n  };\n\n  SimpleButton.prototype.setExpanded = function (expanded) {\n    this._domNode.setAttribute('aria-expanded', String(!!expanded));\n  };\n\n  SimpleButton.prototype.toggleClass = function (className, shouldHaveIt) {\n    dom.toggleClass(this._domNode, className, shouldHaveIt);\n  };\n\n  return SimpleButton;\n}(Widget);\n\nexport { SimpleButton }; // theming\n\nregisterThemingParticipant(function (theme, collector) {\n  var addBackgroundColorRule = function (selector, color) {\n    if (color) {\n      collector.addRule(\".monaco-editor \" + selector + \" { background-color: \" + color + \"; }\");\n    }\n  };\n\n  addBackgroundColorRule('.findMatch', theme.getColor(editorFindMatchHighlight));\n  addBackgroundColorRule('.currentFindMatch', theme.getColor(editorFindMatch));\n  addBackgroundColorRule('.findScope', theme.getColor(editorFindRangeHighlight));\n  var widgetBackground = theme.getColor(editorWidgetBackground);\n  addBackgroundColorRule('.find-widget', widgetBackground);\n  var widgetShadowColor = theme.getColor(widgetShadow);\n\n  if (widgetShadowColor) {\n    collector.addRule(\".monaco-editor .find-widget { box-shadow: 0 2px 8px \" + widgetShadowColor + \"; }\");\n  }\n\n  var findMatchHighlightBorder = theme.getColor(editorFindMatchHighlightBorder);\n\n  if (findMatchHighlightBorder) {\n    collector.addRule(\".monaco-editor .findMatch { border: 1px \" + (theme.type === 'hc' ? 'dotted' : 'solid') + \" \" + findMatchHighlightBorder + \"; box-sizing: border-box; }\");\n  }\n\n  var findMatchBorder = theme.getColor(editorFindMatchBorder);\n\n  if (findMatchBorder) {\n    collector.addRule(\".monaco-editor .currentFindMatch { border: 2px solid \" + findMatchBorder + \"; padding: 1px; box-sizing: border-box; }\");\n  }\n\n  var findRangeHighlightBorder = theme.getColor(editorFindRangeHighlightBorder);\n\n  if (findRangeHighlightBorder) {\n    collector.addRule(\".monaco-editor .findScope { border: 1px \" + (theme.type === 'hc' ? 'dashed' : 'solid') + \" \" + findRangeHighlightBorder + \"; }\");\n  }\n\n  var hcBorder = theme.getColor(contrastBorder);\n\n  if (hcBorder) {\n    collector.addRule(\".monaco-editor .find-widget { border: 2px solid \" + hcBorder + \"; }\");\n  }\n\n  var foreground = theme.getColor(editorWidgetForeground);\n\n  if (foreground) {\n    collector.addRule(\".monaco-editor .find-widget { color: \" + foreground + \"; }\");\n  }\n\n  var error = theme.getColor(errorForeground);\n\n  if (error) {\n    collector.addRule(\".monaco-editor .find-widget.no-results .matchesCount { color: \" + error + \"; }\");\n  }\n\n  var resizeBorderBackground = theme.getColor(editorWidgetResizeBorder);\n\n  if (resizeBorderBackground) {\n    collector.addRule(\".monaco-editor .find-widget .monaco-sash { background-color: \" + resizeBorderBackground + \"; width: 3px !important; margin-left: -4px;}\");\n  } else {\n    var border = theme.getColor(editorWidgetBorder);\n\n    if (border) {\n      collector.addRule(\".monaco-editor .find-widget .monaco-sash { background-color: \" + border + \"; width: 3px !important; margin-left: -4px;}\");\n    }\n  }\n\n  var inputActiveBorder = theme.getColor(inputActiveOptionBorder);\n\n  if (inputActiveBorder) {\n    collector.addRule(\".monaco-editor .find-widget .monaco-checkbox .checkbox:checked + .label { border: 1px solid \" + inputActiveBorder.toString() + \"; }\");\n  }\n\n  var inputActiveBackground = theme.getColor(inputActiveOptionBackground);\n\n  if (inputActiveBackground) {\n    collector.addRule(\".monaco-editor .find-widget .monaco-checkbox .checkbox:checked + .label { background-color: \" + inputActiveBackground.toString() + \"; }\");\n  } // This rule is used to override the outline color for synthetic-focus find input.\n\n\n  var focusOutline = theme.getColor(focusBorder);\n\n  if (focusOutline) {\n    collector.addRule(\".monaco-workbench .monaco-editor .find-widget .monaco-inputbox.synthetic-focus { outline-color: \" + focusOutline + \"; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}