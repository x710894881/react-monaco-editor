{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './zoneWidget.css';\nimport * as dom from '../../../base/browser/dom.js';\nimport { Sash } from '../../../base/browser/ui/sash/sash.js';\nimport { Color, RGBA } from '../../../base/common/color.js';\nimport { IdGenerator } from '../../../base/common/idGenerator.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as objects from '../../../base/common/objects.js';\nimport { Range } from '../../common/core/range.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nvar defaultColor = new Color(new RGBA(0, 122, 204));\nvar defaultOptions = {\n  showArrow: true,\n  showFrame: true,\n  className: '',\n  frameColor: defaultColor,\n  arrowColor: defaultColor,\n  keepEditorSelection: false\n};\nvar WIDGET_ID = 'vs.editor.contrib.zoneWidget';\n\nvar ViewZoneDelegate =\n/** @class */\nfunction () {\n  function ViewZoneDelegate(domNode, afterLineNumber, afterColumn, heightInLines, onDomNodeTop, onComputedHeight) {\n    this.id = ''; // A valid zone id should be greater than 0\n\n    this.domNode = domNode;\n    this.afterLineNumber = afterLineNumber;\n    this.afterColumn = afterColumn;\n    this.heightInLines = heightInLines;\n    this._onDomNodeTop = onDomNodeTop;\n    this._onComputedHeight = onComputedHeight;\n  }\n\n  ViewZoneDelegate.prototype.onDomNodeTop = function (top) {\n    this._onDomNodeTop(top);\n  };\n\n  ViewZoneDelegate.prototype.onComputedHeight = function (height) {\n    this._onComputedHeight(height);\n  };\n\n  return ViewZoneDelegate;\n}();\n\nexport { ViewZoneDelegate };\n\nvar OverlayWidgetDelegate =\n/** @class */\nfunction () {\n  function OverlayWidgetDelegate(id, domNode) {\n    this._id = id;\n    this._domNode = domNode;\n  }\n\n  OverlayWidgetDelegate.prototype.getId = function () {\n    return this._id;\n  };\n\n  OverlayWidgetDelegate.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  OverlayWidgetDelegate.prototype.getPosition = function () {\n    return null;\n  };\n\n  return OverlayWidgetDelegate;\n}();\n\nexport { OverlayWidgetDelegate };\n\nvar Arrow =\n/** @class */\nfunction () {\n  function Arrow(_editor) {\n    this._editor = _editor;\n    this._ruleName = Arrow._IdGenerator.nextId();\n    this._decorations = [];\n    this._color = null;\n    this._height = -1; //\n  }\n\n  Arrow.prototype.dispose = function () {\n    this.hide();\n    dom.removeCSSRulesContainingSelector(this._ruleName);\n  };\n\n  Object.defineProperty(Arrow.prototype, \"color\", {\n    set: function (value) {\n      if (this._color !== value) {\n        this._color = value;\n\n        this._updateStyle();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Arrow.prototype, \"height\", {\n    set: function (value) {\n      if (this._height !== value) {\n        this._height = value;\n\n        this._updateStyle();\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Arrow.prototype._updateStyle = function () {\n    dom.removeCSSRulesContainingSelector(this._ruleName);\n    dom.createCSSRule(\".monaco-editor \" + this._ruleName, \"border-style: solid; border-color: transparent; border-bottom-color: \" + this._color + \"; border-width: \" + this._height + \"px; bottom: -\" + this._height + \"px; margin-left: -\" + this._height + \"px; \");\n  };\n\n  Arrow.prototype.show = function (where) {\n    this._decorations = this._editor.deltaDecorations(this._decorations, [{\n      range: Range.fromPositions(where),\n      options: {\n        className: this._ruleName,\n        stickiness: 1\n        /* NeverGrowsWhenTypingAtEdges */\n\n      }\n    }]);\n  };\n\n  Arrow.prototype.hide = function () {\n    this._editor.deltaDecorations(this._decorations, []);\n  };\n\n  Arrow._IdGenerator = new IdGenerator('.arrow-decoration-');\n  return Arrow;\n}();\n\nvar ZoneWidget =\n/** @class */\nfunction () {\n  function ZoneWidget(editor, options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {};\n    }\n\n    this._arrow = null;\n    this._overlayWidget = null;\n    this._resizeSash = null;\n    this._positionMarkerId = [];\n    this._viewZone = null;\n    this._disposables = new DisposableStore();\n    this.container = null;\n    this._isShowing = false;\n    this.editor = editor;\n    this.options = objects.deepClone(options);\n    objects.mixin(this.options, defaultOptions, false);\n    this.domNode = document.createElement('div');\n\n    if (!this.options.isAccessible) {\n      this.domNode.setAttribute('aria-hidden', 'true');\n      this.domNode.setAttribute('role', 'presentation');\n    }\n\n    this._disposables.add(this.editor.onDidLayoutChange(function (info) {\n      var width = _this._getWidth(info);\n\n      _this.domNode.style.width = width + 'px';\n      _this.domNode.style.left = _this._getLeft(info) + 'px';\n\n      _this._onWidth(width);\n    }));\n  }\n\n  ZoneWidget.prototype.dispose = function () {\n    var _this = this;\n\n    if (this._overlayWidget) {\n      this.editor.removeOverlayWidget(this._overlayWidget);\n      this._overlayWidget = null;\n    }\n\n    if (this._viewZone) {\n      this.editor.changeViewZones(function (accessor) {\n        if (_this._viewZone) {\n          accessor.removeZone(_this._viewZone.id);\n        }\n\n        _this._viewZone = null;\n      });\n    }\n\n    this.editor.deltaDecorations(this._positionMarkerId, []);\n    this._positionMarkerId = [];\n\n    this._disposables.dispose();\n  };\n\n  ZoneWidget.prototype.create = function () {\n    dom.addClass(this.domNode, 'zone-widget');\n\n    if (this.options.className) {\n      dom.addClass(this.domNode, this.options.className);\n    }\n\n    this.container = document.createElement('div');\n    dom.addClass(this.container, 'zone-widget-container');\n    this.domNode.appendChild(this.container);\n\n    if (this.options.showArrow) {\n      this._arrow = new Arrow(this.editor);\n\n      this._disposables.add(this._arrow);\n    }\n\n    this._fillContainer(this.container);\n\n    this._initSash();\n\n    this._applyStyles();\n  };\n\n  ZoneWidget.prototype.style = function (styles) {\n    if (styles.frameColor) {\n      this.options.frameColor = styles.frameColor;\n    }\n\n    if (styles.arrowColor) {\n      this.options.arrowColor = styles.arrowColor;\n    }\n\n    this._applyStyles();\n  };\n\n  ZoneWidget.prototype._applyStyles = function () {\n    if (this.container && this.options.frameColor) {\n      var frameColor = this.options.frameColor.toString();\n      this.container.style.borderTopColor = frameColor;\n      this.container.style.borderBottomColor = frameColor;\n    }\n\n    if (this._arrow && this.options.arrowColor) {\n      var arrowColor = this.options.arrowColor.toString();\n      this._arrow.color = arrowColor;\n    }\n  };\n\n  ZoneWidget.prototype._getWidth = function (info) {\n    return info.width - info.minimapWidth - info.verticalScrollbarWidth;\n  };\n\n  ZoneWidget.prototype._getLeft = function (info) {\n    // If minimap is to the left, we move beyond it\n    if (info.minimapWidth > 0 && info.minimapLeft === 0) {\n      return info.minimapWidth;\n    }\n\n    return 0;\n  };\n\n  ZoneWidget.prototype._onViewZoneTop = function (top) {\n    this.domNode.style.top = top + 'px';\n  };\n\n  ZoneWidget.prototype._onViewZoneHeight = function (height) {\n    this.domNode.style.height = height + \"px\";\n\n    if (this.container) {\n      var containerHeight = height - this._decoratingElementsHeight();\n\n      this.container.style.height = containerHeight + \"px\";\n      var layoutInfo = this.editor.getLayoutInfo();\n\n      this._doLayout(containerHeight, this._getWidth(layoutInfo));\n    }\n\n    if (this._resizeSash) {\n      this._resizeSash.layout();\n    }\n  };\n\n  Object.defineProperty(ZoneWidget.prototype, \"position\", {\n    get: function () {\n      var id = this._positionMarkerId[0];\n\n      if (!id) {\n        return undefined;\n      }\n\n      var model = this.editor.getModel();\n\n      if (!model) {\n        return undefined;\n      }\n\n      var range = model.getDecorationRange(id);\n\n      if (!range) {\n        return undefined;\n      }\n\n      return range.getStartPosition();\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ZoneWidget.prototype.show = function (rangeOrPos, heightInLines) {\n    var range = Range.isIRange(rangeOrPos) ? rangeOrPos : new Range(rangeOrPos.lineNumber, rangeOrPos.column, rangeOrPos.lineNumber, rangeOrPos.column);\n    this._isShowing = true;\n\n    this._showImpl(range, heightInLines);\n\n    this._isShowing = false;\n    this._positionMarkerId = this.editor.deltaDecorations(this._positionMarkerId, [{\n      range: range,\n      options: ModelDecorationOptions.EMPTY\n    }]);\n  };\n\n  ZoneWidget.prototype.hide = function () {\n    var _this = this;\n\n    if (this._viewZone) {\n      this.editor.changeViewZones(function (accessor) {\n        if (_this._viewZone) {\n          accessor.removeZone(_this._viewZone.id);\n        }\n      });\n      this._viewZone = null;\n    }\n\n    if (this._overlayWidget) {\n      this.editor.removeOverlayWidget(this._overlayWidget);\n      this._overlayWidget = null;\n    }\n\n    if (this._arrow) {\n      this._arrow.hide();\n    }\n  };\n\n  ZoneWidget.prototype._decoratingElementsHeight = function () {\n    var lineHeight = this.editor.getConfiguration().lineHeight;\n    var result = 0;\n\n    if (this.options.showArrow) {\n      var arrowHeight = Math.round(lineHeight / 3);\n      result += 2 * arrowHeight;\n    }\n\n    if (this.options.showFrame) {\n      var frameThickness = Math.round(lineHeight / 9);\n      result += 2 * frameThickness;\n    }\n\n    return result;\n  };\n\n  ZoneWidget.prototype._showImpl = function (where, heightInLines) {\n    var _this = this;\n\n    var position = {\n      lineNumber: where.startLineNumber,\n      column: where.startColumn\n    };\n    var layoutInfo = this.editor.getLayoutInfo();\n\n    var width = this._getWidth(layoutInfo);\n\n    this.domNode.style.width = width + \"px\";\n    this.domNode.style.left = this._getLeft(layoutInfo) + 'px'; // Render the widget as zone (rendering) and widget (lifecycle)\n\n    var viewZoneDomNode = document.createElement('div');\n    viewZoneDomNode.style.overflow = 'hidden';\n    var lineHeight = this.editor.getConfiguration().lineHeight; // adjust heightInLines to viewport\n\n    var maxHeightInLines = this.editor.getLayoutInfo().height / lineHeight * 0.8;\n\n    if (heightInLines >= maxHeightInLines) {\n      heightInLines = maxHeightInLines;\n    }\n\n    var arrowHeight = 0;\n    var frameThickness = 0; // Render the arrow one 1/3 of an editor line height\n\n    if (this._arrow && this.options.showArrow) {\n      arrowHeight = Math.round(lineHeight / 3);\n      this._arrow.height = arrowHeight;\n\n      this._arrow.show(position);\n    } // Render the frame as 1/9 of an editor line height\n\n\n    if (this.options.showFrame) {\n      frameThickness = Math.round(lineHeight / 9);\n    } // insert zone widget\n\n\n    this.editor.changeViewZones(function (accessor) {\n      if (_this._viewZone) {\n        accessor.removeZone(_this._viewZone.id);\n      }\n\n      if (_this._overlayWidget) {\n        _this.editor.removeOverlayWidget(_this._overlayWidget);\n\n        _this._overlayWidget = null;\n      }\n\n      _this.domNode.style.top = '-1000px';\n      _this._viewZone = new ViewZoneDelegate(viewZoneDomNode, position.lineNumber, position.column, heightInLines, function (top) {\n        return _this._onViewZoneTop(top);\n      }, function (height) {\n        return _this._onViewZoneHeight(height);\n      });\n      _this._viewZone.id = accessor.addZone(_this._viewZone);\n      _this._overlayWidget = new OverlayWidgetDelegate(WIDGET_ID + _this._viewZone.id, _this.domNode);\n\n      _this.editor.addOverlayWidget(_this._overlayWidget);\n    });\n\n    if (this.container && this.options.showFrame) {\n      var width_1 = this.options.frameWidth ? this.options.frameWidth : frameThickness;\n      this.container.style.borderTopWidth = width_1 + 'px';\n      this.container.style.borderBottomWidth = width_1 + 'px';\n    }\n\n    var containerHeight = heightInLines * lineHeight - this._decoratingElementsHeight();\n\n    if (this.container) {\n      this.container.style.top = arrowHeight + 'px';\n      this.container.style.height = containerHeight + 'px';\n      this.container.style.overflow = 'hidden';\n    }\n\n    this._doLayout(containerHeight, width);\n\n    if (!this.options.keepEditorSelection) {\n      this.editor.setSelection(where);\n    }\n\n    var model = this.editor.getModel();\n\n    if (model) {\n      // Reveal the line above or below the zone widget, to get the zone widget in the viewport\n      var revealLineNumber = Math.min(model.getLineCount(), Math.max(1, where.endLineNumber + 1));\n      this.revealLine(revealLineNumber);\n    }\n  };\n\n  ZoneWidget.prototype.revealLine = function (lineNumber) {\n    this.editor.revealLine(lineNumber, 0\n    /* Smooth */\n    );\n  };\n\n  ZoneWidget.prototype.setCssClass = function (className, classToReplace) {\n    if (!this.container) {\n      return;\n    }\n\n    if (classToReplace) {\n      this.container.classList.remove(classToReplace);\n    }\n\n    dom.addClass(this.container, className);\n  };\n\n  ZoneWidget.prototype._onWidth = function (widthInPixel) {// implement in subclass\n  };\n\n  ZoneWidget.prototype._doLayout = function (heightInPixel, widthInPixel) {// implement in subclass\n  };\n\n  ZoneWidget.prototype._relayout = function (newHeightInLines) {\n    var _this = this;\n\n    if (this._viewZone && this._viewZone.heightInLines !== newHeightInLines) {\n      this.editor.changeViewZones(function (accessor) {\n        if (_this._viewZone) {\n          _this._viewZone.heightInLines = newHeightInLines;\n          accessor.layoutZone(_this._viewZone.id);\n        }\n      });\n    }\n  }; // --- sash\n\n\n  ZoneWidget.prototype._initSash = function () {\n    var _this = this;\n\n    if (this._resizeSash) {\n      return;\n    }\n\n    this._resizeSash = this._disposables.add(new Sash(this.domNode, this, {\n      orientation: 1\n      /* HORIZONTAL */\n\n    }));\n\n    if (!this.options.isResizeable) {\n      this._resizeSash.hide();\n\n      this._resizeSash.state = 0\n      /* Disabled */\n      ;\n    }\n\n    var data;\n\n    this._disposables.add(this._resizeSash.onDidStart(function (e) {\n      if (_this._viewZone) {\n        data = {\n          startY: e.startY,\n          heightInLines: _this._viewZone.heightInLines\n        };\n      }\n    }));\n\n    this._disposables.add(this._resizeSash.onDidEnd(function () {\n      data = undefined;\n    }));\n\n    this._disposables.add(this._resizeSash.onDidChange(function (evt) {\n      if (data) {\n        var lineDelta = (evt.currentY - data.startY) / _this.editor.getConfiguration().lineHeight;\n\n        var roundedLineDelta = lineDelta < 0 ? Math.ceil(lineDelta) : Math.floor(lineDelta);\n        var newHeightInLines = data.heightInLines + roundedLineDelta;\n\n        if (newHeightInLines > 5 && newHeightInLines < 35) {\n          _this._relayout(newHeightInLines);\n        }\n      }\n    }));\n  };\n\n  ZoneWidget.prototype.getHorizontalSashLeft = function () {\n    return 0;\n  };\n\n  ZoneWidget.prototype.getHorizontalSashTop = function () {\n    return (this.domNode.style.height === null ? 0 : parseInt(this.domNode.style.height)) - this._decoratingElementsHeight() / 2;\n  };\n\n  ZoneWidget.prototype.getHorizontalSashWidth = function () {\n    var layoutInfo = this.editor.getLayoutInfo();\n    return layoutInfo.width - layoutInfo.minimapWidth;\n  };\n\n  return ZoneWidget;\n}();\n\nexport { ZoneWidget };","map":null,"metadata":{},"sourceType":"module"}