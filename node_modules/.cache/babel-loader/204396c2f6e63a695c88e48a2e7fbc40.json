{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { URI } from '../../../base/common/uri.js';\nimport * as resources from '../../../base/common/resources.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { TernarySearchTree } from '../../../base/common/map.js';\nexport var IWorkspaceContextService = createDecorator('contextService');\nexport var IWorkspace;\n\n(function (IWorkspace) {\n  function isIWorkspace(thing) {\n    return thing && typeof thing === 'object' && typeof thing.id === 'string' && Array.isArray(thing.folders);\n  }\n\n  IWorkspace.isIWorkspace = isIWorkspace;\n})(IWorkspace || (IWorkspace = {}));\n\nexport var IWorkspaceFolder;\n\n(function (IWorkspaceFolder) {\n  function isIWorkspaceFolder(thing) {\n    return thing && typeof thing === 'object' && URI.isUri(thing.uri) && typeof thing.name === 'string' && typeof thing.toResource === 'function';\n  }\n\n  IWorkspaceFolder.isIWorkspaceFolder = isIWorkspaceFolder;\n})(IWorkspaceFolder || (IWorkspaceFolder = {}));\n\nvar Workspace =\n/** @class */\nfunction () {\n  function Workspace(_id, folders, _configuration) {\n    if (folders === void 0) {\n      folders = [];\n    }\n\n    if (_configuration === void 0) {\n      _configuration = null;\n    }\n\n    this._id = _id;\n    this._configuration = _configuration;\n    this._foldersMap = TernarySearchTree.forPaths();\n    this.folders = folders;\n  }\n\n  Object.defineProperty(Workspace.prototype, \"folders\", {\n    get: function () {\n      return this._folders;\n    },\n    set: function (folders) {\n      this._folders = folders;\n      this.updateFoldersMap();\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Workspace.prototype, \"id\", {\n    get: function () {\n      return this._id;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Workspace.prototype, \"configuration\", {\n    get: function () {\n      return this._configuration;\n    },\n    set: function (configuration) {\n      this._configuration = configuration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Workspace.prototype.getFolder = function (resource) {\n    if (!resource) {\n      return null;\n    }\n\n    return this._foldersMap.findSubstr(resource.with({\n      scheme: resource.scheme,\n      authority: resource.authority,\n      path: resource.path\n    }).toString()) || null;\n  };\n\n  Workspace.prototype.updateFoldersMap = function () {\n    this._foldersMap = TernarySearchTree.forPaths();\n\n    for (var _i = 0, _a = this.folders; _i < _a.length; _i++) {\n      var folder = _a[_i];\n\n      this._foldersMap.set(folder.uri.toString(), folder);\n    }\n  };\n\n  Workspace.prototype.toJSON = function () {\n    return {\n      id: this.id,\n      folders: this.folders,\n      configuration: this.configuration\n    };\n  };\n\n  return Workspace;\n}();\n\nexport { Workspace };\n\nvar WorkspaceFolder =\n/** @class */\nfunction () {\n  function WorkspaceFolder(data, raw) {\n    this.raw = raw;\n    this.uri = data.uri;\n    this.index = data.index;\n    this.name = data.name;\n  }\n\n  WorkspaceFolder.prototype.toResource = function (relativePath) {\n    return resources.joinPath(this.uri, relativePath);\n  };\n\n  WorkspaceFolder.prototype.toJSON = function () {\n    return {\n      uri: this.uri,\n      name: this.name,\n      index: this.index\n    };\n  };\n\n  return WorkspaceFolder;\n}();\n\nexport { WorkspaceFolder };","map":null,"metadata":{},"sourceType":"module"}