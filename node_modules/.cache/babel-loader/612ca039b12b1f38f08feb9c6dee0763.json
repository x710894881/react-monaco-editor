{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as nodes from '../parser/cssNodes.js';\nimport * as languageFacts from '../languageFacts/facts.js';\nimport { Range, MarkedString } from '../../vscode-languageserver-types/main.js';\nimport { selectorToMarkedString, simpleSelectorToMarkedString } from './selectorPrinting.js';\n\nvar CSSHover =\n/** @class */\nfunction () {\n  function CSSHover() {}\n\n  CSSHover.prototype.doHover = function (document, position, stylesheet) {\n    function getRange(node) {\n      return Range.create(document.positionAt(node.offset), document.positionAt(node.end));\n    }\n\n    var offset = document.offsetAt(position);\n    var nodepath = nodes.getNodePath(stylesheet, offset);\n\n    for (var i = 0; i < nodepath.length; i++) {\n      var node = nodepath[i];\n\n      if (node instanceof nodes.Selector) {\n        return {\n          contents: selectorToMarkedString(node),\n          range: getRange(node)\n        };\n      }\n\n      if (node instanceof nodes.SimpleSelector) {\n        return {\n          contents: simpleSelectorToMarkedString(node),\n          range: getRange(node)\n        };\n      }\n\n      if (node instanceof nodes.Declaration) {\n        var propertyName = node.getFullPropertyName();\n        var entry = languageFacts.cssDataManager.getProperty(propertyName);\n\n        if (entry) {\n          var contents = [];\n\n          if (entry.description) {\n            contents.push(MarkedString.fromPlainText(entry.description));\n          }\n\n          var browserLabel = languageFacts.getBrowserLabel(entry.browsers);\n\n          if (browserLabel) {\n            contents.push(MarkedString.fromPlainText(browserLabel));\n          }\n\n          if (contents.length) {\n            return {\n              contents: contents,\n              range: getRange(node)\n            };\n          }\n        }\n      }\n    }\n\n    return null;\n  };\n\n  return CSSHover;\n}();\n\nexport { CSSHover };","map":null,"metadata":{},"sourceType":"module"}