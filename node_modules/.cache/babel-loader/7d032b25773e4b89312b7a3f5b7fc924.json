{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { Range } from '../../common/core/range.js';\n\nfunction effectiveOptionValue(override, value) {\n  if (override === 1\n  /* True */\n  ) {\n      return true;\n    }\n\n  if (override === 2\n  /* False */\n  ) {\n      return false;\n    }\n\n  return value;\n}\n\nvar FindReplaceState =\n/** @class */\nfunction () {\n  function FindReplaceState() {\n    this._onFindReplaceStateChange = new Emitter();\n    this.onFindReplaceStateChange = this._onFindReplaceStateChange.event;\n    this._searchString = '';\n    this._replaceString = '';\n    this._isRevealed = false;\n    this._isReplaceRevealed = false;\n    this._isRegex = false;\n    this._isRegexOverride = 0\n    /* NotSet */\n    ;\n    this._wholeWord = false;\n    this._wholeWordOverride = 0\n    /* NotSet */\n    ;\n    this._matchCase = false;\n    this._matchCaseOverride = 0\n    /* NotSet */\n    ;\n    this._preserveCase = false;\n    this._preserveCaseOverride = 0\n    /* NotSet */\n    ;\n    this._searchScope = null;\n    this._matchesPosition = 0;\n    this._matchesCount = 0;\n    this._currentMatch = null;\n  }\n\n  Object.defineProperty(FindReplaceState.prototype, \"searchString\", {\n    get: function () {\n      return this._searchString;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"replaceString\", {\n    get: function () {\n      return this._replaceString;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"isRevealed\", {\n    get: function () {\n      return this._isRevealed;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"isReplaceRevealed\", {\n    get: function () {\n      return this._isReplaceRevealed;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"isRegex\", {\n    get: function () {\n      return effectiveOptionValue(this._isRegexOverride, this._isRegex);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"wholeWord\", {\n    get: function () {\n      return effectiveOptionValue(this._wholeWordOverride, this._wholeWord);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"matchCase\", {\n    get: function () {\n      return effectiveOptionValue(this._matchCaseOverride, this._matchCase);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"preserveCase\", {\n    get: function () {\n      return effectiveOptionValue(this._preserveCaseOverride, this._preserveCase);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"actualIsRegex\", {\n    get: function () {\n      return this._isRegex;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"actualWholeWord\", {\n    get: function () {\n      return this._wholeWord;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"actualMatchCase\", {\n    get: function () {\n      return this._matchCase;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"actualPreserveCase\", {\n    get: function () {\n      return this._preserveCase;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"searchScope\", {\n    get: function () {\n      return this._searchScope;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"matchesPosition\", {\n    get: function () {\n      return this._matchesPosition;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"matchesCount\", {\n    get: function () {\n      return this._matchesCount;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FindReplaceState.prototype, \"currentMatch\", {\n    get: function () {\n      return this._currentMatch;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FindReplaceState.prototype.dispose = function () {};\n\n  FindReplaceState.prototype.changeMatchInfo = function (matchesPosition, matchesCount, currentMatch) {\n    var changeEvent = {\n      moveCursor: false,\n      updateHistory: false,\n      searchString: false,\n      replaceString: false,\n      isRevealed: false,\n      isReplaceRevealed: false,\n      isRegex: false,\n      wholeWord: false,\n      matchCase: false,\n      preserveCase: false,\n      searchScope: false,\n      matchesPosition: false,\n      matchesCount: false,\n      currentMatch: false\n    };\n    var somethingChanged = false;\n\n    if (matchesCount === 0) {\n      matchesPosition = 0;\n    }\n\n    if (matchesPosition > matchesCount) {\n      matchesPosition = matchesCount;\n    }\n\n    if (this._matchesPosition !== matchesPosition) {\n      this._matchesPosition = matchesPosition;\n      changeEvent.matchesPosition = true;\n      somethingChanged = true;\n    }\n\n    if (this._matchesCount !== matchesCount) {\n      this._matchesCount = matchesCount;\n      changeEvent.matchesCount = true;\n      somethingChanged = true;\n    }\n\n    if (typeof currentMatch !== 'undefined') {\n      if (!Range.equalsRange(this._currentMatch, currentMatch)) {\n        this._currentMatch = currentMatch;\n        changeEvent.currentMatch = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (somethingChanged) {\n      this._onFindReplaceStateChange.fire(changeEvent);\n    }\n  };\n\n  FindReplaceState.prototype.change = function (newState, moveCursor, updateHistory) {\n    if (updateHistory === void 0) {\n      updateHistory = true;\n    }\n\n    var changeEvent = {\n      moveCursor: moveCursor,\n      updateHistory: updateHistory,\n      searchString: false,\n      replaceString: false,\n      isRevealed: false,\n      isReplaceRevealed: false,\n      isRegex: false,\n      wholeWord: false,\n      matchCase: false,\n      preserveCase: false,\n      searchScope: false,\n      matchesPosition: false,\n      matchesCount: false,\n      currentMatch: false\n    };\n    var somethingChanged = false;\n    var oldEffectiveIsRegex = this.isRegex;\n    var oldEffectiveWholeWords = this.wholeWord;\n    var oldEffectiveMatchCase = this.matchCase;\n    var oldEffectivePreserveCase = this.preserveCase;\n\n    if (typeof newState.searchString !== 'undefined') {\n      if (this._searchString !== newState.searchString) {\n        this._searchString = newState.searchString;\n        changeEvent.searchString = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.replaceString !== 'undefined') {\n      if (this._replaceString !== newState.replaceString) {\n        this._replaceString = newState.replaceString;\n        changeEvent.replaceString = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isRevealed !== 'undefined') {\n      if (this._isRevealed !== newState.isRevealed) {\n        this._isRevealed = newState.isRevealed;\n        changeEvent.isRevealed = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isReplaceRevealed !== 'undefined') {\n      if (this._isReplaceRevealed !== newState.isReplaceRevealed) {\n        this._isReplaceRevealed = newState.isReplaceRevealed;\n        changeEvent.isReplaceRevealed = true;\n        somethingChanged = true;\n      }\n    }\n\n    if (typeof newState.isRegex !== 'undefined') {\n      this._isRegex = newState.isRegex;\n    }\n\n    if (typeof newState.wholeWord !== 'undefined') {\n      this._wholeWord = newState.wholeWord;\n    }\n\n    if (typeof newState.matchCase !== 'undefined') {\n      this._matchCase = newState.matchCase;\n    }\n\n    if (typeof newState.preserveCase !== 'undefined') {\n      this._preserveCase = newState.preserveCase;\n    }\n\n    if (typeof newState.searchScope !== 'undefined') {\n      if (!Range.equalsRange(this._searchScope, newState.searchScope)) {\n        this._searchScope = newState.searchScope;\n        changeEvent.searchScope = true;\n        somethingChanged = true;\n      }\n    } // Overrides get set when they explicitly come in and get reset anytime something else changes\n\n\n    this._isRegexOverride = typeof newState.isRegexOverride !== 'undefined' ? newState.isRegexOverride : 0\n    /* NotSet */\n    ;\n    this._wholeWordOverride = typeof newState.wholeWordOverride !== 'undefined' ? newState.wholeWordOverride : 0\n    /* NotSet */\n    ;\n    this._matchCaseOverride = typeof newState.matchCaseOverride !== 'undefined' ? newState.matchCaseOverride : 0\n    /* NotSet */\n    ;\n    this._preserveCaseOverride = typeof newState.preserveCaseOverride !== 'undefined' ? newState.preserveCaseOverride : 0\n    /* NotSet */\n    ;\n\n    if (oldEffectiveIsRegex !== this.isRegex) {\n      somethingChanged = true;\n      changeEvent.isRegex = true;\n    }\n\n    if (oldEffectiveWholeWords !== this.wholeWord) {\n      somethingChanged = true;\n      changeEvent.wholeWord = true;\n    }\n\n    if (oldEffectiveMatchCase !== this.matchCase) {\n      somethingChanged = true;\n      changeEvent.matchCase = true;\n    }\n\n    if (oldEffectivePreserveCase !== this.preserveCase) {\n      somethingChanged = true;\n      changeEvent.preserveCase = true;\n    }\n\n    if (somethingChanged) {\n      this._onFindReplaceStateChange.fire(changeEvent);\n    }\n  };\n\n  return FindReplaceState;\n}();\n\nexport { FindReplaceState };","map":null,"metadata":{},"sourceType":"module"}