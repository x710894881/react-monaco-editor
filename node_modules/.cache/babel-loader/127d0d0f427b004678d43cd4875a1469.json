{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { toggleClass } from '../../../base/browser/dom.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Widget } from '../../../base/browser/ui/widget.js';\n\nvar ContentHoverWidget =\n/** @class */\nfunction (_super) {\n  __extends(ContentHoverWidget, _super);\n\n  function ContentHoverWidget(id, editor) {\n    var _this = _super.call(this) || this; // Editor.IContentWidget.allowEditorOverflow\n\n\n    _this.allowEditorOverflow = true;\n    _this._id = id;\n    _this._editor = editor;\n    _this._isVisible = false;\n    _this._stoleFocus = false;\n    _this._containerDomNode = document.createElement('div');\n    _this._containerDomNode.className = 'monaco-editor-hover hidden';\n    _this._containerDomNode.tabIndex = 0;\n    _this._domNode = document.createElement('div');\n    _this._domNode.className = 'monaco-editor-hover-content';\n    _this.scrollbar = new DomScrollableElement(_this._domNode, {});\n\n    _this._register(_this.scrollbar);\n\n    _this._containerDomNode.appendChild(_this.scrollbar.getDomNode());\n\n    _this.onkeydown(_this._containerDomNode, function (e) {\n      if (e.equals(9\n      /* Escape */\n      )) {\n        _this.hide();\n      }\n    });\n\n    _this._register(_this._editor.onDidChangeConfiguration(function (e) {\n      if (e.fontInfo) {\n        _this.updateFont();\n      }\n    }));\n\n    _this._editor.onDidLayoutChange(function (e) {\n      return _this.layout();\n    });\n\n    _this.layout();\n\n    _this._editor.addContentWidget(_this);\n\n    _this._showAtPosition = null;\n    _this._showAtRange = null;\n    _this._stoleFocus = false;\n    return _this;\n  }\n\n  Object.defineProperty(ContentHoverWidget.prototype, \"isVisible\", {\n    get: function () {\n      return this._isVisible;\n    },\n    set: function (value) {\n      this._isVisible = value;\n      toggleClass(this._containerDomNode, 'hidden', !this._isVisible);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ContentHoverWidget.prototype.getId = function () {\n    return this._id;\n  };\n\n  ContentHoverWidget.prototype.getDomNode = function () {\n    return this._containerDomNode;\n  };\n\n  ContentHoverWidget.prototype.showAt = function (position, range, focus) {\n    // Position has changed\n    this._showAtPosition = position;\n    this._showAtRange = range;\n    this.isVisible = true;\n\n    this._editor.layoutContentWidget(this); // Simply force a synchronous render on the editor\n    // such that the widget does not really render with left = '0px'\n\n\n    this._editor.render();\n\n    this._stoleFocus = focus;\n\n    if (focus) {\n      this._containerDomNode.focus();\n    }\n  };\n\n  ContentHoverWidget.prototype.hide = function () {\n    if (!this.isVisible) {\n      return;\n    }\n\n    this.isVisible = false;\n\n    this._editor.layoutContentWidget(this);\n\n    if (this._stoleFocus) {\n      this._editor.focus();\n    }\n  };\n\n  ContentHoverWidget.prototype.getPosition = function () {\n    if (this.isVisible) {\n      return {\n        position: this._showAtPosition,\n        range: this._showAtRange,\n        preference: [1\n        /* ABOVE */\n        , 2\n        /* BELOW */\n        ]\n      };\n    }\n\n    return null;\n  };\n\n  ContentHoverWidget.prototype.dispose = function () {\n    this._editor.removeContentWidget(this);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  ContentHoverWidget.prototype.updateFont = function () {\n    var _this = this;\n\n    var codeClasses = Array.prototype.slice.call(this._domNode.getElementsByClassName('code'));\n    codeClasses.forEach(function (node) {\n      return _this._editor.applyFontInfo(node);\n    });\n  };\n\n  ContentHoverWidget.prototype.updateContents = function (node) {\n    this._domNode.textContent = '';\n\n    this._domNode.appendChild(node);\n\n    this.updateFont();\n\n    this._editor.layoutContentWidget(this);\n\n    this.onContentsChange();\n  };\n\n  ContentHoverWidget.prototype.onContentsChange = function () {\n    this.scrollbar.scanDomNode();\n  };\n\n  ContentHoverWidget.prototype.layout = function () {\n    var height = Math.max(this._editor.getLayoutInfo().height / 4, 250);\n\n    var _a = this._editor.getConfiguration().fontInfo,\n        fontSize = _a.fontSize,\n        lineHeight = _a.lineHeight;\n\n    this._domNode.style.fontSize = fontSize + \"px\";\n    this._domNode.style.lineHeight = lineHeight + \"px\";\n    this._domNode.style.maxHeight = height + \"px\";\n    this._domNode.style.maxWidth = Math.max(this._editor.getLayoutInfo().width * 0.66, 500) + \"px\";\n  };\n\n  return ContentHoverWidget;\n}(Widget);\n\nexport { ContentHoverWidget };\n\nvar GlyphHoverWidget =\n/** @class */\nfunction (_super) {\n  __extends(GlyphHoverWidget, _super);\n\n  function GlyphHoverWidget(id, editor) {\n    var _this = _super.call(this) || this;\n\n    _this._id = id;\n    _this._editor = editor;\n    _this._isVisible = false;\n    _this._domNode = document.createElement('div');\n    _this._domNode.className = 'monaco-editor-hover hidden';\n\n    _this._domNode.setAttribute('aria-hidden', 'true');\n\n    _this._domNode.setAttribute('role', 'presentation');\n\n    _this._showAtLineNumber = -1;\n\n    _this._register(_this._editor.onDidChangeConfiguration(function (e) {\n      if (e.fontInfo) {\n        _this.updateFont();\n      }\n    }));\n\n    _this._editor.addOverlayWidget(_this);\n\n    return _this;\n  }\n\n  Object.defineProperty(GlyphHoverWidget.prototype, \"isVisible\", {\n    get: function () {\n      return this._isVisible;\n    },\n    set: function (value) {\n      this._isVisible = value;\n      toggleClass(this._domNode, 'hidden', !this._isVisible);\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  GlyphHoverWidget.prototype.getId = function () {\n    return this._id;\n  };\n\n  GlyphHoverWidget.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  GlyphHoverWidget.prototype.showAt = function (lineNumber) {\n    this._showAtLineNumber = lineNumber;\n\n    if (!this.isVisible) {\n      this.isVisible = true;\n    }\n\n    var editorLayout = this._editor.getLayoutInfo();\n\n    var topForLineNumber = this._editor.getTopForLineNumber(this._showAtLineNumber);\n\n    var editorScrollTop = this._editor.getScrollTop();\n\n    var lineHeight = this._editor.getConfiguration().lineHeight;\n\n    var nodeHeight = this._domNode.clientHeight;\n    var top = topForLineNumber - editorScrollTop - (nodeHeight - lineHeight) / 2;\n    this._domNode.style.left = editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth + \"px\";\n    this._domNode.style.top = Math.max(Math.round(top), 0) + \"px\";\n  };\n\n  GlyphHoverWidget.prototype.hide = function () {\n    if (!this.isVisible) {\n      return;\n    }\n\n    this.isVisible = false;\n  };\n\n  GlyphHoverWidget.prototype.getPosition = function () {\n    return null;\n  };\n\n  GlyphHoverWidget.prototype.dispose = function () {\n    this._editor.removeOverlayWidget(this);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  GlyphHoverWidget.prototype.updateFont = function () {\n    var _this = this;\n\n    var codeTags = Array.prototype.slice.call(this._domNode.getElementsByTagName('code'));\n    var codeClasses = Array.prototype.slice.call(this._domNode.getElementsByClassName('code'));\n    codeTags.concat(codeClasses).forEach(function (node) {\n      return _this._editor.applyFontInfo(node);\n    });\n  };\n\n  GlyphHoverWidget.prototype.updateContents = function (node) {\n    this._domNode.textContent = '';\n\n    this._domNode.appendChild(node);\n\n    this.updateFont();\n  };\n\n  return GlyphHoverWidget;\n}(Widget);\n\nexport { GlyphHoverWidget };","map":null,"metadata":{},"sourceType":"module"}