{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Describes what to do with the indentation when pressing Enter.\n */\nexport var IndentAction;\n\n(function (IndentAction) {\n  /**\n   * Insert new line and copy the previous line's indentation.\n   */\n  IndentAction[IndentAction[\"None\"] = 0] = \"None\";\n  /**\n   * Insert new line and indent once (relative to the previous line's indentation).\n   */\n\n  IndentAction[IndentAction[\"Indent\"] = 1] = \"Indent\";\n  /**\n   * Insert two new lines:\n   *  - the first one indented which will hold the cursor\n   *  - the second one at the same indentation level\n   */\n\n  IndentAction[IndentAction[\"IndentOutdent\"] = 2] = \"IndentOutdent\";\n  /**\n   * Insert new line and outdent once (relative to the previous line's indentation).\n   */\n\n  IndentAction[IndentAction[\"Outdent\"] = 3] = \"Outdent\";\n})(IndentAction || (IndentAction = {}));\n/**\n * @internal\n */\n\n\nvar StandardAutoClosingPairConditional =\n/** @class */\nfunction () {\n  function StandardAutoClosingPairConditional(source) {\n    this.open = source.open;\n    this.close = source.close; // initially allowed in all tokens\n\n    this._standardTokenMask = 0;\n\n    if (Array.isArray(source.notIn)) {\n      for (var i = 0, len = source.notIn.length; i < len; i++) {\n        var notIn = source.notIn[i];\n\n        switch (notIn) {\n          case 'string':\n            this._standardTokenMask |= 2\n            /* String */\n            ;\n            break;\n\n          case 'comment':\n            this._standardTokenMask |= 1\n            /* Comment */\n            ;\n            break;\n\n          case 'regex':\n            this._standardTokenMask |= 4\n            /* RegEx */\n            ;\n            break;\n        }\n      }\n    }\n  }\n\n  StandardAutoClosingPairConditional.prototype.isOK = function (standardToken) {\n    return (this._standardTokenMask & standardToken) === 0;\n  };\n\n  return StandardAutoClosingPairConditional;\n}();\n\nexport { StandardAutoClosingPairConditional };","map":null,"metadata":{},"sourceType":"module"}