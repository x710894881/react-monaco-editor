{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as htmlService from './_deps/vscode-html-languageservice/htmlLanguageService.js';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nimport * as poli from './fillers/polyfills.js';\npoli.polyfill();\n\nvar HTMLWorker =\n/** @class */\nfunction () {\n  function HTMLWorker(ctx, createData) {\n    this._ctx = ctx;\n    this._languageSettings = createData.languageSettings;\n    this._languageId = createData.languageId;\n    this._languageService = htmlService.getLanguageService();\n  }\n\n  HTMLWorker.prototype.doValidation = function (uri) {\n    // not yet suported\n    return Promise.resolve([]);\n  };\n\n  HTMLWorker.prototype.doComplete = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var htmlDocument = this._languageService.parseHTMLDocument(document);\n\n    return Promise.resolve(this._languageService.doComplete(document, position, htmlDocument, this._languageSettings && this._languageSettings.suggest));\n  };\n\n  HTMLWorker.prototype.format = function (uri, range, options) {\n    var document = this._getTextDocument(uri);\n\n    var textEdits = this._languageService.format(document, range, this._languageSettings && this._languageSettings.format);\n\n    return Promise.resolve(textEdits);\n  };\n\n  HTMLWorker.prototype.doHover = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var htmlDocument = this._languageService.parseHTMLDocument(document);\n\n    var hover = this._languageService.doHover(document, position, htmlDocument);\n\n    return Promise.resolve(hover);\n  };\n\n  HTMLWorker.prototype.findDocumentHighlights = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var htmlDocument = this._languageService.parseHTMLDocument(document);\n\n    var highlights = this._languageService.findDocumentHighlights(document, position, htmlDocument);\n\n    return Promise.resolve(highlights);\n  };\n\n  HTMLWorker.prototype.findDocumentLinks = function (uri) {\n    var document = this._getTextDocument(uri);\n\n    var links = this._languageService.findDocumentLinks(document, null);\n\n    return Promise.resolve(links);\n  };\n\n  HTMLWorker.prototype.findDocumentSymbols = function (uri) {\n    var document = this._getTextDocument(uri);\n\n    var htmlDocument = this._languageService.parseHTMLDocument(document);\n\n    var symbols = this._languageService.findDocumentSymbols(document, htmlDocument);\n\n    return Promise.resolve(symbols);\n  };\n\n  HTMLWorker.prototype.provideFoldingRanges = function (uri, context) {\n    var document = this._getTextDocument(uri);\n\n    var ranges = this._languageService.getFoldingRanges(document, context);\n\n    return Promise.resolve(ranges);\n  };\n\n  HTMLWorker.prototype._getTextDocument = function (uri) {\n    var models = this._ctx.getMirrorModels();\n\n    for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n      var model = models_1[_i];\n\n      if (model.uri.toString() === uri) {\n        return ls.TextDocument.create(uri, this._languageId, model.version, model.getValue());\n      }\n    }\n\n    return null;\n  };\n\n  return HTMLWorker;\n}();\n\nexport { HTMLWorker };\nexport function create(ctx, createData) {\n  return new HTMLWorker(ctx, createData);\n}","map":null,"metadata":{},"sourceType":"module"}