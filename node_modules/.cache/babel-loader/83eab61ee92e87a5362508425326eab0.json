{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { renderMarkdown } from '../../../base/browser/markdownRenderer.js';\nimport { IOpenerService, NullOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { tokenizeToString } from '../../common/modes/textToHtmlTokenizer.js';\nimport { optional } from '../../../platform/instantiation/common/instantiation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { DisposableStore, Disposable } from '../../../base/common/lifecycle.js';\nimport { TokenizationRegistry } from '../../common/modes.js';\n\nvar MarkdownRenderer =\n/** @class */\nfunction (_super) {\n  __extends(MarkdownRenderer, _super);\n\n  function MarkdownRenderer(_editor, _modeService, _openerService) {\n    if (_openerService === void 0) {\n      _openerService = NullOpenerService;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._editor = _editor;\n    _this._modeService = _modeService;\n    _this._openerService = _openerService;\n    _this._onDidRenderCodeBlock = _this._register(new Emitter());\n    _this.onDidRenderCodeBlock = _this._onDidRenderCodeBlock.event;\n    return _this;\n  }\n\n  MarkdownRenderer.prototype.getOptions = function (disposeables) {\n    var _this = this;\n\n    return {\n      codeBlockRenderer: function (languageAlias, value) {\n        // In markdown,\n        // it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n        // it is possible no alias is given in which case we fall back to the current editor lang\n        var modeId = null;\n\n        if (languageAlias) {\n          modeId = _this._modeService.getModeIdForLanguageName(languageAlias);\n        } else {\n          var model = _this._editor.getModel();\n\n          if (model) {\n            modeId = model.getLanguageIdentifier().language;\n          }\n        }\n\n        _this._modeService.triggerMode(modeId || '');\n\n        return Promise.resolve(true).then(function (_) {\n          var promise = TokenizationRegistry.getPromise(modeId || '');\n\n          if (promise) {\n            return promise.then(function (support) {\n              return tokenizeToString(value, support);\n            });\n          }\n\n          return tokenizeToString(value, undefined);\n        }).then(function (code) {\n          return \"<span style=\\\"font-family: \" + _this._editor.getConfiguration().fontInfo.fontFamily + \"\\\">\" + code + \"</span>\";\n        });\n      },\n      codeBlockRenderCallback: function () {\n        return _this._onDidRenderCodeBlock.fire();\n      },\n      actionHandler: {\n        callback: function (content) {\n          var uri;\n\n          try {\n            uri = URI.parse(content);\n          } catch (_a) {// ignore\n          }\n\n          if (uri && _this._openerService) {\n            _this._openerService.open(uri).catch(onUnexpectedError);\n          }\n        },\n        disposeables: disposeables\n      }\n    };\n  };\n\n  MarkdownRenderer.prototype.render = function (markdown) {\n    var disposeables = new DisposableStore();\n    var element;\n\n    if (!markdown) {\n      element = document.createElement('span');\n    } else {\n      element = renderMarkdown(markdown, this.getOptions(disposeables));\n    }\n\n    return {\n      element: element,\n      dispose: function () {\n        return disposeables.dispose();\n      }\n    };\n  };\n\n  MarkdownRenderer = __decorate([__param(1, IModeService), __param(2, optional(IOpenerService))], MarkdownRenderer);\n  return MarkdownRenderer;\n}(Disposable);\n\nexport { MarkdownRenderer };","map":null,"metadata":{},"sourceType":"module"}