{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './sash.css';\nimport { dispose, Disposable, DisposableStore } from '../../../common/lifecycle.js';\nimport { isIPad } from '../../browser.js';\nimport { isMacintosh } from '../../../common/platform.js';\nimport * as types from '../../../common/types.js';\nimport { EventType, Gesture } from '../../touch.js';\nimport { StandardMouseEvent } from '../../mouseEvent.js';\nimport { Emitter } from '../../../common/event.js';\nimport { getElementsByTagName, EventHelper, createStyleSheet, addDisposableListener, append, $, addClass, removeClass, toggleClass } from '../../dom.js';\nimport { domEvent } from '../../event.js';\nvar DEBUG = false;\n\nvar Sash =\n/** @class */\nfunction (_super) {\n  __extends(Sash, _super);\n\n  function Sash(container, layoutProvider, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._state = 3\n    /* Enabled */\n    ;\n    _this._onDidEnablementChange = _this._register(new Emitter());\n    _this.onDidEnablementChange = _this._onDidEnablementChange.event;\n    _this._onDidStart = _this._register(new Emitter());\n    _this.onDidStart = _this._onDidStart.event;\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._onDidReset = _this._register(new Emitter());\n    _this.onDidReset = _this._onDidReset.event;\n    _this._onDidEnd = _this._register(new Emitter());\n    _this.onDidEnd = _this._onDidEnd.event;\n    _this.linkedSash = undefined;\n    _this.orthogonalStartSashDisposables = _this._register(new DisposableStore());\n    _this.orthogonalEndSashDisposables = _this._register(new DisposableStore());\n    _this.el = append(container, $('.monaco-sash'));\n\n    if (isMacintosh) {\n      addClass(_this.el, 'mac');\n    }\n\n    _this._register(domEvent(_this.el, 'mousedown')(_this.onMouseDown, _this));\n\n    _this._register(domEvent(_this.el, 'dblclick')(_this.onMouseDoubleClick, _this));\n\n    Gesture.addTarget(_this.el);\n\n    _this._register(domEvent(_this.el, EventType.Start)(_this.onTouchStart, _this));\n\n    if (isIPad) {\n      // see also http://ux.stackexchange.com/questions/39023/what-is-the-optimum-button-size-of-touch-screen-applications\n      addClass(_this.el, 'touch');\n    }\n\n    _this.setOrientation(options.orientation || 0\n    /* VERTICAL */\n    );\n\n    _this.hidden = false;\n    _this.layoutProvider = layoutProvider;\n    _this.orthogonalStartSash = options.orthogonalStartSash;\n    _this.orthogonalEndSash = options.orthogonalEndSash;\n    toggleClass(_this.el, 'debug', DEBUG);\n    return _this;\n  }\n\n  Object.defineProperty(Sash.prototype, \"state\", {\n    get: function () {\n      return this._state;\n    },\n    set: function (state) {\n      if (this._state === state) {\n        return;\n      }\n\n      toggleClass(this.el, 'disabled', state === 0\n      /* Disabled */\n      );\n      toggleClass(this.el, 'minimum', state === 1\n      /* Minimum */\n      );\n      toggleClass(this.el, 'maximum', state === 2\n      /* Maximum */\n      );\n      this._state = state;\n\n      this._onDidEnablementChange.fire(state);\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sash.prototype, \"orthogonalStartSash\", {\n    get: function () {\n      return this._orthogonalStartSash;\n    },\n    set: function (sash) {\n      this.orthogonalStartSashDisposables.clear();\n\n      if (sash) {\n        this.orthogonalStartSashDisposables.add(sash.onDidEnablementChange(this.onOrthogonalStartSashEnablementChange, this));\n        this.onOrthogonalStartSashEnablementChange(sash.state);\n      } else {\n        this.onOrthogonalStartSashEnablementChange(0\n        /* Disabled */\n        );\n      }\n\n      this._orthogonalStartSash = sash;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(Sash.prototype, \"orthogonalEndSash\", {\n    get: function () {\n      return this._orthogonalEndSash;\n    },\n    set: function (sash) {\n      this.orthogonalEndSashDisposables.clear();\n\n      if (sash) {\n        this.orthogonalEndSashDisposables.add(sash.onDidEnablementChange(this.onOrthogonalEndSashEnablementChange, this));\n        this.onOrthogonalEndSashEnablementChange(sash.state);\n      } else {\n        this.onOrthogonalEndSashEnablementChange(0\n        /* Disabled */\n        );\n      }\n\n      this._orthogonalEndSash = sash;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sash.prototype.setOrientation = function (orientation) {\n    this.orientation = orientation;\n\n    if (this.orientation === 1\n    /* HORIZONTAL */\n    ) {\n        addClass(this.el, 'horizontal');\n        removeClass(this.el, 'vertical');\n      } else {\n      removeClass(this.el, 'horizontal');\n      addClass(this.el, 'vertical');\n    }\n\n    if (this.layoutProvider) {\n      this.layout();\n    }\n  };\n\n  Sash.prototype.onMouseDown = function (e) {\n    var _this = this;\n\n    EventHelper.stop(e, false);\n    var isMultisashResize = false;\n\n    if (!e.__orthogonalSashEvent) {\n      var orthogonalSash = this.getOrthogonalSash(e);\n\n      if (orthogonalSash) {\n        isMultisashResize = true;\n        e.__orthogonalSashEvent = true;\n        orthogonalSash.onMouseDown(e);\n      }\n    }\n\n    if (this.linkedSash && !e.__linkedSashEvent) {\n      e.__linkedSashEvent = true;\n      this.linkedSash.onMouseDown(e);\n    }\n\n    if (!this.state) {\n      return;\n    } // Select both iframes and webviews; internally Electron nests an iframe\n    // in its <webview> component, but this isn't queryable.\n\n\n    var iframes = getElementsByTagName('iframe').concat(getElementsByTagName('webview'));\n\n    for (var _i = 0, iframes_1 = iframes; _i < iframes_1.length; _i++) {\n      var iframe = iframes_1[_i];\n      iframe.style.pointerEvents = 'none'; // disable mouse events on iframes as long as we drag the sash\n    }\n\n    var mouseDownEvent = new StandardMouseEvent(e);\n    var startX = mouseDownEvent.posx;\n    var startY = mouseDownEvent.posy;\n    var altKey = mouseDownEvent.altKey;\n    var startEvent = {\n      startX: startX,\n      currentX: startX,\n      startY: startY,\n      currentY: startY,\n      altKey: altKey\n    };\n    addClass(this.el, 'active');\n\n    this._onDidStart.fire(startEvent); // fix https://github.com/Microsoft/vscode/issues/21675\n\n\n    var style = createStyleSheet(this.el);\n\n    var updateStyle = function () {\n      var cursor = '';\n\n      if (isMultisashResize) {\n        cursor = 'all-scroll';\n      } else if (_this.orientation === 1\n      /* HORIZONTAL */\n      ) {\n          if (_this.state === 1\n          /* Minimum */\n          ) {\n              cursor = 's-resize';\n            } else if (_this.state === 2\n          /* Maximum */\n          ) {\n              cursor = 'n-resize';\n            } else {\n            cursor = isMacintosh ? 'row-resize' : 'ns-resize';\n          }\n        } else {\n        if (_this.state === 1\n        /* Minimum */\n        ) {\n            cursor = 'e-resize';\n          } else if (_this.state === 2\n        /* Maximum */\n        ) {\n            cursor = 'w-resize';\n          } else {\n          cursor = isMacintosh ? 'col-resize' : 'ew-resize';\n        }\n      }\n\n      style.innerHTML = \"* { cursor: \" + cursor + \" !important; }\";\n    };\n\n    var disposables = new DisposableStore();\n    updateStyle();\n\n    if (!isMultisashResize) {\n      this.onDidEnablementChange(updateStyle, null, disposables);\n    }\n\n    var onMouseMove = function (e) {\n      EventHelper.stop(e, false);\n      var mouseMoveEvent = new StandardMouseEvent(e);\n      var event = {\n        startX: startX,\n        currentX: mouseMoveEvent.posx,\n        startY: startY,\n        currentY: mouseMoveEvent.posy,\n        altKey: altKey\n      };\n\n      _this._onDidChange.fire(event);\n    };\n\n    var onMouseUp = function (e) {\n      EventHelper.stop(e, false);\n\n      _this.el.removeChild(style);\n\n      removeClass(_this.el, 'active');\n\n      _this._onDidEnd.fire();\n\n      disposables.dispose();\n\n      for (var _i = 0, iframes_2 = iframes; _i < iframes_2.length; _i++) {\n        var iframe = iframes_2[_i];\n        iframe.style.pointerEvents = 'auto';\n      }\n    };\n\n    domEvent(window, 'mousemove')(onMouseMove, null, disposables);\n    domEvent(window, 'mouseup')(onMouseUp, null, disposables);\n  };\n\n  Sash.prototype.onMouseDoubleClick = function (e) {\n    var orthogonalSash = this.getOrthogonalSash(e);\n\n    if (orthogonalSash) {\n      orthogonalSash._onDidReset.fire();\n    }\n\n    if (this.linkedSash) {\n      this.linkedSash._onDidReset.fire();\n    }\n\n    this._onDidReset.fire();\n  };\n\n  Sash.prototype.onTouchStart = function (event) {\n    var _this = this;\n\n    EventHelper.stop(event);\n    var listeners = [];\n    var startX = event.pageX;\n    var startY = event.pageY;\n    var altKey = event.altKey;\n\n    this._onDidStart.fire({\n      startX: startX,\n      currentX: startX,\n      startY: startY,\n      currentY: startY,\n      altKey: altKey\n    });\n\n    listeners.push(addDisposableListener(this.el, EventType.Change, function (event) {\n      if (types.isNumber(event.pageX) && types.isNumber(event.pageY)) {\n        _this._onDidChange.fire({\n          startX: startX,\n          currentX: event.pageX,\n          startY: startY,\n          currentY: event.pageY,\n          altKey: altKey\n        });\n      }\n    }));\n    listeners.push(addDisposableListener(this.el, EventType.End, function (event) {\n      _this._onDidEnd.fire();\n\n      dispose(listeners);\n    }));\n  };\n\n  Sash.prototype.layout = function () {\n    var size = isIPad ? 20 : 4;\n\n    if (this.orientation === 0\n    /* VERTICAL */\n    ) {\n        var verticalProvider = this.layoutProvider;\n        this.el.style.left = verticalProvider.getVerticalSashLeft(this) - size / 2 + 'px';\n\n        if (verticalProvider.getVerticalSashTop) {\n          this.el.style.top = verticalProvider.getVerticalSashTop(this) + 'px';\n        }\n\n        if (verticalProvider.getVerticalSashHeight) {\n          this.el.style.height = verticalProvider.getVerticalSashHeight(this) + 'px';\n        }\n      } else {\n      var horizontalProvider = this.layoutProvider;\n      this.el.style.top = horizontalProvider.getHorizontalSashTop(this) - size / 2 + 'px';\n\n      if (horizontalProvider.getHorizontalSashLeft) {\n        this.el.style.left = horizontalProvider.getHorizontalSashLeft(this) + 'px';\n      }\n\n      if (horizontalProvider.getHorizontalSashWidth) {\n        this.el.style.width = horizontalProvider.getHorizontalSashWidth(this) + 'px';\n      }\n    }\n  };\n\n  Sash.prototype.hide = function () {\n    this.hidden = true;\n    this.el.style.display = 'none';\n    this.el.setAttribute('aria-hidden', 'true');\n  };\n\n  Sash.prototype.onOrthogonalStartSashEnablementChange = function (state) {\n    toggleClass(this.el, 'orthogonal-start', state !== 0\n    /* Disabled */\n    );\n  };\n\n  Sash.prototype.onOrthogonalEndSashEnablementChange = function (state) {\n    toggleClass(this.el, 'orthogonal-end', state !== 0\n    /* Disabled */\n    );\n  };\n\n  Sash.prototype.getOrthogonalSash = function (e) {\n    if (this.orientation === 0\n    /* VERTICAL */\n    ) {\n        if (e.offsetY <= 4) {\n          return this.orthogonalStartSash;\n        } else if (e.offsetY >= this.el.clientHeight - 4) {\n          return this.orthogonalEndSash;\n        }\n      } else {\n      if (e.offsetX <= 4) {\n        return this.orthogonalStartSash;\n      } else if (e.offsetX >= this.el.clientWidth - 4) {\n        return this.orthogonalEndSash;\n      }\n    }\n\n    return undefined;\n  };\n\n  Sash.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    if (this.el && this.el.parentElement) {\n      this.el.parentElement.removeChild(this.el);\n    }\n\n    this.el = null; // StrictNullOverride: nulling out ok in dispose\n  };\n\n  return Sash;\n}(Disposable);\n\nexport { Sash };","map":null,"metadata":{},"sourceType":"module"}