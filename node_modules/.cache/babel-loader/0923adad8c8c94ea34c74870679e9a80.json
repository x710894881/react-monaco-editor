{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { equals } from './arrays.js';\n\nvar MarkdownString =\n/** @class */\nfunction () {\n  function MarkdownString(value) {\n    if (value === void 0) {\n      value = '';\n    }\n\n    this.value = value;\n  }\n\n  MarkdownString.prototype.appendText = function (value) {\n    // escape markdown syntax tokens: http://daringfireball.net/projects/markdown/syntax#backslash\n    this.value += value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&');\n    return this;\n  };\n\n  MarkdownString.prototype.appendMarkdown = function (value) {\n    this.value += value;\n    return this;\n  };\n\n  MarkdownString.prototype.appendCodeblock = function (langId, code) {\n    this.value += '\\n```';\n    this.value += langId;\n    this.value += '\\n';\n    this.value += code;\n    this.value += '\\n```\\n';\n    return this;\n  };\n\n  return MarkdownString;\n}();\n\nexport { MarkdownString };\nexport function isEmptyMarkdownString(oneOrMany) {\n  if (isMarkdownString(oneOrMany)) {\n    return !oneOrMany.value;\n  } else if (Array.isArray(oneOrMany)) {\n    return oneOrMany.every(isEmptyMarkdownString);\n  } else {\n    return true;\n  }\n}\nexport function isMarkdownString(thing) {\n  if (thing instanceof MarkdownString) {\n    return true;\n  } else if (thing && typeof thing === 'object') {\n    return typeof thing.value === 'string' && (typeof thing.isTrusted === 'boolean' || thing.isTrusted === undefined);\n  }\n\n  return false;\n}\nexport function markedStringsEquals(a, b) {\n  if (!a && !b) {\n    return true;\n  } else if (!a || !b) {\n    return false;\n  } else if (Array.isArray(a) && Array.isArray(b)) {\n    return equals(a, b, markdownStringEqual);\n  } else if (isMarkdownString(a) && isMarkdownString(b)) {\n    return markdownStringEqual(a, b);\n  } else {\n    return false;\n  }\n}\n\nfunction markdownStringEqual(a, b) {\n  if (a === b) {\n    return true;\n  } else if (!a || !b) {\n    return false;\n  } else {\n    return a.value === b.value && a.isTrusted === b.isTrusted;\n  }\n}\n\nexport function removeMarkdownEscapes(text) {\n  if (!text) {\n    return text;\n  }\n\n  return text.replace(/\\\\([\\\\`*_{}[\\]()#+\\-.!])/g, '$1');\n}\nexport function parseHrefAndDimensions(href) {\n  var dimensions = [];\n  var splitted = href.split('|').map(function (s) {\n    return s.trim();\n  });\n  href = splitted[0];\n  var parameters = splitted[1];\n\n  if (parameters) {\n    var heightFromParams = /height=(\\d+)/.exec(parameters);\n    var widthFromParams = /width=(\\d+)/.exec(parameters);\n    var height = heightFromParams ? heightFromParams[1] : '';\n    var width = widthFromParams ? widthFromParams[1] : '';\n    var widthIsFinite = isFinite(parseInt(width));\n    var heightIsFinite = isFinite(parseInt(height));\n\n    if (widthIsFinite) {\n      dimensions.push(\"width=\\\"\" + width + \"\\\"\");\n    }\n\n    if (heightIsFinite) {\n      dimensions.push(\"height=\\\"\" + height + \"\\\"\");\n    }\n  }\n\n  return {\n    href: href,\n    dimensions: dimensions\n  };\n}","map":null,"metadata":{},"sourceType":"module"}