{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { dispose } from '../../../base/common/lifecycle.js';\nimport { IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\n\nvar SuggestAlternatives =\n/** @class */\nfunction () {\n  function SuggestAlternatives(_editor, contextKeyService) {\n    this._editor = _editor;\n    this._index = 0;\n    this._ckOtherSuggestions = SuggestAlternatives.OtherSuggestions.bindTo(contextKeyService);\n  }\n\n  SuggestAlternatives.prototype.dispose = function () {\n    this.reset();\n  };\n\n  SuggestAlternatives.prototype.reset = function () {\n    this._ckOtherSuggestions.reset();\n\n    dispose(this._listener);\n    this._model = undefined;\n    this._acceptNext = undefined;\n    this._ignore = false;\n  };\n\n  SuggestAlternatives.prototype.set = function (_a, acceptNext) {\n    var _this = this;\n\n    var model = _a.model,\n        index = _a.index; // no suggestions -> nothing to do\n\n    if (model.items.length === 0) {\n      this.reset();\n      return;\n    } // no alternative suggestions -> nothing to do\n\n\n    var nextIndex = SuggestAlternatives._moveIndex(true, model, index);\n\n    if (nextIndex === index) {\n      this.reset();\n      return;\n    }\n\n    this._acceptNext = acceptNext;\n    this._model = model;\n    this._index = index;\n    this._listener = this._editor.onDidChangeCursorPosition(function () {\n      if (!_this._ignore) {\n        _this.reset();\n      }\n    });\n\n    this._ckOtherSuggestions.set(true);\n  };\n\n  SuggestAlternatives._moveIndex = function (fwd, model, index) {\n    var newIndex = index;\n\n    while (true) {\n      newIndex = (newIndex + model.items.length + (fwd ? +1 : -1)) % model.items.length;\n\n      if (newIndex === index) {\n        break;\n      }\n\n      if (!model.items[newIndex].completion.additionalTextEdits) {\n        break;\n      }\n    }\n\n    return newIndex;\n  };\n\n  SuggestAlternatives.prototype.next = function () {\n    this._move(true);\n  };\n\n  SuggestAlternatives.prototype.prev = function () {\n    this._move(false);\n  };\n\n  SuggestAlternatives.prototype._move = function (fwd) {\n    if (!this._model) {\n      // nothing to reason about\n      return;\n    }\n\n    try {\n      this._ignore = true;\n      this._index = SuggestAlternatives._moveIndex(fwd, this._model, this._index);\n\n      this._acceptNext({\n        index: this._index,\n        item: this._model.items[this._index],\n        model: this._model\n      });\n    } finally {\n      this._ignore = false;\n    }\n  };\n\n  SuggestAlternatives.OtherSuggestions = new RawContextKey('hasOtherSuggestions', false);\n  SuggestAlternatives = __decorate([__param(1, IContextKeyService)], SuggestAlternatives);\n  return SuggestAlternatives;\n}();\n\nexport { SuggestAlternatives };","map":null,"metadata":{},"sourceType":"module"}