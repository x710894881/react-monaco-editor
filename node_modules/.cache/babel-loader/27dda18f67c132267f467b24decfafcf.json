{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { RawContextKey, IContextKeyService, ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { createDecorator } from '../../../platform/instantiation/common/instantiation.js';\nimport { registerSingleton } from '../../../platform/instantiation/common/extensions.js';\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { registerEditorCommand, EditorCommand } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { Range } from '../../common/core/range.js';\nimport { dispose, combinedDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { localize } from '../../../nls.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nexport var ctxHasSymbols = new RawContextKey('hasSymbols', false);\nexport var ISymbolNavigationService = createDecorator('ISymbolNavigationService');\n\nvar SymbolNavigationService =\n/** @class */\nfunction () {\n  function SymbolNavigationService(contextKeyService, _editorService, _notificationService, _keybindingService) {\n    this._editorService = _editorService;\n    this._notificationService = _notificationService;\n    this._keybindingService = _keybindingService;\n    this._currentModel = undefined;\n    this._currentIdx = -1;\n    this._ignoreEditorChange = false;\n    this._ctxHasSymbols = ctxHasSymbols.bindTo(contextKeyService);\n  }\n\n  SymbolNavigationService.prototype.reset = function () {\n    this._ctxHasSymbols.reset();\n\n    dispose(this._currentState);\n    dispose(this._currentMessage);\n    this._currentModel = undefined;\n    this._currentIdx = -1;\n  };\n\n  SymbolNavigationService.prototype.put = function (anchor) {\n    var _this = this;\n\n    var refModel = anchor.parent.parent;\n\n    if (refModel.references.length <= 1) {\n      this.reset();\n      return;\n    }\n\n    this._currentModel = refModel;\n    this._currentIdx = refModel.references.indexOf(anchor);\n\n    this._ctxHasSymbols.set(true);\n\n    this._showMessage();\n\n    var editorState = new EditorState(this._editorService);\n    var listener = editorState.onDidChange(function (_) {\n      if (_this._ignoreEditorChange) {\n        return;\n      }\n\n      var editor = _this._editorService.getActiveCodeEditor();\n\n      if (!editor) {\n        return;\n      }\n\n      var model = editor.getModel();\n      var position = editor.getPosition();\n\n      if (!model || !position) {\n        return;\n      }\n\n      var seenUri = false;\n      var seenPosition = false;\n\n      for (var _i = 0, _a = refModel.references; _i < _a.length; _i++) {\n        var reference = _a[_i];\n\n        if (reference.uri.toString() === model.uri.toString()) {\n          seenUri = true;\n          seenPosition = seenPosition || Range.containsPosition(reference.range, position);\n        } else if (seenUri) {\n          break;\n        }\n      }\n\n      if (!seenUri || !seenPosition) {\n        _this.reset();\n      }\n    });\n    this._currentState = combinedDisposable(editorState, listener);\n  };\n\n  SymbolNavigationService.prototype.revealNext = function (source) {\n    var _this = this;\n\n    if (!this._currentModel) {\n      return Promise.resolve();\n    } // get next result and advance\n\n\n    this._currentIdx += 1;\n    this._currentIdx %= this._currentModel.references.length;\n    var reference = this._currentModel.references[this._currentIdx]; // status\n\n    this._showMessage(); // open editor, ignore events while that happens\n\n\n    this._ignoreEditorChange = true;\n    return this._editorService.openCodeEditor({\n      resource: reference.uri,\n      options: {\n        selection: Range.collapseToStart(reference.range),\n        revealInCenterIfOutsideViewport: true\n      }\n    }, source).finally(function () {\n      _this._ignoreEditorChange = false;\n    });\n  };\n\n  SymbolNavigationService.prototype._showMessage = function () {\n    dispose(this._currentMessage);\n\n    var kb = this._keybindingService.lookupKeybinding('editor.gotoNextSymbolFromResult');\n\n    var message = kb ? localize('location.kb', \"Symbol {0} of {1}, {2} for next\", this._currentIdx + 1, this._currentModel.references.length, kb.getLabel()) : localize('location', \"Symbol {0} of {1}\", this._currentIdx + 1, this._currentModel.references.length);\n    this._currentMessage = this._notificationService.status(message);\n  };\n\n  SymbolNavigationService = __decorate([__param(0, IContextKeyService), __param(1, ICodeEditorService), __param(2, INotificationService), __param(3, IKeybindingService)], SymbolNavigationService);\n  return SymbolNavigationService;\n}();\n\nregisterSingleton(ISymbolNavigationService, SymbolNavigationService, true);\nregisterEditorCommand(new (\n/** @class */\nfunction (_super) {\n  __extends(class_1, _super);\n\n  function class_1() {\n    return _super.call(this, {\n      id: 'editor.gotoNextSymbolFromResult',\n      precondition: ContextKeyExpr.and(ctxHasSymbols, ContextKeyExpr.equals('config.editor.gotoLocation.multiple', 'goto')),\n      kbOpts: {\n        weight: 100\n        /* EditorContrib */\n        ,\n        primary: 70\n        /* F12 */\n\n      }\n    }) || this;\n  }\n\n  class_1.prototype.runEditorCommand = function (accessor, editor) {\n    return accessor.get(ISymbolNavigationService).revealNext(editor);\n  };\n\n  return class_1;\n}(EditorCommand))());\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n  id: 'editor.gotoNextSymbolFromResult.cancel',\n  weight: 100\n  /* EditorContrib */\n  ,\n  when: ctxHasSymbols,\n  primary: 9\n  /* Escape */\n  ,\n  handler: function (accessor) {\n    accessor.get(ISymbolNavigationService).reset();\n  }\n}); //\n\nvar EditorState =\n/** @class */\nfunction () {\n  function EditorState(editorService) {\n    this._listener = new Map();\n    this._disposables = new DisposableStore();\n    this._onDidChange = new Emitter();\n    this.onDidChange = this._onDidChange.event;\n\n    this._disposables.add(editorService.onCodeEditorRemove(this._onDidRemoveEditor, this));\n\n    this._disposables.add(editorService.onCodeEditorAdd(this._onDidAddEditor, this));\n\n    editorService.listCodeEditors().forEach(this._onDidAddEditor, this);\n  }\n\n  EditorState.prototype.dispose = function () {\n    this._disposables.dispose();\n\n    this._onDidChange.dispose();\n\n    this._listener.forEach(dispose);\n  };\n\n  EditorState.prototype._onDidAddEditor = function (editor) {\n    var _this = this;\n\n    this._listener.set(editor, combinedDisposable(editor.onDidChangeCursorPosition(function (_) {\n      return _this._onDidChange.fire({\n        editor: editor\n      });\n    }), editor.onDidChangeModelContent(function (_) {\n      return _this._onDidChange.fire({\n        editor: editor\n      });\n    })));\n  };\n\n  EditorState.prototype._onDidRemoveEditor = function (editor) {\n    dispose(this._listener.get(editor));\n\n    this._listener.delete(editor);\n  };\n\n  EditorState = __decorate([__param(0, ICodeEditorService)], EditorState);\n  return EditorState;\n}();","map":null,"metadata":{},"sourceType":"module"}