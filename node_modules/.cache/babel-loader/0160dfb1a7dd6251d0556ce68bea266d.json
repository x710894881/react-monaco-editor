{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './colorPicker.css';\nimport { onDidChangeZoomLevel } from '../../../base/browser/browser.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { GlobalMouseMoveMonitor, standardMouseMoveMerger } from '../../../base/browser/globalMouseMoveMonitor.js';\nimport { Widget } from '../../../base/browser/ui/widget.js';\nimport { Color, HSVA, RGBA } from '../../../base/common/color.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { editorHoverBackground } from '../../../platform/theme/common/colorRegistry.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nvar $ = dom.$;\n\nvar ColorPickerHeader =\n/** @class */\nfunction (_super) {\n  __extends(ColorPickerHeader, _super);\n\n  function ColorPickerHeader(container, model, themeService) {\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    _this.domNode = $('.colorpicker-header');\n    dom.append(container, _this.domNode);\n    _this.pickedColorNode = dom.append(_this.domNode, $('.picked-color'));\n    var colorBox = dom.append(_this.domNode, $('.original-color'));\n    colorBox.style.backgroundColor = Color.Format.CSS.format(_this.model.originalColor);\n    _this.backgroundColor = themeService.getTheme().getColor(editorHoverBackground) || Color.white;\n\n    _this._register(registerThemingParticipant(function (theme, collector) {\n      _this.backgroundColor = theme.getColor(editorHoverBackground) || Color.white;\n    }));\n\n    _this._register(dom.addDisposableListener(_this.pickedColorNode, dom.EventType.CLICK, function () {\n      return _this.model.selectNextColorPresentation();\n    }));\n\n    _this._register(dom.addDisposableListener(colorBox, dom.EventType.CLICK, function () {\n      _this.model.color = _this.model.originalColor;\n\n      _this.model.flushColor();\n    }));\n\n    _this._register(model.onDidChangeColor(_this.onDidChangeColor, _this));\n\n    _this._register(model.onDidChangePresentation(_this.onDidChangePresentation, _this));\n\n    _this.pickedColorNode.style.backgroundColor = Color.Format.CSS.format(model.color);\n    dom.toggleClass(_this.pickedColorNode, 'light', model.color.rgba.a < 0.5 ? _this.backgroundColor.isLighter() : model.color.isLighter());\n    return _this;\n  }\n\n  ColorPickerHeader.prototype.onDidChangeColor = function (color) {\n    this.pickedColorNode.style.backgroundColor = Color.Format.CSS.format(color);\n    dom.toggleClass(this.pickedColorNode, 'light', color.rgba.a < 0.5 ? this.backgroundColor.isLighter() : color.isLighter());\n    this.onDidChangePresentation();\n  };\n\n  ColorPickerHeader.prototype.onDidChangePresentation = function () {\n    this.pickedColorNode.textContent = this.model.presentation ? this.model.presentation.label : '';\n  };\n\n  return ColorPickerHeader;\n}(Disposable);\n\nexport { ColorPickerHeader };\n\nvar ColorPickerBody =\n/** @class */\nfunction (_super) {\n  __extends(ColorPickerBody, _super);\n\n  function ColorPickerBody(container, model, pixelRatio) {\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    _this.pixelRatio = pixelRatio;\n    _this.domNode = $('.colorpicker-body');\n    dom.append(container, _this.domNode);\n    _this.saturationBox = new SaturationBox(_this.domNode, _this.model, _this.pixelRatio);\n\n    _this._register(_this.saturationBox);\n\n    _this._register(_this.saturationBox.onDidChange(_this.onDidSaturationValueChange, _this));\n\n    _this._register(_this.saturationBox.onColorFlushed(_this.flushColor, _this));\n\n    _this.opacityStrip = new OpacityStrip(_this.domNode, _this.model);\n\n    _this._register(_this.opacityStrip);\n\n    _this._register(_this.opacityStrip.onDidChange(_this.onDidOpacityChange, _this));\n\n    _this._register(_this.opacityStrip.onColorFlushed(_this.flushColor, _this));\n\n    _this.hueStrip = new HueStrip(_this.domNode, _this.model);\n\n    _this._register(_this.hueStrip);\n\n    _this._register(_this.hueStrip.onDidChange(_this.onDidHueChange, _this));\n\n    _this._register(_this.hueStrip.onColorFlushed(_this.flushColor, _this));\n\n    return _this;\n  }\n\n  ColorPickerBody.prototype.flushColor = function () {\n    this.model.flushColor();\n  };\n\n  ColorPickerBody.prototype.onDidSaturationValueChange = function (_a) {\n    var s = _a.s,\n        v = _a.v;\n    var hsva = this.model.color.hsva;\n    this.model.color = new Color(new HSVA(hsva.h, s, v, hsva.a));\n  };\n\n  ColorPickerBody.prototype.onDidOpacityChange = function (a) {\n    var hsva = this.model.color.hsva;\n    this.model.color = new Color(new HSVA(hsva.h, hsva.s, hsva.v, a));\n  };\n\n  ColorPickerBody.prototype.onDidHueChange = function (value) {\n    var hsva = this.model.color.hsva;\n    var h = (1 - value) * 360;\n    this.model.color = new Color(new HSVA(h === 360 ? 0 : h, hsva.s, hsva.v, hsva.a));\n  };\n\n  ColorPickerBody.prototype.layout = function () {\n    this.saturationBox.layout();\n    this.opacityStrip.layout();\n    this.hueStrip.layout();\n  };\n\n  return ColorPickerBody;\n}(Disposable);\n\nexport { ColorPickerBody };\n\nvar SaturationBox =\n/** @class */\nfunction (_super) {\n  __extends(SaturationBox, _super);\n\n  function SaturationBox(container, model, pixelRatio) {\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    _this.pixelRatio = pixelRatio;\n    _this._onDidChange = new Emitter();\n    _this.onDidChange = _this._onDidChange.event;\n    _this._onColorFlushed = new Emitter();\n    _this.onColorFlushed = _this._onColorFlushed.event;\n    _this.domNode = $('.saturation-wrap');\n    dom.append(container, _this.domNode); // Create canvas, draw selected color\n\n    _this.canvas = document.createElement('canvas');\n    _this.canvas.className = 'saturation-box';\n    dom.append(_this.domNode, _this.canvas); // Add selection circle\n\n    _this.selection = $('.saturation-selection');\n    dom.append(_this.domNode, _this.selection);\n\n    _this.layout();\n\n    _this._register(dom.addDisposableListener(_this.domNode, dom.EventType.MOUSE_DOWN, function (e) {\n      return _this.onMouseDown(e);\n    }));\n\n    _this._register(_this.model.onDidChangeColor(_this.onDidChangeColor, _this));\n\n    _this.monitor = null;\n    return _this;\n  }\n\n  SaturationBox.prototype.onMouseDown = function (e) {\n    var _this = this;\n\n    this.monitor = this._register(new GlobalMouseMoveMonitor());\n    var origin = dom.getDomNodePagePosition(this.domNode);\n\n    if (e.target !== this.selection) {\n      this.onDidChangePosition(e.offsetX, e.offsetY);\n    }\n\n    this.monitor.startMonitoring(standardMouseMoveMerger, function (event) {\n      return _this.onDidChangePosition(event.posx - origin.left, event.posy - origin.top);\n    }, function () {\n      return null;\n    });\n    var mouseUpListener = dom.addDisposableListener(document, dom.EventType.MOUSE_UP, function () {\n      _this._onColorFlushed.fire();\n\n      mouseUpListener.dispose();\n\n      if (_this.monitor) {\n        _this.monitor.stopMonitoring(true);\n\n        _this.monitor = null;\n      }\n    }, true);\n  };\n\n  SaturationBox.prototype.onDidChangePosition = function (left, top) {\n    var s = Math.max(0, Math.min(1, left / this.width));\n    var v = Math.max(0, Math.min(1, 1 - top / this.height));\n    this.paintSelection(s, v);\n\n    this._onDidChange.fire({\n      s: s,\n      v: v\n    });\n  };\n\n  SaturationBox.prototype.layout = function () {\n    this.width = this.domNode.offsetWidth;\n    this.height = this.domNode.offsetHeight;\n    this.canvas.width = this.width * this.pixelRatio;\n    this.canvas.height = this.height * this.pixelRatio;\n    this.paint();\n    var hsva = this.model.color.hsva;\n    this.paintSelection(hsva.s, hsva.v);\n  };\n\n  SaturationBox.prototype.paint = function () {\n    var hsva = this.model.color.hsva;\n    var saturatedColor = new Color(new HSVA(hsva.h, 1, 1, 1));\n    var ctx = this.canvas.getContext('2d');\n    var whiteGradient = ctx.createLinearGradient(0, 0, this.canvas.width, 0);\n    whiteGradient.addColorStop(0, 'rgba(255, 255, 255, 1)');\n    whiteGradient.addColorStop(0.5, 'rgba(255, 255, 255, 0.5)');\n    whiteGradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n    var blackGradient = ctx.createLinearGradient(0, 0, 0, this.canvas.height);\n    blackGradient.addColorStop(0, 'rgba(0, 0, 0, 0)');\n    blackGradient.addColorStop(1, 'rgba(0, 0, 0, 1)');\n    ctx.rect(0, 0, this.canvas.width, this.canvas.height);\n    ctx.fillStyle = Color.Format.CSS.format(saturatedColor);\n    ctx.fill();\n    ctx.fillStyle = whiteGradient;\n    ctx.fill();\n    ctx.fillStyle = blackGradient;\n    ctx.fill();\n  };\n\n  SaturationBox.prototype.paintSelection = function (s, v) {\n    this.selection.style.left = s * this.width + \"px\";\n    this.selection.style.top = this.height - v * this.height + \"px\";\n  };\n\n  SaturationBox.prototype.onDidChangeColor = function () {\n    if (this.monitor && this.monitor.isMonitoring()) {\n      return;\n    }\n\n    this.paint();\n  };\n\n  return SaturationBox;\n}(Disposable);\n\nvar Strip =\n/** @class */\nfunction (_super) {\n  __extends(Strip, _super);\n\n  function Strip(container, model) {\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    _this._onDidChange = new Emitter();\n    _this.onDidChange = _this._onDidChange.event;\n    _this._onColorFlushed = new Emitter();\n    _this.onColorFlushed = _this._onColorFlushed.event;\n    _this.domNode = dom.append(container, $('.strip'));\n    _this.overlay = dom.append(_this.domNode, $('.overlay'));\n    _this.slider = dom.append(_this.domNode, $('.slider'));\n    _this.slider.style.top = \"0px\";\n\n    _this._register(dom.addDisposableListener(_this.domNode, dom.EventType.MOUSE_DOWN, function (e) {\n      return _this.onMouseDown(e);\n    }));\n\n    _this.layout();\n\n    return _this;\n  }\n\n  Strip.prototype.layout = function () {\n    this.height = this.domNode.offsetHeight - this.slider.offsetHeight;\n    var value = this.getValue(this.model.color);\n    this.updateSliderPosition(value);\n  };\n\n  Strip.prototype.onMouseDown = function (e) {\n    var _this = this;\n\n    var monitor = this._register(new GlobalMouseMoveMonitor());\n\n    var origin = dom.getDomNodePagePosition(this.domNode);\n    dom.addClass(this.domNode, 'grabbing');\n\n    if (e.target !== this.slider) {\n      this.onDidChangeTop(e.offsetY);\n    }\n\n    monitor.startMonitoring(standardMouseMoveMerger, function (event) {\n      return _this.onDidChangeTop(event.posy - origin.top);\n    }, function () {\n      return null;\n    });\n    var mouseUpListener = dom.addDisposableListener(document, dom.EventType.MOUSE_UP, function () {\n      _this._onColorFlushed.fire();\n\n      mouseUpListener.dispose();\n      monitor.stopMonitoring(true);\n      dom.removeClass(_this.domNode, 'grabbing');\n    }, true);\n  };\n\n  Strip.prototype.onDidChangeTop = function (top) {\n    var value = Math.max(0, Math.min(1, 1 - top / this.height));\n    this.updateSliderPosition(value);\n\n    this._onDidChange.fire(value);\n  };\n\n  Strip.prototype.updateSliderPosition = function (value) {\n    this.slider.style.top = (1 - value) * this.height + \"px\";\n  };\n\n  return Strip;\n}(Disposable);\n\nvar OpacityStrip =\n/** @class */\nfunction (_super) {\n  __extends(OpacityStrip, _super);\n\n  function OpacityStrip(container, model) {\n    var _this = _super.call(this, container, model) || this;\n\n    dom.addClass(_this.domNode, 'opacity-strip');\n\n    _this._register(model.onDidChangeColor(_this.onDidChangeColor, _this));\n\n    _this.onDidChangeColor(_this.model.color);\n\n    return _this;\n  }\n\n  OpacityStrip.prototype.onDidChangeColor = function (color) {\n    var _a = color.rgba,\n        r = _a.r,\n        g = _a.g,\n        b = _a.b;\n    var opaque = new Color(new RGBA(r, g, b, 1));\n    var transparent = new Color(new RGBA(r, g, b, 0));\n    this.overlay.style.background = \"linear-gradient(to bottom, \" + opaque + \" 0%, \" + transparent + \" 100%)\";\n  };\n\n  OpacityStrip.prototype.getValue = function (color) {\n    return color.hsva.a;\n  };\n\n  return OpacityStrip;\n}(Strip);\n\nvar HueStrip =\n/** @class */\nfunction (_super) {\n  __extends(HueStrip, _super);\n\n  function HueStrip(container, model) {\n    var _this = _super.call(this, container, model) || this;\n\n    dom.addClass(_this.domNode, 'hue-strip');\n    return _this;\n  }\n\n  HueStrip.prototype.getValue = function (color) {\n    return 1 - color.hsva.h / 360;\n  };\n\n  return HueStrip;\n}(Strip);\n\nvar ColorPickerWidget =\n/** @class */\nfunction (_super) {\n  __extends(ColorPickerWidget, _super);\n\n  function ColorPickerWidget(container, model, pixelRatio, themeService) {\n    var _this = _super.call(this) || this;\n\n    _this.model = model;\n    _this.pixelRatio = pixelRatio;\n\n    _this._register(onDidChangeZoomLevel(function () {\n      return _this.layout();\n    }));\n\n    var element = $('.colorpicker-widget');\n    container.appendChild(element);\n    var header = new ColorPickerHeader(element, _this.model, themeService);\n    _this.body = new ColorPickerBody(element, _this.model, _this.pixelRatio);\n\n    _this._register(header);\n\n    _this._register(_this.body);\n\n    return _this;\n  }\n\n  ColorPickerWidget.prototype.layout = function () {\n    this.body.layout();\n  };\n\n  return ColorPickerWidget;\n}(Widget);\n\nexport { ColorPickerWidget };","map":null,"metadata":{},"sourceType":"module"}