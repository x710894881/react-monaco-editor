{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\nimport { Selection } from '../core/selection.js';\nimport { TextModel } from '../model/textModel.js';\nimport { LanguageConfigurationRegistry } from '../modes/languageConfigurationRegistry.js';\n\nvar autoCloseAlways = function () {\n  return true;\n};\n\nvar autoCloseNever = function () {\n  return false;\n};\n\nvar autoCloseBeforeWhitespace = function (chr) {\n  return chr === ' ' || chr === '\\t';\n};\n\nfunction appendEntry(target, key, value) {\n  if (target.has(key)) {\n    target.get(key).push(value);\n  } else {\n    target.set(key, [value]);\n  }\n}\n\nvar CursorConfiguration =\n/** @class */\nfunction () {\n  function CursorConfiguration(languageIdentifier, modelOptions, configuration) {\n    this._languageIdentifier = languageIdentifier;\n    var c = configuration.editor;\n    this.readOnly = c.readOnly;\n    this.tabSize = modelOptions.tabSize;\n    this.indentSize = modelOptions.indentSize;\n    this.insertSpaces = modelOptions.insertSpaces;\n    this.pageSize = Math.max(1, Math.floor(c.layoutInfo.height / c.fontInfo.lineHeight) - 2);\n    this.lineHeight = c.lineHeight;\n    this.useTabStops = c.useTabStops;\n    this.wordSeparators = c.wordSeparators;\n    this.emptySelectionClipboard = c.emptySelectionClipboard;\n    this.copyWithSyntaxHighlighting = c.copyWithSyntaxHighlighting;\n    this.multiCursorMergeOverlapping = c.multiCursorMergeOverlapping;\n    this.autoClosingBrackets = c.autoClosingBrackets;\n    this.autoClosingQuotes = c.autoClosingQuotes;\n    this.autoClosingOvertype = c.autoClosingOvertype;\n    this.autoSurround = c.autoSurround;\n    this.autoIndent = c.autoIndent;\n    this.autoClosingPairsOpen2 = new Map();\n    this.autoClosingPairsClose2 = new Map();\n    this.surroundingPairs = {};\n    this._electricChars = null;\n    this.shouldAutoCloseBefore = {\n      quote: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingQuotes),\n      bracket: CursorConfiguration._getShouldAutoClose(languageIdentifier, this.autoClosingBrackets)\n    };\n\n    var autoClosingPairs = CursorConfiguration._getAutoClosingPairs(languageIdentifier);\n\n    if (autoClosingPairs) {\n      for (var _i = 0, autoClosingPairs_1 = autoClosingPairs; _i < autoClosingPairs_1.length; _i++) {\n        var pair = autoClosingPairs_1[_i];\n        appendEntry(this.autoClosingPairsOpen2, pair.open.charAt(pair.open.length - 1), pair);\n\n        if (pair.close.length === 1) {\n          appendEntry(this.autoClosingPairsClose2, pair.close, pair);\n        }\n      }\n    }\n\n    var surroundingPairs = CursorConfiguration._getSurroundingPairs(languageIdentifier);\n\n    if (surroundingPairs) {\n      for (var _a = 0, surroundingPairs_1 = surroundingPairs; _a < surroundingPairs_1.length; _a++) {\n        var pair = surroundingPairs_1[_a];\n        this.surroundingPairs[pair.open] = pair.close;\n      }\n    }\n  }\n\n  CursorConfiguration.shouldRecreate = function (e) {\n    return e.layoutInfo || e.wordSeparators || e.emptySelectionClipboard || e.multiCursorMergeOverlapping || e.autoClosingBrackets || e.autoClosingQuotes || e.autoClosingOvertype || e.autoSurround || e.useTabStops || e.lineHeight || e.readOnly;\n  };\n\n  Object.defineProperty(CursorConfiguration.prototype, \"electricChars\", {\n    get: function () {\n      if (!this._electricChars) {\n        this._electricChars = {};\n\n        var electricChars = CursorConfiguration._getElectricCharacters(this._languageIdentifier);\n\n        if (electricChars) {\n          for (var _i = 0, electricChars_1 = electricChars; _i < electricChars_1.length; _i++) {\n            var char = electricChars_1[_i];\n            this._electricChars[char] = true;\n          }\n        }\n      }\n\n      return this._electricChars;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CursorConfiguration.prototype.normalizeIndentation = function (str) {\n    return TextModel.normalizeIndentation(str, this.indentSize, this.insertSpaces);\n  };\n\n  CursorConfiguration._getElectricCharacters = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getElectricCharacters(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n\n  CursorConfiguration._getAutoClosingPairs = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getAutoClosingPairs(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n\n  CursorConfiguration._getShouldAutoClose = function (languageIdentifier, autoCloseConfig) {\n    switch (autoCloseConfig) {\n      case 'beforeWhitespace':\n        return autoCloseBeforeWhitespace;\n\n      case 'languageDefined':\n        return CursorConfiguration._getLanguageDefinedShouldAutoClose(languageIdentifier);\n\n      case 'always':\n        return autoCloseAlways;\n\n      case 'never':\n        return autoCloseNever;\n    }\n  };\n\n  CursorConfiguration._getLanguageDefinedShouldAutoClose = function (languageIdentifier) {\n    try {\n      var autoCloseBeforeSet_1 = LanguageConfigurationRegistry.getAutoCloseBeforeSet(languageIdentifier.id);\n      return function (c) {\n        return autoCloseBeforeSet_1.indexOf(c) !== -1;\n      };\n    } catch (e) {\n      onUnexpectedError(e);\n      return autoCloseNever;\n    }\n  };\n\n  CursorConfiguration._getSurroundingPairs = function (languageIdentifier) {\n    try {\n      return LanguageConfigurationRegistry.getSurroundingPairs(languageIdentifier.id);\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n\n  return CursorConfiguration;\n}();\n\nexport { CursorConfiguration };\n/**\n * Represents the cursor state on either the model or on the view model.\n */\n\nvar SingleCursorState =\n/** @class */\nfunction () {\n  function SingleCursorState(selectionStart, selectionStartLeftoverVisibleColumns, position, leftoverVisibleColumns) {\n    this.selectionStart = selectionStart;\n    this.selectionStartLeftoverVisibleColumns = selectionStartLeftoverVisibleColumns;\n    this.position = position;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n    this.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n  }\n\n  SingleCursorState.prototype.equals = function (other) {\n    return this.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns && this.leftoverVisibleColumns === other.leftoverVisibleColumns && this.position.equals(other.position) && this.selectionStart.equalsRange(other.selectionStart);\n  };\n\n  SingleCursorState.prototype.hasSelection = function () {\n    return !this.selection.isEmpty() || !this.selectionStart.isEmpty();\n  };\n\n  SingleCursorState.prototype.move = function (inSelectionMode, lineNumber, column, leftoverVisibleColumns) {\n    if (inSelectionMode) {\n      // move just position\n      return new SingleCursorState(this.selectionStart, this.selectionStartLeftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    } else {\n      // move everything\n      return new SingleCursorState(new Range(lineNumber, column, lineNumber, column), leftoverVisibleColumns, new Position(lineNumber, column), leftoverVisibleColumns);\n    }\n  };\n\n  SingleCursorState._computeSelection = function (selectionStart, position) {\n    var startLineNumber, startColumn, endLineNumber, endColumn;\n\n    if (selectionStart.isEmpty()) {\n      startLineNumber = selectionStart.startLineNumber;\n      startColumn = selectionStart.startColumn;\n      endLineNumber = position.lineNumber;\n      endColumn = position.column;\n    } else {\n      if (position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n        startLineNumber = selectionStart.endLineNumber;\n        startColumn = selectionStart.endColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      } else {\n        startLineNumber = selectionStart.startLineNumber;\n        startColumn = selectionStart.startColumn;\n        endLineNumber = position.lineNumber;\n        endColumn = position.column;\n      }\n    }\n\n    return new Selection(startLineNumber, startColumn, endLineNumber, endColumn);\n  };\n\n  return SingleCursorState;\n}();\n\nexport { SingleCursorState };\n\nvar CursorContext =\n/** @class */\nfunction () {\n  function CursorContext(configuration, model, viewModel) {\n    this.model = model;\n    this.viewModel = viewModel;\n    this.config = new CursorConfiguration(this.model.getLanguageIdentifier(), this.model.getOptions(), configuration);\n  }\n\n  CursorContext.prototype.validateViewPosition = function (viewPosition, modelPosition) {\n    return this.viewModel.coordinatesConverter.validateViewPosition(viewPosition, modelPosition);\n  };\n\n  CursorContext.prototype.validateViewRange = function (viewRange, expectedModelRange) {\n    return this.viewModel.coordinatesConverter.validateViewRange(viewRange, expectedModelRange);\n  };\n\n  CursorContext.prototype.convertViewRangeToModelRange = function (viewRange) {\n    return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n  };\n\n  CursorContext.prototype.convertViewPositionToModelPosition = function (lineNumber, column) {\n    return this.viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(lineNumber, column));\n  };\n\n  CursorContext.prototype.convertModelPositionToViewPosition = function (modelPosition) {\n    return this.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n  };\n\n  CursorContext.prototype.convertModelRangeToViewRange = function (modelRange) {\n    return this.viewModel.coordinatesConverter.convertModelRangeToViewRange(modelRange);\n  };\n\n  CursorContext.prototype.getCurrentScrollTop = function () {\n    return this.viewModel.viewLayout.getCurrentScrollTop();\n  };\n\n  CursorContext.prototype.getCompletelyVisibleViewRange = function () {\n    return this.viewModel.getCompletelyVisibleViewRange();\n  };\n\n  CursorContext.prototype.getCompletelyVisibleModelRange = function () {\n    var viewRange = this.viewModel.getCompletelyVisibleViewRange();\n    return this.viewModel.coordinatesConverter.convertViewRangeToModelRange(viewRange);\n  };\n\n  CursorContext.prototype.getCompletelyVisibleViewRangeAtScrollTop = function (scrollTop) {\n    return this.viewModel.getCompletelyVisibleViewRangeAtScrollTop(scrollTop);\n  };\n\n  CursorContext.prototype.getVerticalOffsetForViewLine = function (viewLineNumber) {\n    return this.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewLineNumber);\n  };\n\n  return CursorContext;\n}();\n\nexport { CursorContext };\n\nvar PartialModelCursorState =\n/** @class */\nfunction () {\n  function PartialModelCursorState(modelState) {\n    this.modelState = modelState;\n    this.viewState = null;\n  }\n\n  return PartialModelCursorState;\n}();\n\nexport { PartialModelCursorState };\n\nvar PartialViewCursorState =\n/** @class */\nfunction () {\n  function PartialViewCursorState(viewState) {\n    this.modelState = null;\n    this.viewState = viewState;\n  }\n\n  return PartialViewCursorState;\n}();\n\nexport { PartialViewCursorState };\n\nvar CursorState =\n/** @class */\nfunction () {\n  function CursorState(modelState, viewState) {\n    this.modelState = modelState;\n    this.viewState = viewState;\n  }\n\n  CursorState.fromModelState = function (modelState) {\n    return new PartialModelCursorState(modelState);\n  };\n\n  CursorState.fromViewState = function (viewState) {\n    return new PartialViewCursorState(viewState);\n  };\n\n  CursorState.fromModelSelection = function (modelSelection) {\n    var selectionStartLineNumber = modelSelection.selectionStartLineNumber;\n    var selectionStartColumn = modelSelection.selectionStartColumn;\n    var positionLineNumber = modelSelection.positionLineNumber;\n    var positionColumn = modelSelection.positionColumn;\n    var modelState = new SingleCursorState(new Range(selectionStartLineNumber, selectionStartColumn, selectionStartLineNumber, selectionStartColumn), 0, new Position(positionLineNumber, positionColumn), 0);\n    return CursorState.fromModelState(modelState);\n  };\n\n  CursorState.fromModelSelections = function (modelSelections) {\n    var states = [];\n\n    for (var i = 0, len = modelSelections.length; i < len; i++) {\n      states[i] = this.fromModelSelection(modelSelections[i]);\n    }\n\n    return states;\n  };\n\n  CursorState.prototype.equals = function (other) {\n    return this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState);\n  };\n\n  return CursorState;\n}();\n\nexport { CursorState };\n\nvar EditOperationResult =\n/** @class */\nfunction () {\n  function EditOperationResult(type, commands, opts) {\n    this.type = type;\n    this.commands = commands;\n    this.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n    this.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n  }\n\n  return EditOperationResult;\n}();\n\nexport { EditOperationResult };\n/**\n * Common operations that work and make sense both on the model and on the view model.\n */\n\nvar CursorColumns =\n/** @class */\nfunction () {\n  function CursorColumns() {}\n\n  CursorColumns.isLowSurrogate = function (model, lineNumber, charOffset) {\n    var lineContent = model.getLineContent(lineNumber);\n\n    if (charOffset < 0 || charOffset >= lineContent.length) {\n      return false;\n    }\n\n    return strings.isLowSurrogate(lineContent.charCodeAt(charOffset));\n  };\n\n  CursorColumns.isHighSurrogate = function (model, lineNumber, charOffset) {\n    var lineContent = model.getLineContent(lineNumber);\n\n    if (charOffset < 0 || charOffset >= lineContent.length) {\n      return false;\n    }\n\n    return strings.isHighSurrogate(lineContent.charCodeAt(charOffset));\n  };\n\n  CursorColumns.isInsideSurrogatePair = function (model, lineNumber, column) {\n    return this.isHighSurrogate(model, lineNumber, column - 2);\n  };\n\n  CursorColumns.visibleColumnFromColumn = function (lineContent, column, tabSize) {\n    var endOffset = lineContent.length;\n\n    if (endOffset > column - 1) {\n      endOffset = column - 1;\n    }\n\n    var result = 0;\n\n    for (var i = 0; i < endOffset; i++) {\n      var charCode = lineContent.charCodeAt(i);\n\n      if (charCode === 9\n      /* Tab */\n      ) {\n          result = this.nextRenderTabStop(result, tabSize);\n        } else if (strings.isFullWidthCharacter(charCode)) {\n        result = result + 2;\n      } else {\n        result = result + 1;\n      }\n    }\n\n    return result;\n  };\n\n  CursorColumns.visibleColumnFromColumn2 = function (config, model, position) {\n    return this.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, config.tabSize);\n  };\n\n  CursorColumns.columnFromVisibleColumn = function (lineContent, visibleColumn, tabSize) {\n    if (visibleColumn <= 0) {\n      return 1;\n    }\n\n    var lineLength = lineContent.length;\n    var beforeVisibleColumn = 0;\n\n    for (var i = 0; i < lineLength; i++) {\n      var charCode = lineContent.charCodeAt(i);\n      var afterVisibleColumn = void 0;\n\n      if (charCode === 9\n      /* Tab */\n      ) {\n          afterVisibleColumn = this.nextRenderTabStop(beforeVisibleColumn, tabSize);\n        } else if (strings.isFullWidthCharacter(charCode)) {\n        afterVisibleColumn = beforeVisibleColumn + 2;\n      } else {\n        afterVisibleColumn = beforeVisibleColumn + 1;\n      }\n\n      if (afterVisibleColumn >= visibleColumn) {\n        var prevDelta = visibleColumn - beforeVisibleColumn;\n        var afterDelta = afterVisibleColumn - visibleColumn;\n\n        if (afterDelta < prevDelta) {\n          return i + 2;\n        } else {\n          return i + 1;\n        }\n      }\n\n      beforeVisibleColumn = afterVisibleColumn;\n    } // walked the entire string\n\n\n    return lineLength + 1;\n  };\n\n  CursorColumns.columnFromVisibleColumn2 = function (config, model, lineNumber, visibleColumn) {\n    var result = this.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, config.tabSize);\n    var minColumn = model.getLineMinColumn(lineNumber);\n\n    if (result < minColumn) {\n      return minColumn;\n    }\n\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n\n    if (result > maxColumn) {\n      return maxColumn;\n    }\n\n    return result;\n  };\n  /**\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n   */\n\n\n  CursorColumns.nextRenderTabStop = function (visibleColumn, tabSize) {\n    return visibleColumn + tabSize - visibleColumn % tabSize;\n  };\n  /**\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n   */\n\n\n  CursorColumns.nextIndentTabStop = function (visibleColumn, indentSize) {\n    return visibleColumn + indentSize - visibleColumn % indentSize;\n  };\n  /**\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n   */\n\n\n  CursorColumns.prevRenderTabStop = function (column, tabSize) {\n    return column - 1 - (column - 1) % tabSize;\n  };\n  /**\n   * ATTENTION: This works with 0-based columns (as oposed to the regular 1-based columns)\n   */\n\n\n  CursorColumns.prevIndentTabStop = function (column, indentSize) {\n    return column - 1 - (column - 1) % indentSize;\n  };\n\n  return CursorColumns;\n}();\n\nexport { CursorColumns };\nexport function isQuote(ch) {\n  return ch === '\\'' || ch === '\"' || ch === '`';\n}","map":null,"metadata":{},"sourceType":"module"}