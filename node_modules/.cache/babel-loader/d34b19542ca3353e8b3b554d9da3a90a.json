{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../common/core/range.js';\nimport { OverviewRulerLane, MinimapPosition } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { overviewRulerFindMatchForeground, minimapFindMatch } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\n\nvar FindDecorations =\n/** @class */\nfunction () {\n  function FindDecorations(editor) {\n    this._editor = editor;\n    this._decorations = [];\n    this._overviewRulerApproximateDecorations = [];\n    this._findScopeDecorationId = null;\n    this._rangeHighlightDecorationId = null;\n    this._highlightedDecorationId = null;\n    this._startPosition = this._editor.getPosition();\n  }\n\n  FindDecorations.prototype.dispose = function () {\n    this._editor.deltaDecorations(this._allDecorations(), []);\n\n    this._decorations = [];\n    this._overviewRulerApproximateDecorations = [];\n    this._findScopeDecorationId = null;\n    this._rangeHighlightDecorationId = null;\n    this._highlightedDecorationId = null;\n  };\n\n  FindDecorations.prototype.reset = function () {\n    this._decorations = [];\n    this._overviewRulerApproximateDecorations = [];\n    this._findScopeDecorationId = null;\n    this._rangeHighlightDecorationId = null;\n    this._highlightedDecorationId = null;\n  };\n\n  FindDecorations.prototype.getCount = function () {\n    return this._decorations.length;\n  };\n\n  FindDecorations.prototype.getFindScope = function () {\n    if (this._findScopeDecorationId) {\n      return this._editor.getModel().getDecorationRange(this._findScopeDecorationId);\n    }\n\n    return null;\n  };\n\n  FindDecorations.prototype.getStartPosition = function () {\n    return this._startPosition;\n  };\n\n  FindDecorations.prototype.setStartPosition = function (newStartPosition) {\n    this._startPosition = newStartPosition;\n    this.setCurrentFindMatch(null);\n  };\n\n  FindDecorations.prototype._getDecorationIndex = function (decorationId) {\n    var index = this._decorations.indexOf(decorationId);\n\n    if (index >= 0) {\n      return index + 1;\n    }\n\n    return 1;\n  };\n\n  FindDecorations.prototype.getCurrentMatchesPosition = function (desiredRange) {\n    var candidates = this._editor.getModel().getDecorationsInRange(desiredRange);\n\n    for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n      var candidate = candidates_1[_i];\n      var candidateOpts = candidate.options;\n\n      if (candidateOpts === FindDecorations._FIND_MATCH_DECORATION || candidateOpts === FindDecorations._CURRENT_FIND_MATCH_DECORATION) {\n        return this._getDecorationIndex(candidate.id);\n      }\n    }\n\n    return 1;\n  };\n\n  FindDecorations.prototype.setCurrentFindMatch = function (nextMatch) {\n    var _this = this;\n\n    var newCurrentDecorationId = null;\n    var matchPosition = 0;\n\n    if (nextMatch) {\n      for (var i = 0, len = this._decorations.length; i < len; i++) {\n        var range = this._editor.getModel().getDecorationRange(this._decorations[i]);\n\n        if (nextMatch.equalsRange(range)) {\n          newCurrentDecorationId = this._decorations[i];\n          matchPosition = i + 1;\n          break;\n        }\n      }\n    }\n\n    if (this._highlightedDecorationId !== null || newCurrentDecorationId !== null) {\n      this._editor.changeDecorations(function (changeAccessor) {\n        if (_this._highlightedDecorationId !== null) {\n          changeAccessor.changeDecorationOptions(_this._highlightedDecorationId, FindDecorations._FIND_MATCH_DECORATION);\n          _this._highlightedDecorationId = null;\n        }\n\n        if (newCurrentDecorationId !== null) {\n          _this._highlightedDecorationId = newCurrentDecorationId;\n          changeAccessor.changeDecorationOptions(_this._highlightedDecorationId, FindDecorations._CURRENT_FIND_MATCH_DECORATION);\n        }\n\n        if (_this._rangeHighlightDecorationId !== null) {\n          changeAccessor.removeDecoration(_this._rangeHighlightDecorationId);\n          _this._rangeHighlightDecorationId = null;\n        }\n\n        if (newCurrentDecorationId !== null) {\n          var rng = _this._editor.getModel().getDecorationRange(newCurrentDecorationId);\n\n          if (rng.startLineNumber !== rng.endLineNumber && rng.endColumn === 1) {\n            var lineBeforeEnd = rng.endLineNumber - 1;\n\n            var lineBeforeEndMaxColumn = _this._editor.getModel().getLineMaxColumn(lineBeforeEnd);\n\n            rng = new Range(rng.startLineNumber, rng.startColumn, lineBeforeEnd, lineBeforeEndMaxColumn);\n          }\n\n          _this._rangeHighlightDecorationId = changeAccessor.addDecoration(rng, FindDecorations._RANGE_HIGHLIGHT_DECORATION);\n        }\n      });\n    }\n\n    return matchPosition;\n  };\n\n  FindDecorations.prototype.set = function (findMatches, findScope) {\n    var _this = this;\n\n    this._editor.changeDecorations(function (accessor) {\n      var findMatchesOptions = FindDecorations._FIND_MATCH_DECORATION;\n      var newOverviewRulerApproximateDecorations = [];\n\n      if (findMatches.length > 1000) {\n        // we go into a mode where the overview ruler gets \"approximate\" decorations\n        // the reason is that the overview ruler paints all the decorations in the file and we don't want to cause freezes\n        findMatchesOptions = FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION; // approximate a distance in lines where matches should be merged\n\n        var lineCount = _this._editor.getModel().getLineCount();\n\n        var height = _this._editor.getLayoutInfo().height;\n\n        var approxPixelsPerLine = height / lineCount;\n        var mergeLinesDelta = Math.max(2, Math.ceil(3 / approxPixelsPerLine)); // merge decorations as much as possible\n\n        var prevStartLineNumber = findMatches[0].range.startLineNumber;\n        var prevEndLineNumber = findMatches[0].range.endLineNumber;\n\n        for (var i = 1, len = findMatches.length; i < len; i++) {\n          var range = findMatches[i].range;\n\n          if (prevEndLineNumber + mergeLinesDelta >= range.startLineNumber) {\n            if (range.endLineNumber > prevEndLineNumber) {\n              prevEndLineNumber = range.endLineNumber;\n            }\n          } else {\n            newOverviewRulerApproximateDecorations.push({\n              range: new Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\n              options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\n            });\n            prevStartLineNumber = range.startLineNumber;\n            prevEndLineNumber = range.endLineNumber;\n          }\n        }\n\n        newOverviewRulerApproximateDecorations.push({\n          range: new Range(prevStartLineNumber, 1, prevEndLineNumber, 1),\n          options: FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION\n        });\n      } // Find matches\n\n\n      var newFindMatchesDecorations = new Array(findMatches.length);\n\n      for (var i = 0, len = findMatches.length; i < len; i++) {\n        newFindMatchesDecorations[i] = {\n          range: findMatches[i].range,\n          options: findMatchesOptions\n        };\n      }\n\n      _this._decorations = accessor.deltaDecorations(_this._decorations, newFindMatchesDecorations); // Overview ruler approximate decorations\n\n      _this._overviewRulerApproximateDecorations = accessor.deltaDecorations(_this._overviewRulerApproximateDecorations, newOverviewRulerApproximateDecorations); // Range highlight\n\n      if (_this._rangeHighlightDecorationId) {\n        accessor.removeDecoration(_this._rangeHighlightDecorationId);\n        _this._rangeHighlightDecorationId = null;\n      } // Find scope\n\n\n      if (_this._findScopeDecorationId) {\n        accessor.removeDecoration(_this._findScopeDecorationId);\n        _this._findScopeDecorationId = null;\n      }\n\n      if (findScope) {\n        _this._findScopeDecorationId = accessor.addDecoration(findScope, FindDecorations._FIND_SCOPE_DECORATION);\n      }\n    });\n  };\n\n  FindDecorations.prototype.matchBeforePosition = function (position) {\n    if (this._decorations.length === 0) {\n      return null;\n    }\n\n    for (var i = this._decorations.length - 1; i >= 0; i--) {\n      var decorationId = this._decorations[i];\n\n      var r = this._editor.getModel().getDecorationRange(decorationId);\n\n      if (!r || r.endLineNumber > position.lineNumber) {\n        continue;\n      }\n\n      if (r.endLineNumber < position.lineNumber) {\n        return r;\n      }\n\n      if (r.endColumn > position.column) {\n        continue;\n      }\n\n      return r;\n    }\n\n    return this._editor.getModel().getDecorationRange(this._decorations[this._decorations.length - 1]);\n  };\n\n  FindDecorations.prototype.matchAfterPosition = function (position) {\n    if (this._decorations.length === 0) {\n      return null;\n    }\n\n    for (var i = 0, len = this._decorations.length; i < len; i++) {\n      var decorationId = this._decorations[i];\n\n      var r = this._editor.getModel().getDecorationRange(decorationId);\n\n      if (!r || r.startLineNumber < position.lineNumber) {\n        continue;\n      }\n\n      if (r.startLineNumber > position.lineNumber) {\n        return r;\n      }\n\n      if (r.startColumn < position.column) {\n        continue;\n      }\n\n      return r;\n    }\n\n    return this._editor.getModel().getDecorationRange(this._decorations[0]);\n  };\n\n  FindDecorations.prototype._allDecorations = function () {\n    var result = [];\n    result = result.concat(this._decorations);\n    result = result.concat(this._overviewRulerApproximateDecorations);\n\n    if (this._findScopeDecorationId) {\n      result.push(this._findScopeDecorationId);\n    }\n\n    if (this._rangeHighlightDecorationId) {\n      result.push(this._rangeHighlightDecorationId);\n    }\n\n    return result;\n  };\n\n  FindDecorations._CURRENT_FIND_MATCH_DECORATION = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    zIndex: 13,\n    className: 'currentFindMatch',\n    showIfCollapsed: true,\n    overviewRuler: {\n      color: themeColorFromId(overviewRulerFindMatchForeground),\n      position: OverviewRulerLane.Center\n    },\n    minimap: {\n      color: themeColorFromId(minimapFindMatch),\n      position: MinimapPosition.Inline\n    }\n  });\n  FindDecorations._FIND_MATCH_DECORATION = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'findMatch',\n    showIfCollapsed: true,\n    overviewRuler: {\n      color: themeColorFromId(overviewRulerFindMatchForeground),\n      position: OverviewRulerLane.Center\n    },\n    minimap: {\n      color: themeColorFromId(minimapFindMatch),\n      position: MinimapPosition.Inline\n    }\n  });\n  FindDecorations._FIND_MATCH_NO_OVERVIEW_DECORATION = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'findMatch',\n    showIfCollapsed: true\n  });\n  FindDecorations._FIND_MATCH_ONLY_OVERVIEW_DECORATION = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    overviewRuler: {\n      color: themeColorFromId(overviewRulerFindMatchForeground),\n      position: OverviewRulerLane.Center\n    }\n  });\n  FindDecorations._RANGE_HIGHLIGHT_DECORATION = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'rangeHighlight',\n    isWholeLine: true\n  });\n  FindDecorations._FIND_SCOPE_DECORATION = ModelDecorationOptions.register({\n    className: 'findScope',\n    isWholeLine: true\n  });\n  return FindDecorations;\n}();\n\nexport { FindDecorations };","map":null,"metadata":{},"sourceType":"module"}