{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { WhitespaceComputer } from './whitespaceComputer.js';\n/**\n * Layouting of objects that take vertical space (by having a height) and push down other objects.\n *\n * These objects are basically either text (lines) or spaces between those lines (whitespaces).\n * This provides commodity operations for working with lines that contain whitespace that pushes lines lower (vertically).\n * This is written with no knowledge of an editor in mind.\n */\n\nvar LinesLayout =\n/** @class */\nfunction () {\n  function LinesLayout(lineCount, lineHeight) {\n    this._lineCount = lineCount;\n    this._lineHeight = lineHeight;\n    this._whitespaces = new WhitespaceComputer();\n  }\n  /**\n   * Change the height of a line in pixels.\n   */\n\n\n  LinesLayout.prototype.setLineHeight = function (lineHeight) {\n    this._lineHeight = lineHeight;\n  };\n  /**\n   * Set the number of lines.\n   *\n   * @param lineCount New number of lines.\n   */\n\n\n  LinesLayout.prototype.onFlushed = function (lineCount) {\n    this._lineCount = lineCount;\n  };\n  /**\n   * Insert a new whitespace of a certain height after a line number.\n   * The whitespace has a \"sticky\" characteristic.\n   * Irrespective of edits above or below `afterLineNumber`, the whitespace will follow the initial line.\n   *\n   * @param afterLineNumber The conceptual position of this whitespace. The whitespace will follow this line as best as possible even when deleting/inserting lines above/below.\n   * @param heightInPx The height of the whitespace, in pixels.\n   * @return An id that can be used later to mutate or delete the whitespace\n   */\n\n\n  LinesLayout.prototype.insertWhitespace = function (afterLineNumber, ordinal, heightInPx, minWidth) {\n    return this._whitespaces.insertWhitespace(afterLineNumber, ordinal, heightInPx, minWidth);\n  };\n  /**\n   * Change properties associated with a certain whitespace.\n   */\n\n\n  LinesLayout.prototype.changeWhitespace = function (id, newAfterLineNumber, newHeight) {\n    return this._whitespaces.changeWhitespace(id, newAfterLineNumber, newHeight);\n  };\n  /**\n   * Remove an existing whitespace.\n   *\n   * @param id The whitespace to remove\n   * @return Returns true if the whitespace is found and it is removed.\n   */\n\n\n  LinesLayout.prototype.removeWhitespace = function (id) {\n    return this._whitespaces.removeWhitespace(id);\n  };\n  /**\n   * Notify the layouter that lines have been deleted (a continuous zone of lines).\n   *\n   * @param fromLineNumber The line number at which the deletion started, inclusive\n   * @param toLineNumber The line number at which the deletion ended, inclusive\n   */\n\n\n  LinesLayout.prototype.onLinesDeleted = function (fromLineNumber, toLineNumber) {\n    this._lineCount -= toLineNumber - fromLineNumber + 1;\n\n    this._whitespaces.onLinesDeleted(fromLineNumber, toLineNumber);\n  };\n  /**\n   * Notify the layouter that lines have been inserted (a continuous zone of lines).\n   *\n   * @param fromLineNumber The line number at which the insertion started, inclusive\n   * @param toLineNumber The line number at which the insertion ended, inclusive.\n   */\n\n\n  LinesLayout.prototype.onLinesInserted = function (fromLineNumber, toLineNumber) {\n    this._lineCount += toLineNumber - fromLineNumber + 1;\n\n    this._whitespaces.onLinesInserted(fromLineNumber, toLineNumber);\n  };\n  /**\n   * Get the sum of heights for all objects.\n   *\n   * @return The sum of heights for all objects.\n   */\n\n\n  LinesLayout.prototype.getLinesTotalHeight = function () {\n    var linesHeight = this._lineHeight * this._lineCount;\n\n    var whitespacesHeight = this._whitespaces.getTotalHeight();\n\n    return linesHeight + whitespacesHeight;\n  };\n  /**\n   * Get the vertical offset (the sum of heights for all objects above) a certain line number.\n   *\n   * @param lineNumber The line number\n   * @return The sum of heights for all objects above `lineNumber`.\n   */\n\n\n  LinesLayout.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n    lineNumber = lineNumber | 0;\n    var previousLinesHeight;\n\n    if (lineNumber > 1) {\n      previousLinesHeight = this._lineHeight * (lineNumber - 1);\n    } else {\n      previousLinesHeight = 0;\n    }\n\n    var previousWhitespacesHeight = this._whitespaces.getAccumulatedHeightBeforeLineNumber(lineNumber);\n\n    return previousLinesHeight + previousWhitespacesHeight;\n  };\n  /**\n   * Returns the accumulated height of whitespaces before the given line number.\n   *\n   * @param lineNumber The line number\n   */\n\n\n  LinesLayout.prototype.getWhitespaceAccumulatedHeightBeforeLineNumber = function (lineNumber) {\n    return this._whitespaces.getAccumulatedHeightBeforeLineNumber(lineNumber);\n  };\n\n  LinesLayout.prototype.getWhitespaceMinWidth = function () {\n    return this._whitespaces.getMinWidth();\n  };\n  /**\n   * Check if `verticalOffset` is below all lines.\n   */\n\n\n  LinesLayout.prototype.isAfterLines = function (verticalOffset) {\n    var totalHeight = this.getLinesTotalHeight();\n    return verticalOffset > totalHeight;\n  };\n  /**\n   * Find the first line number that is at or after vertical offset `verticalOffset`.\n   * i.e. if getVerticalOffsetForLine(line) is x and getVerticalOffsetForLine(line + 1) is y, then\n   * getLineNumberAtOrAfterVerticalOffset(i) = line, x <= i < y.\n   *\n   * @param verticalOffset The vertical offset to search at.\n   * @return The line number at or after vertical offset `verticalOffset`.\n   */\n\n\n  LinesLayout.prototype.getLineNumberAtOrAfterVerticalOffset = function (verticalOffset) {\n    verticalOffset = verticalOffset | 0;\n\n    if (verticalOffset < 0) {\n      return 1;\n    }\n\n    var linesCount = this._lineCount | 0;\n    var lineHeight = this._lineHeight;\n    var minLineNumber = 1;\n    var maxLineNumber = linesCount;\n\n    while (minLineNumber < maxLineNumber) {\n      var midLineNumber = (minLineNumber + maxLineNumber) / 2 | 0;\n      var midLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(midLineNumber) | 0;\n\n      if (verticalOffset >= midLineNumberVerticalOffset + lineHeight) {\n        // vertical offset is after mid line number\n        minLineNumber = midLineNumber + 1;\n      } else if (verticalOffset >= midLineNumberVerticalOffset) {\n        // Hit\n        return midLineNumber;\n      } else {\n        // vertical offset is before mid line number, but mid line number could still be what we're searching for\n        maxLineNumber = midLineNumber;\n      }\n    }\n\n    if (minLineNumber > linesCount) {\n      return linesCount;\n    }\n\n    return minLineNumber;\n  };\n  /**\n   * Get all the lines and their relative vertical offsets that are positioned between `verticalOffset1` and `verticalOffset2`.\n   *\n   * @param verticalOffset1 The beginning of the viewport.\n   * @param verticalOffset2 The end of the viewport.\n   * @return A structure describing the lines positioned between `verticalOffset1` and `verticalOffset2`.\n   */\n\n\n  LinesLayout.prototype.getLinesViewportData = function (verticalOffset1, verticalOffset2) {\n    verticalOffset1 = verticalOffset1 | 0;\n    verticalOffset2 = verticalOffset2 | 0;\n    var lineHeight = this._lineHeight; // Find first line number\n    // We don't live in a perfect world, so the line number might start before or after verticalOffset1\n\n    var startLineNumber = this.getLineNumberAtOrAfterVerticalOffset(verticalOffset1) | 0;\n    var startLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(startLineNumber) | 0;\n    var endLineNumber = this._lineCount | 0; // Also keep track of what whitespace we've got\n\n    var whitespaceIndex = this._whitespaces.getFirstWhitespaceIndexAfterLineNumber(startLineNumber) | 0;\n    var whitespaceCount = this._whitespaces.getCount() | 0;\n    var currentWhitespaceHeight;\n    var currentWhitespaceAfterLineNumber;\n\n    if (whitespaceIndex === -1) {\n      whitespaceIndex = whitespaceCount;\n      currentWhitespaceAfterLineNumber = endLineNumber + 1;\n      currentWhitespaceHeight = 0;\n    } else {\n      currentWhitespaceAfterLineNumber = this._whitespaces.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n      currentWhitespaceHeight = this._whitespaces.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n    }\n\n    var currentVerticalOffset = startLineNumberVerticalOffset;\n    var currentLineRelativeOffset = currentVerticalOffset; // IE (all versions) cannot handle units above about 1,533,908 px, so every 500k pixels bring numbers down\n\n    var STEP_SIZE = 500000;\n    var bigNumbersDelta = 0;\n\n    if (startLineNumberVerticalOffset >= STEP_SIZE) {\n      // Compute a delta that guarantees that lines are positioned at `lineHeight` increments\n      bigNumbersDelta = Math.floor(startLineNumberVerticalOffset / STEP_SIZE) * STEP_SIZE;\n      bigNumbersDelta = Math.floor(bigNumbersDelta / lineHeight) * lineHeight;\n      currentLineRelativeOffset -= bigNumbersDelta;\n    }\n\n    var linesOffsets = [];\n    var verticalCenter = verticalOffset1 + (verticalOffset2 - verticalOffset1) / 2;\n    var centeredLineNumber = -1; // Figure out how far the lines go\n\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      if (centeredLineNumber === -1) {\n        var currentLineTop = currentVerticalOffset;\n        var currentLineBottom = currentVerticalOffset + lineHeight;\n\n        if (currentLineTop <= verticalCenter && verticalCenter < currentLineBottom || currentLineTop > verticalCenter) {\n          centeredLineNumber = lineNumber;\n        }\n      } // Count current line height in the vertical offsets\n\n\n      currentVerticalOffset += lineHeight;\n      linesOffsets[lineNumber - startLineNumber] = currentLineRelativeOffset; // Next line starts immediately after this one\n\n      currentLineRelativeOffset += lineHeight;\n\n      while (currentWhitespaceAfterLineNumber === lineNumber) {\n        // Push down next line with the height of the current whitespace\n        currentLineRelativeOffset += currentWhitespaceHeight; // Count current whitespace in the vertical offsets\n\n        currentVerticalOffset += currentWhitespaceHeight;\n        whitespaceIndex++;\n\n        if (whitespaceIndex >= whitespaceCount) {\n          currentWhitespaceAfterLineNumber = endLineNumber + 1;\n        } else {\n          currentWhitespaceAfterLineNumber = this._whitespaces.getAfterLineNumberForWhitespaceIndex(whitespaceIndex) | 0;\n          currentWhitespaceHeight = this._whitespaces.getHeightForWhitespaceIndex(whitespaceIndex) | 0;\n        }\n      }\n\n      if (currentVerticalOffset >= verticalOffset2) {\n        // We have covered the entire viewport area, time to stop\n        endLineNumber = lineNumber;\n        break;\n      }\n    }\n\n    if (centeredLineNumber === -1) {\n      centeredLineNumber = endLineNumber;\n    }\n\n    var endLineNumberVerticalOffset = this.getVerticalOffsetForLineNumber(endLineNumber) | 0;\n    var completelyVisibleStartLineNumber = startLineNumber;\n    var completelyVisibleEndLineNumber = endLineNumber;\n\n    if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n      if (startLineNumberVerticalOffset < verticalOffset1) {\n        completelyVisibleStartLineNumber++;\n      }\n    }\n\n    if (completelyVisibleStartLineNumber < completelyVisibleEndLineNumber) {\n      if (endLineNumberVerticalOffset + lineHeight > verticalOffset2) {\n        completelyVisibleEndLineNumber--;\n      }\n    }\n\n    return {\n      bigNumbersDelta: bigNumbersDelta,\n      startLineNumber: startLineNumber,\n      endLineNumber: endLineNumber,\n      relativeVerticalOffset: linesOffsets,\n      centeredLineNumber: centeredLineNumber,\n      completelyVisibleStartLineNumber: completelyVisibleStartLineNumber,\n      completelyVisibleEndLineNumber: completelyVisibleEndLineNumber\n    };\n  };\n\n  LinesLayout.prototype.getVerticalOffsetForWhitespaceIndex = function (whitespaceIndex) {\n    whitespaceIndex = whitespaceIndex | 0;\n\n    var afterLineNumber = this._whitespaces.getAfterLineNumberForWhitespaceIndex(whitespaceIndex);\n\n    var previousLinesHeight;\n\n    if (afterLineNumber >= 1) {\n      previousLinesHeight = this._lineHeight * afterLineNumber;\n    } else {\n      previousLinesHeight = 0;\n    }\n\n    var previousWhitespacesHeight;\n\n    if (whitespaceIndex > 0) {\n      previousWhitespacesHeight = this._whitespaces.getAccumulatedHeight(whitespaceIndex - 1);\n    } else {\n      previousWhitespacesHeight = 0;\n    }\n\n    return previousLinesHeight + previousWhitespacesHeight;\n  };\n\n  LinesLayout.prototype.getWhitespaceIndexAtOrAfterVerticallOffset = function (verticalOffset) {\n    verticalOffset = verticalOffset | 0;\n    var midWhitespaceIndex,\n        minWhitespaceIndex = 0,\n        maxWhitespaceIndex = this._whitespaces.getCount() - 1,\n        midWhitespaceVerticalOffset,\n        midWhitespaceHeight;\n\n    if (maxWhitespaceIndex < 0) {\n      return -1;\n    } // Special case: nothing to be found\n\n\n    var maxWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(maxWhitespaceIndex);\n\n    var maxWhitespaceHeight = this._whitespaces.getHeightForWhitespaceIndex(maxWhitespaceIndex);\n\n    if (verticalOffset >= maxWhitespaceVerticalOffset + maxWhitespaceHeight) {\n      return -1;\n    }\n\n    while (minWhitespaceIndex < maxWhitespaceIndex) {\n      midWhitespaceIndex = Math.floor((minWhitespaceIndex + maxWhitespaceIndex) / 2);\n      midWhitespaceVerticalOffset = this.getVerticalOffsetForWhitespaceIndex(midWhitespaceIndex);\n      midWhitespaceHeight = this._whitespaces.getHeightForWhitespaceIndex(midWhitespaceIndex);\n\n      if (verticalOffset >= midWhitespaceVerticalOffset + midWhitespaceHeight) {\n        // vertical offset is after whitespace\n        minWhitespaceIndex = midWhitespaceIndex + 1;\n      } else if (verticalOffset >= midWhitespaceVerticalOffset) {\n        // Hit\n        return midWhitespaceIndex;\n      } else {\n        // vertical offset is before whitespace, but midWhitespaceIndex might still be what we're searching for\n        maxWhitespaceIndex = midWhitespaceIndex;\n      }\n    }\n\n    return minWhitespaceIndex;\n  };\n  /**\n   * Get exactly the whitespace that is layouted at `verticalOffset`.\n   *\n   * @param verticalOffset The vertical offset.\n   * @return Precisely the whitespace that is layouted at `verticaloffset` or null.\n   */\n\n\n  LinesLayout.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {\n    verticalOffset = verticalOffset | 0;\n    var candidateIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset);\n\n    if (candidateIndex < 0) {\n      return null;\n    }\n\n    if (candidateIndex >= this._whitespaces.getCount()) {\n      return null;\n    }\n\n    var candidateTop = this.getVerticalOffsetForWhitespaceIndex(candidateIndex);\n\n    if (candidateTop > verticalOffset) {\n      return null;\n    }\n\n    var candidateHeight = this._whitespaces.getHeightForWhitespaceIndex(candidateIndex);\n\n    var candidateId = this._whitespaces.getIdForWhitespaceIndex(candidateIndex);\n\n    var candidateAfterLineNumber = this._whitespaces.getAfterLineNumberForWhitespaceIndex(candidateIndex);\n\n    return {\n      id: candidateId,\n      afterLineNumber: candidateAfterLineNumber,\n      verticalOffset: candidateTop,\n      height: candidateHeight\n    };\n  };\n  /**\n   * Get a list of whitespaces that are positioned between `verticalOffset1` and `verticalOffset2`.\n   *\n   * @param verticalOffset1 The beginning of the viewport.\n   * @param verticalOffset2 The end of the viewport.\n   * @return An array with all the whitespaces in the viewport. If no whitespace is in viewport, the array is empty.\n   */\n\n\n  LinesLayout.prototype.getWhitespaceViewportData = function (verticalOffset1, verticalOffset2) {\n    verticalOffset1 = verticalOffset1 | 0;\n    verticalOffset2 = verticalOffset2 | 0;\n    var startIndex = this.getWhitespaceIndexAtOrAfterVerticallOffset(verticalOffset1);\n    var endIndex = this._whitespaces.getCount() - 1;\n\n    if (startIndex < 0) {\n      return [];\n    }\n\n    var result = [];\n\n    for (var i = startIndex; i <= endIndex; i++) {\n      var top_1 = this.getVerticalOffsetForWhitespaceIndex(i);\n\n      var height = this._whitespaces.getHeightForWhitespaceIndex(i);\n\n      if (top_1 >= verticalOffset2) {\n        break;\n      }\n\n      result.push({\n        id: this._whitespaces.getIdForWhitespaceIndex(i),\n        afterLineNumber: this._whitespaces.getAfterLineNumberForWhitespaceIndex(i),\n        verticalOffset: top_1,\n        height: height\n      });\n    }\n\n    return result;\n  };\n  /**\n   * Get all whitespaces.\n   */\n\n\n  LinesLayout.prototype.getWhitespaces = function () {\n    return this._whitespaces.getWhitespaces(this._lineHeight);\n  };\n\n  return LinesLayout;\n}();\n\nexport { LinesLayout };","map":null,"metadata":{},"sourceType":"module"}