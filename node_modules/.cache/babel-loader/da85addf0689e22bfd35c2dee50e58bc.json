{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport './media/editor.css';\nimport './media/tokens.css';\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, dispose } from '../../../base/common/lifecycle.js';\nimport { Schemas } from '../../../base/common/network.js';\nimport { Configuration } from '../config/configuration.js';\nimport { EditorExtensionsRegistry } from '../editorExtensions.js';\nimport { ICodeEditorService } from '../services/codeEditorService.js';\nimport { View } from '../view/viewImpl.js';\nimport { ViewOutgoingEvents } from '../view/viewOutgoingEvents.js';\nimport { Cursor } from '../../common/controller/cursor.js';\nimport { CursorColumns } from '../../common/controller/cursorCommon.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { InternalEditorAction } from '../../common/editorAction.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport * as modes from '../../common/modes.js';\nimport { editorUnnecessaryCodeBorder, editorUnnecessaryCodeOpacity } from '../../common/view/editorColorRegistry.js';\nimport { editorErrorBorder, editorErrorForeground, editorHintBorder, editorHintForeground, editorInfoBorder, editorInfoForeground, editorWarningBorder, editorWarningForeground, editorForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { ViewModel } from '../../common/viewModel/viewModelImpl.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { ServiceCollection } from '../../../platform/instantiation/common/serviceCollection.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IThemeService, registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { withNullAsUndefined } from '../../../base/common/types.js';\nvar EDITOR_ID = 0;\nvar SHOW_UNUSED_ENABLED_CLASS = 'showUnused';\n\nvar ModelData =\n/** @class */\nfunction () {\n  function ModelData(model, viewModel, cursor, view, hasRealView, listenersToRemove) {\n    this.model = model;\n    this.viewModel = viewModel;\n    this.cursor = cursor;\n    this.view = view;\n    this.hasRealView = hasRealView;\n    this.listenersToRemove = listenersToRemove;\n  }\n\n  ModelData.prototype.dispose = function () {\n    dispose(this.listenersToRemove);\n    this.model.onBeforeDetached();\n\n    if (this.hasRealView) {\n      this.view.dispose();\n    }\n\n    this.cursor.dispose();\n    this.viewModel.dispose();\n  };\n\n  return ModelData;\n}();\n\nvar CodeEditorWidget =\n/** @class */\nfunction (_super) {\n  __extends(CodeEditorWidget, _super);\n\n  function CodeEditorWidget(domElement, options, codeEditorWidgetOptions, instantiationService, codeEditorService, commandService, contextKeyService, themeService, notificationService, accessibilityService) {\n    var _this = _super.call(this) || this; //#region Eventing\n\n\n    _this._onDidDispose = _this._register(new Emitter());\n    _this.onDidDispose = _this._onDidDispose.event;\n    _this._onDidChangeModelContent = _this._register(new Emitter());\n    _this.onDidChangeModelContent = _this._onDidChangeModelContent.event;\n    _this._onDidChangeModelLanguage = _this._register(new Emitter());\n    _this.onDidChangeModelLanguage = _this._onDidChangeModelLanguage.event;\n    _this._onDidChangeModelLanguageConfiguration = _this._register(new Emitter());\n    _this.onDidChangeModelLanguageConfiguration = _this._onDidChangeModelLanguageConfiguration.event;\n    _this._onDidChangeModelOptions = _this._register(new Emitter());\n    _this.onDidChangeModelOptions = _this._onDidChangeModelOptions.event;\n    _this._onDidChangeModelDecorations = _this._register(new Emitter());\n    _this.onDidChangeModelDecorations = _this._onDidChangeModelDecorations.event;\n    _this._onDidChangeConfiguration = _this._register(new Emitter());\n    _this.onDidChangeConfiguration = _this._onDidChangeConfiguration.event;\n    _this._onDidChangeModel = _this._register(new Emitter());\n    _this.onDidChangeModel = _this._onDidChangeModel.event;\n    _this._onDidChangeCursorPosition = _this._register(new Emitter());\n    _this.onDidChangeCursorPosition = _this._onDidChangeCursorPosition.event;\n    _this._onDidChangeCursorSelection = _this._register(new Emitter());\n    _this.onDidChangeCursorSelection = _this._onDidChangeCursorSelection.event;\n    _this._onDidAttemptReadOnlyEdit = _this._register(new Emitter());\n    _this.onDidAttemptReadOnlyEdit = _this._onDidAttemptReadOnlyEdit.event;\n    _this._onDidLayoutChange = _this._register(new Emitter());\n    _this.onDidLayoutChange = _this._onDidLayoutChange.event;\n    _this._editorTextFocus = _this._register(new BooleanEventEmitter());\n    _this.onDidFocusEditorText = _this._editorTextFocus.onDidChangeToTrue;\n    _this.onDidBlurEditorText = _this._editorTextFocus.onDidChangeToFalse;\n    _this._editorWidgetFocus = _this._register(new BooleanEventEmitter());\n    _this.onDidFocusEditorWidget = _this._editorWidgetFocus.onDidChangeToTrue;\n    _this.onDidBlurEditorWidget = _this._editorWidgetFocus.onDidChangeToFalse;\n    _this._onWillType = _this._register(new Emitter());\n    _this.onWillType = _this._onWillType.event;\n    _this._onDidType = _this._register(new Emitter());\n    _this.onDidType = _this._onDidType.event;\n    _this._onCompositionStart = _this._register(new Emitter());\n    _this.onCompositionStart = _this._onCompositionStart.event;\n    _this._onCompositionEnd = _this._register(new Emitter());\n    _this.onCompositionEnd = _this._onCompositionEnd.event;\n    _this._onDidPaste = _this._register(new Emitter());\n    _this.onDidPaste = _this._onDidPaste.event;\n    _this._onMouseUp = _this._register(new Emitter());\n    _this.onMouseUp = _this._onMouseUp.event;\n    _this._onMouseDown = _this._register(new Emitter());\n    _this.onMouseDown = _this._onMouseDown.event;\n    _this._onMouseDrag = _this._register(new Emitter());\n    _this.onMouseDrag = _this._onMouseDrag.event;\n    _this._onMouseDrop = _this._register(new Emitter());\n    _this.onMouseDrop = _this._onMouseDrop.event;\n    _this._onContextMenu = _this._register(new Emitter());\n    _this.onContextMenu = _this._onContextMenu.event;\n    _this._onMouseMove = _this._register(new Emitter());\n    _this.onMouseMove = _this._onMouseMove.event;\n    _this._onMouseLeave = _this._register(new Emitter());\n    _this.onMouseLeave = _this._onMouseLeave.event;\n    _this._onMouseWheel = _this._register(new Emitter());\n    _this.onMouseWheel = _this._onMouseWheel.event;\n    _this._onKeyUp = _this._register(new Emitter());\n    _this.onKeyUp = _this._onKeyUp.event;\n    _this._onKeyDown = _this._register(new Emitter());\n    _this.onKeyDown = _this._onKeyDown.event;\n    _this._onDidScrollChange = _this._register(new Emitter());\n    _this.onDidScrollChange = _this._onDidScrollChange.event;\n    _this._onDidChangeViewZones = _this._register(new Emitter());\n    _this.onDidChangeViewZones = _this._onDidChangeViewZones.event;\n    _this._domElement = domElement;\n    _this._id = ++EDITOR_ID;\n    _this._decorationTypeKeysToIds = {};\n    _this._decorationTypeSubtypes = {};\n    _this.isSimpleWidget = codeEditorWidgetOptions.isSimpleWidget || false;\n    _this._telemetryData = codeEditorWidgetOptions.telemetryData;\n    options = options || {};\n    _this._configuration = _this._register(_this._createConfiguration(options, accessibilityService));\n\n    _this._register(_this._configuration.onDidChange(function (e) {\n      _this._onDidChangeConfiguration.fire(e);\n\n      if (e.layoutInfo) {\n        _this._onDidLayoutChange.fire(_this._configuration.editor.layoutInfo);\n      }\n\n      if (_this._configuration.editor.showUnused) {\n        _this._domElement.classList.add(SHOW_UNUSED_ENABLED_CLASS);\n      } else {\n        _this._domElement.classList.remove(SHOW_UNUSED_ENABLED_CLASS);\n      }\n    }));\n\n    _this._contextKeyService = _this._register(contextKeyService.createScoped(_this._domElement));\n    _this._notificationService = notificationService;\n    _this._codeEditorService = codeEditorService;\n    _this._commandService = commandService;\n    _this._themeService = themeService;\n\n    _this._register(new EditorContextKeysManager(_this, _this._contextKeyService));\n\n    _this._register(new EditorModeContext(_this, _this._contextKeyService));\n\n    _this._instantiationService = instantiationService.createChild(new ServiceCollection([IContextKeyService, _this._contextKeyService]));\n    _this._modelData = null;\n    _this._contributions = {};\n    _this._actions = {};\n    _this._focusTracker = new CodeEditorWidgetFocusTracker(domElement);\n\n    _this._focusTracker.onChange(function () {\n      _this._editorWidgetFocus.setValue(_this._focusTracker.hasFocus());\n    });\n\n    _this._contentWidgets = {};\n    _this._overlayWidgets = {};\n    var contributions;\n\n    if (Array.isArray(codeEditorWidgetOptions.contributions)) {\n      contributions = codeEditorWidgetOptions.contributions;\n    } else {\n      contributions = EditorExtensionsRegistry.getEditorContributions();\n    }\n\n    for (var i = 0, len = contributions.length; i < len; i++) {\n      var ctor = contributions[i];\n\n      try {\n        var contribution = _this._instantiationService.createInstance(ctor, _this);\n\n        _this._contributions[contribution.getId()] = contribution;\n      } catch (err) {\n        onUnexpectedError(err);\n      }\n    }\n\n    EditorExtensionsRegistry.getEditorActions().forEach(function (action) {\n      var internalAction = new InternalEditorAction(action.id, action.label, action.alias, withNullAsUndefined(action.precondition), function () {\n        return _this._instantiationService.invokeFunction(function (accessor) {\n          return Promise.resolve(action.runEditorCommand(accessor, _this, null));\n        });\n      }, _this._contextKeyService);\n      _this._actions[internalAction.id] = internalAction;\n    });\n\n    _this._codeEditorService.addCodeEditor(_this);\n\n    return _this;\n  }\n\n  CodeEditorWidget.prototype._createConfiguration = function (options, accessibilityService) {\n    return new Configuration(this.isSimpleWidget, options, this._domElement, accessibilityService);\n  };\n\n  CodeEditorWidget.prototype.getId = function () {\n    return this.getEditorType() + ':' + this._id;\n  };\n\n  CodeEditorWidget.prototype.getEditorType = function () {\n    return editorCommon.EditorType.ICodeEditor;\n  };\n\n  CodeEditorWidget.prototype.dispose = function () {\n    this._codeEditorService.removeCodeEditor(this);\n\n    this._focusTracker.dispose();\n\n    var keys = Object.keys(this._contributions);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var contributionId = keys[i];\n\n      this._contributions[contributionId].dispose();\n    }\n\n    this._removeDecorationTypes();\n\n    this._postDetachModelCleanup(this._detachModel());\n\n    this._onDidDispose.fire();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  CodeEditorWidget.prototype.invokeWithinContext = function (fn) {\n    return this._instantiationService.invokeFunction(fn);\n  };\n\n  CodeEditorWidget.prototype.updateOptions = function (newOptions) {\n    this._configuration.updateOptions(newOptions);\n  };\n\n  CodeEditorWidget.prototype.getConfiguration = function () {\n    return this._configuration.editor;\n  };\n\n  CodeEditorWidget.prototype.getRawConfiguration = function () {\n    return this._configuration.getRawOptions();\n  };\n\n  CodeEditorWidget.prototype.getValue = function (options) {\n    if (options === void 0) {\n      options = null;\n    }\n\n    if (!this._modelData) {\n      return '';\n    }\n\n    var preserveBOM = options && options.preserveBOM ? true : false;\n    var eolPreference = 0\n    /* TextDefined */\n    ;\n\n    if (options && options.lineEnding && options.lineEnding === '\\n') {\n      eolPreference = 1\n      /* LF */\n      ;\n    } else if (options && options.lineEnding && options.lineEnding === '\\r\\n') {\n      eolPreference = 2\n      /* CRLF */\n      ;\n    }\n\n    return this._modelData.model.getValue(eolPreference, preserveBOM);\n  };\n\n  CodeEditorWidget.prototype.setValue = function (newValue) {\n    if (!this._modelData) {\n      return;\n    }\n\n    this._modelData.model.setValue(newValue);\n  };\n\n  CodeEditorWidget.prototype.getModel = function () {\n    if (!this._modelData) {\n      return null;\n    }\n\n    return this._modelData.model;\n  };\n\n  CodeEditorWidget.prototype.setModel = function (_model) {\n    if (_model === void 0) {\n      _model = null;\n    }\n\n    var model = _model;\n\n    if (this._modelData === null && model === null) {\n      // Current model is the new model\n      return;\n    }\n\n    if (this._modelData && this._modelData.model === model) {\n      // Current model is the new model\n      return;\n    }\n\n    var detachedModel = this._detachModel();\n\n    this._attachModel(model);\n\n    var e = {\n      oldModelUrl: detachedModel ? detachedModel.uri : null,\n      newModelUrl: model ? model.uri : null\n    };\n\n    this._removeDecorationTypes();\n\n    this._onDidChangeModel.fire(e);\n\n    this._postDetachModelCleanup(detachedModel);\n  };\n\n  CodeEditorWidget.prototype._removeDecorationTypes = function () {\n    this._decorationTypeKeysToIds = {};\n\n    if (this._decorationTypeSubtypes) {\n      for (var decorationType in this._decorationTypeSubtypes) {\n        var subTypes = this._decorationTypeSubtypes[decorationType];\n\n        for (var subType in subTypes) {\n          this._removeDecorationType(decorationType + '-' + subType);\n        }\n      }\n\n      this._decorationTypeSubtypes = {};\n    }\n  };\n\n  CodeEditorWidget.prototype.getVisibleRanges = function () {\n    if (!this._modelData) {\n      return [];\n    }\n\n    return this._modelData.viewModel.getVisibleRanges();\n  };\n\n  CodeEditorWidget.prototype.getWhitespaces = function () {\n    if (!this._modelData) {\n      return [];\n    }\n\n    return this._modelData.viewModel.viewLayout.getWhitespaces();\n  };\n\n  CodeEditorWidget._getVerticalOffsetForPosition = function (modelData, modelLineNumber, modelColumn) {\n    var modelPosition = modelData.model.validatePosition({\n      lineNumber: modelLineNumber,\n      column: modelColumn\n    });\n    var viewPosition = modelData.viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n    return modelData.viewModel.viewLayout.getVerticalOffsetForLineNumber(viewPosition.lineNumber);\n  };\n\n  CodeEditorWidget.prototype.getTopForLineNumber = function (lineNumber) {\n    if (!this._modelData) {\n      return -1;\n    }\n\n    return CodeEditorWidget._getVerticalOffsetForPosition(this._modelData, lineNumber, 1);\n  };\n\n  CodeEditorWidget.prototype.getTopForPosition = function (lineNumber, column) {\n    if (!this._modelData) {\n      return -1;\n    }\n\n    return CodeEditorWidget._getVerticalOffsetForPosition(this._modelData, lineNumber, column);\n  };\n\n  CodeEditorWidget.prototype.setHiddenAreas = function (ranges) {\n    if (this._modelData) {\n      this._modelData.viewModel.setHiddenAreas(ranges.map(function (r) {\n        return Range.lift(r);\n      }));\n    }\n  };\n\n  CodeEditorWidget.prototype.getVisibleColumnFromPosition = function (rawPosition) {\n    if (!this._modelData) {\n      return rawPosition.column;\n    }\n\n    var position = this._modelData.model.validatePosition(rawPosition);\n\n    var tabSize = this._modelData.model.getOptions().tabSize;\n\n    return CursorColumns.visibleColumnFromColumn(this._modelData.model.getLineContent(position.lineNumber), position.column, tabSize) + 1;\n  };\n\n  CodeEditorWidget.prototype.getPosition = function () {\n    if (!this._modelData) {\n      return null;\n    }\n\n    return this._modelData.cursor.getPosition();\n  };\n\n  CodeEditorWidget.prototype.setPosition = function (position) {\n    if (!this._modelData) {\n      return;\n    }\n\n    if (!Position.isIPosition(position)) {\n      throw new Error('Invalid arguments');\n    }\n\n    this._modelData.cursor.setSelections('api', [{\n      selectionStartLineNumber: position.lineNumber,\n      selectionStartColumn: position.column,\n      positionLineNumber: position.lineNumber,\n      positionColumn: position.column\n    }]);\n  };\n\n  CodeEditorWidget.prototype._sendRevealRange = function (modelRange, verticalType, revealHorizontal, scrollType) {\n    if (!this._modelData) {\n      return;\n    }\n\n    if (!Range.isIRange(modelRange)) {\n      throw new Error('Invalid arguments');\n    }\n\n    var validatedModelRange = this._modelData.model.validateRange(modelRange);\n\n    var viewRange = this._modelData.viewModel.coordinatesConverter.convertModelRangeToViewRange(validatedModelRange);\n\n    this._modelData.cursor.emitCursorRevealRange(viewRange, verticalType, revealHorizontal, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealLine = function (lineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealLine(lineNumber, 0\n    /* Simple */\n    , scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealLineInCenter = function (lineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealLine(lineNumber, 1\n    /* Center */\n    , scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealLineInCenterIfOutsideViewport = function (lineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealLine(lineNumber, 2\n    /* CenterIfOutsideViewport */\n    , scrollType);\n  };\n\n  CodeEditorWidget.prototype._revealLine = function (lineNumber, revealType, scrollType) {\n    if (typeof lineNumber !== 'number') {\n      throw new Error('Invalid arguments');\n    }\n\n    this._sendRevealRange(new Range(lineNumber, 1, lineNumber, 1), revealType, false, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealPosition = function (position, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealPosition(position, 0\n    /* Simple */\n    , true, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealPositionInCenter = function (position, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealPosition(position, 1\n    /* Center */\n    , true, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealPositionInCenterIfOutsideViewport = function (position, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealPosition(position, 2\n    /* CenterIfOutsideViewport */\n    , true, scrollType);\n  };\n\n  CodeEditorWidget.prototype._revealPosition = function (position, verticalType, revealHorizontal, scrollType) {\n    if (!Position.isIPosition(position)) {\n      throw new Error('Invalid arguments');\n    }\n\n    this._sendRevealRange(new Range(position.lineNumber, position.column, position.lineNumber, position.column), verticalType, revealHorizontal, scrollType);\n  };\n\n  CodeEditorWidget.prototype.getSelection = function () {\n    if (!this._modelData) {\n      return null;\n    }\n\n    return this._modelData.cursor.getSelection();\n  };\n\n  CodeEditorWidget.prototype.getSelections = function () {\n    if (!this._modelData) {\n      return null;\n    }\n\n    return this._modelData.cursor.getSelections();\n  };\n\n  CodeEditorWidget.prototype.setSelection = function (something) {\n    var isSelection = Selection.isISelection(something);\n    var isRange = Range.isIRange(something);\n\n    if (!isSelection && !isRange) {\n      throw new Error('Invalid arguments');\n    }\n\n    if (isSelection) {\n      this._setSelectionImpl(something);\n    } else if (isRange) {\n      // act as if it was an IRange\n      var selection = {\n        selectionStartLineNumber: something.startLineNumber,\n        selectionStartColumn: something.startColumn,\n        positionLineNumber: something.endLineNumber,\n        positionColumn: something.endColumn\n      };\n\n      this._setSelectionImpl(selection);\n    }\n  };\n\n  CodeEditorWidget.prototype._setSelectionImpl = function (sel) {\n    if (!this._modelData) {\n      return;\n    }\n\n    var selection = new Selection(sel.selectionStartLineNumber, sel.selectionStartColumn, sel.positionLineNumber, sel.positionColumn);\n\n    this._modelData.cursor.setSelections('api', [selection]);\n  };\n\n  CodeEditorWidget.prototype.revealLines = function (startLineNumber, endLineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealLines(startLineNumber, endLineNumber, 0\n    /* Simple */\n    , scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealLinesInCenter = function (startLineNumber, endLineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealLines(startLineNumber, endLineNumber, 1\n    /* Center */\n    , scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealLinesInCenterIfOutsideViewport = function (startLineNumber, endLineNumber, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealLines(startLineNumber, endLineNumber, 2\n    /* CenterIfOutsideViewport */\n    , scrollType);\n  };\n\n  CodeEditorWidget.prototype._revealLines = function (startLineNumber, endLineNumber, verticalType, scrollType) {\n    if (typeof startLineNumber !== 'number' || typeof endLineNumber !== 'number') {\n      throw new Error('Invalid arguments');\n    }\n\n    this._sendRevealRange(new Range(startLineNumber, 1, endLineNumber, 1), verticalType, false, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealRange = function (range, scrollType, revealVerticalInCenter, revealHorizontal) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    if (revealVerticalInCenter === void 0) {\n      revealVerticalInCenter = false;\n    }\n\n    if (revealHorizontal === void 0) {\n      revealHorizontal = true;\n    }\n\n    this._revealRange(range, revealVerticalInCenter ? 1\n    /* Center */\n    : 0\n    /* Simple */\n    , revealHorizontal, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealRangeInCenter = function (range, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealRange(range, 1\n    /* Center */\n    , true, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealRangeInCenterIfOutsideViewport = function (range, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealRange(range, 2\n    /* CenterIfOutsideViewport */\n    , true, scrollType);\n  };\n\n  CodeEditorWidget.prototype.revealRangeAtTop = function (range, scrollType) {\n    if (scrollType === void 0) {\n      scrollType = 0\n      /* Smooth */\n      ;\n    }\n\n    this._revealRange(range, 3\n    /* Top */\n    , true, scrollType);\n  };\n\n  CodeEditorWidget.prototype._revealRange = function (range, verticalType, revealHorizontal, scrollType) {\n    if (!Range.isIRange(range)) {\n      throw new Error('Invalid arguments');\n    }\n\n    this._sendRevealRange(Range.lift(range), verticalType, revealHorizontal, scrollType);\n  };\n\n  CodeEditorWidget.prototype.setSelections = function (ranges, source) {\n    if (source === void 0) {\n      source = 'api';\n    }\n\n    if (!this._modelData) {\n      return;\n    }\n\n    if (!ranges || ranges.length === 0) {\n      throw new Error('Invalid arguments');\n    }\n\n    for (var i = 0, len = ranges.length; i < len; i++) {\n      if (!Selection.isISelection(ranges[i])) {\n        throw new Error('Invalid arguments');\n      }\n    }\n\n    this._modelData.cursor.setSelections(source, ranges);\n  };\n\n  CodeEditorWidget.prototype.getScrollWidth = function () {\n    if (!this._modelData) {\n      return -1;\n    }\n\n    return this._modelData.viewModel.viewLayout.getScrollWidth();\n  };\n\n  CodeEditorWidget.prototype.getScrollLeft = function () {\n    if (!this._modelData) {\n      return -1;\n    }\n\n    return this._modelData.viewModel.viewLayout.getCurrentScrollLeft();\n  };\n\n  CodeEditorWidget.prototype.getScrollHeight = function () {\n    if (!this._modelData) {\n      return -1;\n    }\n\n    return this._modelData.viewModel.viewLayout.getScrollHeight();\n  };\n\n  CodeEditorWidget.prototype.getScrollTop = function () {\n    if (!this._modelData) {\n      return -1;\n    }\n\n    return this._modelData.viewModel.viewLayout.getCurrentScrollTop();\n  };\n\n  CodeEditorWidget.prototype.setScrollLeft = function (newScrollLeft) {\n    if (!this._modelData) {\n      return;\n    }\n\n    if (typeof newScrollLeft !== 'number') {\n      throw new Error('Invalid arguments');\n    }\n\n    this._modelData.viewModel.viewLayout.setScrollPositionNow({\n      scrollLeft: newScrollLeft\n    });\n  };\n\n  CodeEditorWidget.prototype.setScrollTop = function (newScrollTop) {\n    if (!this._modelData) {\n      return;\n    }\n\n    if (typeof newScrollTop !== 'number') {\n      throw new Error('Invalid arguments');\n    }\n\n    this._modelData.viewModel.viewLayout.setScrollPositionNow({\n      scrollTop: newScrollTop\n    });\n  };\n\n  CodeEditorWidget.prototype.setScrollPosition = function (position) {\n    if (!this._modelData) {\n      return;\n    }\n\n    this._modelData.viewModel.viewLayout.setScrollPositionNow(position);\n  };\n\n  CodeEditorWidget.prototype.saveViewState = function () {\n    if (!this._modelData) {\n      return null;\n    }\n\n    var contributionsState = {};\n    var keys = Object.keys(this._contributions);\n\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n      var id = keys_1[_i];\n      var contribution = this._contributions[id];\n\n      if (typeof contribution.saveViewState === 'function') {\n        contributionsState[id] = contribution.saveViewState();\n      }\n    }\n\n    var cursorState = this._modelData.cursor.saveState();\n\n    var viewState = this._modelData.viewModel.saveState();\n\n    return {\n      cursorState: cursorState,\n      viewState: viewState,\n      contributionsState: contributionsState\n    };\n  };\n\n  CodeEditorWidget.prototype.restoreViewState = function (s) {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return;\n    }\n\n    var codeEditorState = s;\n\n    if (codeEditorState && codeEditorState.cursorState && codeEditorState.viewState) {\n      var cursorState = codeEditorState.cursorState;\n\n      if (Array.isArray(cursorState)) {\n        this._modelData.cursor.restoreState(cursorState);\n      } else {\n        // Backwards compatibility\n        this._modelData.cursor.restoreState([cursorState]);\n      }\n\n      var contributionsState = codeEditorState.contributionsState || {};\n      var keys = Object.keys(this._contributions);\n\n      for (var i = 0, len = keys.length; i < len; i++) {\n        var id = keys[i];\n        var contribution = this._contributions[id];\n\n        if (typeof contribution.restoreViewState === 'function') {\n          contribution.restoreViewState(contributionsState[id]);\n        }\n      }\n\n      var reducedState = this._modelData.viewModel.reduceRestoreState(codeEditorState.viewState);\n\n      this._modelData.view.restoreState(reducedState);\n    }\n  };\n\n  CodeEditorWidget.prototype.getContribution = function (id) {\n    return this._contributions[id] || null;\n  };\n\n  CodeEditorWidget.prototype.getActions = function () {\n    var result = [];\n    var keys = Object.keys(this._actions);\n\n    for (var i = 0, len = keys.length; i < len; i++) {\n      var id = keys[i];\n      result.push(this._actions[id]);\n    }\n\n    return result;\n  };\n\n  CodeEditorWidget.prototype.getSupportedActions = function () {\n    var result = this.getActions();\n    result = result.filter(function (action) {\n      return action.isSupported();\n    });\n    return result;\n  };\n\n  CodeEditorWidget.prototype.getAction = function (id) {\n    return this._actions[id] || null;\n  };\n\n  CodeEditorWidget.prototype.trigger = function (source, handlerId, payload) {\n    payload = payload || {}; // Special case for typing\n\n    if (handlerId === editorCommon.Handler.Type) {\n      if (!this._modelData || typeof payload.text !== 'string' || payload.text.length === 0) {\n        // nothing to do\n        return;\n      }\n\n      if (source === 'keyboard') {\n        this._onWillType.fire(payload.text);\n      }\n\n      this._modelData.cursor.trigger(source, handlerId, payload);\n\n      if (source === 'keyboard') {\n        this._onDidType.fire(payload.text);\n      }\n\n      return;\n    } // Special case for pasting\n\n\n    if (handlerId === editorCommon.Handler.Paste) {\n      if (!this._modelData || typeof payload.text !== 'string' || payload.text.length === 0) {\n        // nothing to do\n        return;\n      }\n\n      var startPosition = this._modelData.cursor.getSelection().getStartPosition();\n\n      this._modelData.cursor.trigger(source, handlerId, payload);\n\n      var endPosition = this._modelData.cursor.getSelection().getStartPosition();\n\n      if (source === 'keyboard') {\n        this._onDidPaste.fire(new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column));\n      }\n\n      return;\n    }\n\n    if (handlerId === editorCommon.Handler.CompositionStart) {\n      this._onCompositionStart.fire();\n    }\n\n    if (handlerId === editorCommon.Handler.CompositionEnd) {\n      this._onCompositionEnd.fire();\n    }\n\n    var action = this.getAction(handlerId);\n\n    if (action) {\n      Promise.resolve(action.run()).then(undefined, onUnexpectedError);\n      return;\n    }\n\n    if (!this._modelData) {\n      return;\n    }\n\n    if (this._triggerEditorCommand(source, handlerId, payload)) {\n      return;\n    }\n\n    this._modelData.cursor.trigger(source, handlerId, payload);\n  };\n\n  CodeEditorWidget.prototype._triggerEditorCommand = function (source, handlerId, payload) {\n    var _this = this;\n\n    var command = EditorExtensionsRegistry.getEditorCommand(handlerId);\n\n    if (command) {\n      payload = payload || {};\n      payload.source = source;\n\n      this._instantiationService.invokeFunction(function (accessor) {\n        Promise.resolve(command.runEditorCommand(accessor, _this, payload)).then(undefined, onUnexpectedError);\n      });\n\n      return true;\n    }\n\n    return false;\n  };\n\n  CodeEditorWidget.prototype._getCursors = function () {\n    if (!this._modelData) {\n      return null;\n    }\n\n    return this._modelData.cursor;\n  };\n\n  CodeEditorWidget.prototype.pushUndoStop = function () {\n    if (!this._modelData) {\n      return false;\n    }\n\n    if (this._configuration.editor.readOnly) {\n      // read only editor => sorry!\n      return false;\n    }\n\n    this._modelData.model.pushStackElement();\n\n    return true;\n  };\n\n  CodeEditorWidget.prototype.executeEdits = function (source, edits, endCursorState) {\n    if (!this._modelData) {\n      return false;\n    }\n\n    if (this._configuration.editor.readOnly) {\n      // read only editor => sorry!\n      return false;\n    }\n\n    var cursorStateComputer;\n\n    if (!endCursorState) {\n      cursorStateComputer = function () {\n        return null;\n      };\n    } else if (Array.isArray(endCursorState)) {\n      cursorStateComputer = function () {\n        return endCursorState;\n      };\n    } else {\n      cursorStateComputer = endCursorState;\n    }\n\n    this._modelData.cursor.executeEdits(source, edits, cursorStateComputer);\n\n    return true;\n  };\n\n  CodeEditorWidget.prototype.executeCommand = function (source, command) {\n    if (!this._modelData) {\n      return;\n    }\n\n    this._modelData.cursor.trigger(source, editorCommon.Handler.ExecuteCommand, command);\n  };\n\n  CodeEditorWidget.prototype.executeCommands = function (source, commands) {\n    if (!this._modelData) {\n      return;\n    }\n\n    this._modelData.cursor.trigger(source, editorCommon.Handler.ExecuteCommands, commands);\n  };\n\n  CodeEditorWidget.prototype.changeDecorations = function (callback) {\n    if (!this._modelData) {\n      // callback will not be called\n      return null;\n    }\n\n    return this._modelData.model.changeDecorations(callback, this._id);\n  };\n\n  CodeEditorWidget.prototype.getLineDecorations = function (lineNumber) {\n    if (!this._modelData) {\n      return null;\n    }\n\n    return this._modelData.model.getLineDecorations(lineNumber, this._id, this._configuration.editor.readOnly);\n  };\n\n  CodeEditorWidget.prototype.deltaDecorations = function (oldDecorations, newDecorations) {\n    if (!this._modelData) {\n      return [];\n    }\n\n    if (oldDecorations.length === 0 && newDecorations.length === 0) {\n      return oldDecorations;\n    }\n\n    return this._modelData.model.deltaDecorations(oldDecorations, newDecorations, this._id);\n  };\n\n  CodeEditorWidget.prototype.removeDecorations = function (decorationTypeKey) {\n    // remove decorations for type and sub type\n    var oldDecorationsIds = this._decorationTypeKeysToIds[decorationTypeKey];\n\n    if (oldDecorationsIds) {\n      this.deltaDecorations(oldDecorationsIds, []);\n    }\n\n    if (this._decorationTypeKeysToIds.hasOwnProperty(decorationTypeKey)) {\n      delete this._decorationTypeKeysToIds[decorationTypeKey];\n    }\n\n    if (this._decorationTypeSubtypes.hasOwnProperty(decorationTypeKey)) {\n      delete this._decorationTypeSubtypes[decorationTypeKey];\n    }\n  };\n\n  CodeEditorWidget.prototype.getLayoutInfo = function () {\n    return this._configuration.editor.layoutInfo;\n  };\n\n  CodeEditorWidget.prototype.createOverviewRuler = function (cssClassName) {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return null;\n    }\n\n    return this._modelData.view.createOverviewRuler(cssClassName);\n  };\n\n  CodeEditorWidget.prototype.getDomNode = function () {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return null;\n    }\n\n    return this._modelData.view.domNode.domNode;\n  };\n\n  CodeEditorWidget.prototype.delegateVerticalScrollbarMouseDown = function (browserEvent) {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return;\n    }\n\n    this._modelData.view.delegateVerticalScrollbarMouseDown(browserEvent);\n  };\n\n  CodeEditorWidget.prototype.layout = function (dimension) {\n    this._configuration.observeReferenceElement(dimension);\n\n    this.render();\n  };\n\n  CodeEditorWidget.prototype.focus = function () {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return;\n    }\n\n    this._modelData.view.focus();\n  };\n\n  CodeEditorWidget.prototype.hasTextFocus = function () {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return false;\n    }\n\n    return this._modelData.view.isFocused();\n  };\n\n  CodeEditorWidget.prototype.hasWidgetFocus = function () {\n    return this._focusTracker && this._focusTracker.hasFocus();\n  };\n\n  CodeEditorWidget.prototype.addContentWidget = function (widget) {\n    var widgetData = {\n      widget: widget,\n      position: widget.getPosition()\n    };\n\n    if (this._contentWidgets.hasOwnProperty(widget.getId())) {\n      console.warn('Overwriting a content widget with the same id.');\n    }\n\n    this._contentWidgets[widget.getId()] = widgetData;\n\n    if (this._modelData && this._modelData.hasRealView) {\n      this._modelData.view.addContentWidget(widgetData);\n    }\n  };\n\n  CodeEditorWidget.prototype.layoutContentWidget = function (widget) {\n    var widgetId = widget.getId();\n\n    if (this._contentWidgets.hasOwnProperty(widgetId)) {\n      var widgetData = this._contentWidgets[widgetId];\n      widgetData.position = widget.getPosition();\n\n      if (this._modelData && this._modelData.hasRealView) {\n        this._modelData.view.layoutContentWidget(widgetData);\n      }\n    }\n  };\n\n  CodeEditorWidget.prototype.removeContentWidget = function (widget) {\n    var widgetId = widget.getId();\n\n    if (this._contentWidgets.hasOwnProperty(widgetId)) {\n      var widgetData = this._contentWidgets[widgetId];\n      delete this._contentWidgets[widgetId];\n\n      if (this._modelData && this._modelData.hasRealView) {\n        this._modelData.view.removeContentWidget(widgetData);\n      }\n    }\n  };\n\n  CodeEditorWidget.prototype.addOverlayWidget = function (widget) {\n    var widgetData = {\n      widget: widget,\n      position: widget.getPosition()\n    };\n\n    if (this._overlayWidgets.hasOwnProperty(widget.getId())) {\n      console.warn('Overwriting an overlay widget with the same id.');\n    }\n\n    this._overlayWidgets[widget.getId()] = widgetData;\n\n    if (this._modelData && this._modelData.hasRealView) {\n      this._modelData.view.addOverlayWidget(widgetData);\n    }\n  };\n\n  CodeEditorWidget.prototype.layoutOverlayWidget = function (widget) {\n    var widgetId = widget.getId();\n\n    if (this._overlayWidgets.hasOwnProperty(widgetId)) {\n      var widgetData = this._overlayWidgets[widgetId];\n      widgetData.position = widget.getPosition();\n\n      if (this._modelData && this._modelData.hasRealView) {\n        this._modelData.view.layoutOverlayWidget(widgetData);\n      }\n    }\n  };\n\n  CodeEditorWidget.prototype.removeOverlayWidget = function (widget) {\n    var widgetId = widget.getId();\n\n    if (this._overlayWidgets.hasOwnProperty(widgetId)) {\n      var widgetData = this._overlayWidgets[widgetId];\n      delete this._overlayWidgets[widgetId];\n\n      if (this._modelData && this._modelData.hasRealView) {\n        this._modelData.view.removeOverlayWidget(widgetData);\n      }\n    }\n  };\n\n  CodeEditorWidget.prototype.changeViewZones = function (callback) {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return;\n    }\n\n    var hasChanges = this._modelData.view.change(callback);\n\n    if (hasChanges) {\n      this._onDidChangeViewZones.fire();\n    }\n  };\n\n  CodeEditorWidget.prototype.getTargetAtClientPoint = function (clientX, clientY) {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return null;\n    }\n\n    return this._modelData.view.getTargetAtClientPoint(clientX, clientY);\n  };\n\n  CodeEditorWidget.prototype.getScrolledVisiblePosition = function (rawPosition) {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return null;\n    }\n\n    var position = this._modelData.model.validatePosition(rawPosition);\n\n    var layoutInfo = this._configuration.editor.layoutInfo;\n    var top = CodeEditorWidget._getVerticalOffsetForPosition(this._modelData, position.lineNumber, position.column) - this.getScrollTop();\n    var left = this._modelData.view.getOffsetForColumn(position.lineNumber, position.column) + layoutInfo.glyphMarginWidth + layoutInfo.lineNumbersWidth + layoutInfo.decorationsWidth - this.getScrollLeft();\n    return {\n      top: top,\n      left: left,\n      height: this._configuration.editor.lineHeight\n    };\n  };\n\n  CodeEditorWidget.prototype.getOffsetForColumn = function (lineNumber, column) {\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return -1;\n    }\n\n    return this._modelData.view.getOffsetForColumn(lineNumber, column);\n  };\n\n  CodeEditorWidget.prototype.render = function (forceRedraw) {\n    if (forceRedraw === void 0) {\n      forceRedraw = false;\n    }\n\n    if (!this._modelData || !this._modelData.hasRealView) {\n      return;\n    }\n\n    this._modelData.view.render(true, forceRedraw);\n  };\n\n  CodeEditorWidget.prototype.applyFontInfo = function (target) {\n    Configuration.applyFontInfoSlow(target, this._configuration.editor.fontInfo);\n  };\n\n  CodeEditorWidget.prototype._attachModel = function (model) {\n    var _this = this;\n\n    if (!model) {\n      this._modelData = null;\n      return;\n    }\n\n    var listenersToRemove = [];\n\n    this._domElement.setAttribute('data-mode-id', model.getLanguageIdentifier().language);\n\n    this._configuration.setIsDominatedByLongLines(model.isDominatedByLongLines());\n\n    this._configuration.setMaxLineNumber(model.getLineCount());\n\n    model.onBeforeAttached();\n    var viewModel = new ViewModel(this._id, this._configuration, model, function (callback) {\n      return dom.scheduleAtNextAnimationFrame(callback);\n    });\n    listenersToRemove.push(model.onDidChangeDecorations(function (e) {\n      return _this._onDidChangeModelDecorations.fire(e);\n    }));\n    listenersToRemove.push(model.onDidChangeLanguage(function (e) {\n      _this._domElement.setAttribute('data-mode-id', model.getLanguageIdentifier().language);\n\n      _this._onDidChangeModelLanguage.fire(e);\n    }));\n    listenersToRemove.push(model.onDidChangeLanguageConfiguration(function (e) {\n      return _this._onDidChangeModelLanguageConfiguration.fire(e);\n    }));\n    listenersToRemove.push(model.onDidChangeContent(function (e) {\n      return _this._onDidChangeModelContent.fire(e);\n    }));\n    listenersToRemove.push(model.onDidChangeOptions(function (e) {\n      return _this._onDidChangeModelOptions.fire(e);\n    })); // Someone might destroy the model from under the editor, so prevent any exceptions by setting a null model\n\n    listenersToRemove.push(model.onWillDispose(function () {\n      return _this.setModel(null);\n    }));\n    var cursor = new Cursor(this._configuration, model, viewModel);\n    listenersToRemove.push(cursor.onDidReachMaxCursorCount(function () {\n      _this._notificationService.warn(nls.localize('cursors.maximum', \"The number of cursors has been limited to {0}.\", Cursor.MAX_CURSOR_COUNT));\n    }));\n    listenersToRemove.push(cursor.onDidAttemptReadOnlyEdit(function () {\n      _this._onDidAttemptReadOnlyEdit.fire(undefined);\n    }));\n    listenersToRemove.push(cursor.onDidChange(function (e) {\n      var positions = [];\n\n      for (var i = 0, len = e.selections.length; i < len; i++) {\n        positions[i] = e.selections[i].getPosition();\n      }\n\n      var e1 = {\n        position: positions[0],\n        secondaryPositions: positions.slice(1),\n        reason: e.reason,\n        source: e.source\n      };\n\n      _this._onDidChangeCursorPosition.fire(e1);\n\n      var e2 = {\n        selection: e.selections[0],\n        secondarySelections: e.selections.slice(1),\n        source: e.source,\n        reason: e.reason\n      };\n\n      _this._onDidChangeCursorSelection.fire(e2);\n    }));\n\n    var _a = this._createView(viewModel, cursor),\n        view = _a[0],\n        hasRealView = _a[1];\n\n    if (hasRealView) {\n      this._domElement.appendChild(view.domNode.domNode);\n\n      var keys = Object.keys(this._contentWidgets);\n\n      for (var i = 0, len = keys.length; i < len; i++) {\n        var widgetId = keys[i];\n        view.addContentWidget(this._contentWidgets[widgetId]);\n      }\n\n      keys = Object.keys(this._overlayWidgets);\n\n      for (var i = 0, len = keys.length; i < len; i++) {\n        var widgetId = keys[i];\n        view.addOverlayWidget(this._overlayWidgets[widgetId]);\n      }\n\n      view.render(false, true);\n      view.domNode.domNode.setAttribute('data-uri', model.uri.toString());\n    }\n\n    this._modelData = new ModelData(model, viewModel, cursor, view, hasRealView, listenersToRemove);\n  };\n\n  CodeEditorWidget.prototype._createView = function (viewModel, cursor) {\n    var _this = this;\n\n    var commandDelegate;\n\n    if (this.isSimpleWidget) {\n      commandDelegate = {\n        executeEditorCommand: function (editorCommand, args) {\n          editorCommand.runCoreEditorCommand(cursor, args);\n        },\n        paste: function (source, text, pasteOnNewLine, multicursorText) {\n          _this.trigger(source, editorCommon.Handler.Paste, {\n            text: text,\n            pasteOnNewLine: pasteOnNewLine,\n            multicursorText: multicursorText\n          });\n        },\n        type: function (source, text) {\n          _this.trigger(source, editorCommon.Handler.Type, {\n            text: text\n          });\n        },\n        replacePreviousChar: function (source, text, replaceCharCnt) {\n          _this.trigger(source, editorCommon.Handler.ReplacePreviousChar, {\n            text: text,\n            replaceCharCnt: replaceCharCnt\n          });\n        },\n        compositionStart: function (source) {\n          _this.trigger(source, editorCommon.Handler.CompositionStart, undefined);\n        },\n        compositionEnd: function (source) {\n          _this.trigger(source, editorCommon.Handler.CompositionEnd, undefined);\n        },\n        cut: function (source) {\n          _this.trigger(source, editorCommon.Handler.Cut, undefined);\n        }\n      };\n    } else {\n      commandDelegate = {\n        executeEditorCommand: function (editorCommand, args) {\n          editorCommand.runCoreEditorCommand(cursor, args);\n        },\n        paste: function (source, text, pasteOnNewLine, multicursorText) {\n          _this._commandService.executeCommand(editorCommon.Handler.Paste, {\n            text: text,\n            pasteOnNewLine: pasteOnNewLine,\n            multicursorText: multicursorText\n          });\n        },\n        type: function (source, text) {\n          _this._commandService.executeCommand(editorCommon.Handler.Type, {\n            text: text\n          });\n        },\n        replacePreviousChar: function (source, text, replaceCharCnt) {\n          _this._commandService.executeCommand(editorCommon.Handler.ReplacePreviousChar, {\n            text: text,\n            replaceCharCnt: replaceCharCnt\n          });\n        },\n        compositionStart: function (source) {\n          _this._commandService.executeCommand(editorCommon.Handler.CompositionStart, {});\n        },\n        compositionEnd: function (source) {\n          _this._commandService.executeCommand(editorCommon.Handler.CompositionEnd, {});\n        },\n        cut: function (source) {\n          _this._commandService.executeCommand(editorCommon.Handler.Cut, {});\n        }\n      };\n    }\n\n    var viewOutgoingEvents = new ViewOutgoingEvents(viewModel);\n\n    viewOutgoingEvents.onDidGainFocus = function () {\n      _this._editorTextFocus.setValue(true); // In IE, the focus is not synchronous, so we give it a little help\n\n\n      _this._editorWidgetFocus.setValue(true);\n    };\n\n    viewOutgoingEvents.onDidScroll = function (e) {\n      return _this._onDidScrollChange.fire(e);\n    };\n\n    viewOutgoingEvents.onDidLoseFocus = function () {\n      return _this._editorTextFocus.setValue(false);\n    };\n\n    viewOutgoingEvents.onContextMenu = function (e) {\n      return _this._onContextMenu.fire(e);\n    };\n\n    viewOutgoingEvents.onMouseDown = function (e) {\n      return _this._onMouseDown.fire(e);\n    };\n\n    viewOutgoingEvents.onMouseUp = function (e) {\n      return _this._onMouseUp.fire(e);\n    };\n\n    viewOutgoingEvents.onMouseDrag = function (e) {\n      return _this._onMouseDrag.fire(e);\n    };\n\n    viewOutgoingEvents.onMouseDrop = function (e) {\n      return _this._onMouseDrop.fire(e);\n    };\n\n    viewOutgoingEvents.onKeyUp = function (e) {\n      return _this._onKeyUp.fire(e);\n    };\n\n    viewOutgoingEvents.onMouseMove = function (e) {\n      return _this._onMouseMove.fire(e);\n    };\n\n    viewOutgoingEvents.onMouseLeave = function (e) {\n      return _this._onMouseLeave.fire(e);\n    };\n\n    viewOutgoingEvents.onMouseWheel = function (e) {\n      return _this._onMouseWheel.fire(e);\n    };\n\n    viewOutgoingEvents.onKeyDown = function (e) {\n      return _this._onKeyDown.fire(e);\n    };\n\n    var view = new View(commandDelegate, this._configuration, this._themeService, viewModel, cursor, viewOutgoingEvents);\n    return [view, true];\n  };\n\n  CodeEditorWidget.prototype._postDetachModelCleanup = function (detachedModel) {\n    if (detachedModel) {\n      detachedModel.removeAllDecorationsWithOwnerId(this._id);\n    }\n  };\n\n  CodeEditorWidget.prototype._detachModel = function () {\n    if (!this._modelData) {\n      return null;\n    }\n\n    var model = this._modelData.model;\n    var removeDomNode = this._modelData.hasRealView ? this._modelData.view.domNode.domNode : null;\n\n    this._modelData.dispose();\n\n    this._modelData = null;\n\n    this._domElement.removeAttribute('data-mode-id');\n\n    if (removeDomNode) {\n      this._domElement.removeChild(removeDomNode);\n    }\n\n    return model;\n  };\n\n  CodeEditorWidget.prototype._removeDecorationType = function (key) {\n    this._codeEditorService.removeDecorationType(key);\n  };\n\n  CodeEditorWidget.prototype.hasModel = function () {\n    return this._modelData !== null;\n  };\n\n  CodeEditorWidget = __decorate([__param(3, IInstantiationService), __param(4, ICodeEditorService), __param(5, ICommandService), __param(6, IContextKeyService), __param(7, IThemeService), __param(8, INotificationService), __param(9, IAccessibilityService)], CodeEditorWidget);\n  return CodeEditorWidget;\n}(Disposable);\n\nexport { CodeEditorWidget };\n\nvar BooleanEventEmitter =\n/** @class */\nfunction (_super) {\n  __extends(BooleanEventEmitter, _super);\n\n  function BooleanEventEmitter() {\n    var _this = _super.call(this) || this;\n\n    _this._onDidChangeToTrue = _this._register(new Emitter());\n    _this.onDidChangeToTrue = _this._onDidChangeToTrue.event;\n    _this._onDidChangeToFalse = _this._register(new Emitter());\n    _this.onDidChangeToFalse = _this._onDidChangeToFalse.event;\n    _this._value = 0\n    /* NotSet */\n    ;\n    return _this;\n  }\n\n  BooleanEventEmitter.prototype.setValue = function (_value) {\n    var value = _value ? 2\n    /* True */\n    : 1\n    /* False */\n    ;\n\n    if (this._value === value) {\n      return;\n    }\n\n    this._value = value;\n\n    if (this._value === 2\n    /* True */\n    ) {\n        this._onDidChangeToTrue.fire();\n      } else if (this._value === 1\n    /* False */\n    ) {\n        this._onDidChangeToFalse.fire();\n      }\n  };\n\n  return BooleanEventEmitter;\n}(Disposable);\n\nexport { BooleanEventEmitter };\n\nvar EditorContextKeysManager =\n/** @class */\nfunction (_super) {\n  __extends(EditorContextKeysManager, _super);\n\n  function EditorContextKeysManager(editor, contextKeyService) {\n    var _this = _super.call(this) || this;\n\n    _this._editor = editor;\n    contextKeyService.createKey('editorId', editor.getId());\n    _this._editorFocus = EditorContextKeys.focus.bindTo(contextKeyService);\n    _this._textInputFocus = EditorContextKeys.textInputFocus.bindTo(contextKeyService);\n    _this._editorTextFocus = EditorContextKeys.editorTextFocus.bindTo(contextKeyService);\n    _this._editorTabMovesFocus = EditorContextKeys.tabMovesFocus.bindTo(contextKeyService);\n    _this._editorReadonly = EditorContextKeys.readOnly.bindTo(contextKeyService);\n    _this._hasMultipleSelections = EditorContextKeys.hasMultipleSelections.bindTo(contextKeyService);\n    _this._hasNonEmptySelection = EditorContextKeys.hasNonEmptySelection.bindTo(contextKeyService);\n    _this._canUndo = EditorContextKeys.canUndo.bindTo(contextKeyService);\n    _this._canRedo = EditorContextKeys.canRedo.bindTo(contextKeyService);\n\n    _this._register(_this._editor.onDidChangeConfiguration(function () {\n      return _this._updateFromConfig();\n    }));\n\n    _this._register(_this._editor.onDidChangeCursorSelection(function () {\n      return _this._updateFromSelection();\n    }));\n\n    _this._register(_this._editor.onDidFocusEditorWidget(function () {\n      return _this._updateFromFocus();\n    }));\n\n    _this._register(_this._editor.onDidBlurEditorWidget(function () {\n      return _this._updateFromFocus();\n    }));\n\n    _this._register(_this._editor.onDidFocusEditorText(function () {\n      return _this._updateFromFocus();\n    }));\n\n    _this._register(_this._editor.onDidBlurEditorText(function () {\n      return _this._updateFromFocus();\n    }));\n\n    _this._register(_this._editor.onDidChangeModel(function () {\n      return _this._updateFromModel();\n    }));\n\n    _this._register(_this._editor.onDidChangeConfiguration(function () {\n      return _this._updateFromModel();\n    }));\n\n    _this._updateFromConfig();\n\n    _this._updateFromSelection();\n\n    _this._updateFromFocus();\n\n    _this._updateFromModel();\n\n    return _this;\n  }\n\n  EditorContextKeysManager.prototype._updateFromConfig = function () {\n    var config = this._editor.getConfiguration();\n\n    this._editorTabMovesFocus.set(config.tabFocusMode);\n\n    this._editorReadonly.set(config.readOnly);\n  };\n\n  EditorContextKeysManager.prototype._updateFromSelection = function () {\n    var selections = this._editor.getSelections();\n\n    if (!selections) {\n      this._hasMultipleSelections.reset();\n\n      this._hasNonEmptySelection.reset();\n    } else {\n      this._hasMultipleSelections.set(selections.length > 1);\n\n      this._hasNonEmptySelection.set(selections.some(function (s) {\n        return !s.isEmpty();\n      }));\n    }\n  };\n\n  EditorContextKeysManager.prototype._updateFromFocus = function () {\n    this._editorFocus.set(this._editor.hasWidgetFocus() && !this._editor.isSimpleWidget);\n\n    this._editorTextFocus.set(this._editor.hasTextFocus() && !this._editor.isSimpleWidget);\n\n    this._textInputFocus.set(this._editor.hasTextFocus());\n  };\n\n  EditorContextKeysManager.prototype._updateFromModel = function () {\n    var model = this._editor.getModel();\n\n    this._canUndo.set(Boolean(model && model.canUndo()));\n\n    this._canRedo.set(Boolean(model && model.canRedo()));\n  };\n\n  return EditorContextKeysManager;\n}(Disposable);\n\nvar EditorModeContext =\n/** @class */\nfunction (_super) {\n  __extends(EditorModeContext, _super);\n\n  function EditorModeContext(_editor, _contextKeyService) {\n    var _this = _super.call(this) || this;\n\n    _this._editor = _editor;\n    _this._contextKeyService = _contextKeyService;\n    _this._langId = EditorContextKeys.languageId.bindTo(_contextKeyService);\n    _this._hasCompletionItemProvider = EditorContextKeys.hasCompletionItemProvider.bindTo(_contextKeyService);\n    _this._hasCodeActionsProvider = EditorContextKeys.hasCodeActionsProvider.bindTo(_contextKeyService);\n    _this._hasCodeLensProvider = EditorContextKeys.hasCodeLensProvider.bindTo(_contextKeyService);\n    _this._hasDefinitionProvider = EditorContextKeys.hasDefinitionProvider.bindTo(_contextKeyService);\n    _this._hasDeclarationProvider = EditorContextKeys.hasDeclarationProvider.bindTo(_contextKeyService);\n    _this._hasImplementationProvider = EditorContextKeys.hasImplementationProvider.bindTo(_contextKeyService);\n    _this._hasTypeDefinitionProvider = EditorContextKeys.hasTypeDefinitionProvider.bindTo(_contextKeyService);\n    _this._hasHoverProvider = EditorContextKeys.hasHoverProvider.bindTo(_contextKeyService);\n    _this._hasDocumentHighlightProvider = EditorContextKeys.hasDocumentHighlightProvider.bindTo(_contextKeyService);\n    _this._hasDocumentSymbolProvider = EditorContextKeys.hasDocumentSymbolProvider.bindTo(_contextKeyService);\n    _this._hasReferenceProvider = EditorContextKeys.hasReferenceProvider.bindTo(_contextKeyService);\n    _this._hasRenameProvider = EditorContextKeys.hasRenameProvider.bindTo(_contextKeyService);\n    _this._hasSignatureHelpProvider = EditorContextKeys.hasSignatureHelpProvider.bindTo(_contextKeyService);\n    _this._hasDocumentFormattingProvider = EditorContextKeys.hasDocumentFormattingProvider.bindTo(_contextKeyService);\n    _this._hasDocumentSelectionFormattingProvider = EditorContextKeys.hasDocumentSelectionFormattingProvider.bindTo(_contextKeyService);\n    _this._hasMultipleDocumentFormattingProvider = EditorContextKeys.hasMultipleDocumentFormattingProvider.bindTo(_contextKeyService);\n    _this._hasMultipleDocumentSelectionFormattingProvider = EditorContextKeys.hasMultipleDocumentSelectionFormattingProvider.bindTo(_contextKeyService);\n    _this._isInWalkThrough = EditorContextKeys.isInEmbeddedEditor.bindTo(_contextKeyService);\n\n    var update = function () {\n      return _this._update();\n    }; // update when model/mode changes\n\n\n    _this._register(_editor.onDidChangeModel(update));\n\n    _this._register(_editor.onDidChangeModelLanguage(update)); // update when registries change\n\n\n    _this._register(modes.CompletionProviderRegistry.onDidChange(update));\n\n    _this._register(modes.CodeActionProviderRegistry.onDidChange(update));\n\n    _this._register(modes.CodeLensProviderRegistry.onDidChange(update));\n\n    _this._register(modes.DefinitionProviderRegistry.onDidChange(update));\n\n    _this._register(modes.DeclarationProviderRegistry.onDidChange(update));\n\n    _this._register(modes.ImplementationProviderRegistry.onDidChange(update));\n\n    _this._register(modes.TypeDefinitionProviderRegistry.onDidChange(update));\n\n    _this._register(modes.HoverProviderRegistry.onDidChange(update));\n\n    _this._register(modes.DocumentHighlightProviderRegistry.onDidChange(update));\n\n    _this._register(modes.DocumentSymbolProviderRegistry.onDidChange(update));\n\n    _this._register(modes.ReferenceProviderRegistry.onDidChange(update));\n\n    _this._register(modes.RenameProviderRegistry.onDidChange(update));\n\n    _this._register(modes.DocumentFormattingEditProviderRegistry.onDidChange(update));\n\n    _this._register(modes.DocumentRangeFormattingEditProviderRegistry.onDidChange(update));\n\n    _this._register(modes.SignatureHelpProviderRegistry.onDidChange(update));\n\n    update();\n    return _this;\n  }\n\n  EditorModeContext.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n\n  EditorModeContext.prototype.reset = function () {\n    var _this = this;\n\n    this._contextKeyService.bufferChangeEvents(function () {\n      _this._langId.reset();\n\n      _this._hasCompletionItemProvider.reset();\n\n      _this._hasCodeActionsProvider.reset();\n\n      _this._hasCodeLensProvider.reset();\n\n      _this._hasDefinitionProvider.reset();\n\n      _this._hasDeclarationProvider.reset();\n\n      _this._hasImplementationProvider.reset();\n\n      _this._hasTypeDefinitionProvider.reset();\n\n      _this._hasHoverProvider.reset();\n\n      _this._hasDocumentHighlightProvider.reset();\n\n      _this._hasDocumentSymbolProvider.reset();\n\n      _this._hasReferenceProvider.reset();\n\n      _this._hasRenameProvider.reset();\n\n      _this._hasDocumentFormattingProvider.reset();\n\n      _this._hasDocumentSelectionFormattingProvider.reset();\n\n      _this._hasSignatureHelpProvider.reset();\n\n      _this._isInWalkThrough.reset();\n    });\n  };\n\n  EditorModeContext.prototype._update = function () {\n    var _this = this;\n\n    var model = this._editor.getModel();\n\n    if (!model) {\n      this.reset();\n      return;\n    }\n\n    this._contextKeyService.bufferChangeEvents(function () {\n      _this._langId.set(model.getLanguageIdentifier().language);\n\n      _this._hasCompletionItemProvider.set(modes.CompletionProviderRegistry.has(model));\n\n      _this._hasCodeActionsProvider.set(modes.CodeActionProviderRegistry.has(model));\n\n      _this._hasCodeLensProvider.set(modes.CodeLensProviderRegistry.has(model));\n\n      _this._hasDefinitionProvider.set(modes.DefinitionProviderRegistry.has(model));\n\n      _this._hasDeclarationProvider.set(modes.DeclarationProviderRegistry.has(model));\n\n      _this._hasImplementationProvider.set(modes.ImplementationProviderRegistry.has(model));\n\n      _this._hasTypeDefinitionProvider.set(modes.TypeDefinitionProviderRegistry.has(model));\n\n      _this._hasHoverProvider.set(modes.HoverProviderRegistry.has(model));\n\n      _this._hasDocumentHighlightProvider.set(modes.DocumentHighlightProviderRegistry.has(model));\n\n      _this._hasDocumentSymbolProvider.set(modes.DocumentSymbolProviderRegistry.has(model));\n\n      _this._hasReferenceProvider.set(modes.ReferenceProviderRegistry.has(model));\n\n      _this._hasRenameProvider.set(modes.RenameProviderRegistry.has(model));\n\n      _this._hasSignatureHelpProvider.set(modes.SignatureHelpProviderRegistry.has(model));\n\n      _this._hasDocumentFormattingProvider.set(modes.DocumentFormattingEditProviderRegistry.has(model) || modes.DocumentRangeFormattingEditProviderRegistry.has(model));\n\n      _this._hasDocumentSelectionFormattingProvider.set(modes.DocumentRangeFormattingEditProviderRegistry.has(model));\n\n      _this._hasMultipleDocumentFormattingProvider.set(modes.DocumentFormattingEditProviderRegistry.all(model).length + modes.DocumentRangeFormattingEditProviderRegistry.all(model).length > 1);\n\n      _this._hasMultipleDocumentSelectionFormattingProvider.set(modes.DocumentRangeFormattingEditProviderRegistry.all(model).length > 1);\n\n      _this._isInWalkThrough.set(model.uri.scheme === Schemas.walkThroughSnippet);\n    });\n  };\n\n  return EditorModeContext;\n}(Disposable);\n\nexport { EditorModeContext };\n\nvar CodeEditorWidgetFocusTracker =\n/** @class */\nfunction (_super) {\n  __extends(CodeEditorWidgetFocusTracker, _super);\n\n  function CodeEditorWidgetFocusTracker(domElement) {\n    var _this = _super.call(this) || this;\n\n    _this._onChange = _this._register(new Emitter());\n    _this.onChange = _this._onChange.event;\n    _this._hasFocus = false;\n    _this._domFocusTracker = _this._register(dom.trackFocus(domElement));\n\n    _this._register(_this._domFocusTracker.onDidFocus(function () {\n      _this._hasFocus = true;\n\n      _this._onChange.fire(undefined);\n    }));\n\n    _this._register(_this._domFocusTracker.onDidBlur(function () {\n      _this._hasFocus = false;\n\n      _this._onChange.fire(undefined);\n    }));\n\n    return _this;\n  }\n\n  CodeEditorWidgetFocusTracker.prototype.hasFocus = function () {\n    return this._hasFocus;\n  };\n\n  return CodeEditorWidgetFocusTracker;\n}(Disposable);\n\nvar squigglyStart = encodeURIComponent(\"<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 6 3' enable-background='new 0 0 6 3' height='3' width='6'><g fill='\");\nvar squigglyEnd = encodeURIComponent(\"'><polygon points='5.5,0 2.5,3 1.1,3 4.1,0'/><polygon points='4,0 6,2 6,0.6 5.4,0'/><polygon points='0,2 1,3 2.4,3 0,0.6'/></g></svg>\");\n\nfunction getSquigglySVGData(color) {\n  return squigglyStart + encodeURIComponent(color.toString()) + squigglyEnd;\n}\n\nvar dotdotdotStart = encodeURIComponent(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" height=\\\"3\\\" width=\\\"12\\\"><g fill=\\\"\");\nvar dotdotdotEnd = encodeURIComponent(\"\\\"><circle cx=\\\"1\\\" cy=\\\"1\\\" r=\\\"1\\\"/><circle cx=\\\"5\\\" cy=\\\"1\\\" r=\\\"1\\\"/><circle cx=\\\"9\\\" cy=\\\"1\\\" r=\\\"1\\\"/></g></svg>\");\n\nfunction getDotDotDotSVGData(color) {\n  return dotdotdotStart + encodeURIComponent(color.toString()) + dotdotdotEnd;\n}\n\nregisterThemingParticipant(function (theme, collector) {\n  var errorBorderColor = theme.getColor(editorErrorBorder);\n\n  if (errorBorderColor) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-error\"\n    /* EditorErrorDecoration */\n    + \" { border-bottom: 4px double \" + errorBorderColor + \"; }\");\n  }\n\n  var errorForeground = theme.getColor(editorErrorForeground);\n\n  if (errorForeground) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-error\"\n    /* EditorErrorDecoration */\n    + \" { background: url(\\\"data:image/svg+xml,\" + getSquigglySVGData(errorForeground) + \"\\\") repeat-x bottom left; }\");\n  }\n\n  var warningBorderColor = theme.getColor(editorWarningBorder);\n\n  if (warningBorderColor) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-warning\"\n    /* EditorWarningDecoration */\n    + \" { border-bottom: 4px double \" + warningBorderColor + \"; }\");\n  }\n\n  var warningForeground = theme.getColor(editorWarningForeground);\n\n  if (warningForeground) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-warning\"\n    /* EditorWarningDecoration */\n    + \" { background: url(\\\"data:image/svg+xml,\" + getSquigglySVGData(warningForeground) + \"\\\") repeat-x bottom left; }\");\n  }\n\n  var infoBorderColor = theme.getColor(editorInfoBorder);\n\n  if (infoBorderColor) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-info\"\n    /* EditorInfoDecoration */\n    + \" { border-bottom: 4px double \" + infoBorderColor + \"; }\");\n  }\n\n  var infoForeground = theme.getColor(editorInfoForeground);\n\n  if (infoForeground) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-info\"\n    /* EditorInfoDecoration */\n    + \" { background: url(\\\"data:image/svg+xml,\" + getSquigglySVGData(infoForeground) + \"\\\") repeat-x bottom left; }\");\n  }\n\n  var hintBorderColor = theme.getColor(editorHintBorder);\n\n  if (hintBorderColor) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-hint\"\n    /* EditorHintDecoration */\n    + \" { border-bottom: 2px dotted \" + hintBorderColor + \"; }\");\n  }\n\n  var hintForeground = theme.getColor(editorHintForeground);\n\n  if (hintForeground) {\n    collector.addRule(\".monaco-editor .\" + \"squiggly-hint\"\n    /* EditorHintDecoration */\n    + \" { background: url(\\\"data:image/svg+xml,\" + getDotDotDotSVGData(hintForeground) + \"\\\") no-repeat bottom left; }\");\n  }\n\n  var unnecessaryForeground = theme.getColor(editorUnnecessaryCodeOpacity);\n\n  if (unnecessaryForeground) {\n    collector.addRule(\".\" + SHOW_UNUSED_ENABLED_CLASS + \" .monaco-editor .\" + \"squiggly-inline-unnecessary\"\n    /* EditorUnnecessaryInlineDecoration */\n    + \" { opacity: \" + unnecessaryForeground.rgba.a + \"; }\");\n  }\n\n  var unnecessaryBorder = theme.getColor(editorUnnecessaryCodeBorder);\n\n  if (unnecessaryBorder) {\n    collector.addRule(\".\" + SHOW_UNUSED_ENABLED_CLASS + \" .monaco-editor .\" + \"squiggly-unnecessary\"\n    /* EditorUnnecessaryDecoration */\n    + \" { border-bottom: 2px dashed \" + unnecessaryBorder + \"; }\");\n  }\n\n  var deprecatedForeground = theme.getColor(editorForeground) || 'inherit';\n  collector.addRule(\".monaco-editor .\" + \"squiggly-inline-deprecated\"\n  /* EditorDeprecatedInlineDecoration */\n  + \" { text-decoration: line-through; text-decoration-color: \" + deprecatedForeground + \"}\");\n});","map":null,"metadata":{},"sourceType":"module"}