{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as dom from '../../../base/browser/dom.js';\nimport { GlobalMouseMoveMonitor, standardMouseMoveMerger } from '../../../base/browser/globalMouseMoveMonitor.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport './lightBulbWidget.css';\nimport { TextModel } from '../../common/model/textModel.js';\nimport * as nls from '../../../nls.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nvar LightBulbState;\n\n(function (LightBulbState) {\n  LightBulbState.Hidden = new (\n  /** @class */\n  function () {\n    function class_1() {\n      this.type = 0\n      /* Hidden */\n      ;\n    }\n\n    return class_1;\n  }())();\n\n  var Showing =\n  /** @class */\n  function () {\n    function Showing(actions, editorPosition, widgetPosition) {\n      this.actions = actions;\n      this.editorPosition = editorPosition;\n      this.widgetPosition = widgetPosition;\n      this.type = 1\n      /* Showing */\n      ;\n    }\n\n    return Showing;\n  }();\n\n  LightBulbState.Showing = Showing;\n})(LightBulbState || (LightBulbState = {}));\n\nvar LightBulbWidget =\n/** @class */\nfunction (_super) {\n  __extends(LightBulbWidget, _super);\n\n  function LightBulbWidget(_editor, _quickFixActionId, _keybindingService) {\n    var _this = _super.call(this) || this;\n\n    _this._editor = _editor;\n    _this._quickFixActionId = _quickFixActionId;\n    _this._keybindingService = _keybindingService;\n    _this._onClick = _this._register(new Emitter());\n    _this.onClick = _this._onClick.event;\n    _this._state = LightBulbState.Hidden;\n    _this._domNode = document.createElement('div');\n    _this._domNode.className = 'lightbulb-glyph';\n\n    _this._editor.addContentWidget(_this);\n\n    _this._register(_this._editor.onDidChangeModelContent(function (_) {\n      // cancel when the line in question has been removed\n      var editorModel = _this._editor.getModel();\n\n      if (_this._state.type !== 1\n      /* Showing */\n      || !editorModel || _this._state.editorPosition.lineNumber >= editorModel.getLineCount()) {\n        _this.hide();\n      }\n    }));\n\n    _this._register(dom.addStandardDisposableListener(_this._domNode, 'mousedown', function (e) {\n      if (_this._state.type !== 1\n      /* Showing */\n      ) {\n          return;\n        } // Make sure that focus / cursor location is not lost when clicking widget icon\n\n\n      _this._editor.focus();\n\n      e.preventDefault(); // a bit of extra work to make sure the menu\n      // doesn't cover the line-text\n\n      var _a = dom.getDomNodePagePosition(_this._domNode),\n          top = _a.top,\n          height = _a.height;\n\n      var lineHeight = _this._editor.getConfiguration().lineHeight;\n\n      var pad = Math.floor(lineHeight / 3);\n\n      if (_this._state.widgetPosition.position !== null && _this._state.widgetPosition.position.lineNumber < _this._state.editorPosition.lineNumber) {\n        pad += lineHeight;\n      }\n\n      _this._onClick.fire({\n        x: e.posx,\n        y: top + height + pad,\n        actions: _this._state.actions\n      });\n    }));\n\n    _this._register(dom.addDisposableListener(_this._domNode, 'mouseenter', function (e) {\n      if ((e.buttons & 1) !== 1) {\n        return;\n      } // mouse enters lightbulb while the primary/left button\n      // is being pressed -> hide the lightbulb and block future\n      // showings until mouse is released\n\n\n      _this.hide();\n\n      var monitor = new GlobalMouseMoveMonitor();\n      monitor.startMonitoring(standardMouseMoveMerger, function () {}, function () {\n        monitor.dispose();\n      });\n    }));\n\n    _this._register(_this._editor.onDidChangeConfiguration(function (e) {\n      // hide when told to do so\n      if (e.contribInfo && !_this._editor.getConfiguration().contribInfo.lightbulbEnabled) {\n        _this.hide();\n      }\n    }));\n\n    _this._updateLightBulbTitle();\n\n    _this._register(_this._keybindingService.onDidUpdateKeybindings(_this._updateLightBulbTitle, _this));\n\n    return _this;\n  }\n\n  LightBulbWidget.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this._editor.removeContentWidget(this);\n  };\n\n  LightBulbWidget.prototype.getId = function () {\n    return 'LightBulbWidget';\n  };\n\n  LightBulbWidget.prototype.getDomNode = function () {\n    return this._domNode;\n  };\n\n  LightBulbWidget.prototype.getPosition = function () {\n    return this._state.type === 1\n    /* Showing */\n    ? this._state.widgetPosition : null;\n  };\n\n  LightBulbWidget.prototype.update = function (actions, atPosition) {\n    var _this = this;\n\n    if (actions.actions.length <= 0) {\n      return this.hide();\n    }\n\n    var config = this._editor.getConfiguration();\n\n    if (!config.contribInfo.lightbulbEnabled) {\n      return this.hide();\n    }\n\n    var lineNumber = atPosition.lineNumber,\n        column = atPosition.column;\n\n    var model = this._editor.getModel();\n\n    if (!model) {\n      return this.hide();\n    }\n\n    var tabSize = model.getOptions().tabSize;\n    var lineContent = model.getLineContent(lineNumber);\n    var indent = TextModel.computeIndentLevel(lineContent, tabSize);\n    var lineHasSpace = config.fontInfo.spaceWidth * indent > 22;\n\n    var isFolded = function (lineNumber) {\n      return lineNumber > 2 && _this._editor.getTopForLineNumber(lineNumber) === _this._editor.getTopForLineNumber(lineNumber - 1);\n    };\n\n    var effectiveLineNumber = lineNumber;\n\n    if (!lineHasSpace) {\n      if (lineNumber > 1 && !isFolded(lineNumber - 1)) {\n        effectiveLineNumber -= 1;\n      } else if (!isFolded(lineNumber + 1)) {\n        effectiveLineNumber += 1;\n      } else if (column * config.fontInfo.spaceWidth < 22) {\n        // cannot show lightbulb above/below and showing\n        // it inline would overlay the cursor...\n        return this.hide();\n      }\n    }\n\n    this._state = new LightBulbState.Showing(actions, atPosition, {\n      position: {\n        lineNumber: effectiveLineNumber,\n        column: 1\n      },\n      preference: LightBulbWidget._posPref\n    });\n    dom.toggleClass(this._domNode, 'autofixable', actions.hasAutoFix);\n\n    this._editor.layoutContentWidget(this);\n  };\n\n  Object.defineProperty(LightBulbWidget.prototype, \"title\", {\n    set: function (value) {\n      this._domNode.title = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LightBulbWidget.prototype.hide = function () {\n    this._state = LightBulbState.Hidden;\n\n    this._editor.layoutContentWidget(this);\n  };\n\n  LightBulbWidget.prototype._updateLightBulbTitle = function () {\n    var kb = this._keybindingService.lookupKeybinding(this._quickFixActionId);\n\n    var title;\n\n    if (kb) {\n      title = nls.localize('quickFixWithKb', \"Show Fixes ({0})\", kb.getLabel());\n    } else {\n      title = nls.localize('quickFix', \"Show Fixes\");\n    }\n\n    this.title = title;\n  };\n\n  LightBulbWidget._posPref = [0\n  /* EXACT */\n  ];\n  LightBulbWidget = __decorate([__param(2, IKeybindingService)], LightBulbWidget);\n  return LightBulbWidget;\n}(Disposable);\n\nexport { LightBulbWidget };","map":null,"metadata":{},"sourceType":"module"}