{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as nls from '../../../nls.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { ActionViewItem, Separator } from '../../../base/browser/ui/actionbar/actionbar.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { IMenuService } from '../../../platform/actions/common/actions.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextMenuService, IContextViewService } from '../../../platform/contextview/browser/contextView.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\n\nvar ContextMenuController =\n/** @class */\nfunction () {\n  function ContextMenuController(editor, _contextMenuService, _contextViewService, _contextKeyService, _keybindingService, _menuService) {\n    var _this = this;\n\n    this._contextMenuService = _contextMenuService;\n    this._contextViewService = _contextViewService;\n    this._contextKeyService = _contextKeyService;\n    this._keybindingService = _keybindingService;\n    this._menuService = _menuService;\n    this._toDispose = new DisposableStore();\n    this._contextMenuIsBeingShownCount = 0;\n    this._editor = editor;\n\n    this._toDispose.add(this._editor.onContextMenu(function (e) {\n      return _this._onContextMenu(e);\n    }));\n\n    this._toDispose.add(this._editor.onMouseWheel(function (e) {\n      if (_this._contextMenuIsBeingShownCount > 0) {\n        _this._contextViewService.hideContextView();\n      }\n    }));\n\n    this._toDispose.add(this._editor.onKeyDown(function (e) {\n      if (e.keyCode === 58\n      /* ContextMenu */\n      ) {\n          // Chrome is funny like that\n          e.preventDefault();\n          e.stopPropagation();\n\n          _this.showContextMenu();\n        }\n    }));\n  }\n\n  ContextMenuController.get = function (editor) {\n    return editor.getContribution(ContextMenuController.ID);\n  };\n\n  ContextMenuController.prototype._onContextMenu = function (e) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    if (!this._editor.getConfiguration().contribInfo.contextmenu) {\n      this._editor.focus(); // Ensure the cursor is at the position of the mouse click\n\n\n      if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) {\n        this._editor.setPosition(e.target.position);\n      }\n\n      return; // Context menu is turned off through configuration\n    }\n\n    if (e.target.type === 12\n    /* OVERLAY_WIDGET */\n    ) {\n        return; // allow native menu on widgets to support right click on input field for example in find\n      }\n\n    e.event.preventDefault();\n\n    if (e.target.type !== 6\n    /* CONTENT_TEXT */\n    && e.target.type !== 7\n    /* CONTENT_EMPTY */\n    && e.target.type !== 1\n    /* TEXTAREA */\n    ) {\n        return; // only support mouse click into text or native context menu key for now\n      } // Ensure the editor gets focus if it hasn't, so the right events are being sent to other contributions\n\n\n    this._editor.focus(); // Ensure the cursor is at the position of the mouse click\n\n\n    if (e.target.position && !this._editor.getSelection().containsPosition(e.target.position)) {\n      this._editor.setPosition(e.target.position);\n    } // Unless the user triggerd the context menu through Shift+F10, use the mouse position as menu position\n\n\n    var anchor = null;\n\n    if (e.target.type !== 1\n    /* TEXTAREA */\n    ) {\n        anchor = {\n          x: e.event.posx - 1,\n          width: 2,\n          y: e.event.posy - 1,\n          height: 2\n        };\n      } // Show the context menu\n\n\n    this.showContextMenu(anchor);\n  };\n\n  ContextMenuController.prototype.showContextMenu = function (anchor) {\n    if (!this._editor.getConfiguration().contribInfo.contextmenu) {\n      return; // Context menu is turned off through configuration\n    }\n\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    if (!this._contextMenuService) {\n      this._editor.focus();\n\n      return; // We need the context menu service to function\n    } // Find actions available for menu\n\n\n    var menuActions = this._getMenuActions(this._editor.getModel()); // Show menu if we have actions to show\n\n\n    if (menuActions.length > 0) {\n      this._doShowContextMenu(menuActions, anchor);\n    }\n  };\n\n  ContextMenuController.prototype._getMenuActions = function (model) {\n    var result = [];\n\n    var contextMenu = this._menuService.createMenu(7\n    /* EditorContext */\n    , this._contextKeyService);\n\n    var groups = contextMenu.getActions({\n      arg: model.uri\n    });\n    contextMenu.dispose();\n\n    for (var _i = 0, groups_1 = groups; _i < groups_1.length; _i++) {\n      var group = groups_1[_i];\n      var actions = group[1];\n      result.push.apply(result, actions);\n      result.push(new Separator());\n    }\n\n    result.pop(); // remove last separator\n\n    return result;\n  };\n\n  ContextMenuController.prototype._doShowContextMenu = function (actions, anchor) {\n    var _this = this;\n\n    if (anchor === void 0) {\n      anchor = null;\n    }\n\n    if (!this._editor.hasModel()) {\n      return;\n    } // Disable hover\n\n\n    var oldHoverSetting = this._editor.getConfiguration().contribInfo.hover;\n\n    this._editor.updateOptions({\n      hover: {\n        enabled: false\n      }\n    });\n\n    if (!anchor) {\n      // Ensure selection is visible\n      this._editor.revealPosition(this._editor.getPosition(), 1\n      /* Immediate */\n      );\n\n      this._editor.render();\n\n      var cursorCoords = this._editor.getScrolledVisiblePosition(this._editor.getPosition()); // Translate to absolute editor position\n\n\n      var editorCoords = dom.getDomNodePagePosition(this._editor.getDomNode());\n      var posx = editorCoords.left + cursorCoords.left;\n      var posy = editorCoords.top + cursorCoords.top + cursorCoords.height;\n      anchor = {\n        x: posx,\n        y: posy\n      };\n    } // Show menu\n\n\n    this._contextMenuIsBeingShownCount++;\n\n    this._contextMenuService.showContextMenu({\n      getAnchor: function () {\n        return anchor;\n      },\n      getActions: function () {\n        return actions;\n      },\n      getActionViewItem: function (action) {\n        var keybinding = _this._keybindingFor(action);\n\n        if (keybinding) {\n          return new ActionViewItem(action, action, {\n            label: true,\n            keybinding: keybinding.getLabel(),\n            isMenu: true\n          });\n        }\n\n        var customActionViewItem = action;\n\n        if (typeof customActionViewItem.getActionViewItem === 'function') {\n          return customActionViewItem.getActionViewItem();\n        }\n\n        return new ActionViewItem(action, action, {\n          icon: true,\n          label: true,\n          isMenu: true\n        });\n      },\n      getKeyBinding: function (action) {\n        return _this._keybindingFor(action);\n      },\n      onHide: function (wasCancelled) {\n        _this._contextMenuIsBeingShownCount--;\n\n        _this._editor.focus();\n\n        _this._editor.updateOptions({\n          hover: oldHoverSetting\n        });\n      }\n    });\n  };\n\n  ContextMenuController.prototype._keybindingFor = function (action) {\n    return this._keybindingService.lookupKeybinding(action.id);\n  };\n\n  ContextMenuController.prototype.getId = function () {\n    return ContextMenuController.ID;\n  };\n\n  ContextMenuController.prototype.dispose = function () {\n    if (this._contextMenuIsBeingShownCount > 0) {\n      this._contextViewService.hideContextView();\n    }\n\n    this._toDispose.dispose();\n  };\n\n  ContextMenuController.ID = 'editor.contrib.contextmenu';\n  ContextMenuController = __decorate([__param(1, IContextMenuService), __param(2, IContextViewService), __param(3, IContextKeyService), __param(4, IKeybindingService), __param(5, IMenuService)], ContextMenuController);\n  return ContextMenuController;\n}();\n\nexport { ContextMenuController };\n\nvar ShowContextMenu =\n/** @class */\nfunction (_super) {\n  __extends(ShowContextMenu, _super);\n\n  function ShowContextMenu() {\n    return _super.call(this, {\n      id: 'editor.action.showContextMenu',\n      label: nls.localize('action.showContextMenu.label', \"Show Editor Context Menu\"),\n      alias: 'Show Editor Context Menu',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.textInputFocus,\n        primary: 1024\n        /* Shift */\n        | 68\n        /* F10 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  ShowContextMenu.prototype.run = function (accessor, editor) {\n    var contribution = ContextMenuController.get(editor);\n    contribution.showContextMenu();\n  };\n\n  return ShowContextMenu;\n}(EditorAction);\n\nregisterEditorContribution(ContextMenuController);\nregisterEditorAction(ShowContextMenu);","map":null,"metadata":{},"sourceType":"module"}