{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as nls from '../../../nls.js';\nimport { RunOnceScheduler } from '../../../base/common/async.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { Disposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { CursorMoveCommands } from '../../common/controller/cursorMoveCommands.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { ModelDecorationOptions } from '../../common/model/textModel.js';\nimport { DocumentHighlightProviderRegistry } from '../../common/modes.js';\nimport { CommonFindController } from '../find/findController.js';\nimport { overviewRulerSelectionHighlightForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { themeColorFromId } from '../../../platform/theme/common/themeService.js';\n\nvar InsertCursorAbove =\n/** @class */\nfunction (_super) {\n  __extends(InsertCursorAbove, _super);\n\n  function InsertCursorAbove() {\n    return _super.call(this, {\n      id: 'editor.action.insertCursorAbove',\n      label: nls.localize('mutlicursor.insertAbove', \"Add Cursor Above\"),\n      alias: 'Add Cursor Above',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 512\n        /* Alt */\n        | 16\n        /* UpArrow */\n        ,\n        linux: {\n          primary: 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 16\n          /* UpArrow */\n          ,\n          secondary: [2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 16\n          /* UpArrow */\n          ]\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menubarOpts: {\n        menuId: 22\n        /* MenubarSelectionMenu */\n        ,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAbove',\n          comment: ['&& denotes a mnemonic']\n        }, \"&&Add Cursor Above\"),\n        order: 2\n      }\n    }) || this;\n  }\n\n  InsertCursorAbove.prototype.run = function (accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var useLogicalLine = args && args.logicalLine === true;\n\n    var cursors = editor._getCursors();\n\n    var context = cursors.context;\n\n    if (context.config.readOnly) {\n      return;\n    }\n\n    context.model.pushStackElement();\n    cursors.setStates(args.source, 3\n    /* Explicit */\n    , CursorMoveCommands.addCursorUp(context, cursors.getAll(), useLogicalLine));\n    cursors.reveal(true, 1\n    /* TopMost */\n    , 0\n    /* Smooth */\n    );\n  };\n\n  return InsertCursorAbove;\n}(EditorAction);\n\nexport { InsertCursorAbove };\n\nvar InsertCursorBelow =\n/** @class */\nfunction (_super) {\n  __extends(InsertCursorBelow, _super);\n\n  function InsertCursorBelow() {\n    return _super.call(this, {\n      id: 'editor.action.insertCursorBelow',\n      label: nls.localize('mutlicursor.insertBelow', \"Add Cursor Below\"),\n      alias: 'Add Cursor Below',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 512\n        /* Alt */\n        | 18\n        /* DownArrow */\n        ,\n        linux: {\n          primary: 1024\n          /* Shift */\n          | 512\n          /* Alt */\n          | 18\n          /* DownArrow */\n          ,\n          secondary: [2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 18\n          /* DownArrow */\n          ]\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menubarOpts: {\n        menuId: 22\n        /* MenubarSelectionMenu */\n        ,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorBelow',\n          comment: ['&& denotes a mnemonic']\n        }, \"A&&dd Cursor Below\"),\n        order: 3\n      }\n    }) || this;\n  }\n\n  InsertCursorBelow.prototype.run = function (accessor, editor, args) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var useLogicalLine = args && args.logicalLine === true;\n\n    var cursors = editor._getCursors();\n\n    var context = cursors.context;\n\n    if (context.config.readOnly) {\n      return;\n    }\n\n    context.model.pushStackElement();\n    cursors.setStates(args.source, 3\n    /* Explicit */\n    , CursorMoveCommands.addCursorDown(context, cursors.getAll(), useLogicalLine));\n    cursors.reveal(true, 2\n    /* BottomMost */\n    , 0\n    /* Smooth */\n    );\n  };\n\n  return InsertCursorBelow;\n}(EditorAction);\n\nexport { InsertCursorBelow };\n\nvar InsertCursorAtEndOfEachLineSelected =\n/** @class */\nfunction (_super) {\n  __extends(InsertCursorAtEndOfEachLineSelected, _super);\n\n  function InsertCursorAtEndOfEachLineSelected() {\n    return _super.call(this, {\n      id: 'editor.action.insertCursorAtEndOfEachLineSelected',\n      label: nls.localize('mutlicursor.insertAtEndOfEachLineSelected', \"Add Cursors to Line Ends\"),\n      alias: 'Add Cursors to Line Ends',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 1024\n        /* Shift */\n        | 512\n        /* Alt */\n        | 39\n        /* KEY_I */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menubarOpts: {\n        menuId: 22\n        /* MenubarSelectionMenu */\n        ,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miInsertCursorAtEndOfEachLineSelected',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add C&&ursors to Line Ends\"),\n        order: 4\n      }\n    }) || this;\n  }\n\n  InsertCursorAtEndOfEachLineSelected.prototype.getCursorsForSelection = function (selection, model, result) {\n    if (selection.isEmpty()) {\n      return;\n    }\n\n    for (var i = selection.startLineNumber; i < selection.endLineNumber; i++) {\n      var currentLineMaxColumn = model.getLineMaxColumn(i);\n      result.push(new Selection(i, currentLineMaxColumn, i, currentLineMaxColumn));\n    }\n\n    if (selection.endColumn > 1) {\n      result.push(new Selection(selection.endLineNumber, selection.endColumn, selection.endLineNumber, selection.endColumn));\n    }\n  };\n\n  InsertCursorAtEndOfEachLineSelected.prototype.run = function (accessor, editor) {\n    var _this = this;\n\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var model = editor.getModel();\n    var selections = editor.getSelections();\n    var newSelections = [];\n    selections.forEach(function (sel) {\n      return _this.getCursorsForSelection(sel, model, newSelections);\n    });\n\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n  };\n\n  return InsertCursorAtEndOfEachLineSelected;\n}(EditorAction);\n\nvar InsertCursorAtEndOfLineSelected =\n/** @class */\nfunction (_super) {\n  __extends(InsertCursorAtEndOfLineSelected, _super);\n\n  function InsertCursorAtEndOfLineSelected() {\n    return _super.call(this, {\n      id: 'editor.action.addCursorsToBottom',\n      label: nls.localize('mutlicursor.addCursorsToBottom', \"Add Cursors To Bottom\"),\n      alias: 'Add Cursors To Bottom',\n      precondition: undefined\n    }) || this;\n  }\n\n  InsertCursorAtEndOfLineSelected.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var selections = editor.getSelections();\n    var lineCount = editor.getModel().getLineCount();\n    var newSelections = [];\n\n    for (var i = selections[0].startLineNumber; i <= lineCount; i++) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n  };\n\n  return InsertCursorAtEndOfLineSelected;\n}(EditorAction);\n\nvar InsertCursorAtTopOfLineSelected =\n/** @class */\nfunction (_super) {\n  __extends(InsertCursorAtTopOfLineSelected, _super);\n\n  function InsertCursorAtTopOfLineSelected() {\n    return _super.call(this, {\n      id: 'editor.action.addCursorsToTop',\n      label: nls.localize('mutlicursor.addCursorsToTop', \"Add Cursors To Top\"),\n      alias: 'Add Cursors To Top',\n      precondition: undefined\n    }) || this;\n  }\n\n  InsertCursorAtTopOfLineSelected.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var selections = editor.getSelections();\n    var newSelections = [];\n\n    for (var i = selections[0].startLineNumber; i >= 1; i--) {\n      newSelections.push(new Selection(i, selections[0].startColumn, i, selections[0].endColumn));\n    }\n\n    if (newSelections.length > 0) {\n      editor.setSelections(newSelections);\n    }\n  };\n\n  return InsertCursorAtTopOfLineSelected;\n}(EditorAction);\n\nvar MultiCursorSessionResult =\n/** @class */\nfunction () {\n  function MultiCursorSessionResult(selections, revealRange, revealScrollType) {\n    this.selections = selections;\n    this.revealRange = revealRange;\n    this.revealScrollType = revealScrollType;\n  }\n\n  return MultiCursorSessionResult;\n}();\n\nexport { MultiCursorSessionResult };\n\nvar MultiCursorSession =\n/** @class */\nfunction () {\n  function MultiCursorSession(_editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch) {\n    this._editor = _editor;\n    this.findController = findController;\n    this.isDisconnectedFromFindController = isDisconnectedFromFindController;\n    this.searchText = searchText;\n    this.wholeWord = wholeWord;\n    this.matchCase = matchCase;\n    this.currentMatch = currentMatch;\n  }\n\n  MultiCursorSession.create = function (editor, findController) {\n    if (!editor.hasModel()) {\n      return null;\n    }\n\n    var findState = findController.getState(); // Find widget owns entirely what we search for if:\n    //  - focus is not in the editor (i.e. it is in the find widget)\n    //  - and the search widget is visible\n    //  - and the search string is non-empty\n\n    if (!editor.hasTextFocus() && findState.isRevealed && findState.searchString.length > 0) {\n      // Find widget owns what is searched for\n      return new MultiCursorSession(editor, findController, false, findState.searchString, findState.wholeWord, findState.matchCase, null);\n    } // Otherwise, the selection gives the search text, and the find widget gives the search settings\n    // The exception is the find state disassociation case: when beginning with a single, collapsed selection\n\n\n    var isDisconnectedFromFindController = false;\n    var wholeWord;\n    var matchCase;\n    var selections = editor.getSelections();\n\n    if (selections.length === 1 && selections[0].isEmpty()) {\n      isDisconnectedFromFindController = true;\n      wholeWord = true;\n      matchCase = true;\n    } else {\n      wholeWord = findState.wholeWord;\n      matchCase = findState.matchCase;\n    } // Selection owns what is searched for\n\n\n    var s = editor.getSelection();\n    var searchText;\n    var currentMatch = null;\n\n    if (s.isEmpty()) {\n      // selection is empty => expand to current word\n      var word = editor.getModel().getWordAtPosition(s.getStartPosition());\n\n      if (!word) {\n        return null;\n      }\n\n      searchText = word.word;\n      currentMatch = new Selection(s.startLineNumber, word.startColumn, s.startLineNumber, word.endColumn);\n    } else {\n      searchText = editor.getModel().getValueInRange(s).replace(/\\r\\n/g, '\\n');\n    }\n\n    return new MultiCursorSession(editor, findController, isDisconnectedFromFindController, searchText, wholeWord, matchCase, currentMatch);\n  };\n\n  MultiCursorSession.prototype.addSelectionToNextFindMatch = function () {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    var nextMatch = this._getNextMatch();\n\n    if (!nextMatch) {\n      return null;\n    }\n\n    var allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.concat(nextMatch), nextMatch, 0\n    /* Smooth */\n    );\n  };\n\n  MultiCursorSession.prototype.moveSelectionToNextFindMatch = function () {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    var nextMatch = this._getNextMatch();\n\n    if (!nextMatch) {\n      return null;\n    }\n\n    var allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(nextMatch), nextMatch, 0\n    /* Smooth */\n    );\n  };\n\n  MultiCursorSession.prototype._getNextMatch = function () {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    if (this.currentMatch) {\n      var result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n\n    this.findController.highlightFindOptions();\n\n    var allSelections = this._editor.getSelections();\n\n    var lastAddedSelection = allSelections[allSelections.length - 1];\n\n    var nextMatch = this._editor.getModel().findNextMatch(this.searchText, lastAddedSelection.getEndPosition(), false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n\n    if (!nextMatch) {\n      return null;\n    }\n\n    return new Selection(nextMatch.range.startLineNumber, nextMatch.range.startColumn, nextMatch.range.endLineNumber, nextMatch.range.endColumn);\n  };\n\n  MultiCursorSession.prototype.addSelectionToPreviousFindMatch = function () {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    var previousMatch = this._getPreviousMatch();\n\n    if (!previousMatch) {\n      return null;\n    }\n\n    var allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.concat(previousMatch), previousMatch, 0\n    /* Smooth */\n    );\n  };\n\n  MultiCursorSession.prototype.moveSelectionToPreviousFindMatch = function () {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    var previousMatch = this._getPreviousMatch();\n\n    if (!previousMatch) {\n      return null;\n    }\n\n    var allSelections = this._editor.getSelections();\n\n    return new MultiCursorSessionResult(allSelections.slice(0, allSelections.length - 1).concat(previousMatch), previousMatch, 0\n    /* Smooth */\n    );\n  };\n\n  MultiCursorSession.prototype._getPreviousMatch = function () {\n    if (!this._editor.hasModel()) {\n      return null;\n    }\n\n    if (this.currentMatch) {\n      var result = this.currentMatch;\n      this.currentMatch = null;\n      return result;\n    }\n\n    this.findController.highlightFindOptions();\n\n    var allSelections = this._editor.getSelections();\n\n    var lastAddedSelection = allSelections[allSelections.length - 1];\n\n    var previousMatch = this._editor.getModel().findPreviousMatch(this.searchText, lastAddedSelection.getStartPosition(), false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false);\n\n    if (!previousMatch) {\n      return null;\n    }\n\n    return new Selection(previousMatch.range.startLineNumber, previousMatch.range.startColumn, previousMatch.range.endLineNumber, previousMatch.range.endColumn);\n  };\n\n  MultiCursorSession.prototype.selectAll = function () {\n    if (!this._editor.hasModel()) {\n      return [];\n    }\n\n    this.findController.highlightFindOptions();\n    return this._editor.getModel().findMatches(this.searchText, true, false, this.matchCase, this.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false, 1073741824\n    /* MAX_SAFE_SMALL_INTEGER */\n    );\n  };\n\n  return MultiCursorSession;\n}();\n\nexport { MultiCursorSession };\n\nvar MultiCursorSelectionController =\n/** @class */\nfunction (_super) {\n  __extends(MultiCursorSelectionController, _super);\n\n  function MultiCursorSelectionController(editor) {\n    var _this = _super.call(this) || this;\n\n    _this._sessionDispose = _this._register(new DisposableStore());\n    _this._editor = editor;\n    _this._ignoreSelectionChange = false;\n    _this._session = null;\n    return _this;\n  }\n\n  MultiCursorSelectionController.get = function (editor) {\n    return editor.getContribution(MultiCursorSelectionController.ID);\n  };\n\n  MultiCursorSelectionController.prototype.dispose = function () {\n    this._endSession();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  MultiCursorSelectionController.prototype.getId = function () {\n    return MultiCursorSelectionController.ID;\n  };\n\n  MultiCursorSelectionController.prototype._beginSessionIfNeeded = function (findController) {\n    var _this = this;\n\n    if (!this._session) {\n      // Create a new session\n      var session = MultiCursorSession.create(this._editor, findController);\n\n      if (!session) {\n        return;\n      }\n\n      this._session = session;\n      var newState = {\n        searchString: this._session.searchText\n      };\n\n      if (this._session.isDisconnectedFromFindController) {\n        newState.wholeWordOverride = 1\n        /* True */\n        ;\n        newState.matchCaseOverride = 1\n        /* True */\n        ;\n        newState.isRegexOverride = 2\n        /* False */\n        ;\n      }\n\n      findController.getState().change(newState, false);\n\n      this._sessionDispose.add(this._editor.onDidChangeCursorSelection(function (e) {\n        if (_this._ignoreSelectionChange) {\n          return;\n        }\n\n        _this._endSession();\n      }));\n\n      this._sessionDispose.add(this._editor.onDidBlurEditorText(function () {\n        _this._endSession();\n      }));\n\n      this._sessionDispose.add(findController.getState().onFindReplaceStateChange(function (e) {\n        if (e.matchCase || e.wholeWord) {\n          _this._endSession();\n        }\n      }));\n    }\n  };\n\n  MultiCursorSelectionController.prototype._endSession = function () {\n    this._sessionDispose.clear();\n\n    if (this._session && this._session.isDisconnectedFromFindController) {\n      var newState = {\n        wholeWordOverride: 0\n        /* NotSet */\n        ,\n        matchCaseOverride: 0\n        /* NotSet */\n        ,\n        isRegexOverride: 0\n        /* NotSet */\n\n      };\n\n      this._session.findController.getState().change(newState, false);\n    }\n\n    this._session = null;\n  };\n\n  MultiCursorSelectionController.prototype._setSelections = function (selections) {\n    this._ignoreSelectionChange = true;\n\n    this._editor.setSelections(selections);\n\n    this._ignoreSelectionChange = false;\n  };\n\n  MultiCursorSelectionController.prototype._expandEmptyToWord = function (model, selection) {\n    if (!selection.isEmpty()) {\n      return selection;\n    }\n\n    var word = model.getWordAtPosition(selection.getStartPosition());\n\n    if (!word) {\n      return selection;\n    }\n\n    return new Selection(selection.startLineNumber, word.startColumn, selection.startLineNumber, word.endColumn);\n  };\n\n  MultiCursorSelectionController.prototype._applySessionResult = function (result) {\n    if (!result) {\n      return;\n    }\n\n    this._setSelections(result.selections);\n\n    if (result.revealRange) {\n      this._editor.revealRangeInCenterIfOutsideViewport(result.revealRange, result.revealScrollType);\n    }\n  };\n\n  MultiCursorSelectionController.prototype.getSession = function (findController) {\n    return this._session;\n  };\n\n  MultiCursorSelectionController.prototype.addSelectionToNextFindMatch = function (findController) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    if (!this._session) {\n      // If there are multiple cursors, handle the case where they do not all select the same text.\n      var allSelections = this._editor.getSelections();\n\n      if (allSelections.length > 1) {\n        var findState = findController.getState();\n        var matchCase = findState.matchCase;\n        var selectionsContainSameText = modelRangesContainSameText(this._editor.getModel(), allSelections, matchCase);\n\n        if (!selectionsContainSameText) {\n          var model = this._editor.getModel();\n\n          var resultingSelections = [];\n\n          for (var i = 0, len = allSelections.length; i < len; i++) {\n            resultingSelections[i] = this._expandEmptyToWord(model, allSelections[i]);\n          }\n\n          this._editor.setSelections(resultingSelections);\n\n          return;\n        }\n      }\n    }\n\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.addSelectionToNextFindMatch());\n    }\n  };\n\n  MultiCursorSelectionController.prototype.addSelectionToPreviousFindMatch = function (findController) {\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.addSelectionToPreviousFindMatch());\n    }\n  };\n\n  MultiCursorSelectionController.prototype.moveSelectionToNextFindMatch = function (findController) {\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.moveSelectionToNextFindMatch());\n    }\n  };\n\n  MultiCursorSelectionController.prototype.moveSelectionToPreviousFindMatch = function (findController) {\n    this._beginSessionIfNeeded(findController);\n\n    if (this._session) {\n      this._applySessionResult(this._session.moveSelectionToPreviousFindMatch());\n    }\n  };\n\n  MultiCursorSelectionController.prototype.selectAll = function (findController) {\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    var matches = null;\n    var findState = findController.getState(); // Special case: find widget owns entirely what we search for if:\n    // - focus is not in the editor (i.e. it is in the find widget)\n    // - and the search widget is visible\n    // - and the search string is non-empty\n    // - and we're searching for a regex\n\n    if (findState.isRevealed && findState.searchString.length > 0 && findState.isRegex) {\n      matches = this._editor.getModel().findMatches(findState.searchString, true, findState.isRegex, findState.matchCase, findState.wholeWord ? this._editor.getConfiguration().wordSeparators : null, false, 1073741824\n      /* MAX_SAFE_SMALL_INTEGER */\n      );\n    } else {\n      this._beginSessionIfNeeded(findController);\n\n      if (!this._session) {\n        return;\n      }\n\n      matches = this._session.selectAll();\n    }\n\n    if (matches.length > 0) {\n      var editorSelection = this._editor.getSelection(); // Have the primary cursor remain the one where the action was invoked\n\n\n      for (var i = 0, len = matches.length; i < len; i++) {\n        var match = matches[i];\n        var intersection = match.range.intersectRanges(editorSelection);\n\n        if (intersection) {\n          // bingo!\n          matches[i] = matches[0];\n          matches[0] = match;\n          break;\n        }\n      }\n\n      this._setSelections(matches.map(function (m) {\n        return new Selection(m.range.startLineNumber, m.range.startColumn, m.range.endLineNumber, m.range.endColumn);\n      }));\n    }\n  };\n\n  MultiCursorSelectionController.ID = 'editor.contrib.multiCursorController';\n  return MultiCursorSelectionController;\n}(Disposable);\n\nexport { MultiCursorSelectionController };\n\nvar MultiCursorSelectionControllerAction =\n/** @class */\nfunction (_super) {\n  __extends(MultiCursorSelectionControllerAction, _super);\n\n  function MultiCursorSelectionControllerAction() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  MultiCursorSelectionControllerAction.prototype.run = function (accessor, editor) {\n    var multiCursorController = MultiCursorSelectionController.get(editor);\n\n    if (!multiCursorController) {\n      return;\n    }\n\n    var findController = CommonFindController.get(editor);\n\n    if (!findController) {\n      return;\n    }\n\n    this._run(multiCursorController, findController);\n  };\n\n  return MultiCursorSelectionControllerAction;\n}(EditorAction);\n\nexport { MultiCursorSelectionControllerAction };\n\nvar AddSelectionToNextFindMatchAction =\n/** @class */\nfunction (_super) {\n  __extends(AddSelectionToNextFindMatchAction, _super);\n\n  function AddSelectionToNextFindMatchAction() {\n    return _super.call(this, {\n      id: 'editor.action.addSelectionToNextFindMatch',\n      label: nls.localize('addSelectionToNextFindMatch', \"Add Selection To Next Find Match\"),\n      alias: 'Add Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048\n        /* CtrlCmd */\n        | 34\n        /* KEY_D */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menubarOpts: {\n        menuId: 22\n        /* MenubarSelectionMenu */\n        ,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToNextFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add &&Next Occurrence\"),\n        order: 5\n      }\n    }) || this;\n  }\n\n  AddSelectionToNextFindMatchAction.prototype._run = function (multiCursorController, findController) {\n    multiCursorController.addSelectionToNextFindMatch(findController);\n  };\n\n  return AddSelectionToNextFindMatchAction;\n}(MultiCursorSelectionControllerAction);\n\nexport { AddSelectionToNextFindMatchAction };\n\nvar AddSelectionToPreviousFindMatchAction =\n/** @class */\nfunction (_super) {\n  __extends(AddSelectionToPreviousFindMatchAction, _super);\n\n  function AddSelectionToPreviousFindMatchAction() {\n    return _super.call(this, {\n      id: 'editor.action.addSelectionToPreviousFindMatch',\n      label: nls.localize('addSelectionToPreviousFindMatch', \"Add Selection To Previous Find Match\"),\n      alias: 'Add Selection To Previous Find Match',\n      precondition: undefined,\n      menubarOpts: {\n        menuId: 22\n        /* MenubarSelectionMenu */\n        ,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miAddSelectionToPreviousFindMatch',\n          comment: ['&& denotes a mnemonic']\n        }, \"Add P&&revious Occurrence\"),\n        order: 6\n      }\n    }) || this;\n  }\n\n  AddSelectionToPreviousFindMatchAction.prototype._run = function (multiCursorController, findController) {\n    multiCursorController.addSelectionToPreviousFindMatch(findController);\n  };\n\n  return AddSelectionToPreviousFindMatchAction;\n}(MultiCursorSelectionControllerAction);\n\nexport { AddSelectionToPreviousFindMatchAction };\n\nvar MoveSelectionToNextFindMatchAction =\n/** @class */\nfunction (_super) {\n  __extends(MoveSelectionToNextFindMatchAction, _super);\n\n  function MoveSelectionToNextFindMatchAction() {\n    return _super.call(this, {\n      id: 'editor.action.moveSelectionToNextFindMatch',\n      label: nls.localize('moveSelectionToNextFindMatch', \"Move Last Selection To Next Find Match\"),\n      alias: 'Move Last Selection To Next Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KEY_K */\n        , 2048\n        /* CtrlCmd */\n        | 34\n        /* KEY_D */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  MoveSelectionToNextFindMatchAction.prototype._run = function (multiCursorController, findController) {\n    multiCursorController.moveSelectionToNextFindMatch(findController);\n  };\n\n  return MoveSelectionToNextFindMatchAction;\n}(MultiCursorSelectionControllerAction);\n\nexport { MoveSelectionToNextFindMatchAction };\n\nvar MoveSelectionToPreviousFindMatchAction =\n/** @class */\nfunction (_super) {\n  __extends(MoveSelectionToPreviousFindMatchAction, _super);\n\n  function MoveSelectionToPreviousFindMatchAction() {\n    return _super.call(this, {\n      id: 'editor.action.moveSelectionToPreviousFindMatch',\n      label: nls.localize('moveSelectionToPreviousFindMatch', \"Move Last Selection To Previous Find Match\"),\n      alias: 'Move Last Selection To Previous Find Match',\n      precondition: undefined\n    }) || this;\n  }\n\n  MoveSelectionToPreviousFindMatchAction.prototype._run = function (multiCursorController, findController) {\n    multiCursorController.moveSelectionToPreviousFindMatch(findController);\n  };\n\n  return MoveSelectionToPreviousFindMatchAction;\n}(MultiCursorSelectionControllerAction);\n\nexport { MoveSelectionToPreviousFindMatchAction };\n\nvar SelectHighlightsAction =\n/** @class */\nfunction (_super) {\n  __extends(SelectHighlightsAction, _super);\n\n  function SelectHighlightsAction() {\n    return _super.call(this, {\n      id: 'editor.action.selectHighlights',\n      label: nls.localize('selectAllOccurrencesOfFindMatch', \"Select All Occurrences of Find Match\"),\n      alias: 'Select All Occurrences of Find Match',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.focus,\n        primary: 2048\n        /* CtrlCmd */\n        | 1024\n        /* Shift */\n        | 42\n        /* KEY_L */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menubarOpts: {\n        menuId: 22\n        /* MenubarSelectionMenu */\n        ,\n        group: '3_multi',\n        title: nls.localize({\n          key: 'miSelectHighlights',\n          comment: ['&& denotes a mnemonic']\n        }, \"Select All &&Occurrences\"),\n        order: 7\n      }\n    }) || this;\n  }\n\n  SelectHighlightsAction.prototype._run = function (multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  };\n\n  return SelectHighlightsAction;\n}(MultiCursorSelectionControllerAction);\n\nexport { SelectHighlightsAction };\n\nvar CompatChangeAll =\n/** @class */\nfunction (_super) {\n  __extends(CompatChangeAll, _super);\n\n  function CompatChangeAll() {\n    return _super.call(this, {\n      id: 'editor.action.changeAll',\n      label: nls.localize('changeAll.label', \"Change All Occurrences\"),\n      alias: 'Change All Occurrences',\n      precondition: EditorContextKeys.writable,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: 2048\n        /* CtrlCmd */\n        | 60\n        /* F2 */\n        ,\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        group: '1_modification',\n        order: 1.2\n      }\n    }) || this;\n  }\n\n  CompatChangeAll.prototype._run = function (multiCursorController, findController) {\n    multiCursorController.selectAll(findController);\n  };\n\n  return CompatChangeAll;\n}(MultiCursorSelectionControllerAction);\n\nexport { CompatChangeAll };\n\nvar SelectionHighlighterState =\n/** @class */\nfunction () {\n  function SelectionHighlighterState(searchText, matchCase, wordSeparators) {\n    this.searchText = searchText;\n    this.matchCase = matchCase;\n    this.wordSeparators = wordSeparators;\n  }\n  /**\n   * Everything equals except for `lastWordUnderCursor`\n   */\n\n\n  SelectionHighlighterState.softEquals = function (a, b) {\n    if (!a && !b) {\n      return true;\n    }\n\n    if (!a || !b) {\n      return false;\n    }\n\n    return a.searchText === b.searchText && a.matchCase === b.matchCase && a.wordSeparators === b.wordSeparators;\n  };\n\n  return SelectionHighlighterState;\n}();\n\nvar SelectionHighlighter =\n/** @class */\nfunction (_super) {\n  __extends(SelectionHighlighter, _super);\n\n  function SelectionHighlighter(editor) {\n    var _this = _super.call(this) || this;\n\n    _this.editor = editor;\n    _this._isEnabled = editor.getConfiguration().contribInfo.selectionHighlight;\n    _this.decorations = [];\n    _this.updateSoon = _this._register(new RunOnceScheduler(function () {\n      return _this._update();\n    }, 300));\n    _this.state = null;\n\n    _this._register(editor.onDidChangeConfiguration(function (e) {\n      _this._isEnabled = editor.getConfiguration().contribInfo.selectionHighlight;\n    }));\n\n    _this._register(editor.onDidChangeCursorSelection(function (e) {\n      if (!_this._isEnabled) {\n        // Early exit if nothing needs to be done!\n        // Leave some form of early exit check here if you wish to continue being a cursor position change listener ;)\n        return;\n      }\n\n      if (e.selection.isEmpty()) {\n        if (e.reason === 3\n        /* Explicit */\n        ) {\n            if (_this.state) {\n              // no longer valid\n              _this._setState(null);\n            }\n\n            _this.updateSoon.schedule();\n          } else {\n          _this._setState(null);\n        }\n      } else {\n        _this._update();\n      }\n    }));\n\n    _this._register(editor.onDidChangeModel(function (e) {\n      _this._setState(null);\n    }));\n\n    _this._register(CommonFindController.get(editor).getState().onFindReplaceStateChange(function (e) {\n      _this._update();\n    }));\n\n    return _this;\n  }\n\n  SelectionHighlighter.prototype.getId = function () {\n    return SelectionHighlighter.ID;\n  };\n\n  SelectionHighlighter.prototype._update = function () {\n    this._setState(SelectionHighlighter._createState(this._isEnabled, this.editor));\n  };\n\n  SelectionHighlighter._createState = function (isEnabled, editor) {\n    if (!isEnabled) {\n      return null;\n    }\n\n    if (!editor.hasModel()) {\n      return null;\n    }\n\n    var s = editor.getSelection();\n\n    if (s.startLineNumber !== s.endLineNumber) {\n      // multiline forbidden for perf reasons\n      return null;\n    }\n\n    var multiCursorController = MultiCursorSelectionController.get(editor);\n\n    if (!multiCursorController) {\n      return null;\n    }\n\n    var findController = CommonFindController.get(editor);\n\n    if (!findController) {\n      return null;\n    }\n\n    var r = multiCursorController.getSession(findController);\n\n    if (!r) {\n      var allSelections = editor.getSelections();\n\n      if (allSelections.length > 1) {\n        var findState_1 = findController.getState();\n        var matchCase = findState_1.matchCase;\n        var selectionsContainSameText = modelRangesContainSameText(editor.getModel(), allSelections, matchCase);\n\n        if (!selectionsContainSameText) {\n          return null;\n        }\n      }\n\n      r = MultiCursorSession.create(editor, findController);\n    }\n\n    if (!r) {\n      return null;\n    }\n\n    if (r.currentMatch) {\n      // This is an empty selection\n      // Do not interfere with semantic word highlighting in the no selection case\n      return null;\n    }\n\n    if (/^[ \\t]+$/.test(r.searchText)) {\n      // whitespace only selection\n      return null;\n    }\n\n    if (r.searchText.length > 200) {\n      // very long selection\n      return null;\n    } // TODO: better handling of this case\n\n\n    var findState = findController.getState();\n    var caseSensitive = findState.matchCase; // Return early if the find widget shows the exact same matches\n\n    if (findState.isRevealed) {\n      var findStateSearchString = findState.searchString;\n\n      if (!caseSensitive) {\n        findStateSearchString = findStateSearchString.toLowerCase();\n      }\n\n      var mySearchString = r.searchText;\n\n      if (!caseSensitive) {\n        mySearchString = mySearchString.toLowerCase();\n      }\n\n      if (findStateSearchString === mySearchString && r.matchCase === findState.matchCase && r.wholeWord === findState.wholeWord && !findState.isRegex) {\n        return null;\n      }\n    }\n\n    return new SelectionHighlighterState(r.searchText, r.matchCase, r.wholeWord ? editor.getConfiguration().wordSeparators : null);\n  };\n\n  SelectionHighlighter.prototype._setState = function (state) {\n    if (SelectionHighlighterState.softEquals(this.state, state)) {\n      this.state = state;\n      return;\n    }\n\n    this.state = state;\n\n    if (!this.state) {\n      this.decorations = this.editor.deltaDecorations(this.decorations, []);\n      return;\n    }\n\n    if (!this.editor.hasModel()) {\n      return;\n    }\n\n    var model = this.editor.getModel();\n\n    if (model.isTooLargeForTokenization()) {\n      // the file is too large, so searching word under cursor in the whole document takes is blocking the UI.\n      return;\n    }\n\n    var hasFindOccurrences = DocumentHighlightProviderRegistry.has(model);\n    var allMatches = model.findMatches(this.state.searchText, true, false, this.state.matchCase, this.state.wordSeparators, false).map(function (m) {\n      return m.range;\n    });\n    allMatches.sort(Range.compareRangesUsingStarts);\n    var selections = this.editor.getSelections();\n    selections.sort(Range.compareRangesUsingStarts); // do not overlap with selection (issue #64 and #512)\n\n    var matches = [];\n\n    for (var i = 0, j = 0, len = allMatches.length, lenJ = selections.length; i < len;) {\n      var match = allMatches[i];\n\n      if (j >= lenJ) {\n        // finished all editor selections\n        matches.push(match);\n        i++;\n      } else {\n        var cmp = Range.compareRangesUsingStarts(match, selections[j]);\n\n        if (cmp < 0) {\n          // match is before sel\n          if (selections[j].isEmpty() || !Range.areIntersecting(match, selections[j])) {\n            matches.push(match);\n          }\n\n          i++;\n        } else if (cmp > 0) {\n          // sel is before match\n          j++;\n        } else {\n          // sel is equal to match\n          i++;\n          j++;\n        }\n      }\n    }\n\n    var decorations = matches.map(function (r) {\n      return {\n        range: r,\n        // Show in overviewRuler only if model has no semantic highlighting\n        options: hasFindOccurrences ? SelectionHighlighter._SELECTION_HIGHLIGHT : SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW\n      };\n    });\n    this.decorations = this.editor.deltaDecorations(this.decorations, decorations);\n  };\n\n  SelectionHighlighter.prototype.dispose = function () {\n    this._setState(null);\n\n    _super.prototype.dispose.call(this);\n  };\n\n  SelectionHighlighter.ID = 'editor.contrib.selectionHighlighter';\n  SelectionHighlighter._SELECTION_HIGHLIGHT_OVERVIEW = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'selectionHighlight',\n    overviewRuler: {\n      color: themeColorFromId(overviewRulerSelectionHighlightForeground),\n      position: OverviewRulerLane.Center\n    }\n  });\n  SelectionHighlighter._SELECTION_HIGHLIGHT = ModelDecorationOptions.register({\n    stickiness: 1\n    /* NeverGrowsWhenTypingAtEdges */\n    ,\n    className: 'selectionHighlight'\n  });\n  return SelectionHighlighter;\n}(Disposable);\n\nexport { SelectionHighlighter };\n\nfunction modelRangesContainSameText(model, ranges, matchCase) {\n  var selectedText = getValueInRange(model, ranges[0], !matchCase);\n\n  for (var i = 1, len = ranges.length; i < len; i++) {\n    var range = ranges[i];\n\n    if (range.isEmpty()) {\n      return false;\n    }\n\n    var thisSelectedText = getValueInRange(model, range, !matchCase);\n\n    if (selectedText !== thisSelectedText) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction getValueInRange(model, range, toLowerCase) {\n  var text = model.getValueInRange(range);\n  return toLowerCase ? text.toLowerCase() : text;\n}\n\nregisterEditorContribution(MultiCursorSelectionController);\nregisterEditorContribution(SelectionHighlighter);\nregisterEditorAction(InsertCursorAbove);\nregisterEditorAction(InsertCursorBelow);\nregisterEditorAction(InsertCursorAtEndOfEachLineSelected);\nregisterEditorAction(AddSelectionToNextFindMatchAction);\nregisterEditorAction(AddSelectionToPreviousFindMatchAction);\nregisterEditorAction(MoveSelectionToNextFindMatchAction);\nregisterEditorAction(MoveSelectionToPreviousFindMatchAction);\nregisterEditorAction(SelectHighlightsAction);\nregisterEditorAction(CompatChangeAll);\nregisterEditorAction(InsertCursorAtEndOfLineSelected);\nregisterEditorAction(InsertCursorAtTopOfLineSelected);","map":null,"metadata":{},"sourceType":"module"}