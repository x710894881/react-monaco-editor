{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { validateConstraints } from '../../../base/common/types.js';\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { LinkedList } from '../../../base/common/linkedList.js';\nimport { keys } from '../../../base/common/map.js';\nexport var ICommandService = createDecorator('commandService');\nexport var CommandsRegistry = new (\n/** @class */\nfunction () {\n  function class_1() {\n    this._commands = new Map();\n    this._onDidRegisterCommand = new Emitter();\n    this.onDidRegisterCommand = this._onDidRegisterCommand.event;\n  }\n\n  class_1.prototype.registerCommand = function (idOrCommand, handler) {\n    var _this = this;\n\n    if (!idOrCommand) {\n      throw new Error(\"invalid command\");\n    }\n\n    if (typeof idOrCommand === 'string') {\n      if (!handler) {\n        throw new Error(\"invalid command\");\n      }\n\n      return this.registerCommand({\n        id: idOrCommand,\n        handler: handler\n      });\n    } // add argument validation if rich command metadata is provided\n\n\n    if (idOrCommand.description) {\n      var constraints_1 = [];\n\n      for (var _i = 0, _a = idOrCommand.description.args; _i < _a.length; _i++) {\n        var arg = _a[_i];\n        constraints_1.push(arg.constraint);\n      }\n\n      var actualHandler_1 = idOrCommand.handler;\n\n      idOrCommand.handler = function (accessor) {\n        var args = [];\n\n        for (var _i = 1; _i < arguments.length; _i++) {\n          args[_i - 1] = arguments[_i];\n        }\n\n        validateConstraints(args, constraints_1);\n        return actualHandler_1.apply(void 0, [accessor].concat(args));\n      };\n    } // find a place to store the command\n\n\n    var id = idOrCommand.id;\n\n    var commands = this._commands.get(id);\n\n    if (!commands) {\n      commands = new LinkedList();\n\n      this._commands.set(id, commands);\n    }\n\n    var removeFn = commands.unshift(idOrCommand);\n    var ret = toDisposable(function () {\n      removeFn();\n\n      var command = _this._commands.get(id);\n\n      if (command && command.isEmpty()) {\n        _this._commands.delete(id);\n      }\n    }); // tell the world about this command\n\n    this._onDidRegisterCommand.fire(id);\n\n    return ret;\n  };\n\n  class_1.prototype.registerCommandAlias = function (oldId, newId) {\n    return CommandsRegistry.registerCommand(oldId, function (accessor) {\n      var _a;\n\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      return (_a = accessor.get(ICommandService)).executeCommand.apply(_a, [newId].concat(args));\n    });\n  };\n\n  class_1.prototype.getCommand = function (id) {\n    var list = this._commands.get(id);\n\n    if (!list || list.isEmpty()) {\n      return undefined;\n    }\n\n    return list.iterator().next().value;\n  };\n\n  class_1.prototype.getCommands = function () {\n    var result = new Map();\n\n    for (var _i = 0, _a = keys(this._commands); _i < _a.length; _i++) {\n      var key = _a[_i];\n      var command = this.getCommand(key);\n\n      if (command) {\n        result.set(key, command);\n      }\n    }\n\n    return result;\n  };\n\n  return class_1;\n}())();","map":null,"metadata":{},"sourceType":"module"}