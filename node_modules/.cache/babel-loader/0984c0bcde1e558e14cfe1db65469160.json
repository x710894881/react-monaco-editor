{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './standalone-tokens.css';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { OpenerService } from '../../browser/services/openerService.js';\nimport { DiffNavigator } from '../../browser/widget/diffNavigator.js';\nimport * as editorOptions from '../../common/config/editorOptions.js';\nimport { BareFontInfo, FontInfo } from '../../common/config/fontInfo.js';\nimport * as editorCommon from '../../common/editorCommon.js';\nimport { FindMatch, TextModelResolvedOptions } from '../../common/model.js';\nimport * as modes from '../../common/modes.js';\nimport { NULL_STATE, nullTokenize } from '../../common/modes/nullMode.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { createWebWorker as actualCreateWebWorker } from '../../common/services/webWorker.js';\nimport * as standaloneEnums from '../../common/standalone/standaloneEnums.js';\nimport { Colorizer } from './colorizer.js';\nimport { SimpleEditorModelResolverService } from './simpleServices.js';\nimport { StandaloneDiffEditor, StandaloneEditor } from './standaloneCodeEditor.js';\nimport { DynamicStandaloneServices, StaticServices } from './standaloneServices.js';\nimport { IStandaloneThemeService } from '../common/standaloneThemeService.js';\nimport { ICommandService } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IContextViewService, IContextMenuService } from '../../../platform/contextview/browser/contextView.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\nimport { INotificationService } from '../../../platform/notification/common/notification.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { IAccessibilityService } from '../../../platform/accessibility/common/accessibility.js';\nimport { clearAllFontInfos } from '../../browser/config/configuration.js';\n\nfunction withAllStandaloneServices(domElement, override, callback) {\n  var services = new DynamicStandaloneServices(domElement, override);\n  var simpleEditorModelResolverService = null;\n\n  if (!services.has(ITextModelService)) {\n    simpleEditorModelResolverService = new SimpleEditorModelResolverService();\n    services.set(ITextModelService, simpleEditorModelResolverService);\n  }\n\n  if (!services.has(IOpenerService)) {\n    services.set(IOpenerService, new OpenerService(services.get(ICodeEditorService), services.get(ICommandService)));\n  }\n\n  var result = callback(services);\n\n  if (simpleEditorModelResolverService) {\n    simpleEditorModelResolverService.setEditor(result);\n  }\n\n  return result;\n}\n/**\n * Create a new editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\n\n\nexport function create(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, function (services) {\n    return new StandaloneEditor(domElement, options, services, services.get(IInstantiationService), services.get(ICodeEditorService), services.get(ICommandService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IAccessibilityService));\n  });\n}\n/**\n * Emitted when an editor is created.\n * Creating a diff editor might cause this listener to be invoked with the two editors.\n * @event\n */\n\nexport function onDidCreateEditor(listener) {\n  return StaticServices.codeEditorService.get().onCodeEditorAdd(function (editor) {\n    listener(editor);\n  });\n}\n/**\n * Create a new diff editor under `domElement`.\n * `domElement` should be empty (not contain other dom nodes).\n * The editor will read the size of `domElement`.\n */\n\nexport function createDiffEditor(domElement, options, override) {\n  return withAllStandaloneServices(domElement, override || {}, function (services) {\n    return new StandaloneDiffEditor(domElement, options, services, services.get(IInstantiationService), services.get(IContextKeyService), services.get(IKeybindingService), services.get(IContextViewService), services.get(IEditorWorkerService), services.get(ICodeEditorService), services.get(IStandaloneThemeService), services.get(INotificationService), services.get(IConfigurationService), services.get(IContextMenuService), null);\n  });\n}\nexport function createDiffNavigator(diffEditor, opts) {\n  return new DiffNavigator(diffEditor, opts);\n}\n\nfunction doCreateModel(value, languageSelection, uri) {\n  return StaticServices.modelService.get().createModel(value, languageSelection, uri);\n}\n/**\n * Create a new editor model.\n * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n */\n\n\nexport function createModel(value, language, uri) {\n  value = value || '';\n\n  if (!language) {\n    var firstLF = value.indexOf('\\n');\n    var firstLine = value;\n\n    if (firstLF !== -1) {\n      firstLine = value.substring(0, firstLF);\n    }\n\n    return doCreateModel(value, StaticServices.modeService.get().createByFilepathOrFirstLine(uri || null, firstLine), uri);\n  }\n\n  return doCreateModel(value, StaticServices.modeService.get().create(language), uri);\n}\n/**\n * Change the language for a model.\n */\n\nexport function setModelLanguage(model, languageId) {\n  StaticServices.modelService.get().setMode(model, StaticServices.modeService.get().create(languageId));\n}\n/**\n * Set the markers for a model.\n */\n\nexport function setModelMarkers(model, owner, markers) {\n  if (model) {\n    StaticServices.markerService.get().changeOne(owner, model.uri, markers);\n  }\n}\n/**\n * Get markers for owner and/or resource\n *\n * @returns list of markers\n */\n\nexport function getModelMarkers(filter) {\n  return StaticServices.markerService.get().read(filter);\n}\n/**\n * Get the model that has `uri` if it exists.\n */\n\nexport function getModel(uri) {\n  return StaticServices.modelService.get().getModel(uri);\n}\n/**\n * Get all the created models.\n */\n\nexport function getModels() {\n  return StaticServices.modelService.get().getModels();\n}\n/**\n * Emitted when a model is created.\n * @event\n */\n\nexport function onDidCreateModel(listener) {\n  return StaticServices.modelService.get().onModelAdded(listener);\n}\n/**\n * Emitted right before a model is disposed.\n * @event\n */\n\nexport function onWillDisposeModel(listener) {\n  return StaticServices.modelService.get().onModelRemoved(listener);\n}\n/**\n * Emitted when a different language is set to a model.\n * @event\n */\n\nexport function onDidChangeModelLanguage(listener) {\n  return StaticServices.modelService.get().onModelModeChanged(function (e) {\n    listener({\n      model: e.model,\n      oldLanguage: e.oldModeId\n    });\n  });\n}\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\n\nexport function createWebWorker(opts) {\n  return actualCreateWebWorker(StaticServices.modelService.get(), opts);\n}\n/**\n * Colorize the contents of `domNode` using attribute `data-lang`.\n */\n\nexport function colorizeElement(domNode, options) {\n  return Colorizer.colorizeElement(StaticServices.standaloneThemeService.get(), StaticServices.modeService.get(), domNode, options);\n}\n/**\n * Colorize `text` using language `languageId`.\n */\n\nexport function colorize(text, languageId, options) {\n  return Colorizer.colorize(StaticServices.modeService.get(), text, languageId, options);\n}\n/**\n * Colorize a line in a model.\n */\n\nexport function colorizeModelLine(model, lineNumber, tabSize) {\n  if (tabSize === void 0) {\n    tabSize = 4;\n  }\n\n  return Colorizer.colorizeModelLine(model, lineNumber, tabSize);\n}\n/**\n * @internal\n */\n\nfunction getSafeTokenizationSupport(language) {\n  var tokenizationSupport = modes.TokenizationRegistry.get(language);\n\n  if (tokenizationSupport) {\n    return tokenizationSupport;\n  }\n\n  return {\n    getInitialState: function () {\n      return NULL_STATE;\n    },\n    tokenize: function (line, state, deltaOffset) {\n      return nullTokenize(language, line, state, deltaOffset);\n    }\n  };\n}\n/**\n * Tokenize `text` using language `languageId`\n */\n\n\nexport function tokenize(text, languageId) {\n  var modeService = StaticServices.modeService.get(); // Needed in order to get the mode registered for subsequent look-ups\n\n  modeService.triggerMode(languageId);\n  var tokenizationSupport = getSafeTokenizationSupport(languageId);\n  var lines = text.split(/\\r\\n|\\r|\\n/);\n  var result = [];\n  var state = tokenizationSupport.getInitialState();\n\n  for (var i = 0, len = lines.length; i < len; i++) {\n    var line = lines[i];\n    var tokenizationResult = tokenizationSupport.tokenize(line, state, 0);\n    result[i] = tokenizationResult.tokens;\n    state = tokenizationResult.endState;\n  }\n\n  return result;\n}\n/**\n * Define a new theme or update an existing theme.\n */\n\nexport function defineTheme(themeName, themeData) {\n  StaticServices.standaloneThemeService.get().defineTheme(themeName, themeData);\n}\n/**\n * Switches to a theme.\n */\n\nexport function setTheme(themeName) {\n  StaticServices.standaloneThemeService.get().setTheme(themeName);\n}\n/**\n * Clears all cached font measurements and triggers re-measurement.\n */\n\nexport function remeasureFonts() {\n  clearAllFontInfos();\n}\n/**\n * @internal\n */\n\nexport function createMonacoEditorAPI() {\n  return {\n    // methods\n    create: create,\n    onDidCreateEditor: onDidCreateEditor,\n    createDiffEditor: createDiffEditor,\n    createDiffNavigator: createDiffNavigator,\n    createModel: createModel,\n    setModelLanguage: setModelLanguage,\n    setModelMarkers: setModelMarkers,\n    getModelMarkers: getModelMarkers,\n    getModels: getModels,\n    getModel: getModel,\n    onDidCreateModel: onDidCreateModel,\n    onWillDisposeModel: onWillDisposeModel,\n    onDidChangeModelLanguage: onDidChangeModelLanguage,\n    createWebWorker: createWebWorker,\n    colorizeElement: colorizeElement,\n    colorize: colorize,\n    colorizeModelLine: colorizeModelLine,\n    tokenize: tokenize,\n    defineTheme: defineTheme,\n    setTheme: setTheme,\n    remeasureFonts: remeasureFonts,\n    // enums\n    ScrollbarVisibility: standaloneEnums.ScrollbarVisibility,\n    WrappingIndent: standaloneEnums.WrappingIndent,\n    OverviewRulerLane: standaloneEnums.OverviewRulerLane,\n    MinimapPosition: standaloneEnums.MinimapPosition,\n    EndOfLinePreference: standaloneEnums.EndOfLinePreference,\n    DefaultEndOfLine: standaloneEnums.DefaultEndOfLine,\n    EndOfLineSequence: standaloneEnums.EndOfLineSequence,\n    TrackedRangeStickiness: standaloneEnums.TrackedRangeStickiness,\n    CursorChangeReason: standaloneEnums.CursorChangeReason,\n    MouseTargetType: standaloneEnums.MouseTargetType,\n    TextEditorCursorStyle: standaloneEnums.TextEditorCursorStyle,\n    TextEditorCursorBlinkingStyle: standaloneEnums.TextEditorCursorBlinkingStyle,\n    ContentWidgetPositionPreference: standaloneEnums.ContentWidgetPositionPreference,\n    OverlayWidgetPositionPreference: standaloneEnums.OverlayWidgetPositionPreference,\n    RenderMinimap: standaloneEnums.RenderMinimap,\n    ScrollType: standaloneEnums.ScrollType,\n    RenderLineNumbersType: standaloneEnums.RenderLineNumbersType,\n    // classes\n    InternalEditorOptions: editorOptions.InternalEditorOptions,\n    BareFontInfo: BareFontInfo,\n    FontInfo: FontInfo,\n    TextModelResolvedOptions: TextModelResolvedOptions,\n    FindMatch: FindMatch,\n    // vars\n    EditorType: editorCommon.EditorType\n  };\n}","map":null,"metadata":{},"sourceType":"module"}