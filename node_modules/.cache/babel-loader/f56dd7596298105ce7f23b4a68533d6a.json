{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { createFastDomNode } from '../../../../base/browser/fastDomNode.js';\nimport { OverviewZoneManager } from '../../../common/view/overviewZoneManager.js';\nimport { ViewEventHandler } from '../../../common/viewModel/viewEventHandler.js';\n\nvar OverviewRuler =\n/** @class */\nfunction (_super) {\n  __extends(OverviewRuler, _super);\n\n  function OverviewRuler(context, cssClassName) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n    _this._domNode = createFastDomNode(document.createElement('canvas'));\n\n    _this._domNode.setClassName(cssClassName);\n\n    _this._domNode.setPosition('absolute');\n\n    _this._domNode.setLayerHinting(true);\n\n    _this._zoneManager = new OverviewZoneManager(function (lineNumber) {\n      return _this._context.viewLayout.getVerticalOffsetForLineNumber(lineNumber);\n    });\n\n    _this._zoneManager.setDOMWidth(0);\n\n    _this._zoneManager.setDOMHeight(0);\n\n    _this._zoneManager.setOuterHeight(_this._context.viewLayout.getScrollHeight());\n\n    _this._zoneManager.setLineHeight(_this._context.configuration.editor.lineHeight);\n\n    _this._zoneManager.setPixelRatio(_this._context.configuration.editor.pixelRatio);\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  OverviewRuler.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    _super.prototype.dispose.call(this);\n  }; // ---- begin view event handlers\n\n\n  OverviewRuler.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._zoneManager.setLineHeight(this._context.configuration.editor.lineHeight);\n\n      this._render();\n    }\n\n    if (e.pixelRatio) {\n      this._zoneManager.setPixelRatio(this._context.configuration.editor.pixelRatio);\n\n      this._domNode.setWidth(this._zoneManager.getDOMWidth());\n\n      this._domNode.setHeight(this._zoneManager.getDOMHeight());\n\n      this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n      this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n\n      this._render();\n    }\n\n    return true;\n  };\n\n  OverviewRuler.prototype.onFlushed = function (e) {\n    this._render();\n\n    return true;\n  };\n\n  OverviewRuler.prototype.onScrollChanged = function (e) {\n    if (e.scrollHeightChanged) {\n      this._zoneManager.setOuterHeight(e.scrollHeight);\n\n      this._render();\n    }\n\n    return true;\n  };\n\n  OverviewRuler.prototype.onZonesChanged = function (e) {\n    this._render();\n\n    return true;\n  }; // ---- end view event handlers\n\n\n  OverviewRuler.prototype.getDomNode = function () {\n    return this._domNode.domNode;\n  };\n\n  OverviewRuler.prototype.setLayout = function (position) {\n    this._domNode.setTop(position.top);\n\n    this._domNode.setRight(position.right);\n\n    var hasChanged = false;\n    hasChanged = this._zoneManager.setDOMWidth(position.width) || hasChanged;\n    hasChanged = this._zoneManager.setDOMHeight(position.height) || hasChanged;\n\n    if (hasChanged) {\n      this._domNode.setWidth(this._zoneManager.getDOMWidth());\n\n      this._domNode.setHeight(this._zoneManager.getDOMHeight());\n\n      this._domNode.domNode.width = this._zoneManager.getCanvasWidth();\n      this._domNode.domNode.height = this._zoneManager.getCanvasHeight();\n\n      this._render();\n    }\n  };\n\n  OverviewRuler.prototype.setZones = function (zones) {\n    this._zoneManager.setZones(zones);\n\n    this._render();\n  };\n\n  OverviewRuler.prototype._render = function () {\n    if (this._zoneManager.getOuterHeight() === 0) {\n      return false;\n    }\n\n    var width = this._zoneManager.getCanvasWidth();\n\n    var height = this._zoneManager.getCanvasHeight();\n\n    var colorZones = this._zoneManager.resolveColorZones();\n\n    var id2Color = this._zoneManager.getId2Color();\n\n    var ctx = this._domNode.domNode.getContext('2d');\n\n    ctx.clearRect(0, 0, width, height);\n\n    if (colorZones.length > 0) {\n      this._renderOneLane(ctx, colorZones, id2Color, width);\n    }\n\n    return true;\n  };\n\n  OverviewRuler.prototype._renderOneLane = function (ctx, colorZones, id2Color, width) {\n    var currentColorId = 0;\n    var currentFrom = 0;\n    var currentTo = 0;\n\n    for (var _i = 0, colorZones_1 = colorZones; _i < colorZones_1.length; _i++) {\n      var zone = colorZones_1[_i];\n      var zoneColorId = zone.colorId;\n      var zoneFrom = zone.from;\n      var zoneTo = zone.to;\n\n      if (zoneColorId !== currentColorId) {\n        ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n        currentColorId = zoneColorId;\n        ctx.fillStyle = id2Color[currentColorId];\n        currentFrom = zoneFrom;\n        currentTo = zoneTo;\n      } else {\n        if (currentTo >= zoneFrom) {\n          currentTo = Math.max(currentTo, zoneTo);\n        } else {\n          ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n          currentFrom = zoneFrom;\n          currentTo = zoneTo;\n        }\n      }\n    }\n\n    ctx.fillRect(0, currentFrom, width, currentTo - currentFrom);\n  };\n\n  return OverviewRuler;\n}(ViewEventHandler);\n\nexport { OverviewRuler };","map":null,"metadata":{},"sourceType":"module"}