{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    lineComment: '//'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }, {\n    open: '{',\n    close: '}',\n    notIn: ['string', 'comment']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string', 'comment']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string', 'comment']\n  }],\n  folding: {\n    offSide: true\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.pug',\n  ignoreCase: true,\n  brackets: [{\n    token: 'delimiter.curly',\n    open: '{',\n    close: '}'\n  }, {\n    token: 'delimiter.array',\n    open: '[',\n    close: ']'\n  }, {\n    token: 'delimiter.parenthesis',\n    open: '(',\n    close: ')'\n  }],\n  keywords: ['append', 'block', 'case', 'default', 'doctype', 'each', 'else', 'extends', 'for', 'if', 'in', 'include', 'mixin', 'typeof', 'unless', 'var', 'when'],\n  tags: ['a', 'abbr', 'acronym', 'address', 'area', 'article', 'aside', 'audio', 'b', 'base', 'basefont', 'bdi', 'bdo', 'blockquote', 'body', 'br', 'button', 'canvas', 'caption', 'center', 'cite', 'code', 'col', 'colgroup', 'command', 'datalist', 'dd', 'del', 'details', 'dfn', 'div', 'dl', 'dt', 'em', 'embed', 'fieldset', 'figcaption', 'figure', 'font', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'i', 'iframe', 'img', 'input', 'ins', 'keygen', 'kbd', 'label', 'li', 'link', 'map', 'mark', 'menu', 'meta', 'meter', 'nav', 'noframes', 'noscript', 'object', 'ol', 'optgroup', 'option', 'output', 'p', 'param', 'pre', 'progress', 'q', 'rp', 'rt', 'ruby', 's', 'samp', 'script', 'section', 'select', 'small', 'source', 'span', 'strike', 'strong', 'style', 'sub', 'summary', 'sup', 'table', 'tbody', 'td', 'textarea', 'tfoot', 'th', 'thead', 'time', 'title', 'tr', 'tracks', 'tt', 'u', 'ul', 'video', 'wbr'],\n  // we include these common regular expressions\n  symbols: /[\\+\\-\\*\\%\\&\\|\\!\\=\\/\\.\\,\\:]+/,\n  escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n  tokenizer: {\n    root: [// Tag or a keyword at start\n    [/^(\\s*)([a-zA-Z_-][\\w-]*)/, {\n      cases: {\n        '$2@tags': {\n          cases: {\n            '@eos': ['', 'tag'],\n            '@default': ['', {\n              token: 'tag',\n              next: '@tag.$1'\n            }]\n          }\n        },\n        '$2@keywords': ['', {\n          token: 'keyword.$2'\n        }],\n        '@default': ['', '']\n      }\n    }], // id\n    [/^(\\s*)(#[a-zA-Z_-][\\w-]*)/, {\n      cases: {\n        '@eos': ['', 'tag.id'],\n        '@default': ['', {\n          token: 'tag.id',\n          next: '@tag.$1'\n        }]\n      }\n    }], // class\n    [/^(\\s*)(\\.[a-zA-Z_-][\\w-]*)/, {\n      cases: {\n        '@eos': ['', 'tag.class'],\n        '@default': ['', {\n          token: 'tag.class',\n          next: '@tag.$1'\n        }]\n      }\n    }], // plain text with pipe\n    [/^(\\s*)(\\|.*)$/, ''], {\n      include: '@whitespace'\n    }, // keywords\n    [/[a-zA-Z_$][\\w$]*/, {\n      cases: {\n        '@keywords': {\n          token: 'keyword.$0'\n        },\n        '@default': ''\n      }\n    }], // delimiters and operators\n    [/[{}()\\[\\]]/, '@brackets'], [/@symbols/, 'delimiter'], // numbers\n    [/\\d+\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'], [/\\d+/, 'number'], // strings:\n    [/\"/, 'string', '@string.\"'], [/'/, 'string', '@string.\\'']],\n    tag: [[/(\\.)(\\s*$)/, [{\n      token: 'delimiter',\n      next: '@blockText.$S2.'\n    }, '']], [/\\s+/, {\n      token: '',\n      next: '@simpleText'\n    }], // id\n    [/#[a-zA-Z_-][\\w-]*/, {\n      cases: {\n        '@eos': {\n          token: 'tag.id',\n          next: '@pop'\n        },\n        '@default': 'tag.id'\n      }\n    }], // class\n    [/\\.[a-zA-Z_-][\\w-]*/, {\n      cases: {\n        '@eos': {\n          token: 'tag.class',\n          next: '@pop'\n        },\n        '@default': 'tag.class'\n      }\n    }], // attributes\n    [/\\(/, {\n      token: 'delimiter.parenthesis',\n      next: '@attributeList'\n    }]],\n    simpleText: [[/[^#]+$/, {\n      token: '',\n      next: '@popall'\n    }], [/[^#]+/, {\n      token: ''\n    }], // interpolation\n    [/(#{)([^}]*)(})/, {\n      cases: {\n        '@eos': ['interpolation.delimiter', 'interpolation', {\n          token: 'interpolation.delimiter',\n          next: '@popall'\n        }],\n        '@default': ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']\n      }\n    }], [/#$/, {\n      token: '',\n      next: '@popall'\n    }], [/#/, '']],\n    attributeList: [[/\\s+/, ''], [/(\\w+)(\\s*=\\s*)(\"|')/, ['attribute.name', 'delimiter', {\n      token: 'attribute.value',\n      next: '@value.$3'\n    }]], [/\\w+/, 'attribute.name'], [/,/, {\n      cases: {\n        '@eos': {\n          token: 'attribute.delimiter',\n          next: '@popall'\n        },\n        '@default': 'attribute.delimiter'\n      }\n    }], [/\\)$/, {\n      token: 'delimiter.parenthesis',\n      next: '@popall'\n    }], [/\\)/, {\n      token: 'delimiter.parenthesis',\n      next: '@pop'\n    }]],\n    whitespace: [[/^(\\s*)(\\/\\/.*)$/, {\n      token: 'comment',\n      next: '@blockText.$1.comment'\n    }], [/[ \\t\\r\\n]+/, ''], [/<!--/, {\n      token: 'comment',\n      next: '@comment'\n    }]],\n    blockText: [[/^\\s+.*$/, {\n      cases: {\n        '($S2\\\\s+.*$)': {\n          token: '$S3'\n        },\n        '@default': {\n          token: '@rematch',\n          next: '@popall'\n        }\n      }\n    }], [/./, {\n      token: '@rematch',\n      next: '@popall'\n    }]],\n    comment: [[/[^<\\-]+/, 'comment.content'], [/-->/, {\n      token: 'comment',\n      next: '@pop'\n    }], [/<!--/, 'comment.content.invalid'], [/[<\\-]/, 'comment.content']],\n    string: [[/[^\\\\\"'#]+/, {\n      cases: {\n        '@eos': {\n          token: 'string',\n          next: '@popall'\n        },\n        '@default': 'string'\n      }\n    }], [/@escapes/, {\n      cases: {\n        '@eos': {\n          token: 'string.escape',\n          next: '@popall'\n        },\n        '@default': 'string.escape'\n      }\n    }], [/\\\\./, {\n      cases: {\n        '@eos': {\n          token: 'string.escape.invalid',\n          next: '@popall'\n        },\n        '@default': 'string.escape.invalid'\n      }\n    }], // interpolation\n    [/(#{)([^}]*)(})/, ['interpolation.delimiter', 'interpolation', 'interpolation.delimiter']], [/#/, 'string'], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'string',\n          next: '@pop'\n        },\n        '@default': {\n          token: 'string'\n        }\n      }\n    }]],\n    // Almost identical to above, except for escapes and the output token\n    value: [[/[^\\\\\"']+/, {\n      cases: {\n        '@eos': {\n          token: 'attribute.value',\n          next: '@popall'\n        },\n        '@default': 'attribute.value'\n      }\n    }], [/\\\\./, {\n      cases: {\n        '@eos': {\n          token: 'attribute.value',\n          next: '@popall'\n        },\n        '@default': 'attribute.value'\n      }\n    }], [/[\"']/, {\n      cases: {\n        '$#==$S2': {\n          token: 'attribute.value',\n          next: '@pop'\n        },\n        '@default': {\n          token: 'attribute.value'\n        }\n      }\n    }]]\n  }\n};","map":null,"metadata":{},"sourceType":"module"}