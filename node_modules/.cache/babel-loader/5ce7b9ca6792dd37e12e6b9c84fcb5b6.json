{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './goToDefinitionMouse.css';\nimport * as browser from '../../../base/browser/browser.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport * as platform from '../../../base/common/platform.js';\n\nfunction hasModifier(e, modifier) {\n  return !!e[modifier];\n}\n/**\n * An event that encapsulates the various trigger modifiers logic needed for go to definition.\n */\n\n\nvar ClickLinkMouseEvent =\n/** @class */\nfunction () {\n  function ClickLinkMouseEvent(source, opts) {\n    this.target = source.target;\n    this.hasTriggerModifier = hasModifier(source.event, opts.triggerModifier);\n    this.hasSideBySideModifier = hasModifier(source.event, opts.triggerSideBySideModifier);\n    this.isNoneOrSingleMouseDown = browser.isIE || source.event.detail <= 1; // IE does not support event.detail properly\n  }\n\n  return ClickLinkMouseEvent;\n}();\n\nexport { ClickLinkMouseEvent };\n/**\n * An event that encapsulates the various trigger modifiers logic needed for go to definition.\n */\n\nvar ClickLinkKeyboardEvent =\n/** @class */\nfunction () {\n  function ClickLinkKeyboardEvent(source, opts) {\n    this.keyCodeIsTriggerKey = source.keyCode === opts.triggerKey;\n    this.keyCodeIsSideBySideKey = source.keyCode === opts.triggerSideBySideKey;\n    this.hasTriggerModifier = hasModifier(source, opts.triggerModifier);\n  }\n\n  return ClickLinkKeyboardEvent;\n}();\n\nexport { ClickLinkKeyboardEvent };\n\nvar ClickLinkOptions =\n/** @class */\nfunction () {\n  function ClickLinkOptions(triggerKey, triggerModifier, triggerSideBySideKey, triggerSideBySideModifier) {\n    this.triggerKey = triggerKey;\n    this.triggerModifier = triggerModifier;\n    this.triggerSideBySideKey = triggerSideBySideKey;\n    this.triggerSideBySideModifier = triggerSideBySideModifier;\n  }\n\n  ClickLinkOptions.prototype.equals = function (other) {\n    return this.triggerKey === other.triggerKey && this.triggerModifier === other.triggerModifier && this.triggerSideBySideKey === other.triggerSideBySideKey && this.triggerSideBySideModifier === other.triggerSideBySideModifier;\n  };\n\n  return ClickLinkOptions;\n}();\n\nexport { ClickLinkOptions };\n\nfunction createOptions(multiCursorModifier) {\n  if (multiCursorModifier === 'altKey') {\n    if (platform.isMacintosh) {\n      return new ClickLinkOptions(57\n      /* Meta */\n      , 'metaKey', 6\n      /* Alt */\n      , 'altKey');\n    }\n\n    return new ClickLinkOptions(5\n    /* Ctrl */\n    , 'ctrlKey', 6\n    /* Alt */\n    , 'altKey');\n  }\n\n  if (platform.isMacintosh) {\n    return new ClickLinkOptions(6\n    /* Alt */\n    , 'altKey', 57\n    /* Meta */\n    , 'metaKey');\n  }\n\n  return new ClickLinkOptions(6\n  /* Alt */\n  , 'altKey', 5\n  /* Ctrl */\n  , 'ctrlKey');\n}\n\nvar ClickLinkGesture =\n/** @class */\nfunction (_super) {\n  __extends(ClickLinkGesture, _super);\n\n  function ClickLinkGesture(editor) {\n    var _this = _super.call(this) || this;\n\n    _this._onMouseMoveOrRelevantKeyDown = _this._register(new Emitter());\n    _this.onMouseMoveOrRelevantKeyDown = _this._onMouseMoveOrRelevantKeyDown.event;\n    _this._onExecute = _this._register(new Emitter());\n    _this.onExecute = _this._onExecute.event;\n    _this._onCancel = _this._register(new Emitter());\n    _this.onCancel = _this._onCancel.event;\n    _this._editor = editor;\n    _this._opts = createOptions(_this._editor.getConfiguration().multiCursorModifier);\n    _this.lastMouseMoveEvent = null;\n    _this.hasTriggerKeyOnMouseDown = false;\n\n    _this._register(_this._editor.onDidChangeConfiguration(function (e) {\n      if (e.multiCursorModifier) {\n        var newOpts = createOptions(_this._editor.getConfiguration().multiCursorModifier);\n\n        if (_this._opts.equals(newOpts)) {\n          return;\n        }\n\n        _this._opts = newOpts;\n        _this.lastMouseMoveEvent = null;\n        _this.hasTriggerKeyOnMouseDown = false;\n\n        _this._onCancel.fire();\n      }\n    }));\n\n    _this._register(_this._editor.onMouseMove(function (e) {\n      return _this.onEditorMouseMove(new ClickLinkMouseEvent(e, _this._opts));\n    }));\n\n    _this._register(_this._editor.onMouseDown(function (e) {\n      return _this.onEditorMouseDown(new ClickLinkMouseEvent(e, _this._opts));\n    }));\n\n    _this._register(_this._editor.onMouseUp(function (e) {\n      return _this.onEditorMouseUp(new ClickLinkMouseEvent(e, _this._opts));\n    }));\n\n    _this._register(_this._editor.onKeyDown(function (e) {\n      return _this.onEditorKeyDown(new ClickLinkKeyboardEvent(e, _this._opts));\n    }));\n\n    _this._register(_this._editor.onKeyUp(function (e) {\n      return _this.onEditorKeyUp(new ClickLinkKeyboardEvent(e, _this._opts));\n    }));\n\n    _this._register(_this._editor.onMouseDrag(function () {\n      return _this.resetHandler();\n    }));\n\n    _this._register(_this._editor.onDidChangeCursorSelection(function (e) {\n      return _this.onDidChangeCursorSelection(e);\n    }));\n\n    _this._register(_this._editor.onDidChangeModel(function (e) {\n      return _this.resetHandler();\n    }));\n\n    _this._register(_this._editor.onDidChangeModelContent(function () {\n      return _this.resetHandler();\n    }));\n\n    _this._register(_this._editor.onDidScrollChange(function (e) {\n      if (e.scrollTopChanged || e.scrollLeftChanged) {\n        _this.resetHandler();\n      }\n    }));\n\n    return _this;\n  }\n\n  ClickLinkGesture.prototype.onDidChangeCursorSelection = function (e) {\n    if (e.selection && e.selection.startColumn !== e.selection.endColumn) {\n      this.resetHandler(); // immediately stop this feature if the user starts to select (https://github.com/Microsoft/vscode/issues/7827)\n    }\n  };\n\n  ClickLinkGesture.prototype.onEditorMouseMove = function (mouseEvent) {\n    this.lastMouseMoveEvent = mouseEvent;\n\n    this._onMouseMoveOrRelevantKeyDown.fire([mouseEvent, null]);\n  };\n\n  ClickLinkGesture.prototype.onEditorMouseDown = function (mouseEvent) {\n    // We need to record if we had the trigger key on mouse down because someone might select something in the editor\n    // holding the mouse down and then while mouse is down start to press Ctrl/Cmd to start a copy operation and then\n    // release the mouse button without wanting to do the navigation.\n    // With this flag we prevent goto definition if the mouse was down before the trigger key was pressed.\n    this.hasTriggerKeyOnMouseDown = mouseEvent.hasTriggerModifier;\n  };\n\n  ClickLinkGesture.prototype.onEditorMouseUp = function (mouseEvent) {\n    if (this.hasTriggerKeyOnMouseDown) {\n      this._onExecute.fire(mouseEvent);\n    }\n  };\n\n  ClickLinkGesture.prototype.onEditorKeyDown = function (e) {\n    if (this.lastMouseMoveEvent && (e.keyCodeIsTriggerKey // User just pressed Ctrl/Cmd (normal goto definition)\n    || e.keyCodeIsSideBySideKey && e.hasTriggerModifier // User pressed Ctrl/Cmd+Alt (goto definition to the side)\n    )) {\n      this._onMouseMoveOrRelevantKeyDown.fire([this.lastMouseMoveEvent, e]);\n    } else if (e.hasTriggerModifier) {\n      this._onCancel.fire(); // remove decorations if user holds another key with ctrl/cmd to prevent accident goto declaration\n\n    }\n  };\n\n  ClickLinkGesture.prototype.onEditorKeyUp = function (e) {\n    if (e.keyCodeIsTriggerKey) {\n      this._onCancel.fire();\n    }\n  };\n\n  ClickLinkGesture.prototype.resetHandler = function () {\n    this.lastMouseMoveEvent = null;\n    this.hasTriggerKeyOnMouseDown = false;\n\n    this._onCancel.fire();\n  };\n\n  return ClickLinkGesture;\n}(Disposable);\n\nexport { ClickLinkGesture };","map":null,"metadata":{},"sourceType":"module"}