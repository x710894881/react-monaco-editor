{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Disposable } from '../../../base/common/lifecycle.js';\n\nvar ElementSizeObserver =\n/** @class */\nfunction (_super) {\n  __extends(ElementSizeObserver, _super);\n\n  function ElementSizeObserver(referenceDomElement, changeCallback) {\n    var _this = _super.call(this) || this;\n\n    _this.referenceDomElement = referenceDomElement;\n    _this.changeCallback = changeCallback;\n    _this.measureReferenceDomElementToken = -1;\n    _this.width = -1;\n    _this.height = -1;\n\n    _this.measureReferenceDomElement(false);\n\n    return _this;\n  }\n\n  ElementSizeObserver.prototype.dispose = function () {\n    this.stopObserving();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  ElementSizeObserver.prototype.getWidth = function () {\n    return this.width;\n  };\n\n  ElementSizeObserver.prototype.getHeight = function () {\n    return this.height;\n  };\n\n  ElementSizeObserver.prototype.startObserving = function () {\n    var _this = this;\n\n    if (this.measureReferenceDomElementToken === -1) {\n      this.measureReferenceDomElementToken = setInterval(function () {\n        return _this.measureReferenceDomElement(true);\n      }, 100);\n    }\n  };\n\n  ElementSizeObserver.prototype.stopObserving = function () {\n    if (this.measureReferenceDomElementToken !== -1) {\n      clearInterval(this.measureReferenceDomElementToken);\n      this.measureReferenceDomElementToken = -1;\n    }\n  };\n\n  ElementSizeObserver.prototype.observe = function (dimension) {\n    this.measureReferenceDomElement(true, dimension);\n  };\n\n  ElementSizeObserver.prototype.measureReferenceDomElement = function (callChangeCallback, dimension) {\n    var observedWidth = 0;\n    var observedHeight = 0;\n\n    if (dimension) {\n      observedWidth = dimension.width;\n      observedHeight = dimension.height;\n    } else if (this.referenceDomElement) {\n      observedWidth = this.referenceDomElement.clientWidth;\n      observedHeight = this.referenceDomElement.clientHeight;\n    }\n\n    observedWidth = Math.max(5, observedWidth);\n    observedHeight = Math.max(5, observedHeight);\n\n    if (this.width !== observedWidth || this.height !== observedHeight) {\n      this.width = observedWidth;\n      this.height = observedHeight;\n\n      if (callChangeCallback) {\n        this.changeCallback();\n      }\n    }\n  };\n\n  return ElementSizeObserver;\n}(Disposable);\n\nexport { ElementSizeObserver };","map":null,"metadata":{},"sourceType":"module"}