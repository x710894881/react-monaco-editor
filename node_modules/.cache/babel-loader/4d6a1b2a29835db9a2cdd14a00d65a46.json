{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * The minimal size of the slider (such that it can still be clickable) -- it is artificially enlarged.\n */\nvar MINIMUM_SLIDER_SIZE = 20;\n\nvar ScrollbarState =\n/** @class */\nfunction () {\n  function ScrollbarState(arrowSize, scrollbarSize, oppositeScrollbarSize) {\n    this._scrollbarSize = Math.round(scrollbarSize);\n    this._oppositeScrollbarSize = Math.round(oppositeScrollbarSize);\n    this._arrowSize = Math.round(arrowSize);\n    this._visibleSize = 0;\n    this._scrollSize = 0;\n    this._scrollPosition = 0;\n    this._computedAvailableSize = 0;\n    this._computedIsNeeded = false;\n    this._computedSliderSize = 0;\n    this._computedSliderRatio = 0;\n    this._computedSliderPosition = 0;\n\n    this._refreshComputedValues();\n  }\n\n  ScrollbarState.prototype.clone = function () {\n    var r = new ScrollbarState(this._arrowSize, this._scrollbarSize, this._oppositeScrollbarSize);\n    r.setVisibleSize(this._visibleSize);\n    r.setScrollSize(this._scrollSize);\n    r.setScrollPosition(this._scrollPosition);\n    return r;\n  };\n\n  ScrollbarState.prototype.setVisibleSize = function (visibleSize) {\n    var iVisibleSize = Math.round(visibleSize);\n\n    if (this._visibleSize !== iVisibleSize) {\n      this._visibleSize = iVisibleSize;\n\n      this._refreshComputedValues();\n\n      return true;\n    }\n\n    return false;\n  };\n\n  ScrollbarState.prototype.setScrollSize = function (scrollSize) {\n    var iScrollSize = Math.round(scrollSize);\n\n    if (this._scrollSize !== iScrollSize) {\n      this._scrollSize = iScrollSize;\n\n      this._refreshComputedValues();\n\n      return true;\n    }\n\n    return false;\n  };\n\n  ScrollbarState.prototype.setScrollPosition = function (scrollPosition) {\n    var iScrollPosition = Math.round(scrollPosition);\n\n    if (this._scrollPosition !== iScrollPosition) {\n      this._scrollPosition = iScrollPosition;\n\n      this._refreshComputedValues();\n\n      return true;\n    }\n\n    return false;\n  };\n\n  ScrollbarState._computeValues = function (oppositeScrollbarSize, arrowSize, visibleSize, scrollSize, scrollPosition) {\n    var computedAvailableSize = Math.max(0, visibleSize - oppositeScrollbarSize);\n    var computedRepresentableSize = Math.max(0, computedAvailableSize - 2 * arrowSize);\n    var computedIsNeeded = scrollSize > 0 && scrollSize > visibleSize;\n\n    if (!computedIsNeeded) {\n      // There is no need for a slider\n      return {\n        computedAvailableSize: Math.round(computedAvailableSize),\n        computedIsNeeded: computedIsNeeded,\n        computedSliderSize: Math.round(computedRepresentableSize),\n        computedSliderRatio: 0,\n        computedSliderPosition: 0\n      };\n    } // We must artificially increase the size of the slider if needed, since the slider would be too small to grab with the mouse otherwise\n\n\n    var computedSliderSize = Math.round(Math.max(MINIMUM_SLIDER_SIZE, Math.floor(visibleSize * computedRepresentableSize / scrollSize))); // The slider can move from 0 to `computedRepresentableSize` - `computedSliderSize`\n    // in the same way `scrollPosition` can move from 0 to `scrollSize` - `visibleSize`.\n\n    var computedSliderRatio = (computedRepresentableSize - computedSliderSize) / (scrollSize - visibleSize);\n    var computedSliderPosition = scrollPosition * computedSliderRatio;\n    return {\n      computedAvailableSize: Math.round(computedAvailableSize),\n      computedIsNeeded: computedIsNeeded,\n      computedSliderSize: Math.round(computedSliderSize),\n      computedSliderRatio: computedSliderRatio,\n      computedSliderPosition: Math.round(computedSliderPosition)\n    };\n  };\n\n  ScrollbarState.prototype._refreshComputedValues = function () {\n    var r = ScrollbarState._computeValues(this._oppositeScrollbarSize, this._arrowSize, this._visibleSize, this._scrollSize, this._scrollPosition);\n\n    this._computedAvailableSize = r.computedAvailableSize;\n    this._computedIsNeeded = r.computedIsNeeded;\n    this._computedSliderSize = r.computedSliderSize;\n    this._computedSliderRatio = r.computedSliderRatio;\n    this._computedSliderPosition = r.computedSliderPosition;\n  };\n\n  ScrollbarState.prototype.getArrowSize = function () {\n    return this._arrowSize;\n  };\n\n  ScrollbarState.prototype.getScrollPosition = function () {\n    return this._scrollPosition;\n  };\n\n  ScrollbarState.prototype.getRectangleLargeSize = function () {\n    return this._computedAvailableSize;\n  };\n\n  ScrollbarState.prototype.getRectangleSmallSize = function () {\n    return this._scrollbarSize;\n  };\n\n  ScrollbarState.prototype.isNeeded = function () {\n    return this._computedIsNeeded;\n  };\n\n  ScrollbarState.prototype.getSliderSize = function () {\n    return this._computedSliderSize;\n  };\n\n  ScrollbarState.prototype.getSliderPosition = function () {\n    return this._computedSliderPosition;\n  };\n  /**\n   * Compute a desired `scrollPosition` such that `offset` ends up in the center of the slider.\n   * `offset` is based on the same coordinate system as the `sliderPosition`.\n   */\n\n\n  ScrollbarState.prototype.getDesiredScrollPositionFromOffset = function (offset) {\n    if (!this._computedIsNeeded) {\n      // no need for a slider\n      return 0;\n    }\n\n    var desiredSliderPosition = offset - this._arrowSize - this._computedSliderSize / 2;\n    return Math.round(desiredSliderPosition / this._computedSliderRatio);\n  };\n  /**\n   * Compute a desired `scrollPosition` such that the slider moves by `delta`.\n   */\n\n\n  ScrollbarState.prototype.getDesiredScrollPositionFromDelta = function (delta) {\n    if (!this._computedIsNeeded) {\n      // no need for a slider\n      return 0;\n    }\n\n    var desiredSliderPosition = this._computedSliderPosition + delta;\n    return Math.round(desiredSliderPosition / this._computedSliderRatio);\n  };\n\n  return ScrollbarState;\n}();\n\nexport { ScrollbarState };","map":null,"metadata":{},"sourceType":"module"}