{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as dom from '../../../base/browser/dom.js';\nimport { domEvent, stop } from '../../../base/browser/event.js';\nimport * as aria from '../../../base/browser/ui/aria/aria.js';\nimport { DomScrollableElement } from '../../../base/browser/ui/scrollbar/scrollableElement.js';\nimport { Event } from '../../../base/common/event.js';\nimport { Disposable, DisposableStore, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport './parameterHints.css';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { MarkdownRenderer } from '../markdown/markdownRenderer.js';\nimport { Context } from './provideSignatureHelp.js';\nimport * as nls from '../../../nls.js';\nimport { IContextKeyService } from '../../../platform/contextkey/common/contextkey.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { editorHoverBackground, editorHoverBorder, textCodeBlockBackground, textLinkForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { HIGH_CONTRAST, registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport { ParameterHintsModel } from './parameterHintsModel.js';\nvar $ = dom.$;\n\nvar ParameterHintsWidget =\n/** @class */\nfunction (_super) {\n  __extends(ParameterHintsWidget, _super);\n\n  function ParameterHintsWidget(editor, contextKeyService, openerService, modeService) {\n    var _this = _super.call(this) || this;\n\n    _this.editor = editor;\n    _this.renderDisposeables = _this._register(new DisposableStore());\n    _this.model = _this._register(new MutableDisposable()); // Editor.IContentWidget.allowEditorOverflow\n\n    _this.allowEditorOverflow = true;\n    _this.markdownRenderer = _this._register(new MarkdownRenderer(editor, modeService, openerService));\n    _this.model.value = new ParameterHintsModel(editor);\n    _this.keyVisible = Context.Visible.bindTo(contextKeyService);\n    _this.keyMultipleSignatures = Context.MultipleSignatures.bindTo(contextKeyService);\n    _this.visible = false;\n\n    _this._register(_this.model.value.onChangedHints(function (newParameterHints) {\n      if (newParameterHints) {\n        _this.show();\n\n        _this.render(newParameterHints);\n      } else {\n        _this.hide();\n      }\n    }));\n\n    return _this;\n  }\n\n  ParameterHintsWidget.prototype.createParamaterHintDOMNodes = function () {\n    var _this = this;\n\n    this.element = $('.editor-widget.parameter-hints-widget');\n    var wrapper = dom.append(this.element, $('.wrapper'));\n    wrapper.tabIndex = -1;\n    var buttons = dom.append(wrapper, $('.buttons'));\n    var previous = dom.append(buttons, $('.button.previous'));\n    var next = dom.append(buttons, $('.button.next'));\n    var onPreviousClick = stop(domEvent(previous, 'click'));\n\n    this._register(onPreviousClick(this.previous, this));\n\n    var onNextClick = stop(domEvent(next, 'click'));\n\n    this._register(onNextClick(this.next, this));\n\n    this.overloads = dom.append(wrapper, $('.overloads'));\n    var body = $('.body');\n    this.scrollbar = new DomScrollableElement(body, {});\n\n    this._register(this.scrollbar);\n\n    wrapper.appendChild(this.scrollbar.getDomNode());\n    this.signature = dom.append(body, $('.signature'));\n    this.docs = dom.append(body, $('.docs'));\n    this.editor.addContentWidget(this);\n    this.hide();\n    this.element.style.userSelect = 'text';\n\n    this._register(this.editor.onDidChangeCursorSelection(function (e) {\n      if (_this.visible) {\n        _this.editor.layoutContentWidget(_this);\n      }\n    }));\n\n    var updateFont = function () {\n      var fontInfo = _this.editor.getConfiguration().fontInfo;\n\n      _this.element.style.fontSize = fontInfo.fontSize + \"px\";\n    };\n\n    updateFont();\n\n    this._register(Event.chain(this.editor.onDidChangeConfiguration.bind(this.editor)).filter(function (e) {\n      return e.fontInfo;\n    }).on(updateFont, null));\n\n    this._register(this.editor.onDidLayoutChange(function (e) {\n      return _this.updateMaxHeight();\n    }));\n\n    this.updateMaxHeight();\n  };\n\n  ParameterHintsWidget.prototype.show = function () {\n    var _this = this;\n\n    if (!this.model || this.visible) {\n      return;\n    }\n\n    if (!this.element) {\n      this.createParamaterHintDOMNodes();\n    }\n\n    this.keyVisible.set(true);\n    this.visible = true;\n    setTimeout(function () {\n      return dom.addClass(_this.element, 'visible');\n    }, 100);\n    this.editor.layoutContentWidget(this);\n  };\n\n  ParameterHintsWidget.prototype.hide = function () {\n    if (!this.model || !this.visible) {\n      return;\n    }\n\n    if (!this.element) {\n      this.createParamaterHintDOMNodes();\n    }\n\n    this.keyVisible.reset();\n    this.visible = false;\n    this.announcedLabel = null;\n    dom.removeClass(this.element, 'visible');\n    this.editor.layoutContentWidget(this);\n  };\n\n  ParameterHintsWidget.prototype.getPosition = function () {\n    if (this.visible) {\n      return {\n        position: this.editor.getPosition(),\n        preference: [1\n        /* ABOVE */\n        , 2\n        /* BELOW */\n        ]\n      };\n    }\n\n    return null;\n  };\n\n  ParameterHintsWidget.prototype.render = function (hints) {\n    var multiple = hints.signatures.length > 1;\n    dom.toggleClass(this.element, 'multiple', multiple);\n    this.keyMultipleSignatures.set(multiple);\n    this.signature.innerHTML = '';\n    this.docs.innerHTML = '';\n    var signature = hints.signatures[hints.activeSignature];\n\n    if (!signature) {\n      return;\n    }\n\n    var code = dom.append(this.signature, $('.code'));\n    var hasParameters = signature.parameters.length > 0;\n    var fontInfo = this.editor.getConfiguration().fontInfo;\n    code.style.fontSize = fontInfo.fontSize + \"px\";\n    code.style.fontFamily = fontInfo.fontFamily;\n\n    if (!hasParameters) {\n      var label = dom.append(code, $('span'));\n      label.textContent = signature.label;\n    } else {\n      this.renderParameters(code, signature, hints.activeParameter);\n    }\n\n    this.renderDisposeables.clear();\n    var activeParameter = signature.parameters[hints.activeParameter];\n\n    if (activeParameter && activeParameter.documentation) {\n      var documentation = $('span.documentation');\n\n      if (typeof activeParameter.documentation === 'string') {\n        documentation.textContent = activeParameter.documentation;\n      } else {\n        var renderedContents = this.markdownRenderer.render(activeParameter.documentation);\n        dom.addClass(renderedContents.element, 'markdown-docs');\n        this.renderDisposeables.add(renderedContents);\n        documentation.appendChild(renderedContents.element);\n      }\n\n      dom.append(this.docs, $('p', {}, documentation));\n    }\n\n    if (signature.documentation === undefined) {\n      /** no op */\n    } else if (typeof signature.documentation === 'string') {\n      dom.append(this.docs, $('p', {}, signature.documentation));\n    } else {\n      var renderedContents = this.markdownRenderer.render(signature.documentation);\n      dom.addClass(renderedContents.element, 'markdown-docs');\n      this.renderDisposeables.add(renderedContents);\n      dom.append(this.docs, renderedContents.element);\n    }\n\n    var hasDocs = false;\n\n    if (activeParameter && typeof activeParameter.documentation === 'string' && activeParameter.documentation.length > 0) {\n      hasDocs = true;\n    }\n\n    if (activeParameter && typeof activeParameter.documentation === 'object' && activeParameter.documentation.value.length > 0) {\n      hasDocs = true;\n    }\n\n    if (typeof signature.documentation === 'string' && signature.documentation.length > 0) {\n      hasDocs = true;\n    }\n\n    if (typeof signature.documentation === 'object' && signature.documentation.value.length > 0) {\n      hasDocs = true;\n    }\n\n    dom.toggleClass(this.signature, 'has-docs', hasDocs);\n    dom.toggleClass(this.docs, 'empty', !hasDocs);\n    var currentOverload = String(hints.activeSignature + 1);\n\n    if (hints.signatures.length < 10) {\n      currentOverload += \"/\" + hints.signatures.length;\n    }\n\n    this.overloads.textContent = currentOverload;\n\n    if (activeParameter) {\n      var labelToAnnounce = this.getParameterLabel(signature, hints.activeParameter); // Select method gets called on every user type while parameter hints are visible.\n      // We do not want to spam the user with same announcements, so we only announce if the current parameter changed.\n\n      if (this.announcedLabel !== labelToAnnounce) {\n        aria.alert(nls.localize('hint', \"{0}, hint\", labelToAnnounce));\n        this.announcedLabel = labelToAnnounce;\n      }\n    }\n\n    this.editor.layoutContentWidget(this);\n    this.scrollbar.scanDomNode();\n  };\n\n  ParameterHintsWidget.prototype.renderParameters = function (parent, signature, currentParameter) {\n    var _a = this.getParameterLabelOffsets(signature, currentParameter),\n        start = _a[0],\n        end = _a[1];\n\n    var beforeSpan = document.createElement('span');\n    beforeSpan.textContent = signature.label.substring(0, start);\n    var paramSpan = document.createElement('span');\n    paramSpan.textContent = signature.label.substring(start, end);\n    paramSpan.className = 'parameter active';\n    var afterSpan = document.createElement('span');\n    afterSpan.textContent = signature.label.substring(end);\n    dom.append(parent, beforeSpan, paramSpan, afterSpan);\n  };\n\n  ParameterHintsWidget.prototype.getParameterLabel = function (signature, paramIdx) {\n    var param = signature.parameters[paramIdx];\n\n    if (typeof param.label === 'string') {\n      return param.label;\n    } else {\n      return signature.label.substring(param.label[0], param.label[1]);\n    }\n  };\n\n  ParameterHintsWidget.prototype.getParameterLabelOffsets = function (signature, paramIdx) {\n    var param = signature.parameters[paramIdx];\n\n    if (!param) {\n      return [0, 0];\n    } else if (Array.isArray(param.label)) {\n      return param.label;\n    } else {\n      var idx = signature.label.lastIndexOf(param.label);\n      return idx >= 0 ? [idx, idx + param.label.length] : [0, 0];\n    }\n  };\n\n  ParameterHintsWidget.prototype.next = function () {\n    if (this.model.value) {\n      this.editor.focus();\n      this.model.value.next();\n    }\n  };\n\n  ParameterHintsWidget.prototype.previous = function () {\n    if (this.model.value) {\n      this.editor.focus();\n      this.model.value.previous();\n    }\n  };\n\n  ParameterHintsWidget.prototype.cancel = function () {\n    if (this.model.value) {\n      this.model.value.cancel();\n    }\n  };\n\n  ParameterHintsWidget.prototype.getDomNode = function () {\n    return this.element;\n  };\n\n  ParameterHintsWidget.prototype.getId = function () {\n    return ParameterHintsWidget.ID;\n  };\n\n  ParameterHintsWidget.prototype.trigger = function (context) {\n    if (this.model.value) {\n      this.model.value.trigger(context, 0);\n    }\n  };\n\n  ParameterHintsWidget.prototype.updateMaxHeight = function () {\n    var height = Math.max(this.editor.getLayoutInfo().height / 4, 250);\n    this.element.style.maxHeight = height + \"px\";\n  };\n\n  ParameterHintsWidget.ID = 'editor.widget.parameterHintsWidget';\n  ParameterHintsWidget = __decorate([__param(1, IContextKeyService), __param(2, IOpenerService), __param(3, IModeService)], ParameterHintsWidget);\n  return ParameterHintsWidget;\n}(Disposable);\n\nexport { ParameterHintsWidget };\nregisterThemingParticipant(function (theme, collector) {\n  var border = theme.getColor(editorHoverBorder);\n\n  if (border) {\n    var borderWidth = theme.type === HIGH_CONTRAST ? 2 : 1;\n    collector.addRule(\".monaco-editor .parameter-hints-widget { border: \" + borderWidth + \"px solid \" + border + \"; }\");\n    collector.addRule(\".monaco-editor .parameter-hints-widget.multiple .body { border-left: 1px solid \" + border.transparent(0.5) + \"; }\");\n    collector.addRule(\".monaco-editor .parameter-hints-widget .signature.has-docs { border-bottom: 1px solid \" + border.transparent(0.5) + \"; }\");\n  }\n\n  var background = theme.getColor(editorHoverBackground);\n\n  if (background) {\n    collector.addRule(\".monaco-editor .parameter-hints-widget { background-color: \" + background + \"; }\");\n  }\n\n  var link = theme.getColor(textLinkForeground);\n\n  if (link) {\n    collector.addRule(\".monaco-editor .parameter-hints-widget a { color: \" + link + \"; }\");\n  }\n\n  var codeBackground = theme.getColor(textCodeBlockBackground);\n\n  if (codeBackground) {\n    collector.addRule(\".monaco-editor .parameter-hints-widget code { background-color: \" + codeBackground + \"; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}