{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport './goToDefinitionMouse.css';\nimport * as nls from '../../../nls.js';\nimport { createCancelablePromise } from '../../../base/common/async.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\nimport { MarkdownString } from '../../../base/common/htmlContent.js';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { Range } from '../../common/core/range.js';\nimport { DefinitionProviderRegistry } from '../../common/modes.js';\nimport { registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { getDefinitionsAtPosition } from './goToDefinition.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { ITextModelService } from '../../common/services/resolverService.js';\nimport { registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport { editorActiveLinkForeground } from '../../../platform/theme/common/colorRegistry.js';\nimport { EditorState } from '../../browser/core/editorState.js';\nimport { DefinitionAction, DefinitionActionConfig } from './goToDefinitionCommands.js';\nimport { ClickLinkGesture } from './clickLinkGesture.js';\nimport { Position } from '../../common/core/position.js';\nimport { withNullAsUndefined } from '../../../base/common/types.js';\n\nvar GotoDefinitionWithMouseEditorContribution =\n/** @class */\nfunction () {\n  function GotoDefinitionWithMouseEditorContribution(editor, textModelResolverService, modeService) {\n    var _this = this;\n\n    this.textModelResolverService = textModelResolverService;\n    this.modeService = modeService;\n    this.toUnhook = new DisposableStore();\n    this.decorations = [];\n    this.currentWordUnderMouse = null;\n    this.previousPromise = null;\n    this.editor = editor;\n    var linkGesture = new ClickLinkGesture(editor);\n    this.toUnhook.add(linkGesture);\n    this.toUnhook.add(linkGesture.onMouseMoveOrRelevantKeyDown(function (_a) {\n      var mouseEvent = _a[0],\n          keyboardEvent = _a[1];\n\n      _this.startFindDefinition(mouseEvent, withNullAsUndefined(keyboardEvent));\n    }));\n    this.toUnhook.add(linkGesture.onExecute(function (mouseEvent) {\n      if (_this.isEnabled(mouseEvent)) {\n        _this.gotoDefinition(mouseEvent.target, mouseEvent.hasSideBySideModifier).then(function () {\n          _this.removeDecorations();\n        }, function (error) {\n          _this.removeDecorations();\n\n          onUnexpectedError(error);\n        });\n      }\n    }));\n    this.toUnhook.add(linkGesture.onCancel(function () {\n      _this.removeDecorations();\n\n      _this.currentWordUnderMouse = null;\n    }));\n  }\n\n  GotoDefinitionWithMouseEditorContribution.prototype.startFindDefinition = function (mouseEvent, withKey) {\n    var _this = this; // check if we are active and on a content widget\n\n\n    if (mouseEvent.target.type === 9\n    /* CONTENT_WIDGET */\n    && this.decorations.length > 0) {\n      return;\n    }\n\n    if (!this.editor.hasModel() || !this.isEnabled(mouseEvent, withKey)) {\n      this.currentWordUnderMouse = null;\n      this.removeDecorations();\n      return;\n    } // Find word at mouse position\n\n\n    var word = mouseEvent.target.position ? this.editor.getModel().getWordAtPosition(mouseEvent.target.position) : null;\n\n    if (!word) {\n      this.currentWordUnderMouse = null;\n      this.removeDecorations();\n      return;\n    }\n\n    var position = mouseEvent.target.position; // Return early if word at position is still the same\n\n    if (this.currentWordUnderMouse && this.currentWordUnderMouse.startColumn === word.startColumn && this.currentWordUnderMouse.endColumn === word.endColumn && this.currentWordUnderMouse.word === word.word) {\n      return;\n    }\n\n    this.currentWordUnderMouse = word; // Find definition and decorate word if found\n\n    var state = new EditorState(this.editor, 4\n    /* Position */\n    | 1\n    /* Value */\n    | 2\n    /* Selection */\n    | 8\n    /* Scroll */\n    );\n\n    if (this.previousPromise) {\n      this.previousPromise.cancel();\n      this.previousPromise = null;\n    }\n\n    this.previousPromise = createCancelablePromise(function (token) {\n      return _this.findDefinition(mouseEvent.target, token);\n    });\n    this.previousPromise.then(function (results) {\n      if (!results || !results.length || !state.validate(_this.editor)) {\n        _this.removeDecorations();\n\n        return;\n      } // Multiple results\n\n\n      if (results.length > 1) {\n        _this.addDecoration(new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn), new MarkdownString().appendText(nls.localize('multipleResults', \"Click to show {0} definitions.\", results.length)));\n      } // Single result\n      else {\n          var result_1 = results[0];\n\n          if (!result_1.uri) {\n            return;\n          }\n\n          _this.textModelResolverService.createModelReference(result_1.uri).then(function (ref) {\n            if (!ref.object || !ref.object.textEditorModel) {\n              ref.dispose();\n              return;\n            }\n\n            var textEditorModel = ref.object.textEditorModel;\n            var startLineNumber = result_1.range.startLineNumber;\n\n            if (startLineNumber < 1 || startLineNumber > textEditorModel.getLineCount()) {\n              // invalid range\n              ref.dispose();\n              return;\n            }\n\n            var previewValue = _this.getPreviewValue(textEditorModel, startLineNumber, result_1);\n\n            var wordRange;\n\n            if (result_1.originSelectionRange) {\n              wordRange = Range.lift(result_1.originSelectionRange);\n            } else {\n              wordRange = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n            }\n\n            var modeId = _this.modeService.getModeIdByFilepathOrFirstLine(textEditorModel.uri);\n\n            _this.addDecoration(wordRange, new MarkdownString().appendCodeblock(modeId ? modeId : '', previewValue));\n\n            ref.dispose();\n          });\n        }\n    }).then(undefined, onUnexpectedError);\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.getPreviewValue = function (textEditorModel, startLineNumber, result) {\n    var rangeToUse = result.targetSelectionRange ? result.range : this.getPreviewRangeBasedOnBrackets(textEditorModel, startLineNumber);\n    var numberOfLinesInRange = rangeToUse.endLineNumber - rangeToUse.startLineNumber;\n\n    if (numberOfLinesInRange >= GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES) {\n      rangeToUse = this.getPreviewRangeBasedOnIndentation(textEditorModel, startLineNumber);\n    }\n\n    var previewValue = this.stripIndentationFromPreviewRange(textEditorModel, startLineNumber, rangeToUse);\n    return previewValue;\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.stripIndentationFromPreviewRange = function (textEditorModel, startLineNumber, previewRange) {\n    var startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);\n    var minIndent = startIndent;\n\n    for (var endLineNumber = startLineNumber + 1; endLineNumber < previewRange.endLineNumber; endLineNumber++) {\n      var endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);\n      minIndent = Math.min(minIndent, endIndent);\n    }\n\n    var previewValue = textEditorModel.getValueInRange(previewRange).replace(new RegExp(\"^\\\\s{\" + (minIndent - 1) + \"}\", 'gm'), '').trim();\n    return previewValue;\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.getPreviewRangeBasedOnIndentation = function (textEditorModel, startLineNumber) {\n    var startIndent = textEditorModel.getLineFirstNonWhitespaceColumn(startLineNumber);\n    var maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES);\n    var endLineNumber = startLineNumber + 1;\n\n    for (; endLineNumber < maxLineNumber; endLineNumber++) {\n      var endIndent = textEditorModel.getLineFirstNonWhitespaceColumn(endLineNumber);\n\n      if (startIndent === endIndent) {\n        break;\n      }\n    }\n\n    return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.getPreviewRangeBasedOnBrackets = function (textEditorModel, startLineNumber) {\n    var maxLineNumber = Math.min(textEditorModel.getLineCount(), startLineNumber + GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES);\n    var brackets = [];\n    var ignoreFirstEmpty = true;\n    var currentBracket = textEditorModel.findNextBracket(new Position(startLineNumber, 1));\n\n    while (currentBracket !== null) {\n      if (brackets.length === 0) {\n        brackets.push(currentBracket);\n      } else {\n        var lastBracket = brackets[brackets.length - 1];\n\n        if (lastBracket.open === currentBracket.open && lastBracket.isOpen && !currentBracket.isOpen) {\n          brackets.pop();\n        } else {\n          brackets.push(currentBracket);\n        }\n\n        if (brackets.length === 0) {\n          if (ignoreFirstEmpty) {\n            ignoreFirstEmpty = false;\n          } else {\n            return new Range(startLineNumber, 1, currentBracket.range.endLineNumber + 1, 1);\n          }\n        }\n      }\n\n      var maxColumn = textEditorModel.getLineMaxColumn(startLineNumber);\n      var nextLineNumber = currentBracket.range.endLineNumber;\n      var nextColumn = currentBracket.range.endColumn;\n\n      if (maxColumn === currentBracket.range.endColumn) {\n        nextLineNumber++;\n        nextColumn = 1;\n      }\n\n      if (nextLineNumber > maxLineNumber) {\n        return new Range(startLineNumber, 1, maxLineNumber + 1, 1);\n      }\n\n      currentBracket = textEditorModel.findNextBracket(new Position(nextLineNumber, nextColumn));\n    }\n\n    return new Range(startLineNumber, 1, maxLineNumber + 1, 1);\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.addDecoration = function (range, hoverMessage) {\n    var newDecorations = {\n      range: range,\n      options: {\n        inlineClassName: 'goto-definition-link',\n        hoverMessage: hoverMessage\n      }\n    };\n    this.decorations = this.editor.deltaDecorations(this.decorations, [newDecorations]);\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.removeDecorations = function () {\n    if (this.decorations.length > 0) {\n      this.decorations = this.editor.deltaDecorations(this.decorations, []);\n    }\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.isEnabled = function (mouseEvent, withKey) {\n    return this.editor.hasModel() && mouseEvent.isNoneOrSingleMouseDown && mouseEvent.target.type === 6\n    /* CONTENT_TEXT */\n    && (mouseEvent.hasTriggerModifier || (withKey ? withKey.keyCodeIsTriggerKey : false)) && DefinitionProviderRegistry.has(this.editor.getModel());\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.findDefinition = function (target, token) {\n    var model = this.editor.getModel();\n\n    if (!model) {\n      return Promise.resolve(null);\n    }\n\n    return getDefinitionsAtPosition(model, target.position, token);\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.gotoDefinition = function (target, sideBySide) {\n    var _this = this;\n\n    this.editor.setPosition(target.position);\n    var action = new DefinitionAction(new DefinitionActionConfig(sideBySide, false, true, false), {\n      alias: '',\n      label: '',\n      id: '',\n      precondition: undefined\n    });\n    return this.editor.invokeWithinContext(function (accessor) {\n      return action.run(accessor, _this.editor);\n    });\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.getId = function () {\n    return GotoDefinitionWithMouseEditorContribution.ID;\n  };\n\n  GotoDefinitionWithMouseEditorContribution.prototype.dispose = function () {\n    this.toUnhook.dispose();\n  };\n\n  GotoDefinitionWithMouseEditorContribution.ID = 'editor.contrib.gotodefinitionwithmouse';\n  GotoDefinitionWithMouseEditorContribution.MAX_SOURCE_PREVIEW_LINES = 8;\n  GotoDefinitionWithMouseEditorContribution = __decorate([__param(1, ITextModelService), __param(2, IModeService)], GotoDefinitionWithMouseEditorContribution);\n  return GotoDefinitionWithMouseEditorContribution;\n}();\n\nregisterEditorContribution(GotoDefinitionWithMouseEditorContribution);\nregisterThemingParticipant(function (theme, collector) {\n  var activeLinkForeground = theme.getColor(editorActiveLinkForeground);\n\n  if (activeLinkForeground) {\n    collector.addRule(\".monaco-editor .goto-definition-link { color: \" + activeLinkForeground + \" !important; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}