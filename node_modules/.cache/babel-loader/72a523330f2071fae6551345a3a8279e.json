{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as Assert from '../../../common/assert.js';\nimport { onUnexpectedError } from '../../../common/errors.js';\nimport { combinedDisposable } from '../../../common/lifecycle.js';\nimport { Event, Emitter, EventMultiplexer, Relay } from '../../../common/event.js';\n\nvar LockData =\n/** @class */\nfunction () {\n  function LockData(item) {\n    this._onDispose = new Emitter();\n    this.onDispose = this._onDispose.event;\n    this._item = item;\n  }\n\n  Object.defineProperty(LockData.prototype, \"item\", {\n    get: function () {\n      return this._item;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LockData.prototype.dispose = function () {\n    if (this._onDispose) {\n      this._onDispose.fire();\n\n      this._onDispose.dispose();\n\n      this._onDispose = undefined;\n    }\n  };\n\n  return LockData;\n}();\n\nexport { LockData };\n\nvar Lock =\n/** @class */\nfunction () {\n  function Lock() {\n    this.locks = Object.create({});\n  }\n\n  Lock.prototype.isLocked = function (item) {\n    return !!this.locks[item.id];\n  };\n\n  Lock.prototype.run = function (item, fn) {\n    var _this = this;\n\n    var lock = this.getLock(item);\n\n    if (lock) {\n      return new Promise(function (c, e) {\n        Event.once(lock.onDispose)(function () {\n          return _this.run(item, fn).then(c, e);\n        });\n      });\n    }\n\n    var result;\n    return new Promise(function (c, e) {\n      if (item.isDisposed()) {\n        return e(new Error('Item is disposed.'));\n      }\n\n      var lock = _this.locks[item.id] = new LockData(item);\n      result = fn().then(function (r) {\n        delete _this.locks[item.id];\n        lock.dispose();\n        return r;\n      }).then(c, e);\n      return result;\n    });\n  };\n\n  Lock.prototype.getLock = function (item) {\n    var key;\n\n    for (key in this.locks) {\n      var lock = this.locks[key];\n\n      if (item.intersects(lock.item)) {\n        return lock;\n      }\n    }\n\n    return null;\n  };\n\n  return Lock;\n}();\n\nexport { Lock };\n\nvar ItemRegistry =\n/** @class */\nfunction () {\n  function ItemRegistry() {\n    this._isDisposed = false;\n    this._onDidRevealItem = new EventMultiplexer();\n    this.onDidRevealItem = this._onDidRevealItem.event;\n    this._onExpandItem = new EventMultiplexer();\n    this.onExpandItem = this._onExpandItem.event;\n    this._onDidExpandItem = new EventMultiplexer();\n    this.onDidExpandItem = this._onDidExpandItem.event;\n    this._onCollapseItem = new EventMultiplexer();\n    this.onCollapseItem = this._onCollapseItem.event;\n    this._onDidCollapseItem = new EventMultiplexer();\n    this.onDidCollapseItem = this._onDidCollapseItem.event;\n    this._onDidAddTraitItem = new EventMultiplexer();\n    this.onDidAddTraitItem = this._onDidAddTraitItem.event;\n    this._onDidRemoveTraitItem = new EventMultiplexer();\n    this.onDidRemoveTraitItem = this._onDidRemoveTraitItem.event;\n    this._onDidRefreshItem = new EventMultiplexer();\n    this.onDidRefreshItem = this._onDidRefreshItem.event;\n    this._onRefreshItemChildren = new EventMultiplexer();\n    this.onRefreshItemChildren = this._onRefreshItemChildren.event;\n    this._onDidRefreshItemChildren = new EventMultiplexer();\n    this.onDidRefreshItemChildren = this._onDidRefreshItemChildren.event;\n    this._onDidDisposeItem = new EventMultiplexer();\n    this.onDidDisposeItem = this._onDidDisposeItem.event;\n    this.items = {};\n  }\n\n  ItemRegistry.prototype.register = function (item) {\n    Assert.ok(!this.isRegistered(item.id), 'item already registered: ' + item.id);\n    var disposable = combinedDisposable(this._onDidRevealItem.add(item.onDidReveal), this._onExpandItem.add(item.onExpand), this._onDidExpandItem.add(item.onDidExpand), this._onCollapseItem.add(item.onCollapse), this._onDidCollapseItem.add(item.onDidCollapse), this._onDidAddTraitItem.add(item.onDidAddTrait), this._onDidRemoveTraitItem.add(item.onDidRemoveTrait), this._onDidRefreshItem.add(item.onDidRefresh), this._onRefreshItemChildren.add(item.onRefreshChildren), this._onDidRefreshItemChildren.add(item.onDidRefreshChildren), this._onDidDisposeItem.add(item.onDidDispose));\n    this.items[item.id] = {\n      item: item,\n      disposable: disposable\n    };\n  };\n\n  ItemRegistry.prototype.deregister = function (item) {\n    Assert.ok(this.isRegistered(item.id), 'item not registered: ' + item.id);\n    this.items[item.id].disposable.dispose();\n    delete this.items[item.id];\n  };\n\n  ItemRegistry.prototype.isRegistered = function (id) {\n    return this.items.hasOwnProperty(id);\n  };\n\n  ItemRegistry.prototype.getItem = function (id) {\n    var result = this.items[id];\n    return result ? result.item : null;\n  };\n\n  ItemRegistry.prototype.dispose = function () {\n    this.items = null; // StrictNullOverride: nulling out ok in dispose\n\n    this._onDidRevealItem.dispose();\n\n    this._onExpandItem.dispose();\n\n    this._onDidExpandItem.dispose();\n\n    this._onCollapseItem.dispose();\n\n    this._onDidCollapseItem.dispose();\n\n    this._onDidAddTraitItem.dispose();\n\n    this._onDidRemoveTraitItem.dispose();\n\n    this._onDidRefreshItem.dispose();\n\n    this._onRefreshItemChildren.dispose();\n\n    this._onDidRefreshItemChildren.dispose();\n\n    this._isDisposed = true;\n  };\n\n  ItemRegistry.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n\n  return ItemRegistry;\n}();\n\nexport { ItemRegistry };\n\nvar Item =\n/** @class */\nfunction () {\n  function Item(id, registry, context, lock, element) {\n    this._onDidCreate = new Emitter();\n    this._onDidReveal = new Emitter();\n    this.onDidReveal = this._onDidReveal.event;\n    this._onExpand = new Emitter();\n    this.onExpand = this._onExpand.event;\n    this._onDidExpand = new Emitter();\n    this.onDidExpand = this._onDidExpand.event;\n    this._onCollapse = new Emitter();\n    this.onCollapse = this._onCollapse.event;\n    this._onDidCollapse = new Emitter();\n    this.onDidCollapse = this._onDidCollapse.event;\n    this._onDidAddTrait = new Emitter();\n    this.onDidAddTrait = this._onDidAddTrait.event;\n    this._onDidRemoveTrait = new Emitter();\n    this.onDidRemoveTrait = this._onDidRemoveTrait.event;\n    this._onDidRefresh = new Emitter();\n    this.onDidRefresh = this._onDidRefresh.event;\n    this._onRefreshChildren = new Emitter();\n    this.onRefreshChildren = this._onRefreshChildren.event;\n    this._onDidRefreshChildren = new Emitter();\n    this.onDidRefreshChildren = this._onDidRefreshChildren.event;\n    this._onDidDispose = new Emitter();\n    this.onDidDispose = this._onDidDispose.event;\n    this.registry = registry;\n    this.context = context;\n    this.lock = lock;\n    this.element = element;\n    this.id = id;\n    this.registry.register(this);\n    this.doesHaveChildren = this.context.dataSource.hasChildren(this.context.tree, this.element);\n    this.needsChildrenRefresh = true;\n    this.parent = null;\n    this.previous = null;\n    this.next = null;\n    this.firstChild = null;\n    this.lastChild = null;\n    this.traits = {};\n    this.depth = 0;\n    this.expanded = !!(this.context.dataSource.shouldAutoexpand && this.context.dataSource.shouldAutoexpand(this.context.tree, element));\n\n    this._onDidCreate.fire(this);\n\n    this.visible = this._isVisible();\n    this.height = this._getHeight();\n    this._isDisposed = false;\n  }\n\n  Item.prototype.getElement = function () {\n    return this.element;\n  };\n\n  Item.prototype.hasChildren = function () {\n    return this.doesHaveChildren;\n  };\n\n  Item.prototype.getDepth = function () {\n    return this.depth;\n  };\n\n  Item.prototype.isVisible = function () {\n    return this.visible;\n  };\n\n  Item.prototype.setVisible = function (value) {\n    this.visible = value;\n  };\n\n  Item.prototype.isExpanded = function () {\n    return this.expanded;\n  };\n  /* protected */\n\n\n  Item.prototype._setExpanded = function (value) {\n    this.expanded = value;\n  };\n\n  Item.prototype.reveal = function (relativeTop) {\n    if (relativeTop === void 0) {\n      relativeTop = null;\n    }\n\n    var eventData = {\n      item: this,\n      relativeTop: relativeTop\n    };\n\n    this._onDidReveal.fire(eventData);\n  };\n\n  Item.prototype.expand = function () {\n    var _this = this;\n\n    if (this.isExpanded() || !this.doesHaveChildren || this.lock.isLocked(this)) {\n      return Promise.resolve(false);\n    }\n\n    var result = this.lock.run(this, function () {\n      if (_this.isExpanded() || !_this.doesHaveChildren) {\n        return Promise.resolve(false);\n      }\n\n      var eventData = {\n        item: _this\n      };\n      var result;\n\n      _this._onExpand.fire(eventData);\n\n      if (_this.needsChildrenRefresh) {\n        result = _this.refreshChildren(false, true, true);\n      } else {\n        result = Promise.resolve(null);\n      }\n\n      return result.then(function () {\n        _this._setExpanded(true);\n\n        _this._onDidExpand.fire(eventData);\n\n        return true;\n      });\n    });\n    return result.then(function (r) {\n      if (_this.isDisposed()) {\n        return false;\n      } // Auto expand single child folders\n\n\n      if (_this.context.options.autoExpandSingleChildren && r && _this.firstChild !== null && _this.firstChild === _this.lastChild && _this.firstChild.isVisible()) {\n        return _this.firstChild.expand().then(function () {\n          return true;\n        });\n      }\n\n      return r;\n    });\n  };\n\n  Item.prototype.collapse = function (recursive) {\n    var _this = this;\n\n    if (recursive === void 0) {\n      recursive = false;\n    }\n\n    if (recursive) {\n      var collapseChildrenPromise_1 = Promise.resolve(null);\n      this.forEachChild(function (child) {\n        collapseChildrenPromise_1 = collapseChildrenPromise_1.then(function () {\n          return child.collapse(true);\n        });\n      });\n      return collapseChildrenPromise_1.then(function () {\n        return _this.collapse(false);\n      });\n    } else {\n      if (!this.isExpanded() || this.lock.isLocked(this)) {\n        return Promise.resolve(false);\n      }\n\n      return this.lock.run(this, function () {\n        var eventData = {\n          item: _this\n        };\n\n        _this._onCollapse.fire(eventData);\n\n        _this._setExpanded(false);\n\n        _this._onDidCollapse.fire(eventData);\n\n        return Promise.resolve(true);\n      });\n    }\n  };\n\n  Item.prototype.addTrait = function (trait) {\n    var eventData = {\n      item: this,\n      trait: trait\n    };\n    this.traits[trait] = true;\n\n    this._onDidAddTrait.fire(eventData);\n  };\n\n  Item.prototype.removeTrait = function (trait) {\n    var eventData = {\n      item: this,\n      trait: trait\n    };\n    delete this.traits[trait];\n\n    this._onDidRemoveTrait.fire(eventData);\n  };\n\n  Item.prototype.hasTrait = function (trait) {\n    return this.traits[trait] || false;\n  };\n\n  Item.prototype.getAllTraits = function () {\n    var result = [];\n    var trait;\n\n    for (trait in this.traits) {\n      if (this.traits.hasOwnProperty(trait) && this.traits[trait]) {\n        result.push(trait);\n      }\n    }\n\n    return result;\n  };\n\n  Item.prototype.getHeight = function () {\n    return this.height;\n  };\n\n  Item.prototype.refreshChildren = function (recursive, safe, force) {\n    var _this = this;\n\n    if (safe === void 0) {\n      safe = false;\n    }\n\n    if (force === void 0) {\n      force = false;\n    }\n\n    if (!force && !this.isExpanded()) {\n      var setNeedsChildrenRefresh_1 = function (item) {\n        item.needsChildrenRefresh = true;\n        item.forEachChild(setNeedsChildrenRefresh_1);\n      };\n\n      setNeedsChildrenRefresh_1(this);\n      return Promise.resolve(this);\n    }\n\n    this.needsChildrenRefresh = false;\n\n    var doRefresh = function () {\n      var eventData = {\n        item: _this,\n        isNested: safe\n      };\n\n      _this._onRefreshChildren.fire(eventData);\n\n      var childrenPromise;\n\n      if (_this.doesHaveChildren) {\n        childrenPromise = _this.context.dataSource.getChildren(_this.context.tree, _this.element);\n      } else {\n        childrenPromise = Promise.resolve([]);\n      }\n\n      var result = childrenPromise.then(function (elements) {\n        if (_this.isDisposed() || _this.registry.isDisposed()) {\n          return Promise.resolve(null);\n        }\n\n        if (!Array.isArray(elements)) {\n          return Promise.reject(new Error('Please return an array of children.'));\n        }\n\n        elements = !elements ? [] : elements.slice(0);\n        elements = _this.sort(elements);\n        var staleItems = {};\n\n        while (_this.firstChild !== null) {\n          staleItems[_this.firstChild.id] = _this.firstChild;\n\n          _this.removeChild(_this.firstChild);\n        }\n\n        for (var i = 0, len = elements.length; i < len; i++) {\n          var element = elements[i];\n\n          var id = _this.context.dataSource.getId(_this.context.tree, element);\n\n          var item = staleItems[id] || new Item(id, _this.registry, _this.context, _this.lock, element);\n          item.element = element;\n\n          if (recursive) {\n            item.needsChildrenRefresh = recursive;\n          }\n\n          delete staleItems[id];\n\n          _this.addChild(item);\n        }\n\n        for (var staleItemId in staleItems) {\n          if (staleItems.hasOwnProperty(staleItemId)) {\n            staleItems[staleItemId].dispose();\n          }\n        }\n\n        if (recursive) {\n          return Promise.all(_this.mapEachChild(function (child) {\n            return child.doRefresh(recursive, true);\n          }));\n        } else {\n          return Promise.all(_this.mapEachChild(function (child) {\n            if (child.isExpanded() && child.needsChildrenRefresh) {\n              return child.doRefresh(recursive, true);\n            } else {\n              child.updateVisibility();\n              return Promise.resolve(null);\n            }\n          }));\n        }\n      });\n      return result.then(undefined, onUnexpectedError).then(function () {\n        return _this._onDidRefreshChildren.fire(eventData);\n      });\n    };\n\n    return safe ? doRefresh() : this.lock.run(this, doRefresh);\n  };\n\n  Item.prototype.doRefresh = function (recursive, safe) {\n    if (safe === void 0) {\n      safe = false;\n    }\n\n    this.doesHaveChildren = this.context.dataSource.hasChildren(this.context.tree, this.element);\n    this.height = this._getHeight();\n    this.updateVisibility();\n\n    this._onDidRefresh.fire(this);\n\n    return this.refreshChildren(recursive, safe);\n  };\n\n  Item.prototype.updateVisibility = function () {\n    this.setVisible(this._isVisible());\n  };\n\n  Item.prototype.refresh = function (recursive) {\n    return this.doRefresh(recursive);\n  };\n\n  Item.prototype.getNavigator = function () {\n    return new TreeNavigator(this);\n  };\n\n  Item.prototype.intersects = function (other) {\n    return this.isAncestorOf(other) || other.isAncestorOf(this);\n  };\n\n  Item.prototype.isAncestorOf = function (startItem) {\n    var item = startItem;\n\n    while (item) {\n      if (item.id === this.id) {\n        return true;\n      }\n\n      item = item.parent;\n    }\n\n    return false;\n  };\n\n  Item.prototype.addChild = function (item, afterItem) {\n    if (afterItem === void 0) {\n      afterItem = this.lastChild;\n    }\n\n    var isEmpty = this.firstChild === null;\n    var atHead = afterItem === null;\n    var atTail = afterItem === this.lastChild;\n\n    if (isEmpty) {\n      this.firstChild = this.lastChild = item;\n      item.next = item.previous = null;\n    } else if (atHead) {\n      if (!this.firstChild) {\n        throw new Error('Invalid tree state');\n      }\n\n      this.firstChild.previous = item;\n      item.next = this.firstChild;\n      item.previous = null;\n      this.firstChild = item;\n    } else if (atTail) {\n      if (!this.lastChild) {\n        throw new Error('Invalid tree state');\n      }\n\n      this.lastChild.next = item;\n      item.next = null;\n      item.previous = this.lastChild;\n      this.lastChild = item;\n    } else {\n      item.previous = afterItem;\n\n      if (!afterItem) {\n        throw new Error('Invalid tree state');\n      }\n\n      item.next = afterItem.next;\n\n      if (!afterItem.next) {\n        throw new Error('Invalid tree state');\n      }\n\n      afterItem.next.previous = item;\n      afterItem.next = item;\n    }\n\n    item.parent = this;\n    item.depth = this.depth + 1;\n  };\n\n  Item.prototype.removeChild = function (item) {\n    var isFirstChild = this.firstChild === item;\n    var isLastChild = this.lastChild === item;\n\n    if (isFirstChild && isLastChild) {\n      this.firstChild = this.lastChild = null;\n    } else if (isFirstChild) {\n      if (!item.next) {\n        throw new Error('Invalid tree state');\n      }\n\n      item.next.previous = null;\n      this.firstChild = item.next;\n    } else if (isLastChild) {\n      if (!item.previous) {\n        throw new Error('Invalid tree state');\n      }\n\n      item.previous.next = null;\n      this.lastChild = item.previous;\n    } else {\n      if (!item.next) {\n        throw new Error('Invalid tree state');\n      }\n\n      item.next.previous = item.previous;\n\n      if (!item.previous) {\n        throw new Error('Invalid tree state');\n      }\n\n      item.previous.next = item.next;\n    }\n\n    item.parent = null;\n    item.depth = NaN;\n  };\n\n  Item.prototype.forEachChild = function (fn) {\n    var child = this.firstChild;\n    var next;\n\n    while (child) {\n      next = child.next;\n      fn(child);\n      child = next;\n    }\n  };\n\n  Item.prototype.mapEachChild = function (fn) {\n    var result = [];\n    this.forEachChild(function (child) {\n      result.push(fn(child));\n    });\n    return result;\n  };\n\n  Item.prototype.sort = function (elements) {\n    var _this = this;\n\n    var sorter = this.context.sorter;\n\n    if (sorter) {\n      return elements.sort(function (element, otherElement) {\n        return sorter.compare(_this.context.tree, element, otherElement);\n      });\n    }\n\n    return elements;\n  };\n  /* protected */\n\n\n  Item.prototype._getHeight = function () {\n    if (!this.context.renderer) {\n      return 0;\n    }\n\n    return this.context.renderer.getHeight(this.context.tree, this.element);\n  };\n  /* protected */\n\n\n  Item.prototype._isVisible = function () {\n    if (!this.context.filter) {\n      return false;\n    }\n\n    return this.context.filter.isVisible(this.context.tree, this.element);\n  };\n\n  Item.prototype.isDisposed = function () {\n    return this._isDisposed;\n  };\n\n  Item.prototype.dispose = function () {\n    this.forEachChild(function (child) {\n      return child.dispose();\n    });\n    this.parent = null;\n    this.previous = null;\n    this.next = null;\n    this.firstChild = null;\n    this.lastChild = null;\n\n    this._onDidDispose.fire(this);\n\n    this.registry.deregister(this);\n\n    this._onDidCreate.dispose();\n\n    this._onDidReveal.dispose();\n\n    this._onExpand.dispose();\n\n    this._onDidExpand.dispose();\n\n    this._onCollapse.dispose();\n\n    this._onDidCollapse.dispose();\n\n    this._onDidAddTrait.dispose();\n\n    this._onDidRemoveTrait.dispose();\n\n    this._onDidRefresh.dispose();\n\n    this._onRefreshChildren.dispose();\n\n    this._onDidRefreshChildren.dispose();\n\n    this._onDidDispose.dispose();\n\n    this._isDisposed = true;\n  };\n\n  return Item;\n}();\n\nexport { Item };\n\nvar RootItem =\n/** @class */\nfunction (_super) {\n  __extends(RootItem, _super);\n\n  function RootItem(id, registry, context, lock, element) {\n    return _super.call(this, id, registry, context, lock, element) || this;\n  }\n\n  RootItem.prototype.isVisible = function () {\n    return false;\n  };\n\n  RootItem.prototype.setVisible = function (value) {// no-op\n  };\n\n  RootItem.prototype.isExpanded = function () {\n    return true;\n  };\n  /* protected */\n\n\n  RootItem.prototype._setExpanded = function (value) {// no-op\n  };\n  /* protected */\n\n\n  RootItem.prototype._getHeight = function () {\n    return 0;\n  };\n  /* protected */\n\n\n  RootItem.prototype._isVisible = function () {\n    return false;\n  };\n\n  return RootItem;\n}(Item);\n\nvar TreeNavigator =\n/** @class */\nfunction () {\n  function TreeNavigator(item, subTreeOnly) {\n    if (subTreeOnly === void 0) {\n      subTreeOnly = true;\n    }\n\n    this.item = item;\n    this.start = subTreeOnly ? item : null;\n  }\n\n  TreeNavigator.lastDescendantOf = function (item) {\n    if (!item) {\n      return null;\n    }\n\n    if (item instanceof RootItem) {\n      return TreeNavigator.lastDescendantOf(item.lastChild);\n    }\n\n    if (!item.isVisible()) {\n      return TreeNavigator.lastDescendantOf(item.previous);\n    }\n\n    if (!item.isExpanded() || item.lastChild === null) {\n      return item;\n    }\n\n    return TreeNavigator.lastDescendantOf(item.lastChild);\n  };\n\n  TreeNavigator.prototype.current = function () {\n    return this.item || null;\n  };\n\n  TreeNavigator.prototype.next = function () {\n    if (this.item) {\n      do {\n        if ((this.item instanceof RootItem || this.item.isVisible() && this.item.isExpanded()) && this.item.firstChild) {\n          this.item = this.item.firstChild;\n        } else if (this.item === this.start) {\n          this.item = null;\n        } else {\n          // select next brother, next uncle, next great-uncle, etc...\n          while (this.item && this.item !== this.start && !this.item.next) {\n            this.item = this.item.parent;\n          }\n\n          if (this.item === this.start) {\n            this.item = null;\n          }\n\n          this.item = !this.item ? null : this.item.next;\n        }\n      } while (this.item && !this.item.isVisible());\n    }\n\n    return this.item || null;\n  };\n\n  TreeNavigator.prototype.previous = function () {\n    if (this.item) {\n      do {\n        var previous = TreeNavigator.lastDescendantOf(this.item.previous);\n\n        if (previous) {\n          this.item = previous;\n        } else if (this.item.parent && this.item.parent !== this.start && this.item.parent.isVisible()) {\n          this.item = this.item.parent;\n        } else {\n          this.item = null;\n        }\n      } while (this.item && !this.item.isVisible());\n    }\n\n    return this.item || null;\n  };\n\n  TreeNavigator.prototype.parent = function () {\n    if (this.item) {\n      var parent_1 = this.item.parent;\n\n      if (parent_1 && parent_1 !== this.start && parent_1.isVisible()) {\n        this.item = parent_1;\n      } else {\n        this.item = null;\n      }\n    }\n\n    return this.item || null;\n  };\n\n  TreeNavigator.prototype.first = function () {\n    this.item = this.start;\n    this.next();\n    return this.item || null;\n  };\n\n  TreeNavigator.prototype.last = function () {\n    return TreeNavigator.lastDescendantOf(this.start);\n  };\n\n  return TreeNavigator;\n}();\n\nexport { TreeNavigator };\n\nvar TreeModel =\n/** @class */\nfunction () {\n  function TreeModel(context) {\n    this._onSetInput = new Emitter();\n    this.onSetInput = this._onSetInput.event;\n    this._onDidSetInput = new Emitter();\n    this.onDidSetInput = this._onDidSetInput.event;\n    this._onRefresh = new Emitter();\n    this.onRefresh = this._onRefresh.event;\n    this._onDidRefresh = new Emitter();\n    this.onDidRefresh = this._onDidRefresh.event;\n    this._onDidHighlight = new Emitter();\n    this.onDidHighlight = this._onDidHighlight.event;\n    this._onDidSelect = new Emitter();\n    this.onDidSelect = this._onDidSelect.event;\n    this._onDidFocus = new Emitter();\n    this.onDidFocus = this._onDidFocus.event;\n    this._onDidRevealItem = new Relay();\n    this.onDidRevealItem = this._onDidRevealItem.event;\n    this._onExpandItem = new Relay();\n    this.onExpandItem = this._onExpandItem.event;\n    this._onDidExpandItem = new Relay();\n    this.onDidExpandItem = this._onDidExpandItem.event;\n    this._onCollapseItem = new Relay();\n    this.onCollapseItem = this._onCollapseItem.event;\n    this._onDidCollapseItem = new Relay();\n    this.onDidCollapseItem = this._onDidCollapseItem.event;\n    this._onDidAddTraitItem = new Relay();\n    this.onDidAddTraitItem = this._onDidAddTraitItem.event;\n    this._onDidRemoveTraitItem = new Relay();\n    this.onDidRemoveTraitItem = this._onDidRemoveTraitItem.event;\n    this._onDidRefreshItem = new Relay();\n    this.onDidRefreshItem = this._onDidRefreshItem.event;\n    this._onRefreshItemChildren = new Relay();\n    this.onRefreshItemChildren = this._onRefreshItemChildren.event;\n    this._onDidRefreshItemChildren = new Relay();\n    this.onDidRefreshItemChildren = this._onDidRefreshItemChildren.event;\n    this._onDidDisposeItem = new Relay();\n    this.context = context;\n    this.input = null;\n    this.traitsToItems = {};\n  }\n\n  TreeModel.prototype.setInput = function (element) {\n    var _this = this;\n\n    var eventData = {\n      item: this.input\n    };\n\n    this._onSetInput.fire(eventData);\n\n    this.setSelection([]);\n    this.setFocus();\n    this.setHighlight();\n    this.lock = new Lock();\n\n    if (this.input) {\n      this.input.dispose();\n    }\n\n    if (this.registry) {\n      this.registry.dispose();\n      this.registryDisposable.dispose();\n    }\n\n    this.registry = new ItemRegistry();\n    this._onDidRevealItem.input = this.registry.onDidRevealItem;\n    this._onExpandItem.input = this.registry.onExpandItem;\n    this._onDidExpandItem.input = this.registry.onDidExpandItem;\n    this._onCollapseItem.input = this.registry.onCollapseItem;\n    this._onDidCollapseItem.input = this.registry.onDidCollapseItem;\n    this._onDidAddTraitItem.input = this.registry.onDidAddTraitItem;\n    this._onDidRemoveTraitItem.input = this.registry.onDidRemoveTraitItem;\n    this._onDidRefreshItem.input = this.registry.onDidRefreshItem;\n    this._onRefreshItemChildren.input = this.registry.onRefreshItemChildren;\n    this._onDidRefreshItemChildren.input = this.registry.onDidRefreshItemChildren;\n    this._onDidDisposeItem.input = this.registry.onDidDisposeItem;\n    this.registryDisposable = this.registry.onDidDisposeItem(function (item) {\n      return item.getAllTraits().forEach(function (trait) {\n        return delete _this.traitsToItems[trait][item.id];\n      });\n    });\n    var id = this.context.dataSource.getId(this.context.tree, element);\n    this.input = new RootItem(id, this.registry, this.context, this.lock, element);\n    eventData = {\n      item: this.input\n    };\n\n    this._onDidSetInput.fire(eventData);\n\n    return this.refresh(this.input);\n  };\n\n  TreeModel.prototype.getInput = function () {\n    return this.input ? this.input.getElement() : null;\n  };\n\n  TreeModel.prototype.refresh = function (element, recursive) {\n    var _this = this;\n\n    if (element === void 0) {\n      element = null;\n    }\n\n    if (recursive === void 0) {\n      recursive = true;\n    }\n\n    var item = this.getItem(element);\n\n    if (!item) {\n      return Promise.resolve(null);\n    }\n\n    var eventData = {\n      item: item,\n      recursive: recursive\n    };\n\n    this._onRefresh.fire(eventData);\n\n    return item.refresh(recursive).then(function () {\n      _this._onDidRefresh.fire(eventData);\n    });\n  };\n\n  TreeModel.prototype.expand = function (element) {\n    var item = this.getItem(element);\n\n    if (!item) {\n      return Promise.resolve(false);\n    }\n\n    return item.expand();\n  };\n\n  TreeModel.prototype.collapse = function (element, recursive) {\n    if (recursive === void 0) {\n      recursive = false;\n    }\n\n    var item = this.getItem(element);\n\n    if (!item) {\n      return Promise.resolve(false);\n    }\n\n    return item.collapse(recursive);\n  };\n\n  TreeModel.prototype.toggleExpansion = function (element, recursive) {\n    if (recursive === void 0) {\n      recursive = false;\n    }\n\n    return this.isExpanded(element) ? this.collapse(element, recursive) : this.expand(element);\n  };\n\n  TreeModel.prototype.isExpanded = function (element) {\n    var item = this.getItem(element);\n\n    if (!item) {\n      return false;\n    }\n\n    return item.isExpanded();\n  };\n\n  TreeModel.prototype.reveal = function (element, relativeTop) {\n    var _this = this;\n\n    if (relativeTop === void 0) {\n      relativeTop = null;\n    }\n\n    return this.resolveUnknownParentChain(element).then(function (chain) {\n      var result = Promise.resolve(null);\n      chain.forEach(function (e) {\n        result = result.then(function () {\n          return _this.expand(e);\n        });\n      });\n      return result;\n    }).then(function () {\n      var item = _this.getItem(element);\n\n      if (item) {\n        return item.reveal(relativeTop);\n      }\n    });\n  };\n\n  TreeModel.prototype.resolveUnknownParentChain = function (element) {\n    var _this = this;\n\n    return this.context.dataSource.getParent(this.context.tree, element).then(function (parent) {\n      if (!parent) {\n        return Promise.resolve([]);\n      }\n\n      return _this.resolveUnknownParentChain(parent).then(function (result) {\n        result.push(parent);\n        return result;\n      });\n    });\n  };\n\n  TreeModel.prototype.setHighlight = function (element, eventPayload) {\n    this.setTraits('highlighted', element ? [element] : []);\n    var eventData = {\n      highlight: this.getHighlight(),\n      payload: eventPayload\n    };\n\n    this._onDidHighlight.fire(eventData);\n  };\n\n  TreeModel.prototype.getHighlight = function (includeHidden) {\n    if (includeHidden === void 0) {\n      includeHidden = false;\n    }\n\n    var result = this.getElementsWithTrait('highlighted', includeHidden);\n    return result.length === 0 ? null : result[0];\n  };\n\n  TreeModel.prototype.setSelection = function (elements, eventPayload) {\n    this.setTraits('selected', elements);\n    var eventData = {\n      selection: this.getSelection(),\n      payload: eventPayload\n    };\n\n    this._onDidSelect.fire(eventData);\n  };\n\n  TreeModel.prototype.getSelection = function (includeHidden) {\n    if (includeHidden === void 0) {\n      includeHidden = false;\n    }\n\n    return this.getElementsWithTrait('selected', includeHidden);\n  };\n\n  TreeModel.prototype.setFocus = function (element, eventPayload) {\n    this.setTraits('focused', element ? [element] : []);\n    var eventData = {\n      focus: this.getFocus(),\n      payload: eventPayload\n    };\n\n    this._onDidFocus.fire(eventData);\n  };\n\n  TreeModel.prototype.getFocus = function (includeHidden) {\n    if (includeHidden === void 0) {\n      includeHidden = false;\n    }\n\n    var result = this.getElementsWithTrait('focused', includeHidden);\n    return result.length === 0 ? null : result[0];\n  };\n\n  TreeModel.prototype.focusNext = function (count, eventPayload) {\n    if (count === void 0) {\n      count = 1;\n    }\n\n    var item = this.getFocus() || this.input;\n    var nextItem;\n    var nav = this.getNavigator(item, false);\n\n    for (var i = 0; i < count; i++) {\n      nextItem = nav.next();\n\n      if (!nextItem) {\n        break;\n      }\n\n      item = nextItem;\n    }\n\n    this.setFocus(item, eventPayload);\n  };\n\n  TreeModel.prototype.focusPrevious = function (count, eventPayload) {\n    if (count === void 0) {\n      count = 1;\n    }\n\n    var item = this.getFocus() || this.input;\n    var previousItem;\n    var nav = this.getNavigator(item, false);\n\n    for (var i = 0; i < count; i++) {\n      previousItem = nav.previous();\n\n      if (!previousItem) {\n        break;\n      }\n\n      item = previousItem;\n    }\n\n    this.setFocus(item, eventPayload);\n  };\n\n  TreeModel.prototype.focusParent = function (eventPayload) {\n    var item = this.getFocus() || this.input;\n    var nav = this.getNavigator(item, false);\n    var parent = nav.parent();\n\n    if (parent) {\n      this.setFocus(parent, eventPayload);\n    }\n  };\n\n  TreeModel.prototype.focusFirstChild = function (eventPayload) {\n    var item = this.getItem(this.getFocus() || this.input);\n    var nav = this.getNavigator(item, false);\n    var next = nav.next();\n    var parent = nav.parent();\n\n    if (parent === item) {\n      this.setFocus(next, eventPayload);\n    }\n  };\n\n  TreeModel.prototype.focusFirst = function (eventPayload, from) {\n    this.focusNth(0, eventPayload, from);\n  };\n\n  TreeModel.prototype.focusNth = function (index, eventPayload, from) {\n    var navItem = this.getParent(from);\n    var nav = this.getNavigator(navItem);\n    var item = nav.first();\n\n    for (var i = 0; i < index; i++) {\n      item = nav.next();\n    }\n\n    if (item) {\n      this.setFocus(item, eventPayload);\n    }\n  };\n\n  TreeModel.prototype.focusLast = function (eventPayload, from) {\n    var navItem = this.getParent(from);\n    var item;\n\n    if (from && navItem) {\n      item = navItem.lastChild;\n    } else {\n      var nav = this.getNavigator(navItem);\n      item = nav.last();\n    }\n\n    if (item) {\n      this.setFocus(item, eventPayload);\n    }\n  };\n\n  TreeModel.prototype.getParent = function (from) {\n    if (from) {\n      var fromItem = this.getItem(from);\n\n      if (fromItem && fromItem.parent) {\n        return fromItem.parent;\n      }\n    }\n\n    return this.getItem(this.input);\n  };\n\n  TreeModel.prototype.getNavigator = function (element, subTreeOnly) {\n    if (element === void 0) {\n      element = null;\n    }\n\n    if (subTreeOnly === void 0) {\n      subTreeOnly = true;\n    }\n\n    return new TreeNavigator(this.getItem(element), subTreeOnly);\n  };\n\n  TreeModel.prototype.getItem = function (element) {\n    if (element === void 0) {\n      element = null;\n    }\n\n    if (element === null) {\n      return this.input;\n    } else if (element instanceof Item) {\n      return element;\n    } else if (typeof element === 'string') {\n      return this.registry.getItem(element);\n    } else {\n      return this.registry.getItem(this.context.dataSource.getId(this.context.tree, element));\n    }\n  };\n\n  TreeModel.prototype.removeTraits = function (trait, elements) {\n    var items = this.traitsToItems[trait] || {};\n    var item;\n    var id;\n\n    if (elements.length === 0) {\n      for (id in items) {\n        if (items.hasOwnProperty(id)) {\n          item = items[id];\n          item.removeTrait(trait);\n        }\n      }\n\n      delete this.traitsToItems[trait];\n    } else {\n      for (var i = 0, len = elements.length; i < len; i++) {\n        item = this.getItem(elements[i]);\n\n        if (item) {\n          item.removeTrait(trait);\n          delete items[item.id];\n        }\n      }\n    }\n  };\n\n  TreeModel.prototype.setTraits = function (trait, elements) {\n    if (elements.length === 0) {\n      this.removeTraits(trait, elements);\n    } else {\n      var items = {};\n      var item = void 0;\n\n      for (var i = 0, len = elements.length; i < len; i++) {\n        item = this.getItem(elements[i]);\n\n        if (item) {\n          items[item.id] = item;\n        }\n      }\n\n      var traitItems = this.traitsToItems[trait] || {};\n      var itemsToRemoveTrait = [];\n      var id = void 0;\n\n      for (id in traitItems) {\n        if (traitItems.hasOwnProperty(id)) {\n          if (items.hasOwnProperty(id)) {\n            delete items[id];\n          } else {\n            itemsToRemoveTrait.push(traitItems[id]);\n          }\n        }\n      }\n\n      for (var i = 0, len = itemsToRemoveTrait.length; i < len; i++) {\n        item = itemsToRemoveTrait[i];\n        item.removeTrait(trait);\n        delete traitItems[item.id];\n      }\n\n      for (id in items) {\n        if (items.hasOwnProperty(id)) {\n          item = items[id];\n          item.addTrait(trait);\n          traitItems[id] = item;\n        }\n      }\n\n      this.traitsToItems[trait] = traitItems;\n    }\n  };\n\n  TreeModel.prototype.getElementsWithTrait = function (trait, includeHidden) {\n    var elements = [];\n    var items = this.traitsToItems[trait] || {};\n    var id;\n\n    for (id in items) {\n      if (items.hasOwnProperty(id) && (items[id].isVisible() || includeHidden)) {\n        elements.push(items[id].getElement());\n      }\n    }\n\n    return elements;\n  };\n\n  TreeModel.prototype.dispose = function () {\n    if (this.registry) {\n      this.registry.dispose();\n      this.registry = null; // StrictNullOverride: nulling out ok in dispose\n    }\n\n    this._onSetInput.dispose();\n\n    this._onDidSetInput.dispose();\n\n    this._onRefresh.dispose();\n\n    this._onDidRefresh.dispose();\n\n    this._onDidHighlight.dispose();\n\n    this._onDidSelect.dispose();\n\n    this._onDidFocus.dispose();\n\n    this._onDidRevealItem.dispose();\n\n    this._onExpandItem.dispose();\n\n    this._onDidExpandItem.dispose();\n\n    this._onCollapseItem.dispose();\n\n    this._onDidCollapseItem.dispose();\n\n    this._onDidAddTraitItem.dispose();\n\n    this._onDidRemoveTraitItem.dispose();\n\n    this._onDidRefreshItem.dispose();\n\n    this._onRefreshItemChildren.dispose();\n\n    this._onDidRefreshItemChildren.dispose();\n\n    this._onDidDisposeItem.dispose();\n  };\n\n  return TreeModel;\n}();\n\nexport { TreeModel };","map":null,"metadata":{},"sourceType":"module"}