{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { isIMenuItem, MenuItemAction, MenuRegistry, SubmenuItemAction } from './actions.js';\nimport { ICommandService } from '../../commands/common/commands.js';\nimport { IContextKeyService } from '../../contextkey/common/contextkey.js';\n\nvar MenuService =\n/** @class */\nfunction () {\n  function MenuService(_commandService) {\n    this._commandService = _commandService; //\n  }\n\n  MenuService.prototype.createMenu = function (id, contextKeyService) {\n    return new Menu(id, this._commandService, contextKeyService);\n  };\n\n  MenuService = __decorate([__param(0, ICommandService)], MenuService);\n  return MenuService;\n}();\n\nexport { MenuService };\n\nvar Menu =\n/** @class */\nfunction (_super) {\n  __extends(Menu, _super);\n\n  function Menu(_id, _commandService, _contextKeyService) {\n    var _this = _super.call(this) || this;\n\n    _this._id = _id;\n    _this._commandService = _commandService;\n    _this._contextKeyService = _contextKeyService;\n    _this._onDidChange = _this._register(new Emitter());\n\n    _this._build(); // rebuild this menu whenever the menu registry reports an\n    // event for this MenuId\n\n\n    _this._register(Event.debounce(Event.filter(MenuRegistry.onDidChangeMenu, function (menuId) {\n      return menuId === _this._id;\n    }), function () {}, 50)(_this._build, _this)); // when context keys change we need to check if the menu also\n    // has changed\n\n\n    _this._register(Event.debounce(_this._contextKeyService.onDidChangeContext, function (last, event) {\n      return last || event.affectsSome(_this._contextKeys);\n    }, 50)(function (e) {\n      return e && _this._onDidChange.fire(undefined);\n    }, _this));\n\n    return _this;\n  }\n\n  Menu.prototype._build = function () {\n    // reset\n    this._menuGroups = [];\n    this._contextKeys = new Set();\n    var menuItems = MenuRegistry.getMenuItems(this._id);\n    var group;\n    menuItems.sort(Menu._compareMenuItems);\n\n    for (var _i = 0, menuItems_1 = menuItems; _i < menuItems_1.length; _i++) {\n      var item = menuItems_1[_i]; // group by groupId\n\n      var groupName = item.group || '';\n\n      if (!group || group[0] !== groupName) {\n        group = [groupName, []];\n\n        this._menuGroups.push(group);\n      }\n\n      group[1].push(item); // keep keys for eventing\n\n      Menu._fillInKbExprKeys(item.when, this._contextKeys); // keep precondition keys for event if applicable\n\n\n      if (isIMenuItem(item) && item.command.precondition) {\n        Menu._fillInKbExprKeys(item.command.precondition, this._contextKeys);\n      } // keep toggled keys for event if applicable\n\n\n      if (isIMenuItem(item) && item.command.toggled) {\n        Menu._fillInKbExprKeys(item.command.toggled, this._contextKeys);\n      }\n    }\n\n    this._onDidChange.fire(this);\n  };\n\n  Menu.prototype.getActions = function (options) {\n    var result = [];\n\n    for (var _i = 0, _a = this._menuGroups; _i < _a.length; _i++) {\n      var group = _a[_i];\n      var id = group[0],\n          items = group[1];\n      var activeActions = [];\n\n      for (var _b = 0, items_1 = items; _b < items_1.length; _b++) {\n        var item = items_1[_b];\n\n        if (this._contextKeyService.contextMatchesRules(item.when)) {\n          var action = isIMenuItem(item) ? new MenuItemAction(item.command, item.alt, options, this._contextKeyService, this._commandService) : new SubmenuItemAction(item);\n          activeActions.push(action);\n        }\n      }\n\n      if (activeActions.length > 0) {\n        result.push([id, activeActions]);\n      }\n    }\n\n    return result;\n  };\n\n  Menu._fillInKbExprKeys = function (exp, set) {\n    if (exp) {\n      for (var _i = 0, _a = exp.keys(); _i < _a.length; _i++) {\n        var key = _a[_i];\n        set.add(key);\n      }\n    }\n  };\n\n  Menu._compareMenuItems = function (a, b) {\n    var aGroup = a.group;\n    var bGroup = b.group;\n\n    if (aGroup !== bGroup) {\n      // Falsy groups come last\n      if (!aGroup) {\n        return 1;\n      } else if (!bGroup) {\n        return -1;\n      } // 'navigation' group comes first\n\n\n      if (aGroup === 'navigation') {\n        return -1;\n      } else if (bGroup === 'navigation') {\n        return 1;\n      } // lexical sort for groups\n\n\n      var value = aGroup.localeCompare(bGroup);\n\n      if (value !== 0) {\n        return value;\n      }\n    } // sort on priority - default is 0\n\n\n    var aPrio = a.order || 0;\n    var bPrio = b.order || 0;\n\n    if (aPrio < bPrio) {\n      return -1;\n    } else if (aPrio > bPrio) {\n      return 1;\n    } // sort on titles\n\n\n    var aTitle = typeof a.command.title === 'string' ? a.command.title : a.command.title.value;\n    var bTitle = typeof b.command.title === 'string' ? b.command.title : b.command.title.value;\n    return aTitle.localeCompare(bTitle);\n  };\n\n  Menu = __decorate([__param(1, ICommandService), __param(2, IContextKeyService)], Menu);\n  return Menu;\n}(Disposable);","map":null,"metadata":{},"sourceType":"module"}