{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { EditorWorkerClient } from './editorWorkerServiceImpl.js';\nimport * as types from '../../../base/common/types.js';\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\n\nexport function createWebWorker(modelService, opts) {\n  return new MonacoWebWorkerImpl(modelService, opts);\n}\n\nvar MonacoWebWorkerImpl =\n/** @class */\nfunction (_super) {\n  __extends(MonacoWebWorkerImpl, _super);\n\n  function MonacoWebWorkerImpl(modelService, opts) {\n    var _this = _super.call(this, modelService, opts.label) || this;\n\n    _this._foreignModuleId = opts.moduleId;\n    _this._foreignModuleCreateData = opts.createData || null;\n    _this._foreignModuleHost = opts.host || null;\n    _this._foreignProxy = null;\n    return _this;\n  } // foreign host request\n\n\n  MonacoWebWorkerImpl.prototype.fhr = function (method, args) {\n    if (!this._foreignModuleHost || typeof this._foreignModuleHost[method] !== 'function') {\n      return Promise.reject(new Error('Missing method ' + method + ' or missing main thread foreign host.'));\n    }\n\n    try {\n      return Promise.resolve(this._foreignModuleHost[method].apply(this._foreignModuleHost, args));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  MonacoWebWorkerImpl.prototype._getForeignProxy = function () {\n    var _this = this;\n\n    if (!this._foreignProxy) {\n      this._foreignProxy = this._getProxy().then(function (proxy) {\n        var foreignHostMethods = _this._foreignModuleHost ? types.getAllMethodNames(_this._foreignModuleHost) : [];\n        return proxy.loadForeignModule(_this._foreignModuleId, _this._foreignModuleCreateData, foreignHostMethods).then(function (foreignMethods) {\n          _this._foreignModuleCreateData = null;\n\n          var proxyMethodRequest = function (method, args) {\n            return proxy.fmr(method, args);\n          };\n\n          var createProxyMethod = function (method, proxyMethodRequest) {\n            return function () {\n              var args = Array.prototype.slice.call(arguments, 0);\n              return proxyMethodRequest(method, args);\n            };\n          };\n\n          var foreignProxy = {};\n\n          for (var _i = 0, foreignMethods_1 = foreignMethods; _i < foreignMethods_1.length; _i++) {\n            var foreignMethod = foreignMethods_1[_i];\n            foreignProxy[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\n          }\n\n          return foreignProxy;\n        });\n      });\n    }\n\n    return this._foreignProxy;\n  };\n\n  MonacoWebWorkerImpl.prototype.getProxy = function () {\n    return this._getForeignProxy();\n  };\n\n  MonacoWebWorkerImpl.prototype.withSyncedResources = function (resources) {\n    var _this = this;\n\n    return this._withSyncedResources(resources).then(function (_) {\n      return _this.getProxy();\n    });\n  };\n\n  return MonacoWebWorkerImpl;\n}(EditorWorkerClient);","map":null,"metadata":{},"sourceType":"module"}