{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './lineNumbers.css';\nimport * as platform from '../../../../base/common/platform.js';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Position } from '../../../common/core/position.js';\nimport { editorActiveLineNumber, editorLineNumbers } from '../../../common/view/editorColorRegistry.js';\nimport { registerThemingParticipant } from '../../../../platform/theme/common/themeService.js';\n\nvar LineNumbersOverlay =\n/** @class */\nfunction (_super) {\n  __extends(LineNumbersOverlay, _super);\n\n  function LineNumbersOverlay(context) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n\n    _this._readConfig();\n\n    _this._lastCursorModelPosition = new Position(1, 1);\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  LineNumbersOverlay.prototype._readConfig = function () {\n    var config = this._context.configuration.editor;\n    this._lineHeight = config.lineHeight;\n    this._renderLineNumbers = config.viewInfo.renderLineNumbers;\n    this._renderCustomLineNumbers = config.viewInfo.renderCustomLineNumbers;\n    this._renderFinalNewline = config.viewInfo.renderFinalNewline;\n    this._lineNumbersLeft = config.layoutInfo.lineNumbersLeft;\n    this._lineNumbersWidth = config.layoutInfo.lineNumbersWidth;\n  };\n\n  LineNumbersOverlay.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  LineNumbersOverlay.prototype.onConfigurationChanged = function (e) {\n    this._readConfig();\n\n    return true;\n  };\n\n  LineNumbersOverlay.prototype.onCursorStateChanged = function (e) {\n    var primaryViewPosition = e.selections[0].getPosition();\n    this._lastCursorModelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(primaryViewPosition);\n\n    if (this._renderLineNumbers === 2\n    /* Relative */\n    || this._renderLineNumbers === 3\n    /* Interval */\n    ) {\n        return true;\n      }\n\n    return false;\n  };\n\n  LineNumbersOverlay.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  LineNumbersOverlay.prototype.onLinesChanged = function (e) {\n    return true;\n  };\n\n  LineNumbersOverlay.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  LineNumbersOverlay.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  LineNumbersOverlay.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged;\n  };\n\n  LineNumbersOverlay.prototype.onZonesChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n\n\n  LineNumbersOverlay.prototype._getLineRenderLineNumber = function (viewLineNumber) {\n    var modelPosition = this._context.model.coordinatesConverter.convertViewPositionToModelPosition(new Position(viewLineNumber, 1));\n\n    if (modelPosition.column !== 1) {\n      return '';\n    }\n\n    var modelLineNumber = modelPosition.lineNumber;\n\n    if (!this._renderFinalNewline) {\n      var lineCount = this._context.model.getLineCount();\n\n      var lineContent = this._context.model.getLineContent(modelLineNumber);\n\n      if (modelLineNumber === lineCount && lineContent === '') {\n        return '';\n      }\n    }\n\n    if (this._renderCustomLineNumbers) {\n      return this._renderCustomLineNumbers(modelLineNumber);\n    }\n\n    if (this._renderLineNumbers === 2\n    /* Relative */\n    ) {\n        var diff = Math.abs(this._lastCursorModelPosition.lineNumber - modelLineNumber);\n\n        if (diff === 0) {\n          return '<span class=\"relative-current-line-number\">' + modelLineNumber + '</span>';\n        }\n\n        return String(diff);\n      }\n\n    if (this._renderLineNumbers === 3\n    /* Interval */\n    ) {\n        if (this._lastCursorModelPosition.lineNumber === modelLineNumber) {\n          return String(modelLineNumber);\n        }\n\n        if (modelLineNumber % 10 === 0) {\n          return String(modelLineNumber);\n        }\n\n        return '';\n      }\n\n    return String(modelLineNumber);\n  };\n\n  LineNumbersOverlay.prototype.prepareRender = function (ctx) {\n    if (this._renderLineNumbers === 0\n    /* Off */\n    ) {\n        this._renderResult = null;\n        return;\n      }\n\n    var lineHeightClassName = platform.isLinux ? this._lineHeight % 2 === 0 ? ' lh-even' : ' lh-odd' : '';\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    var common = '<div class=\"' + LineNumbersOverlay.CLASS_NAME + lineHeightClassName + '\" style=\"left:' + this._lineNumbersLeft.toString() + 'px;width:' + this._lineNumbersWidth.toString() + 'px;\">';\n    var output = [];\n\n    for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      var lineIndex = lineNumber - visibleStartLineNumber;\n\n      var renderLineNumber = this._getLineRenderLineNumber(lineNumber);\n\n      if (renderLineNumber) {\n        output[lineIndex] = common + renderLineNumber + '</div>';\n      } else {\n        output[lineIndex] = '';\n      }\n    }\n\n    this._renderResult = output;\n  };\n\n  LineNumbersOverlay.prototype.render = function (startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    var lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  };\n\n  LineNumbersOverlay.CLASS_NAME = 'line-numbers';\n  return LineNumbersOverlay;\n}(DynamicViewOverlay);\n\nexport { LineNumbersOverlay }; // theming\n\nregisterThemingParticipant(function (theme, collector) {\n  var lineNumbers = theme.getColor(editorLineNumbers);\n\n  if (lineNumbers) {\n    collector.addRule(\".monaco-editor .line-numbers { color: \" + lineNumbers + \"; }\");\n  }\n\n  var activeLineNumber = theme.getColor(editorActiveLineNumber);\n\n  if (activeLineNumber) {\n    collector.addRule(\".monaco-editor .current-line ~ .line-numbers { color: \" + activeLineNumber + \"; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}