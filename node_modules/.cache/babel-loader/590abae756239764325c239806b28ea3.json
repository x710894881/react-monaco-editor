{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { CursorColumns, SingleCursorState } from './cursorCommon.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\n\nvar CursorPosition =\n/** @class */\nfunction () {\n  function CursorPosition(lineNumber, column, leftoverVisibleColumns) {\n    this.lineNumber = lineNumber;\n    this.column = column;\n    this.leftoverVisibleColumns = leftoverVisibleColumns;\n  }\n\n  return CursorPosition;\n}();\n\nexport { CursorPosition };\n\nvar MoveOperations =\n/** @class */\nfunction () {\n  function MoveOperations() {}\n\n  MoveOperations.left = function (config, model, lineNumber, column) {\n    if (column > model.getLineMinColumn(lineNumber)) {\n      if (CursorColumns.isLowSurrogate(model, lineNumber, column - 2)) {\n        // character before column is a low surrogate\n        column = column - 2;\n      } else {\n        column = column - 1;\n      }\n    } else if (lineNumber > 1) {\n      lineNumber = lineNumber - 1;\n      column = model.getLineMaxColumn(lineNumber);\n    }\n\n    return new CursorPosition(lineNumber, column, 0);\n  };\n\n  MoveOperations.moveLeft = function (config, model, cursor, inSelectionMode, noOfColumns) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move left without selection cancels selection and puts cursor at the beginning of the selection\n      lineNumber = cursor.selection.startLineNumber;\n      column = cursor.selection.startColumn;\n    } else {\n      var r = MoveOperations.left(config, model, cursor.position.lineNumber, cursor.position.column - (noOfColumns - 1));\n      lineNumber = r.lineNumber;\n      column = r.column;\n    }\n\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n\n  MoveOperations.right = function (config, model, lineNumber, column) {\n    if (column < model.getLineMaxColumn(lineNumber)) {\n      if (CursorColumns.isHighSurrogate(model, lineNumber, column - 1)) {\n        // character after column is a high surrogate\n        column = column + 2;\n      } else {\n        column = column + 1;\n      }\n    } else if (lineNumber < model.getLineCount()) {\n      lineNumber = lineNumber + 1;\n      column = model.getLineMinColumn(lineNumber);\n    }\n\n    return new CursorPosition(lineNumber, column, 0);\n  };\n\n  MoveOperations.moveRight = function (config, model, cursor, inSelectionMode, noOfColumns) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n      lineNumber = cursor.selection.endLineNumber;\n      column = cursor.selection.endColumn;\n    } else {\n      var r = MoveOperations.right(config, model, cursor.position.lineNumber, cursor.position.column + (noOfColumns - 1));\n      lineNumber = r.lineNumber;\n      column = r.column;\n    }\n\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n\n  MoveOperations.down = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnLastLine) {\n    var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n    lineNumber = lineNumber + count;\n    var lineCount = model.getLineCount();\n\n    if (lineNumber > lineCount) {\n      lineNumber = lineCount;\n\n      if (allowMoveOnLastLine) {\n        column = model.getLineMaxColumn(lineNumber);\n      } else {\n        column = Math.min(model.getLineMaxColumn(lineNumber), column);\n\n        if (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n          column = column - 1;\n        }\n      }\n    } else {\n      column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n\n      if (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n        column = column - 1;\n      }\n    }\n\n    leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n    return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n  };\n\n  MoveOperations.moveDown = function (config, model, cursor, inSelectionMode, linesCount) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move down acts relative to the end of selection\n      lineNumber = cursor.selection.endLineNumber;\n      column = cursor.selection.endColumn;\n    } else {\n      lineNumber = cursor.position.lineNumber;\n      column = cursor.position.column;\n    }\n\n    var r = MoveOperations.down(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n    return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n  };\n\n  MoveOperations.translateDown = function (config, model, cursor) {\n    var selection = cursor.selection;\n    var selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n    var position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n    return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n  };\n\n  MoveOperations.up = function (config, model, lineNumber, column, leftoverVisibleColumns, count, allowMoveOnFirstLine) {\n    var currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n    lineNumber = lineNumber - count;\n\n    if (lineNumber < 1) {\n      lineNumber = 1;\n\n      if (allowMoveOnFirstLine) {\n        column = model.getLineMinColumn(lineNumber);\n      } else {\n        column = Math.min(model.getLineMaxColumn(lineNumber), column);\n\n        if (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n          column = column - 1;\n        }\n      }\n    } else {\n      column = CursorColumns.columnFromVisibleColumn2(config, model, lineNumber, currentVisibleColumn);\n\n      if (CursorColumns.isInsideSurrogatePair(model, lineNumber, column)) {\n        column = column - 1;\n      }\n    }\n\n    leftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n    return new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n  };\n\n  MoveOperations.moveUp = function (config, model, cursor, inSelectionMode, linesCount) {\n    var lineNumber, column;\n\n    if (cursor.hasSelection() && !inSelectionMode) {\n      // If we are in selection mode, move up acts relative to the beginning of selection\n      lineNumber = cursor.selection.startLineNumber;\n      column = cursor.selection.startColumn;\n    } else {\n      lineNumber = cursor.position.lineNumber;\n      column = cursor.position.column;\n    }\n\n    var r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n    return cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n  };\n\n  MoveOperations.translateUp = function (config, model, cursor) {\n    var selection = cursor.selection;\n    var selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n    var position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n    return new SingleCursorState(new Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column), selectionStart.leftoverVisibleColumns, new Position(position.lineNumber, position.column), position.leftoverVisibleColumns);\n  };\n\n  MoveOperations.moveToBeginningOfLine = function (config, model, cursor, inSelectionMode) {\n    var lineNumber = cursor.position.lineNumber;\n    var minColumn = model.getLineMinColumn(lineNumber);\n    var firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n    var column;\n    var relevantColumnNumber = cursor.position.column;\n\n    if (relevantColumnNumber === firstNonBlankColumn) {\n      column = minColumn;\n    } else {\n      column = firstNonBlankColumn;\n    }\n\n    return cursor.move(inSelectionMode, lineNumber, column, 0);\n  };\n\n  MoveOperations.moveToEndOfLine = function (config, model, cursor, inSelectionMode) {\n    var lineNumber = cursor.position.lineNumber;\n    var maxColumn = model.getLineMaxColumn(lineNumber);\n    return cursor.move(inSelectionMode, lineNumber, maxColumn, 0);\n  };\n\n  MoveOperations.moveToBeginningOfBuffer = function (config, model, cursor, inSelectionMode) {\n    return cursor.move(inSelectionMode, 1, 1, 0);\n  };\n\n  MoveOperations.moveToEndOfBuffer = function (config, model, cursor, inSelectionMode) {\n    var lastLineNumber = model.getLineCount();\n    var lastColumn = model.getLineMaxColumn(lastLineNumber);\n    return cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n  };\n\n  return MoveOperations;\n}();\n\nexport { MoveOperations };","map":null,"metadata":{},"sourceType":"module"}