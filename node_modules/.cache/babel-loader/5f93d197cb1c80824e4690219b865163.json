{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar _this = this;\n\nimport { isNonEmptyArray } from '../../../base/common/arrays.js';\nimport { CancellationToken } from '../../../base/common/cancellation.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { ICodeEditorService } from '../../browser/services/codeEditorService.js';\nimport { CharacterSet } from '../../common/core/characterClassifier.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { DocumentRangeFormattingEditProviderRegistry, OnTypeFormattingEditProviderRegistry } from '../../common/modes.js';\nimport { IEditorWorkerService } from '../../common/services/editorWorkerService.js';\nimport { getOnTypeFormattingEdits, alertFormattingEdits, formatDocumentRangeWithSelectedProvider, formatDocumentWithSelectedProvider } from './format.js';\nimport { FormattingEdit } from './formattingEdit.js';\nimport * as nls from '../../../nls.js';\nimport { CommandsRegistry, ICommandService } from '../../../platform/commands/common/commands.js';\nimport { ContextKeyExpr } from '../../../platform/contextkey/common/contextkey.js';\nimport { IInstantiationService } from '../../../platform/instantiation/common/instantiation.js';\nimport { onUnexpectedError } from '../../../base/common/errors.js';\n\nvar FormatOnType =\n/** @class */\nfunction () {\n  function FormatOnType(editor, _workerService) {\n    var _this = this;\n\n    this._workerService = _workerService;\n    this._callOnDispose = new DisposableStore();\n    this._callOnModel = new DisposableStore();\n    this._editor = editor;\n\n    this._callOnDispose.add(editor.onDidChangeConfiguration(function () {\n      return _this._update();\n    }));\n\n    this._callOnDispose.add(editor.onDidChangeModel(function () {\n      return _this._update();\n    }));\n\n    this._callOnDispose.add(editor.onDidChangeModelLanguage(function () {\n      return _this._update();\n    }));\n\n    this._callOnDispose.add(OnTypeFormattingEditProviderRegistry.onDidChange(this._update, this));\n  }\n\n  FormatOnType.prototype.getId = function () {\n    return FormatOnType.ID;\n  };\n\n  FormatOnType.prototype.dispose = function () {\n    this._callOnDispose.dispose();\n\n    this._callOnModel.dispose();\n  };\n\n  FormatOnType.prototype._update = function () {\n    var _this = this; // clean up\n\n\n    this._callOnModel.clear(); // we are disabled\n\n\n    if (!this._editor.getConfiguration().contribInfo.formatOnType) {\n      return;\n    } // no model\n\n\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    var model = this._editor.getModel(); // no support\n\n\n    var support = OnTypeFormattingEditProviderRegistry.ordered(model)[0];\n\n    if (!support || !support.autoFormatTriggerCharacters) {\n      return;\n    } // register typing listeners that will trigger the format\n\n\n    var triggerChars = new CharacterSet();\n\n    for (var _i = 0, _a = support.autoFormatTriggerCharacters; _i < _a.length; _i++) {\n      var ch = _a[_i];\n      triggerChars.add(ch.charCodeAt(0));\n    }\n\n    this._callOnModel.add(this._editor.onDidType(function (text) {\n      var lastCharCode = text.charCodeAt(text.length - 1);\n\n      if (triggerChars.has(lastCharCode)) {\n        _this._trigger(String.fromCharCode(lastCharCode));\n      }\n    }));\n  };\n\n  FormatOnType.prototype._trigger = function (ch) {\n    var _this = this;\n\n    if (!this._editor.hasModel()) {\n      return;\n    }\n\n    if (this._editor.getSelections().length > 1) {\n      return;\n    }\n\n    var model = this._editor.getModel();\n\n    var position = this._editor.getPosition();\n\n    var canceled = false; // install a listener that checks if edits happens before the\n    // position on which we format right now. If so, we won't\n    // apply the format edits\n\n    var unbind = this._editor.onDidChangeModelContent(function (e) {\n      if (e.isFlush) {\n        // a model.setValue() was called\n        // cancel only once\n        canceled = true;\n        unbind.dispose();\n        return;\n      }\n\n      for (var i = 0, len = e.changes.length; i < len; i++) {\n        var change = e.changes[i];\n\n        if (change.range.endLineNumber <= position.lineNumber) {\n          // cancel only once\n          canceled = true;\n          unbind.dispose();\n          return;\n        }\n      }\n    });\n\n    getOnTypeFormattingEdits(this._workerService, model, position, ch, model.getFormattingOptions()).then(function (edits) {\n      unbind.dispose();\n\n      if (canceled) {\n        return;\n      }\n\n      if (isNonEmptyArray(edits)) {\n        FormattingEdit.execute(_this._editor, edits);\n        alertFormattingEdits(edits);\n      }\n    }, function (err) {\n      unbind.dispose();\n      throw err;\n    });\n  };\n\n  FormatOnType.ID = 'editor.contrib.autoFormat';\n  FormatOnType = __decorate([__param(1, IEditorWorkerService)], FormatOnType);\n  return FormatOnType;\n}();\n\nvar FormatOnPaste =\n/** @class */\nfunction () {\n  function FormatOnPaste(editor, _instantiationService) {\n    var _this = this;\n\n    this.editor = editor;\n    this._instantiationService = _instantiationService;\n    this._callOnDispose = new DisposableStore();\n    this._callOnModel = new DisposableStore();\n\n    this._callOnDispose.add(editor.onDidChangeConfiguration(function () {\n      return _this._update();\n    }));\n\n    this._callOnDispose.add(editor.onDidChangeModel(function () {\n      return _this._update();\n    }));\n\n    this._callOnDispose.add(editor.onDidChangeModelLanguage(function () {\n      return _this._update();\n    }));\n\n    this._callOnDispose.add(DocumentRangeFormattingEditProviderRegistry.onDidChange(this._update, this));\n  }\n\n  FormatOnPaste.prototype.getId = function () {\n    return FormatOnPaste.ID;\n  };\n\n  FormatOnPaste.prototype.dispose = function () {\n    this._callOnDispose.dispose();\n\n    this._callOnModel.dispose();\n  };\n\n  FormatOnPaste.prototype._update = function () {\n    var _this = this; // clean up\n\n\n    this._callOnModel.clear(); // we are disabled\n\n\n    if (!this.editor.getConfiguration().contribInfo.formatOnPaste) {\n      return;\n    } // no model\n\n\n    if (!this.editor.hasModel()) {\n      return;\n    } // no formatter\n\n\n    if (!DocumentRangeFormattingEditProviderRegistry.has(this.editor.getModel())) {\n      return;\n    }\n\n    this._callOnModel.add(this.editor.onDidPaste(function (range) {\n      return _this._trigger(range);\n    }));\n  };\n\n  FormatOnPaste.prototype._trigger = function (range) {\n    if (!this.editor.hasModel()) {\n      return;\n    }\n\n    if (this.editor.getSelections().length > 1) {\n      return;\n    }\n\n    this._instantiationService.invokeFunction(formatDocumentRangeWithSelectedProvider, this.editor, range, 2\n    /* Silent */\n    , CancellationToken.None).catch(onUnexpectedError);\n  };\n\n  FormatOnPaste.ID = 'editor.contrib.formatOnPaste';\n  FormatOnPaste = __decorate([__param(1, IInstantiationService)], FormatOnPaste);\n  return FormatOnPaste;\n}();\n\nvar FormatDocumentAction =\n/** @class */\nfunction (_super) {\n  __extends(FormatDocumentAction, _super);\n\n  function FormatDocumentAction() {\n    return _super.call(this, {\n      id: 'editor.action.formatDocument',\n      label: nls.localize('formatDocument.label', \"Format Document\"),\n      alias: 'Format Document',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider),\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.hasDocumentFormattingProvider),\n        primary: 1024\n        /* Shift */\n        | 512\n        /* Alt */\n        | 36\n        /* KEY_F */\n        ,\n        linux: {\n          primary: 2048\n          /* CtrlCmd */\n          | 1024\n          /* Shift */\n          | 39\n          /* KEY_I */\n\n        },\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        when: EditorContextKeys.hasDocumentFormattingProvider,\n        group: '1_modification',\n        order: 1.3\n      }\n    }) || this;\n  }\n\n  FormatDocumentAction.prototype.run = function (accessor, editor) {\n    return __awaiter(this, void 0, void 0, function () {\n      var instaService;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!editor.hasModel()) return [3\n            /*break*/\n            , 2];\n            instaService = accessor.get(IInstantiationService);\n            return [4\n            /*yield*/\n            , instaService.invokeFunction(formatDocumentWithSelectedProvider, editor, 1\n            /* Explicit */\n            , CancellationToken.None)];\n\n          case 1:\n            _a.sent();\n\n            _a.label = 2;\n\n          case 2:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return FormatDocumentAction;\n}(EditorAction);\n\nvar FormatSelectionAction =\n/** @class */\nfunction (_super) {\n  __extends(FormatSelectionAction, _super);\n\n  function FormatSelectionAction() {\n    return _super.call(this, {\n      id: 'editor.action.formatSelection',\n      label: nls.localize('formatSelection.label', \"Format Selection\"),\n      alias: 'Format Selection',\n      precondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n      kbOpts: {\n        kbExpr: ContextKeyExpr.and(EditorContextKeys.editorTextFocus, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KEY_K */\n        , 2048\n        /* CtrlCmd */\n        | 36\n        /* KEY_F */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      },\n      menuOpts: {\n        when: ContextKeyExpr.and(EditorContextKeys.hasDocumentSelectionFormattingProvider, EditorContextKeys.hasNonEmptySelection),\n        group: '1_modification',\n        order: 1.31\n      }\n    }) || this;\n  }\n\n  FormatSelectionAction.prototype.run = function (accessor, editor) {\n    return __awaiter(this, void 0, void 0, function () {\n      var instaService, model, range;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!editor.hasModel()) {\n              return [2\n              /*return*/\n              ];\n            }\n\n            instaService = accessor.get(IInstantiationService);\n            model = editor.getModel();\n            range = editor.getSelection();\n\n            if (range.isEmpty()) {\n              range = new Range(range.startLineNumber, 1, range.startLineNumber, model.getLineMaxColumn(range.startLineNumber));\n            }\n\n            return [4\n            /*yield*/\n            , instaService.invokeFunction(formatDocumentRangeWithSelectedProvider, editor, range, 1\n            /* Explicit */\n            , CancellationToken.None)];\n\n          case 1:\n            _a.sent();\n\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  return FormatSelectionAction;\n}(EditorAction);\n\nregisterEditorContribution(FormatOnType);\nregisterEditorContribution(FormatOnPaste);\nregisterEditorAction(FormatDocumentAction);\nregisterEditorAction(FormatSelectionAction); // this is the old format action that does both (format document OR format selection)\n// and we keep it here such that existing keybinding configurations etc will still work\n\nCommandsRegistry.registerCommand('editor.action.format', function (accessor) {\n  return __awaiter(_this, void 0, void 0, function () {\n    var editor, commandService;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          editor = accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\n          if (!editor || !editor.hasModel()) {\n            return [2\n            /*return*/\n            ];\n          }\n\n          commandService = accessor.get(ICommandService);\n          if (!editor.getSelection().isEmpty()) return [3\n          /*break*/\n          , 2];\n          return [4\n          /*yield*/\n          , commandService.executeCommand('editor.action.formatDocument')];\n\n        case 1:\n          _a.sent();\n\n          return [3\n          /*break*/\n          , 4];\n\n        case 2:\n          return [4\n          /*yield*/\n          , commandService.executeCommand('editor.action.formatSelection')];\n\n        case 3:\n          _a.sent();\n\n          _a.label = 4;\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n});","map":null,"metadata":{},"sourceType":"module"}