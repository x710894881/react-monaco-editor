{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { dispose, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { repeat } from '../../../base/common/strings.js';\nimport { EditorCommand, registerEditorCommand, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { Range } from '../../common/core/range.js';\nimport { Selection } from '../../common/core/selection.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { showSimpleSuggestions } from '../suggest/suggest.js';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { ILogService } from '../../../platform/log/common/log.js';\nimport { SnippetSession } from './snippetSession.js';\nvar _defaultOptions = {\n  overwriteBefore: 0,\n  overwriteAfter: 0,\n  undoStopBefore: true,\n  undoStopAfter: true,\n  adjustWhitespace: true,\n  clipboardText: undefined\n};\n\nvar SnippetController2 =\n/** @class */\nfunction () {\n  function SnippetController2(_editor, _logService, contextKeyService) {\n    this._editor = _editor;\n    this._logService = _logService;\n    this._snippetListener = new DisposableStore();\n    this._modelVersionId = -1;\n    this._inSnippet = SnippetController2.InSnippetMode.bindTo(contextKeyService);\n    this._hasNextTabstop = SnippetController2.HasNextTabstop.bindTo(contextKeyService);\n    this._hasPrevTabstop = SnippetController2.HasPrevTabstop.bindTo(contextKeyService);\n  }\n\n  SnippetController2.get = function (editor) {\n    return editor.getContribution('snippetController2');\n  };\n\n  SnippetController2.prototype.dispose = function () {\n    this._inSnippet.reset();\n\n    this._hasPrevTabstop.reset();\n\n    this._hasNextTabstop.reset();\n\n    dispose(this._session);\n\n    this._snippetListener.dispose();\n  };\n\n  SnippetController2.prototype.getId = function () {\n    return 'snippetController2';\n  };\n\n  SnippetController2.prototype.insert = function (template, opts) {\n    // this is here to find out more about the yet-not-understood\n    // error that sometimes happens when we fail to inserted a nested\n    // snippet\n    try {\n      this._doInsert(template, typeof opts === 'undefined' ? _defaultOptions : __assign({}, _defaultOptions, opts));\n    } catch (e) {\n      this.cancel();\n\n      this._logService.error(e);\n\n      this._logService.error('snippet_error');\n\n      this._logService.error('insert_template=', template);\n\n      this._logService.error('existing_template=', this._session ? this._session._logInfo() : '<no_session>');\n    }\n  };\n\n  SnippetController2.prototype._doInsert = function (template, opts) {\n    var _this = this;\n\n    if (!this._editor.hasModel()) {\n      return;\n    } // don't listen while inserting the snippet\n    // as that is the inflight state causing cancelation\n\n\n    this._snippetListener.clear();\n\n    if (opts.undoStopBefore) {\n      this._editor.getModel().pushStackElement();\n    }\n\n    if (!this._session) {\n      this._modelVersionId = this._editor.getModel().getAlternativeVersionId();\n      this._session = new SnippetSession(this._editor, template, opts);\n\n      this._session.insert();\n    } else {\n      this._session.merge(template, opts);\n    }\n\n    if (opts.undoStopAfter) {\n      this._editor.getModel().pushStackElement();\n    }\n\n    this._updateState();\n\n    this._snippetListener.add(this._editor.onDidChangeModelContent(function (e) {\n      return e.isFlush && _this.cancel();\n    }));\n\n    this._snippetListener.add(this._editor.onDidChangeModel(function () {\n      return _this.cancel();\n    }));\n\n    this._snippetListener.add(this._editor.onDidChangeCursorSelection(function () {\n      return _this._updateState();\n    }));\n  };\n\n  SnippetController2.prototype._updateState = function () {\n    if (!this._session || !this._editor.hasModel()) {\n      // canceled in the meanwhile\n      return;\n    }\n\n    if (this._modelVersionId === this._editor.getModel().getAlternativeVersionId()) {\n      // undo until the 'before' state happened\n      // and makes use cancel snippet mode\n      return this.cancel();\n    }\n\n    if (!this._session.hasPlaceholder) {\n      // don't listen for selection changes and don't\n      // update context keys when the snippet is plain text\n      return this.cancel();\n    }\n\n    if (this._session.isAtLastPlaceholder || !this._session.isSelectionWithinPlaceholders()) {\n      return this.cancel();\n    }\n\n    this._inSnippet.set(true);\n\n    this._hasPrevTabstop.set(!this._session.isAtFirstPlaceholder);\n\n    this._hasNextTabstop.set(!this._session.isAtLastPlaceholder);\n\n    this._handleChoice();\n  };\n\n  SnippetController2.prototype._handleChoice = function () {\n    var _this = this;\n\n    if (!this._session || !this._editor.hasModel()) {\n      this._currentChoice = undefined;\n      return;\n    }\n\n    var choice = this._session.choice;\n\n    if (!choice) {\n      this._currentChoice = undefined;\n      return;\n    }\n\n    if (this._currentChoice !== choice) {\n      this._currentChoice = choice;\n\n      this._editor.setSelections(this._editor.getSelections().map(function (s) {\n        return Selection.fromPositions(s.getStartPosition());\n      }));\n\n      var first_1 = choice.options[0];\n      showSimpleSuggestions(this._editor, choice.options.map(function (option, i) {\n        // let before = choice.options.slice(0, i);\n        // let after = choice.options.slice(i);\n        return {\n          kind: 13\n          /* Value */\n          ,\n          label: option.value,\n          insertText: option.value,\n          // insertText: `\\${1|${after.concat(before).join(',')}|}$0`,\n          // snippetType: 'textmate',\n          sortText: repeat('a', i + 1),\n          range: Range.fromPositions(_this._editor.getPosition(), _this._editor.getPosition().delta(0, first_1.value.length))\n        };\n      }));\n    }\n  };\n\n  SnippetController2.prototype.finish = function () {\n    while (this._inSnippet.get()) {\n      this.next();\n    }\n  };\n\n  SnippetController2.prototype.cancel = function (resetSelection) {\n    if (resetSelection === void 0) {\n      resetSelection = false;\n    }\n\n    this._inSnippet.reset();\n\n    this._hasPrevTabstop.reset();\n\n    this._hasNextTabstop.reset();\n\n    this._snippetListener.clear();\n\n    dispose(this._session);\n    this._session = undefined;\n    this._modelVersionId = -1;\n\n    if (resetSelection) {\n      // reset selection to the primary cursor when being asked\n      // for. this happens when explicitly cancelling snippet mode,\n      // e.g. when pressing ESC\n      this._editor.setSelections([this._editor.getSelection()]);\n    }\n  };\n\n  SnippetController2.prototype.prev = function () {\n    if (this._session) {\n      this._session.prev();\n    }\n\n    this._updateState();\n  };\n\n  SnippetController2.prototype.next = function () {\n    if (this._session) {\n      this._session.next();\n    }\n\n    this._updateState();\n  };\n\n  SnippetController2.prototype.isInSnippet = function () {\n    return Boolean(this._inSnippet.get());\n  };\n\n  SnippetController2.InSnippetMode = new RawContextKey('inSnippetMode', false);\n  SnippetController2.HasNextTabstop = new RawContextKey('hasNextTabstop', false);\n  SnippetController2.HasPrevTabstop = new RawContextKey('hasPrevTabstop', false);\n  SnippetController2 = __decorate([__param(1, ILogService), __param(2, IContextKeyService)], SnippetController2);\n  return SnippetController2;\n}();\n\nexport { SnippetController2 };\nregisterEditorContribution(SnippetController2);\nvar CommandCtor = EditorCommand.bindToContribution(SnippetController2.get);\nregisterEditorCommand(new CommandCtor({\n  id: 'jumpToNextSnippetPlaceholder',\n  precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasNextTabstop),\n  handler: function (ctrl) {\n    return ctrl.next();\n  },\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 30,\n    kbExpr: EditorContextKeys.editorTextFocus,\n    primary: 2\n    /* Tab */\n\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'jumpToPrevSnippetPlaceholder',\n  precondition: ContextKeyExpr.and(SnippetController2.InSnippetMode, SnippetController2.HasPrevTabstop),\n  handler: function (ctrl) {\n    return ctrl.prev();\n  },\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 30,\n    kbExpr: EditorContextKeys.editorTextFocus,\n    primary: 1024\n    /* Shift */\n    | 2\n    /* Tab */\n\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'leaveSnippet',\n  precondition: SnippetController2.InSnippetMode,\n  handler: function (ctrl) {\n    return ctrl.cancel(true);\n  },\n  kbOpts: {\n    weight: 100\n    /* EditorContrib */\n    + 30,\n    kbExpr: EditorContextKeys.editorTextFocus,\n    primary: 9\n    /* Escape */\n    ,\n    secondary: [1024\n    /* Shift */\n    | 9\n    /* Escape */\n    ]\n  }\n}));\nregisterEditorCommand(new CommandCtor({\n  id: 'acceptSnippet',\n  precondition: SnippetController2.InSnippetMode,\n  handler: function (ctrl) {\n    return ctrl.finish();\n  }\n}));","map":null,"metadata":{},"sourceType":"module"}