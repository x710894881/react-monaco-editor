{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './glyphMargin.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\n\nvar DecorationToRender =\n/** @class */\nfunction () {\n  function DecorationToRender(startLineNumber, endLineNumber, className) {\n    this.startLineNumber = +startLineNumber;\n    this.endLineNumber = +endLineNumber;\n    this.className = String(className);\n  }\n\n  return DecorationToRender;\n}();\n\nexport { DecorationToRender };\n\nvar DedupOverlay =\n/** @class */\nfunction (_super) {\n  __extends(DedupOverlay, _super);\n\n  function DedupOverlay() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DedupOverlay.prototype._render = function (visibleStartLineNumber, visibleEndLineNumber, decorations) {\n    var output = [];\n\n    for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      var lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = [];\n    }\n\n    if (decorations.length === 0) {\n      return output;\n    }\n\n    decorations.sort(function (a, b) {\n      if (a.className === b.className) {\n        if (a.startLineNumber === b.startLineNumber) {\n          return a.endLineNumber - b.endLineNumber;\n        }\n\n        return a.startLineNumber - b.startLineNumber;\n      }\n\n      return a.className < b.className ? -1 : 1;\n    });\n    var prevClassName = null;\n    var prevEndLineIndex = 0;\n\n    for (var i = 0, len = decorations.length; i < len; i++) {\n      var d = decorations[i];\n      var className = d.className;\n      var startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n      var endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n\n      if (prevClassName === className) {\n        startLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n        prevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n      } else {\n        prevClassName = className;\n        prevEndLineIndex = endLineIndex;\n      }\n\n      for (var i_1 = startLineIndex; i_1 <= prevEndLineIndex; i_1++) {\n        output[i_1].push(prevClassName);\n      }\n    }\n\n    return output;\n  };\n\n  return DedupOverlay;\n}(DynamicViewOverlay);\n\nexport { DedupOverlay };\n\nvar GlyphMarginOverlay =\n/** @class */\nfunction (_super) {\n  __extends(GlyphMarginOverlay, _super);\n\n  function GlyphMarginOverlay(context) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n    _this._lineHeight = _this._context.configuration.editor.lineHeight;\n    _this._glyphMargin = _this._context.configuration.editor.viewInfo.glyphMargin;\n    _this._glyphMarginLeft = _this._context.configuration.editor.layoutInfo.glyphMarginLeft;\n    _this._glyphMarginWidth = _this._context.configuration.editor.layoutInfo.glyphMarginWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  GlyphMarginOverlay.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  GlyphMarginOverlay.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._lineHeight = this._context.configuration.editor.lineHeight;\n    }\n\n    if (e.viewInfo) {\n      this._glyphMargin = this._context.configuration.editor.viewInfo.glyphMargin;\n    }\n\n    if (e.layoutInfo) {\n      this._glyphMarginLeft = this._context.configuration.editor.layoutInfo.glyphMarginLeft;\n      this._glyphMarginWidth = this._context.configuration.editor.layoutInfo.glyphMarginWidth;\n    }\n\n    return true;\n  };\n\n  GlyphMarginOverlay.prototype.onDecorationsChanged = function (e) {\n    return true;\n  };\n\n  GlyphMarginOverlay.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  GlyphMarginOverlay.prototype.onLinesChanged = function (e) {\n    return true;\n  };\n\n  GlyphMarginOverlay.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  GlyphMarginOverlay.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  GlyphMarginOverlay.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged;\n  };\n\n  GlyphMarginOverlay.prototype.onZonesChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n\n\n  GlyphMarginOverlay.prototype._getDecorations = function (ctx) {\n    var decorations = ctx.getDecorationsInViewport();\n    var r = [],\n        rLen = 0;\n\n    for (var i = 0, len = decorations.length; i < len; i++) {\n      var d = decorations[i];\n      var glyphMarginClassName = d.options.glyphMarginClassName;\n\n      if (glyphMarginClassName) {\n        r[rLen++] = new DecorationToRender(d.range.startLineNumber, d.range.endLineNumber, glyphMarginClassName);\n      }\n    }\n\n    return r;\n  };\n\n  GlyphMarginOverlay.prototype.prepareRender = function (ctx) {\n    if (!this._glyphMargin) {\n      this._renderResult = null;\n      return;\n    }\n\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    var toRender = this._render(visibleStartLineNumber, visibleEndLineNumber, this._getDecorations(ctx));\n\n    var lineHeight = this._lineHeight.toString();\n\n    var left = this._glyphMarginLeft.toString();\n\n    var width = this._glyphMarginWidth.toString();\n\n    var common = '\" style=\"left:' + left + 'px;width:' + width + 'px' + ';height:' + lineHeight + 'px;\"></div>';\n    var output = [];\n\n    for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      var lineIndex = lineNumber - visibleStartLineNumber;\n      var classNames = toRender[lineIndex];\n\n      if (classNames.length === 0) {\n        output[lineIndex] = '';\n      } else {\n        output[lineIndex] = '<div class=\"cgmr ' + classNames.join(' ') + common;\n      }\n    }\n\n    this._renderResult = output;\n  };\n\n  GlyphMarginOverlay.prototype.render = function (startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    var lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  };\n\n  return GlyphMarginOverlay;\n}(DedupOverlay);\n\nexport { GlyphMarginOverlay };","map":null,"metadata":{},"sourceType":"module"}