{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { createDecorator } from '../../instantiation/common/instantiation.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../registry/common/platform.js';\nimport { Emitter } from '../../../base/common/event.js';\nexport var IThemeService = createDecorator('themeService');\nexport function themeColorFromId(id) {\n  return {\n    id: id\n  };\n} // base themes\n\nexport var DARK = 'dark';\nexport var LIGHT = 'light';\nexport var HIGH_CONTRAST = 'hc';\nexport function getThemeTypeSelector(type) {\n  switch (type) {\n    case DARK:\n      return 'vs-dark';\n\n    case HIGH_CONTRAST:\n      return 'hc-black';\n\n    default:\n      return 'vs';\n  }\n} // static theming participant\n\nexport var Extensions = {\n  ThemingContribution: 'base.contributions.theming'\n};\n\nvar ThemingRegistry =\n/** @class */\nfunction () {\n  function ThemingRegistry() {\n    this.themingParticipants = [];\n    this.themingParticipants = [];\n    this.onThemingParticipantAddedEmitter = new Emitter();\n  }\n\n  ThemingRegistry.prototype.onThemeChange = function (participant) {\n    var _this = this;\n\n    this.themingParticipants.push(participant);\n    this.onThemingParticipantAddedEmitter.fire(participant);\n    return toDisposable(function () {\n      var idx = _this.themingParticipants.indexOf(participant);\n\n      _this.themingParticipants.splice(idx, 1);\n    });\n  };\n\n  ThemingRegistry.prototype.getThemingParticipants = function () {\n    return this.themingParticipants;\n  };\n\n  return ThemingRegistry;\n}();\n\nvar themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\nexport function registerThemingParticipant(participant) {\n  return themingRegistry.onThemeChange(participant);\n}","map":null,"metadata":{},"sourceType":"module"}