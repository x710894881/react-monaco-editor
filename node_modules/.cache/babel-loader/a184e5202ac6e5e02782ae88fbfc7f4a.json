{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Range } from '../../common/core/range.js';\nimport { isUpperAsciiLetter, isLowerAsciiLetter } from '../../../base/common/strings.js';\n\nvar WordSelectionRangeProvider =\n/** @class */\nfunction () {\n  function WordSelectionRangeProvider() {}\n\n  WordSelectionRangeProvider.prototype.provideSelectionRanges = function (model, positions) {\n    var result = [];\n\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\n      var position = positions_1[_i];\n      var bucket = [];\n      result.push(bucket);\n\n      this._addInWordRanges(bucket, model, position);\n\n      this._addWordRanges(bucket, model, position);\n\n      this._addWhitespaceLine(bucket, model, position);\n\n      bucket.push({\n        range: model.getFullModelRange()\n      });\n    }\n\n    return result;\n  };\n\n  WordSelectionRangeProvider.prototype._addInWordRanges = function (bucket, model, pos) {\n    var obj = model.getWordAtPosition(pos);\n\n    if (!obj) {\n      return;\n    }\n\n    var word = obj.word,\n        startColumn = obj.startColumn;\n    var offset = pos.column - startColumn;\n    var start = offset;\n    var end = offset;\n    var lastCh = 0; // LEFT anchor (start)\n\n    for (; start >= 0; start--) {\n      var ch = word.charCodeAt(start);\n\n      if (ch === 95\n      /* Underline */\n      || ch === 45\n      /* Dash */\n      ) {\n          // foo-bar OR foo_bar\n          break;\n        } else if (isLowerAsciiLetter(ch) && isUpperAsciiLetter(lastCh)) {\n        // fooBar\n        break;\n      }\n\n      lastCh = ch;\n    }\n\n    start += 1; // RIGHT anchor (end)\n\n    for (; end < word.length; end++) {\n      var ch = word.charCodeAt(end);\n\n      if (isUpperAsciiLetter(ch) && isLowerAsciiLetter(lastCh)) {\n        // fooBar\n        break;\n      } else if (ch === 95\n      /* Underline */\n      || ch === 45\n      /* Dash */\n      ) {\n          // foo-bar OR foo_bar\n          break;\n        }\n\n      lastCh = ch;\n    }\n\n    if (start < end) {\n      bucket.push({\n        range: new Range(pos.lineNumber, startColumn + start, pos.lineNumber, startColumn + end)\n      });\n    }\n  };\n\n  WordSelectionRangeProvider.prototype._addWordRanges = function (bucket, model, pos) {\n    var word = model.getWordAtPosition(pos);\n\n    if (word) {\n      bucket.push({\n        range: new Range(pos.lineNumber, word.startColumn, pos.lineNumber, word.endColumn)\n      });\n    }\n  };\n\n  WordSelectionRangeProvider.prototype._addWhitespaceLine = function (bucket, model, pos) {\n    if (model.getLineLength(pos.lineNumber) > 0 && model.getLineFirstNonWhitespaceColumn(pos.lineNumber) === 0 && model.getLineLastNonWhitespaceColumn(pos.lineNumber) === 0) {\n      bucket.push({\n        range: new Range(pos.lineNumber, 1, pos.lineNumber, model.getLineMaxColumn(pos.lineNumber))\n      });\n    }\n  };\n\n  return WordSelectionRangeProvider;\n}();\n\nexport { WordSelectionRangeProvider };","map":null,"metadata":{},"sourceType":"module"}