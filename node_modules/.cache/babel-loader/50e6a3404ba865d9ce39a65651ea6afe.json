{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\nexport var AccessibilityHelpNLS;\n\n(function (AccessibilityHelpNLS) {\n  AccessibilityHelpNLS.noSelection = nls.localize(\"noSelection\", \"No selection\");\n  AccessibilityHelpNLS.singleSelectionRange = nls.localize(\"singleSelectionRange\", \"Line {0}, Column {1} ({2} selected)\");\n  AccessibilityHelpNLS.singleSelection = nls.localize(\"singleSelection\", \"Line {0}, Column {1}\");\n  AccessibilityHelpNLS.multiSelectionRange = nls.localize(\"multiSelectionRange\", \"{0} selections ({1} characters selected)\");\n  AccessibilityHelpNLS.multiSelection = nls.localize(\"multiSelection\", \"{0} selections\");\n  AccessibilityHelpNLS.emergencyConfOn = nls.localize(\"emergencyConfOn\", \"Now changing the setting `accessibilitySupport` to 'on'.\");\n  AccessibilityHelpNLS.openingDocs = nls.localize(\"openingDocs\", \"Now opening the Editor Accessibility documentation page.\");\n  AccessibilityHelpNLS.readonlyDiffEditor = nls.localize(\"readonlyDiffEditor\", \" in a read-only pane of a diff editor.\");\n  AccessibilityHelpNLS.editableDiffEditor = nls.localize(\"editableDiffEditor\", \" in a pane of a diff editor.\");\n  AccessibilityHelpNLS.readonlyEditor = nls.localize(\"readonlyEditor\", \" in a read-only code editor\");\n  AccessibilityHelpNLS.editableEditor = nls.localize(\"editableEditor\", \" in a code editor\");\n  AccessibilityHelpNLS.changeConfigToOnMac = nls.localize(\"changeConfigToOnMac\", \"To configure the editor to be optimized for usage with a Screen Reader press Command+E now.\");\n  AccessibilityHelpNLS.changeConfigToOnWinLinux = nls.localize(\"changeConfigToOnWinLinux\", \"To configure the editor to be optimized for usage with a Screen Reader press Control+E now.\");\n  AccessibilityHelpNLS.auto_on = nls.localize(\"auto_on\", \"The editor is configured to be optimized for usage with a Screen Reader.\");\n  AccessibilityHelpNLS.auto_off = nls.localize(\"auto_off\", \"The editor is configured to never be optimized for usage with a Screen Reader, which is not the case at this time.\");\n  AccessibilityHelpNLS.tabFocusModeOnMsg = nls.localize(\"tabFocusModeOnMsg\", \"Pressing Tab in the current editor will move focus to the next focusable element. Toggle this behavior by pressing {0}.\");\n  AccessibilityHelpNLS.tabFocusModeOnMsgNoKb = nls.localize(\"tabFocusModeOnMsgNoKb\", \"Pressing Tab in the current editor will move focus to the next focusable element. The command {0} is currently not triggerable by a keybinding.\");\n  AccessibilityHelpNLS.tabFocusModeOffMsg = nls.localize(\"tabFocusModeOffMsg\", \"Pressing Tab in the current editor will insert the tab character. Toggle this behavior by pressing {0}.\");\n  AccessibilityHelpNLS.tabFocusModeOffMsgNoKb = nls.localize(\"tabFocusModeOffMsgNoKb\", \"Pressing Tab in the current editor will insert the tab character. The command {0} is currently not triggerable by a keybinding.\");\n  AccessibilityHelpNLS.openDocMac = nls.localize(\"openDocMac\", \"Press Command+H now to open a browser window with more information related to editor accessibility.\");\n  AccessibilityHelpNLS.openDocWinLinux = nls.localize(\"openDocWinLinux\", \"Press Control+H now to open a browser window with more information related to editor accessibility.\");\n  AccessibilityHelpNLS.outroMsg = nls.localize(\"outroMsg\", \"You can dismiss this tooltip and return to the editor by pressing Escape or Shift+Escape.\");\n  AccessibilityHelpNLS.showAccessibilityHelpAction = nls.localize(\"showAccessibilityHelpAction\", \"Show Accessibility Help\");\n})(AccessibilityHelpNLS || (AccessibilityHelpNLS = {}));\n\nexport var InspectTokensNLS;\n\n(function (InspectTokensNLS) {\n  InspectTokensNLS.inspectTokensAction = nls.localize('inspectTokens', \"Developer: Inspect Tokens\");\n})(InspectTokensNLS || (InspectTokensNLS = {}));\n\nexport var GoToLineNLS;\n\n(function (GoToLineNLS) {\n  GoToLineNLS.gotoLineLabelValidLineAndColumn = nls.localize('gotoLineLabelValidLineAndColumn', \"Go to line {0} and character {1}\");\n  GoToLineNLS.gotoLineLabelValidLine = nls.localize('gotoLineLabelValidLine', \"Go to line {0}\");\n  GoToLineNLS.gotoLineLabelEmptyWithLineLimit = nls.localize('gotoLineLabelEmptyWithLineLimit', \"Type a line number between 1 and {0} to navigate to\");\n  GoToLineNLS.gotoLineLabelEmptyWithLineAndColumnLimit = nls.localize('gotoLineLabelEmptyWithLineAndColumnLimit', \"Type a character between 1 and {0} to navigate to\");\n  GoToLineNLS.gotoLineAriaLabel = nls.localize('gotoLineAriaLabel', \"Current Line: {0}. Go to line {1}.\");\n  GoToLineNLS.gotoLineActionInput = nls.localize('gotoLineActionInput', \"Type a line number, followed by an optional colon and a character number to navigate to\");\n  GoToLineNLS.gotoLineActionLabel = nls.localize('gotoLineActionLabel', \"Go to Line...\");\n})(GoToLineNLS || (GoToLineNLS = {}));\n\nexport var QuickCommandNLS;\n\n(function (QuickCommandNLS) {\n  QuickCommandNLS.ariaLabelEntryWithKey = nls.localize('ariaLabelEntryWithKey', \"{0}, {1}, commands\");\n  QuickCommandNLS.ariaLabelEntry = nls.localize('ariaLabelEntry', \"{0}, commands\");\n  QuickCommandNLS.quickCommandActionInput = nls.localize('quickCommandActionInput', \"Type the name of an action you want to execute\");\n  QuickCommandNLS.quickCommandActionLabel = nls.localize('quickCommandActionLabel', \"Command Palette\");\n})(QuickCommandNLS || (QuickCommandNLS = {}));\n\nexport var QuickOutlineNLS;\n\n(function (QuickOutlineNLS) {\n  QuickOutlineNLS.entryAriaLabel = nls.localize('entryAriaLabel', \"{0}, symbols\");\n  QuickOutlineNLS.quickOutlineActionInput = nls.localize('quickOutlineActionInput', \"Type the name of an identifier you wish to navigate to\");\n  QuickOutlineNLS.quickOutlineActionLabel = nls.localize('quickOutlineActionLabel', \"Go to Symbol...\");\n  QuickOutlineNLS._symbols_ = nls.localize('symbols', \"symbols ({0})\");\n  QuickOutlineNLS._modules_ = nls.localize('modules', \"modules ({0})\");\n  QuickOutlineNLS._class_ = nls.localize('class', \"classes ({0})\");\n  QuickOutlineNLS._interface_ = nls.localize('interface', \"interfaces ({0})\");\n  QuickOutlineNLS._method_ = nls.localize('method', \"methods ({0})\");\n  QuickOutlineNLS._function_ = nls.localize('function', \"functions ({0})\");\n  QuickOutlineNLS._property_ = nls.localize('property', \"properties ({0})\");\n  QuickOutlineNLS._variable_ = nls.localize('variable', \"variables ({0})\");\n  QuickOutlineNLS._variable2_ = nls.localize('variable2', \"variables ({0})\");\n  QuickOutlineNLS._constructor_ = nls.localize('_constructor', \"constructors ({0})\");\n  QuickOutlineNLS._call_ = nls.localize('call', \"calls ({0})\");\n})(QuickOutlineNLS || (QuickOutlineNLS = {}));\n\nexport var StandaloneCodeEditorNLS;\n\n(function (StandaloneCodeEditorNLS) {\n  StandaloneCodeEditorNLS.editorViewAccessibleLabel = nls.localize('editorViewAccessibleLabel', \"Editor content\");\n  StandaloneCodeEditorNLS.accessibilityHelpMessageIE = nls.localize('accessibilityHelpMessageIE', \"Press Ctrl+F1 for Accessibility Options.\");\n  StandaloneCodeEditorNLS.accessibilityHelpMessage = nls.localize('accessibilityHelpMessage', \"Press Alt+F1 for Accessibility Options.\");\n})(StandaloneCodeEditorNLS || (StandaloneCodeEditorNLS = {}));\n\nexport var ToggleHighContrastNLS;\n\n(function (ToggleHighContrastNLS) {\n  ToggleHighContrastNLS.toggleHighContrast = nls.localize('toggleHighContrast', \"Toggle High Contrast Theme\");\n})(ToggleHighContrastNLS || (ToggleHighContrastNLS = {}));\n\nexport var SimpleServicesNLS;\n\n(function (SimpleServicesNLS) {\n  SimpleServicesNLS.bulkEditServiceSummary = nls.localize('bulkEditServiceSummary', \"Made {0} edits in {1} files\");\n})(SimpleServicesNLS || (SimpleServicesNLS = {}));","map":null,"metadata":{},"sourceType":"module"}