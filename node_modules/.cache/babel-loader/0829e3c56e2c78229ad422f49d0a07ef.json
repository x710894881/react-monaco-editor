{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * An event describing that a model has been reset to a new value.\n * @internal\n */\nvar ModelRawFlush =\n/** @class */\nfunction () {\n  function ModelRawFlush() {\n    this.changeType = 1\n    /* Flush */\n    ;\n  }\n\n  return ModelRawFlush;\n}();\n\nexport { ModelRawFlush };\n/**\n * An event describing that a line has changed in a model.\n * @internal\n */\n\nvar ModelRawLineChanged =\n/** @class */\nfunction () {\n  function ModelRawLineChanged(lineNumber, detail) {\n    this.changeType = 2\n    /* LineChanged */\n    ;\n    this.lineNumber = lineNumber;\n    this.detail = detail;\n  }\n\n  return ModelRawLineChanged;\n}();\n\nexport { ModelRawLineChanged };\n/**\n * An event describing that line(s) have been deleted in a model.\n * @internal\n */\n\nvar ModelRawLinesDeleted =\n/** @class */\nfunction () {\n  function ModelRawLinesDeleted(fromLineNumber, toLineNumber) {\n    this.changeType = 3\n    /* LinesDeleted */\n    ;\n    this.fromLineNumber = fromLineNumber;\n    this.toLineNumber = toLineNumber;\n  }\n\n  return ModelRawLinesDeleted;\n}();\n\nexport { ModelRawLinesDeleted };\n/**\n * An event describing that line(s) have been inserted in a model.\n * @internal\n */\n\nvar ModelRawLinesInserted =\n/** @class */\nfunction () {\n  function ModelRawLinesInserted(fromLineNumber, toLineNumber, detail) {\n    this.changeType = 4\n    /* LinesInserted */\n    ;\n    this.fromLineNumber = fromLineNumber;\n    this.toLineNumber = toLineNumber;\n    this.detail = detail;\n  }\n\n  return ModelRawLinesInserted;\n}();\n\nexport { ModelRawLinesInserted };\n/**\n * An event describing that a model has had its EOL changed.\n * @internal\n */\n\nvar ModelRawEOLChanged =\n/** @class */\nfunction () {\n  function ModelRawEOLChanged() {\n    this.changeType = 5\n    /* EOLChanged */\n    ;\n  }\n\n  return ModelRawEOLChanged;\n}();\n\nexport { ModelRawEOLChanged };\n/**\n * An event describing a change in the text of a model.\n * @internal\n */\n\nvar ModelRawContentChangedEvent =\n/** @class */\nfunction () {\n  function ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing) {\n    this.changes = changes;\n    this.versionId = versionId;\n    this.isUndoing = isUndoing;\n    this.isRedoing = isRedoing;\n  }\n\n  ModelRawContentChangedEvent.prototype.containsEvent = function (type) {\n    for (var i = 0, len = this.changes.length; i < len; i++) {\n      var change = this.changes[i];\n\n      if (change.changeType === type) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ModelRawContentChangedEvent.merge = function (a, b) {\n    var changes = [].concat(a.changes).concat(b.changes);\n    var versionId = b.versionId;\n    var isUndoing = a.isUndoing || b.isUndoing;\n    var isRedoing = a.isRedoing || b.isRedoing;\n    return new ModelRawContentChangedEvent(changes, versionId, isUndoing, isRedoing);\n  };\n\n  return ModelRawContentChangedEvent;\n}();\n\nexport { ModelRawContentChangedEvent };\n/**\n * @internal\n */\n\nvar InternalModelContentChangeEvent =\n/** @class */\nfunction () {\n  function InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent) {\n    this.rawContentChangedEvent = rawContentChangedEvent;\n    this.contentChangedEvent = contentChangedEvent;\n  }\n\n  InternalModelContentChangeEvent.prototype.merge = function (other) {\n    var rawContentChangedEvent = ModelRawContentChangedEvent.merge(this.rawContentChangedEvent, other.rawContentChangedEvent);\n\n    var contentChangedEvent = InternalModelContentChangeEvent._mergeChangeEvents(this.contentChangedEvent, other.contentChangedEvent);\n\n    return new InternalModelContentChangeEvent(rawContentChangedEvent, contentChangedEvent);\n  };\n\n  InternalModelContentChangeEvent._mergeChangeEvents = function (a, b) {\n    var changes = [].concat(a.changes).concat(b.changes);\n    var eol = b.eol;\n    var versionId = b.versionId;\n    var isUndoing = a.isUndoing || b.isUndoing;\n    var isRedoing = a.isRedoing || b.isRedoing;\n    var isFlush = a.isFlush || b.isFlush;\n    return {\n      changes: changes,\n      eol: eol,\n      versionId: versionId,\n      isUndoing: isUndoing,\n      isRedoing: isRedoing,\n      isFlush: isFlush\n    };\n  };\n\n  return InternalModelContentChangeEvent;\n}();\n\nexport { InternalModelContentChangeEvent };","map":null,"metadata":{},"sourceType":"module"}