{"ast":null,"code":"import '../../editor/editor.api.js';\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n'use strict';\n\nvar Emitter = monaco.Emitter; // --- JSON configuration and defaults ---------\n\nvar LanguageServiceDefaultsImpl =\n/** @class */\nfunction () {\n  function LanguageServiceDefaultsImpl(languageId, diagnosticsOptions, modeConfiguration) {\n    this._onDidChange = new Emitter();\n    this._languageId = languageId;\n    this.setDiagnosticsOptions(diagnosticsOptions);\n    this.setModeConfiguration(modeConfiguration);\n  }\n\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"onDidChange\", {\n    get: function () {\n      return this._onDidChange.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"languageId\", {\n    get: function () {\n      return this._languageId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"modeConfiguration\", {\n    get: function () {\n      return this._modeConfiguration;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"diagnosticsOptions\", {\n    get: function () {\n      return this._diagnosticsOptions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LanguageServiceDefaultsImpl.prototype.setDiagnosticsOptions = function (options) {\n    this._diagnosticsOptions = options || Object.create(null);\n\n    this._onDidChange.fire(this);\n  };\n\n  LanguageServiceDefaultsImpl.prototype.setModeConfiguration = function (modeConfiguration) {\n    this._modeConfiguration = modeConfiguration || Object.create(null);\n\n    this._onDidChange.fire(this);\n  };\n\n  ;\n  return LanguageServiceDefaultsImpl;\n}();\n\nexport { LanguageServiceDefaultsImpl };\nvar diagnosticDefault = {\n  validate: true,\n  allowComments: true,\n  schemas: [],\n  enableSchemaRequest: false\n};\nvar modeConfigurationDefault = {\n  documentFormattingEdits: true,\n  documentRangeFormattingEdits: true,\n  completionItems: true,\n  hovers: true,\n  documentSymbols: true,\n  tokens: true,\n  colors: true,\n  foldingRanges: true,\n  diagnostics: true\n};\nvar jsonDefaults = new LanguageServiceDefaultsImpl('json', diagnosticDefault, modeConfigurationDefault); // Export API\n\nfunction createAPI() {\n  return {\n    jsonDefaults: jsonDefaults\n  };\n}\n\nmonaco.languages.json = createAPI(); // --- Registration to monaco editor ---\n\nfunction getMode() {\n  return import('./jsonMode.js');\n}\n\nmonaco.languages.register({\n  id: 'json',\n  extensions: ['.json', '.bowerrc', '.jshintrc', '.jscsrc', '.eslintrc', '.babelrc', '.har'],\n  aliases: ['JSON', 'json'],\n  mimetypes: ['application/json']\n});\nmonaco.languages.onLanguage('json', function () {\n  getMode().then(function (mode) {\n    return mode.setupMode(jsonDefaults);\n  });\n});","map":null,"metadata":{},"sourceType":"module"}