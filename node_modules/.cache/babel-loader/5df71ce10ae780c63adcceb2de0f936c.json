{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport { Scrollable } from '../../../base/common/scrollable.js';\nimport { LinesLayout } from './linesLayout.js';\nimport { Viewport } from '../viewModel/viewModel.js';\nvar SMOOTH_SCROLLING_TIME = 125;\n\nvar ViewLayout =\n/** @class */\nfunction (_super) {\n  __extends(ViewLayout, _super);\n\n  function ViewLayout(configuration, lineCount, scheduleAtNextAnimationFrame) {\n    var _this = _super.call(this) || this;\n\n    _this._configuration = configuration;\n    _this._linesLayout = new LinesLayout(lineCount, _this._configuration.editor.lineHeight);\n    _this.scrollable = _this._register(new Scrollable(0, scheduleAtNextAnimationFrame));\n\n    _this._configureSmoothScrollDuration();\n\n    _this.scrollable.setScrollDimensions({\n      width: configuration.editor.layoutInfo.contentWidth,\n      height: configuration.editor.layoutInfo.contentHeight\n    });\n\n    _this.onDidScroll = _this.scrollable.onScroll;\n\n    _this._updateHeight();\n\n    return _this;\n  }\n\n  ViewLayout.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n\n  ViewLayout.prototype.onHeightMaybeChanged = function () {\n    this._updateHeight();\n  };\n\n  ViewLayout.prototype._configureSmoothScrollDuration = function () {\n    this.scrollable.setSmoothScrollDuration(this._configuration.editor.viewInfo.smoothScrolling ? SMOOTH_SCROLLING_TIME : 0);\n  }; // ---- begin view event handlers\n\n\n  ViewLayout.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._linesLayout.setLineHeight(this._configuration.editor.lineHeight);\n    }\n\n    if (e.layoutInfo) {\n      this.scrollable.setScrollDimensions({\n        width: this._configuration.editor.layoutInfo.contentWidth,\n        height: this._configuration.editor.layoutInfo.contentHeight\n      });\n    }\n\n    if (e.viewInfo) {\n      this._configureSmoothScrollDuration();\n    }\n\n    this._updateHeight();\n  };\n\n  ViewLayout.prototype.onFlushed = function (lineCount) {\n    this._linesLayout.onFlushed(lineCount);\n  };\n\n  ViewLayout.prototype.onLinesDeleted = function (fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesDeleted(fromLineNumber, toLineNumber);\n  };\n\n  ViewLayout.prototype.onLinesInserted = function (fromLineNumber, toLineNumber) {\n    this._linesLayout.onLinesInserted(fromLineNumber, toLineNumber);\n  }; // ---- end view event handlers\n\n\n  ViewLayout.prototype._getHorizontalScrollbarHeight = function (scrollDimensions) {\n    if (this._configuration.editor.viewInfo.scrollbar.horizontal === 2\n    /* Hidden */\n    ) {\n        // horizontal scrollbar not visible\n        return 0;\n      }\n\n    if (scrollDimensions.width >= scrollDimensions.scrollWidth) {\n      // horizontal scrollbar not visible\n      return 0;\n    }\n\n    return this._configuration.editor.viewInfo.scrollbar.horizontalScrollbarSize;\n  };\n\n  ViewLayout.prototype._getTotalHeight = function () {\n    var scrollDimensions = this.scrollable.getScrollDimensions();\n\n    var result = this._linesLayout.getLinesTotalHeight();\n\n    if (this._configuration.editor.viewInfo.scrollBeyondLastLine) {\n      result += scrollDimensions.height - this._configuration.editor.lineHeight;\n    } else {\n      result += this._getHorizontalScrollbarHeight(scrollDimensions);\n    }\n\n    return Math.max(scrollDimensions.height, result);\n  };\n\n  ViewLayout.prototype._updateHeight = function () {\n    this.scrollable.setScrollDimensions({\n      scrollHeight: this._getTotalHeight()\n    });\n  }; // ---- Layouting logic\n\n\n  ViewLayout.prototype.getCurrentViewport = function () {\n    var scrollDimensions = this.scrollable.getScrollDimensions();\n    var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  };\n\n  ViewLayout.prototype.getFutureViewport = function () {\n    var scrollDimensions = this.scrollable.getScrollDimensions();\n    var currentScrollPosition = this.scrollable.getFutureScrollPosition();\n    return new Viewport(currentScrollPosition.scrollTop, currentScrollPosition.scrollLeft, scrollDimensions.width, scrollDimensions.height);\n  };\n\n  ViewLayout.prototype._computeScrollWidth = function (maxLineWidth, viewportWidth) {\n    var isViewportWrapping = this._configuration.editor.wrappingInfo.isViewportWrapping;\n\n    if (!isViewportWrapping) {\n      var extraHorizontalSpace = this._configuration.editor.viewInfo.scrollBeyondLastColumn * this._configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n\n      var whitespaceMinWidth = this._linesLayout.getWhitespaceMinWidth();\n\n      return Math.max(maxLineWidth + extraHorizontalSpace, viewportWidth, whitespaceMinWidth);\n    }\n\n    return Math.max(maxLineWidth, viewportWidth);\n  };\n\n  ViewLayout.prototype.onMaxLineWidthChanged = function (maxLineWidth) {\n    var newScrollWidth = this._computeScrollWidth(maxLineWidth, this.getCurrentViewport().width);\n\n    this.scrollable.setScrollDimensions({\n      scrollWidth: newScrollWidth\n    }); // The height might depend on the fact that there is a horizontal scrollbar or not\n\n    this._updateHeight();\n  }; // ---- view state\n\n\n  ViewLayout.prototype.saveState = function () {\n    var currentScrollPosition = this.scrollable.getFutureScrollPosition();\n    var scrollTop = currentScrollPosition.scrollTop;\n\n    var firstLineNumberInViewport = this._linesLayout.getLineNumberAtOrAfterVerticalOffset(scrollTop);\n\n    var whitespaceAboveFirstLine = this._linesLayout.getWhitespaceAccumulatedHeightBeforeLineNumber(firstLineNumberInViewport);\n\n    return {\n      scrollTop: scrollTop,\n      scrollTopWithoutViewZones: scrollTop - whitespaceAboveFirstLine,\n      scrollLeft: currentScrollPosition.scrollLeft\n    };\n  }; // ---- IVerticalLayoutProvider\n\n\n  ViewLayout.prototype.addWhitespace = function (afterLineNumber, ordinal, height, minWidth) {\n    return this._linesLayout.insertWhitespace(afterLineNumber, ordinal, height, minWidth);\n  };\n\n  ViewLayout.prototype.changeWhitespace = function (id, newAfterLineNumber, newHeight) {\n    return this._linesLayout.changeWhitespace(id, newAfterLineNumber, newHeight);\n  };\n\n  ViewLayout.prototype.removeWhitespace = function (id) {\n    return this._linesLayout.removeWhitespace(id);\n  };\n\n  ViewLayout.prototype.getVerticalOffsetForLineNumber = function (lineNumber) {\n    return this._linesLayout.getVerticalOffsetForLineNumber(lineNumber);\n  };\n\n  ViewLayout.prototype.isAfterLines = function (verticalOffset) {\n    return this._linesLayout.isAfterLines(verticalOffset);\n  };\n\n  ViewLayout.prototype.getLineNumberAtVerticalOffset = function (verticalOffset) {\n    return this._linesLayout.getLineNumberAtOrAfterVerticalOffset(verticalOffset);\n  };\n\n  ViewLayout.prototype.getWhitespaceAtVerticalOffset = function (verticalOffset) {\n    return this._linesLayout.getWhitespaceAtVerticalOffset(verticalOffset);\n  };\n\n  ViewLayout.prototype.getLinesViewportData = function () {\n    var visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getLinesViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  };\n\n  ViewLayout.prototype.getLinesViewportDataAtScrollTop = function (scrollTop) {\n    // do some minimal validations on scrollTop\n    var scrollDimensions = this.scrollable.getScrollDimensions();\n\n    if (scrollTop + scrollDimensions.height > scrollDimensions.scrollHeight) {\n      scrollTop = scrollDimensions.scrollHeight - scrollDimensions.height;\n    }\n\n    if (scrollTop < 0) {\n      scrollTop = 0;\n    }\n\n    return this._linesLayout.getLinesViewportData(scrollTop, scrollTop + scrollDimensions.height);\n  };\n\n  ViewLayout.prototype.getWhitespaceViewportData = function () {\n    var visibleBox = this.getCurrentViewport();\n    return this._linesLayout.getWhitespaceViewportData(visibleBox.top, visibleBox.top + visibleBox.height);\n  };\n\n  ViewLayout.prototype.getWhitespaces = function () {\n    return this._linesLayout.getWhitespaces();\n  }; // ---- IScrollingProvider\n\n\n  ViewLayout.prototype.getScrollWidth = function () {\n    var scrollDimensions = this.scrollable.getScrollDimensions();\n    return scrollDimensions.scrollWidth;\n  };\n\n  ViewLayout.prototype.getScrollHeight = function () {\n    var scrollDimensions = this.scrollable.getScrollDimensions();\n    return scrollDimensions.scrollHeight;\n  };\n\n  ViewLayout.prototype.getCurrentScrollLeft = function () {\n    var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n    return currentScrollPosition.scrollLeft;\n  };\n\n  ViewLayout.prototype.getCurrentScrollTop = function () {\n    var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n    return currentScrollPosition.scrollTop;\n  };\n\n  ViewLayout.prototype.validateScrollPosition = function (scrollPosition) {\n    return this.scrollable.validateScrollPosition(scrollPosition);\n  };\n\n  ViewLayout.prototype.setScrollPositionNow = function (position) {\n    this.scrollable.setScrollPositionNow(position);\n  };\n\n  ViewLayout.prototype.setScrollPositionSmooth = function (position) {\n    this.scrollable.setScrollPositionSmooth(position);\n  };\n\n  ViewLayout.prototype.deltaScrollNow = function (deltaScrollLeft, deltaScrollTop) {\n    var currentScrollPosition = this.scrollable.getCurrentScrollPosition();\n    this.scrollable.setScrollPositionNow({\n      scrollLeft: currentScrollPosition.scrollLeft + deltaScrollLeft,\n      scrollTop: currentScrollPosition.scrollTop + deltaScrollTop\n    });\n  };\n\n  return ViewLayout;\n}(Disposable);\n\nexport { ViewLayout };","map":null,"metadata":{},"sourceType":"module"}