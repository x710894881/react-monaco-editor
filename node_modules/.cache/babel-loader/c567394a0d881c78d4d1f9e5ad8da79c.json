{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { TimeoutTimer } from '../../../common/async.js';\nimport { Disposable } from '../../../common/lifecycle.js';\n\nvar ScrollbarVisibilityController =\n/** @class */\nfunction (_super) {\n  __extends(ScrollbarVisibilityController, _super);\n\n  function ScrollbarVisibilityController(visibility, visibleClassName, invisibleClassName) {\n    var _this = _super.call(this) || this;\n\n    _this._visibility = visibility;\n    _this._visibleClassName = visibleClassName;\n    _this._invisibleClassName = invisibleClassName;\n    _this._domNode = null;\n    _this._isVisible = false;\n    _this._isNeeded = false;\n    _this._shouldBeVisible = false;\n    _this._revealTimer = _this._register(new TimeoutTimer());\n    return _this;\n  } // ----------------- Hide / Reveal\n\n\n  ScrollbarVisibilityController.prototype.applyVisibilitySetting = function (shouldBeVisible) {\n    if (this._visibility === 2\n    /* Hidden */\n    ) {\n        return false;\n      }\n\n    if (this._visibility === 3\n    /* Visible */\n    ) {\n        return true;\n      }\n\n    return shouldBeVisible;\n  };\n\n  ScrollbarVisibilityController.prototype.setShouldBeVisible = function (rawShouldBeVisible) {\n    var shouldBeVisible = this.applyVisibilitySetting(rawShouldBeVisible);\n\n    if (this._shouldBeVisible !== shouldBeVisible) {\n      this._shouldBeVisible = shouldBeVisible;\n      this.ensureVisibility();\n    }\n  };\n\n  ScrollbarVisibilityController.prototype.setIsNeeded = function (isNeeded) {\n    if (this._isNeeded !== isNeeded) {\n      this._isNeeded = isNeeded;\n      this.ensureVisibility();\n    }\n  };\n\n  ScrollbarVisibilityController.prototype.setDomNode = function (domNode) {\n    this._domNode = domNode;\n\n    this._domNode.setClassName(this._invisibleClassName); // Now that the flags & the dom node are in a consistent state, ensure the Hidden/Visible configuration\n\n\n    this.setShouldBeVisible(false);\n  };\n\n  ScrollbarVisibilityController.prototype.ensureVisibility = function () {\n    if (!this._isNeeded) {\n      // Nothing to be rendered\n      this._hide(false);\n\n      return;\n    }\n\n    if (this._shouldBeVisible) {\n      this._reveal();\n    } else {\n      this._hide(true);\n    }\n  };\n\n  ScrollbarVisibilityController.prototype._reveal = function () {\n    var _this = this;\n\n    if (this._isVisible) {\n      return;\n    }\n\n    this._isVisible = true; // The CSS animation doesn't play otherwise\n\n    this._revealTimer.setIfNotSet(function () {\n      if (_this._domNode) {\n        _this._domNode.setClassName(_this._visibleClassName);\n      }\n    }, 0);\n  };\n\n  ScrollbarVisibilityController.prototype._hide = function (withFadeAway) {\n    this._revealTimer.cancel();\n\n    if (!this._isVisible) {\n      return;\n    }\n\n    this._isVisible = false;\n\n    if (this._domNode) {\n      this._domNode.setClassName(this._invisibleClassName + (withFadeAway ? ' fade' : ''));\n    }\n  };\n\n  return ScrollbarVisibilityController;\n}(Disposable);\n\nexport { ScrollbarVisibilityController };","map":null,"metadata":{},"sourceType":"module"}