{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as types from '../../../base/common/types.js';\nimport { CursorState, SingleCursorState } from './cursorCommon.js';\nimport { MoveOperations } from './cursorMoveOperations.js';\nimport { WordOperations } from './cursorWordOperations.js';\nimport { Position } from '../core/position.js';\nimport { Range } from '../core/range.js';\n\nvar CursorMoveCommands =\n/** @class */\nfunction () {\n  function CursorMoveCommands() {}\n\n  CursorMoveCommands.addCursorDown = function (context, cursors, useLogicalLine) {\n    var result = [],\n        resultLen = 0;\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateDown(context.config, context.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateDown(context.config, context.viewModel, cursor.viewState));\n      }\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.addCursorUp = function (context, cursors, useLogicalLine) {\n    var result = [],\n        resultLen = 0;\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[resultLen++] = new CursorState(cursor.modelState, cursor.viewState);\n\n      if (useLogicalLine) {\n        result[resultLen++] = CursorState.fromModelState(MoveOperations.translateUp(context.config, context.model, cursor.modelState));\n      } else {\n        result[resultLen++] = CursorState.fromViewState(MoveOperations.translateUp(context.config, context.viewModel, cursor.viewState));\n      }\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.moveToBeginningOfLine = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = this._moveToLineStart(context, cursor, inSelectionMode);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToLineStart = function (context, cursor, inSelectionMode) {\n    var currentViewStateColumn = cursor.viewState.position.column;\n    var currentModelStateColumn = cursor.modelState.position.column;\n    var isFirstLineOfWrappedLine = currentViewStateColumn === currentModelStateColumn;\n    var currentViewStatelineNumber = cursor.viewState.position.lineNumber;\n    var firstNonBlankColumn = context.viewModel.getLineFirstNonWhitespaceColumn(currentViewStatelineNumber);\n    var isBeginningOfViewLine = currentViewStateColumn === firstNonBlankColumn;\n\n    if (!isFirstLineOfWrappedLine && !isBeginningOfViewLine) {\n      return this._moveToLineStartByView(context, cursor, inSelectionMode);\n    } else {\n      return this._moveToLineStartByModel(context, cursor, inSelectionMode);\n    }\n  };\n\n  CursorMoveCommands._moveToLineStartByView = function (context, cursor, inSelectionMode) {\n    return CursorState.fromViewState(MoveOperations.moveToBeginningOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n  };\n\n  CursorMoveCommands._moveToLineStartByModel = function (context, cursor, inSelectionMode) {\n    return CursorState.fromModelState(MoveOperations.moveToBeginningOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n  };\n\n  CursorMoveCommands.moveToEndOfLine = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = this._moveToLineEnd(context, cursor, inSelectionMode);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToLineEnd = function (context, cursor, inSelectionMode) {\n    var viewStatePosition = cursor.viewState.position;\n    var viewModelMaxColumn = context.viewModel.getLineMaxColumn(viewStatePosition.lineNumber);\n    var isEndOfViewLine = viewStatePosition.column === viewModelMaxColumn;\n    var modelStatePosition = cursor.modelState.position;\n    var modelMaxColumn = context.model.getLineMaxColumn(modelStatePosition.lineNumber);\n    var isEndLineOfWrappedLine = viewModelMaxColumn - viewStatePosition.column === modelMaxColumn - modelStatePosition.column;\n\n    if (isEndOfViewLine || isEndLineOfWrappedLine) {\n      return this._moveToLineEndByModel(context, cursor, inSelectionMode);\n    } else {\n      return this._moveToLineEndByView(context, cursor, inSelectionMode);\n    }\n  };\n\n  CursorMoveCommands._moveToLineEndByView = function (context, cursor, inSelectionMode) {\n    return CursorState.fromViewState(MoveOperations.moveToEndOfLine(context.config, context.viewModel, cursor.viewState, inSelectionMode));\n  };\n\n  CursorMoveCommands._moveToLineEndByModel = function (context, cursor, inSelectionMode) {\n    return CursorState.fromModelState(MoveOperations.moveToEndOfLine(context.config, context.model, cursor.modelState, inSelectionMode));\n  };\n\n  CursorMoveCommands.expandLineSelection = function (context, cursors) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewSelection = cursor.viewState.selection;\n      var startLineNumber = viewSelection.startLineNumber;\n      var lineCount = context.viewModel.getLineCount();\n      var endLineNumber = viewSelection.endLineNumber;\n      var endColumn = void 0;\n\n      if (endLineNumber === lineCount) {\n        endColumn = context.viewModel.getLineMaxColumn(lineCount);\n      } else {\n        endLineNumber++;\n        endColumn = 1;\n      }\n\n      result[i] = CursorState.fromViewState(new SingleCursorState(new Range(startLineNumber, 1, startLineNumber, 1), 0, new Position(endLineNumber, endColumn), 0));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.moveToBeginningOfBuffer = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToBeginningOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.moveToEndOfBuffer = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveToEndOfBuffer(context.config, context.model, cursor.modelState, inSelectionMode));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands.selectAll = function (context, cursor) {\n    var lineCount = context.model.getLineCount();\n    var maxColumn = context.model.getLineMaxColumn(lineCount);\n    return CursorState.fromModelState(new SingleCursorState(new Range(1, 1, 1, 1), 0, new Position(lineCount, maxColumn), 0));\n  };\n\n  CursorMoveCommands.line = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n    var position = context.model.validatePosition(_position);\n    var viewPosition = _viewPosition ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : context.convertModelPositionToViewPosition(position);\n\n    if (!inSelectionMode || !cursor.modelState.hasSelection()) {\n      // Entering line selection for the first time\n      var lineCount = context.model.getLineCount();\n      var selectToLineNumber = position.lineNumber + 1;\n      var selectToColumn = 1;\n\n      if (selectToLineNumber > lineCount) {\n        selectToLineNumber = lineCount;\n        selectToColumn = context.model.getLineMaxColumn(selectToLineNumber);\n      }\n\n      return CursorState.fromModelState(new SingleCursorState(new Range(position.lineNumber, 1, selectToLineNumber, selectToColumn), 0, new Position(selectToLineNumber, selectToColumn), 0));\n    } // Continuing line selection\n\n\n    var enteringLineNumber = cursor.modelState.selectionStart.getStartPosition().lineNumber;\n\n    if (position.lineNumber < enteringLineNumber) {\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), viewPosition.lineNumber, 1, 0));\n    } else if (position.lineNumber > enteringLineNumber) {\n      var lineCount = context.viewModel.getLineCount();\n      var selectToViewLineNumber = viewPosition.lineNumber + 1;\n      var selectToViewColumn = 1;\n\n      if (selectToViewLineNumber > lineCount) {\n        selectToViewLineNumber = lineCount;\n        selectToViewColumn = context.viewModel.getLineMaxColumn(selectToViewLineNumber);\n      }\n\n      return CursorState.fromViewState(cursor.viewState.move(cursor.modelState.hasSelection(), selectToViewLineNumber, selectToViewColumn, 0));\n    } else {\n      var endPositionOfSelectionStart = cursor.modelState.selectionStart.getEndPosition();\n      return CursorState.fromModelState(cursor.modelState.move(cursor.modelState.hasSelection(), endPositionOfSelectionStart.lineNumber, endPositionOfSelectionStart.column, 0));\n    }\n  };\n\n  CursorMoveCommands.word = function (context, cursor, inSelectionMode, _position) {\n    var position = context.model.validatePosition(_position);\n    return CursorState.fromModelState(WordOperations.word(context.config, context.model, cursor.modelState, inSelectionMode, position));\n  };\n\n  CursorMoveCommands.cancelSelection = function (context, cursor) {\n    if (!cursor.modelState.hasSelection()) {\n      return new CursorState(cursor.modelState, cursor.viewState);\n    }\n\n    var lineNumber = cursor.viewState.position.lineNumber;\n    var column = cursor.viewState.position.column;\n    return CursorState.fromViewState(new SingleCursorState(new Range(lineNumber, column, lineNumber, column), 0, new Position(lineNumber, column), 0));\n  };\n\n  CursorMoveCommands.moveTo = function (context, cursor, inSelectionMode, _position, _viewPosition) {\n    var position = context.model.validatePosition(_position);\n    var viewPosition = _viewPosition ? context.validateViewPosition(new Position(_viewPosition.lineNumber, _viewPosition.column), position) : context.convertModelPositionToViewPosition(position);\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, viewPosition.lineNumber, viewPosition.column, 0));\n  };\n\n  CursorMoveCommands.move = function (context, cursors, args) {\n    var inSelectionMode = args.select;\n    var value = args.value;\n\n    switch (args.direction) {\n      case 0\n      /* Left */\n      :\n        {\n          if (args.unit === 4\n          /* HalfLine */\n          ) {\n              // Move left by half the current line length\n              return this._moveHalfLineLeft(context, cursors, inSelectionMode);\n            } else {\n            // Move left by `moveParams.value` columns\n            return this._moveLeft(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 1\n      /* Right */\n      :\n        {\n          if (args.unit === 4\n          /* HalfLine */\n          ) {\n              // Move right by half the current line length\n              return this._moveHalfLineRight(context, cursors, inSelectionMode);\n            } else {\n            // Move right by `moveParams.value` columns\n            return this._moveRight(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 2\n      /* Up */\n      :\n        {\n          if (args.unit === 2\n          /* WrappedLine */\n          ) {\n              // Move up by view lines\n              return this._moveUpByViewLines(context, cursors, inSelectionMode, value);\n            } else {\n            // Move up by model lines\n            return this._moveUpByModelLines(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 3\n      /* Down */\n      :\n        {\n          if (args.unit === 2\n          /* WrappedLine */\n          ) {\n              // Move down by view lines\n              return this._moveDownByViewLines(context, cursors, inSelectionMode, value);\n            } else {\n            // Move down by model lines\n            return this._moveDownByModelLines(context, cursors, inSelectionMode, value);\n          }\n        }\n\n      case 4\n      /* WrappedLineStart */\n      :\n        {\n          // Move to the beginning of the current view line\n          return this._moveToViewMinColumn(context, cursors, inSelectionMode);\n        }\n\n      case 5\n      /* WrappedLineFirstNonWhitespaceCharacter */\n      :\n        {\n          // Move to the first non-whitespace column of the current view line\n          return this._moveToViewFirstNonWhitespaceColumn(context, cursors, inSelectionMode);\n        }\n\n      case 6\n      /* WrappedLineColumnCenter */\n      :\n        {\n          // Move to the \"center\" of the current view line\n          return this._moveToViewCenterColumn(context, cursors, inSelectionMode);\n        }\n\n      case 7\n      /* WrappedLineEnd */\n      :\n        {\n          // Move to the end of the current view line\n          return this._moveToViewMaxColumn(context, cursors, inSelectionMode);\n        }\n\n      case 8\n      /* WrappedLineLastNonWhitespaceCharacter */\n      :\n        {\n          // Move to the last non-whitespace column of the current view line\n          return this._moveToViewLastNonWhitespaceColumn(context, cursors, inSelectionMode);\n        }\n\n      case 9\n      /* ViewPortTop */\n      :\n        {\n          // Move to the nth line start in the viewport (from the top)\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n\n          var modelLineNumber = this._firstLineNumberInRange(context.model, visibleModelRange, value);\n\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 11\n      /* ViewPortBottom */\n      :\n        {\n          // Move to the nth line start in the viewport (from the bottom)\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n\n          var modelLineNumber = this._lastLineNumberInRange(context.model, visibleModelRange, value);\n\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 10\n      /* ViewPortCenter */\n      :\n        {\n          // Move to the line start in the viewport center\n          var cursor = cursors[0];\n          var visibleModelRange = context.getCompletelyVisibleModelRange();\n          var modelLineNumber = Math.round((visibleModelRange.startLineNumber + visibleModelRange.endLineNumber) / 2);\n          var modelColumn = context.model.getLineFirstNonWhitespaceColumn(modelLineNumber);\n          return [this._moveToModelPosition(context, cursor, inSelectionMode, modelLineNumber, modelColumn)];\n        }\n\n      case 12\n      /* ViewPortIfOutside */\n      :\n        {\n          // Move to a position inside the viewport\n          var visibleViewRange = context.getCompletelyVisibleViewRange();\n          var result = [];\n\n          for (var i = 0, len = cursors.length; i < len; i++) {\n            var cursor = cursors[i];\n            result[i] = this.findPositionInViewportIfOutside(context, cursor, visibleViewRange, inSelectionMode);\n          }\n\n          return result;\n        }\n    }\n\n    return null;\n  };\n\n  CursorMoveCommands.findPositionInViewportIfOutside = function (context, cursor, visibleViewRange, inSelectionMode) {\n    var viewLineNumber = cursor.viewState.position.lineNumber;\n\n    if (visibleViewRange.startLineNumber <= viewLineNumber && viewLineNumber <= visibleViewRange.endLineNumber - 1) {\n      // Nothing to do, cursor is in viewport\n      return new CursorState(cursor.modelState, cursor.viewState);\n    } else {\n      if (viewLineNumber > visibleViewRange.endLineNumber - 1) {\n        viewLineNumber = visibleViewRange.endLineNumber - 1;\n      }\n\n      if (viewLineNumber < visibleViewRange.startLineNumber) {\n        viewLineNumber = visibleViewRange.startLineNumber;\n      }\n\n      var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n      return this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n  };\n  /**\n   * Find the nth line start included in the range (from the start).\n   */\n\n\n  CursorMoveCommands._firstLineNumberInRange = function (model, range, count) {\n    var startLineNumber = range.startLineNumber;\n\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n\n    return Math.min(range.endLineNumber, startLineNumber + count - 1);\n  };\n  /**\n   * Find the nth line start included in the range (from the end).\n   */\n\n\n  CursorMoveCommands._lastLineNumberInRange = function (model, range, count) {\n    var startLineNumber = range.startLineNumber;\n\n    if (range.startColumn !== model.getLineMinColumn(startLineNumber)) {\n      // Move on to the second line if the first line start is not included in the range\n      startLineNumber++;\n    }\n\n    return Math.max(startLineNumber, range.endLineNumber - count + 1);\n  };\n\n  CursorMoveCommands._moveLeft = function (context, cursors, inSelectionMode, noOfColumns) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var newViewState = MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n      if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n        // moved over to the previous view line\n        var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\n        if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n          // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n          newViewState = MoveOperations.moveLeft(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n        }\n      }\n\n      result[i] = CursorState.fromViewState(newViewState);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveHalfLineLeft = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveLeft(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveRight = function (context, cursors, inSelectionMode, noOfColumns) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var newViewState = MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, noOfColumns);\n\n      if (noOfColumns === 1 && newViewState.position.lineNumber !== cursor.viewState.position.lineNumber) {\n        // moved over to the next view line\n        var newViewModelPosition = context.viewModel.coordinatesConverter.convertViewPositionToModelPosition(newViewState.position);\n\n        if (newViewModelPosition.lineNumber === cursor.modelState.position.lineNumber) {\n          // stayed on the same model line => pass wrapping point where 2 view positions map to a single model position\n          newViewState = MoveOperations.moveRight(context.config, context.viewModel, newViewState, inSelectionMode, 1);\n        }\n      }\n\n      result[i] = CursorState.fromViewState(newViewState);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveHalfLineRight = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var halfLine = Math.round(context.viewModel.getLineContent(viewLineNumber).length / 2);\n      result[i] = CursorState.fromViewState(MoveOperations.moveRight(context.config, context.viewModel, cursor.viewState, inSelectionMode, halfLine));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveDownByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveDown(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveDownByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveDown(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveUpByViewLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromViewState(MoveOperations.moveUp(context.config, context.viewModel, cursor.viewState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveUpByModelLines = function (context, cursors, inSelectionMode, linesCount) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      result[i] = CursorState.fromModelState(MoveOperations.moveUp(context.config, context.model, cursor.modelState, inSelectionMode, linesCount));\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewPosition = function (context, cursor, inSelectionMode, toViewLineNumber, toViewColumn) {\n    return CursorState.fromViewState(cursor.viewState.move(inSelectionMode, toViewLineNumber, toViewColumn, 0));\n  };\n\n  CursorMoveCommands._moveToModelPosition = function (context, cursor, inSelectionMode, toModelLineNumber, toModelColumn) {\n    return CursorState.fromModelState(cursor.modelState.move(inSelectionMode, toModelLineNumber, toModelColumn, 0));\n  };\n\n  CursorMoveCommands._moveToViewMinColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineMinColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewFirstNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineFirstNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewCenterColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = Math.round((context.viewModel.getLineMaxColumn(viewLineNumber) + context.viewModel.getLineMinColumn(viewLineNumber)) / 2);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewMaxColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineMaxColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  CursorMoveCommands._moveToViewLastNonWhitespaceColumn = function (context, cursors, inSelectionMode) {\n    var result = [];\n\n    for (var i = 0, len = cursors.length; i < len; i++) {\n      var cursor = cursors[i];\n      var viewLineNumber = cursor.viewState.position.lineNumber;\n      var viewColumn = context.viewModel.getLineLastNonWhitespaceColumn(viewLineNumber);\n      result[i] = this._moveToViewPosition(context, cursor, inSelectionMode, viewLineNumber, viewColumn);\n    }\n\n    return result;\n  };\n\n  return CursorMoveCommands;\n}();\n\nexport { CursorMoveCommands };\nexport var CursorMove;\n\n(function (CursorMove) {\n  var isCursorMoveArgs = function (arg) {\n    if (!types.isObject(arg)) {\n      return false;\n    }\n\n    var cursorMoveArg = arg;\n\n    if (!types.isString(cursorMoveArg.to)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.select) && !types.isBoolean(cursorMoveArg.select)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.by) && !types.isString(cursorMoveArg.by)) {\n      return false;\n    }\n\n    if (!types.isUndefined(cursorMoveArg.value) && !types.isNumber(cursorMoveArg.value)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  CursorMove.description = {\n    description: 'Move cursor to a logical position in the view',\n    args: [{\n      name: 'Cursor move argument object',\n      description: \"Property-value pairs that can be passed through this argument:\\n\\t\\t\\t\\t\\t* 'to': A mandatory logical position value providing where to move the cursor.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'left', 'right', 'up', 'down'\\n\\t\\t\\t\\t\\t\\t'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter'\\n\\t\\t\\t\\t\\t\\t'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter'\\n\\t\\t\\t\\t\\t\\t'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'by': Unit to move. Default is computed based on 'to' value.\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t\\t'line', 'wrappedLine', 'character', 'halfLine'\\n\\t\\t\\t\\t\\t\\t```\\n\\t\\t\\t\\t\\t* 'value': Number of units to move. Default is '1'.\\n\\t\\t\\t\\t\\t* 'select': If 'true' makes the selection. Default is 'false'.\\n\\t\\t\\t\\t\",\n      constraint: isCursorMoveArgs,\n      schema: {\n        'type': 'object',\n        'required': ['to'],\n        'properties': {\n          'to': {\n            'type': 'string',\n            'enum': ['left', 'right', 'up', 'down', 'wrappedLineStart', 'wrappedLineEnd', 'wrappedLineColumnCenter', 'wrappedLineFirstNonWhitespaceCharacter', 'wrappedLineLastNonWhitespaceCharacter', 'viewPortTop', 'viewPortCenter', 'viewPortBottom', 'viewPortIfOutside']\n          },\n          'by': {\n            'type': 'string',\n            'enum': ['line', 'wrappedLine', 'character', 'halfLine']\n          },\n          'value': {\n            'type': 'number',\n            'default': 1\n          },\n          'select': {\n            'type': 'boolean',\n            'default': false\n          }\n        }\n      }\n    }]\n  };\n  /**\n   * Positions in the view for cursor move command.\n   */\n\n  CursorMove.RawDirection = {\n    Left: 'left',\n    Right: 'right',\n    Up: 'up',\n    Down: 'down',\n    WrappedLineStart: 'wrappedLineStart',\n    WrappedLineFirstNonWhitespaceCharacter: 'wrappedLineFirstNonWhitespaceCharacter',\n    WrappedLineColumnCenter: 'wrappedLineColumnCenter',\n    WrappedLineEnd: 'wrappedLineEnd',\n    WrappedLineLastNonWhitespaceCharacter: 'wrappedLineLastNonWhitespaceCharacter',\n    ViewPortTop: 'viewPortTop',\n    ViewPortCenter: 'viewPortCenter',\n    ViewPortBottom: 'viewPortBottom',\n    ViewPortIfOutside: 'viewPortIfOutside'\n  };\n  /**\n   * Units for Cursor move 'by' argument\n   */\n\n  CursorMove.RawUnit = {\n    Line: 'line',\n    WrappedLine: 'wrappedLine',\n    Character: 'character',\n    HalfLine: 'halfLine'\n  };\n\n  function parse(args) {\n    if (!args.to) {\n      // illegal arguments\n      return null;\n    }\n\n    var direction;\n\n    switch (args.to) {\n      case CursorMove.RawDirection.Left:\n        direction = 0\n        /* Left */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Right:\n        direction = 1\n        /* Right */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Up:\n        direction = 2\n        /* Up */\n        ;\n        break;\n\n      case CursorMove.RawDirection.Down:\n        direction = 3\n        /* Down */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineStart:\n        direction = 4\n        /* WrappedLineStart */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineFirstNonWhitespaceCharacter:\n        direction = 5\n        /* WrappedLineFirstNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineColumnCenter:\n        direction = 6\n        /* WrappedLineColumnCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineEnd:\n        direction = 7\n        /* WrappedLineEnd */\n        ;\n        break;\n\n      case CursorMove.RawDirection.WrappedLineLastNonWhitespaceCharacter:\n        direction = 8\n        /* WrappedLineLastNonWhitespaceCharacter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortTop:\n        direction = 9\n        /* ViewPortTop */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortBottom:\n        direction = 11\n        /* ViewPortBottom */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortCenter:\n        direction = 10\n        /* ViewPortCenter */\n        ;\n        break;\n\n      case CursorMove.RawDirection.ViewPortIfOutside:\n        direction = 12\n        /* ViewPortIfOutside */\n        ;\n        break;\n\n      default:\n        // illegal arguments\n        return null;\n    }\n\n    var unit = 0\n    /* None */\n    ;\n\n    switch (args.by) {\n      case CursorMove.RawUnit.Line:\n        unit = 1\n        /* Line */\n        ;\n        break;\n\n      case CursorMove.RawUnit.WrappedLine:\n        unit = 2\n        /* WrappedLine */\n        ;\n        break;\n\n      case CursorMove.RawUnit.Character:\n        unit = 3\n        /* Character */\n        ;\n        break;\n\n      case CursorMove.RawUnit.HalfLine:\n        unit = 4\n        /* HalfLine */\n        ;\n        break;\n    }\n\n    return {\n      direction: direction,\n      unit: unit,\n      select: !!args.select,\n      value: args.value || 1\n    };\n  }\n\n  CursorMove.parse = parse;\n})(CursorMove || (CursorMove = {}));","map":null,"metadata":{},"sourceType":"module"}