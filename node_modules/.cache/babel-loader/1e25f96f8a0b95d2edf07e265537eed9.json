{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport { IContextKeyService, ContextKeyExpr, RawContextKey } from '../contextkey/common/contextkey.js';\nimport { FindInput } from '../../base/browser/ui/findinput/findInput.js';\nimport { KeybindingsRegistry } from '../keybinding/common/keybindingsRegistry.js';\nimport { ReplaceInput } from '../../base/browser/ui/findinput/replaceInput.js';\nexport var HistoryNavigationWidgetContext = 'historyNavigationWidget';\nexport var HistoryNavigationEnablementContext = 'historyNavigationEnabled';\n\nfunction bindContextScopedWidget(contextKeyService, widget, contextKey) {\n  new RawContextKey(contextKey, widget).bindTo(contextKeyService);\n}\n\nfunction createWidgetScopedContextKeyService(contextKeyService, widget) {\n  return contextKeyService.createScoped(widget.target);\n}\n\nfunction getContextScopedWidget(contextKeyService, contextKey) {\n  return contextKeyService.getContext(document.activeElement).getValue(contextKey);\n}\n\nexport function createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, widget) {\n  var scopedContextKeyService = createWidgetScopedContextKeyService(contextKeyService, widget);\n  bindContextScopedWidget(scopedContextKeyService, widget, HistoryNavigationWidgetContext);\n  var historyNavigationEnablement = new RawContextKey(HistoryNavigationEnablementContext, true).bindTo(scopedContextKeyService);\n  return {\n    scopedContextKeyService: scopedContextKeyService,\n    historyNavigationEnablement: historyNavigationEnablement\n  };\n}\n\nvar ContextScopedFindInput =\n/** @class */\nfunction (_super) {\n  __extends(ContextScopedFindInput, _super);\n\n  function ContextScopedFindInput(container, contextViewProvider, options, contextKeyService, showFindOptions) {\n    if (showFindOptions === void 0) {\n      showFindOptions = false;\n    }\n\n    var _this = _super.call(this, container, contextViewProvider, showFindOptions, options) || this;\n\n    _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, {\n      target: _this.inputBox.element,\n      historyNavigator: _this.inputBox\n    }).scopedContextKeyService);\n\n    return _this;\n  }\n\n  ContextScopedFindInput = __decorate([__param(3, IContextKeyService)], ContextScopedFindInput);\n  return ContextScopedFindInput;\n}(FindInput);\n\nexport { ContextScopedFindInput };\n\nvar ContextScopedReplaceInput =\n/** @class */\nfunction (_super) {\n  __extends(ContextScopedReplaceInput, _super);\n\n  function ContextScopedReplaceInput(container, contextViewProvider, options, contextKeyService, showReplaceOptions) {\n    if (showReplaceOptions === void 0) {\n      showReplaceOptions = false;\n    }\n\n    var _this = _super.call(this, container, contextViewProvider, showReplaceOptions, options) || this;\n\n    _this._register(createAndBindHistoryNavigationWidgetScopedContextKeyService(contextKeyService, {\n      target: _this.inputBox.element,\n      historyNavigator: _this.inputBox\n    }).scopedContextKeyService);\n\n    return _this;\n  }\n\n  ContextScopedReplaceInput = __decorate([__param(3, IContextKeyService)], ContextScopedReplaceInput);\n  return ContextScopedReplaceInput;\n}(ReplaceInput);\n\nexport { ContextScopedReplaceInput };\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n  id: 'history.showPrevious',\n  weight: 200\n  /* WorkbenchContrib */\n  ,\n  when: ContextKeyExpr.and(ContextKeyExpr.has(HistoryNavigationWidgetContext), ContextKeyExpr.equals(HistoryNavigationEnablementContext, true)),\n  primary: 16\n  /* UpArrow */\n  ,\n  secondary: [512\n  /* Alt */\n  | 16\n  /* UpArrow */\n  ],\n  handler: function (accessor, arg2) {\n    var widget = getContextScopedWidget(accessor.get(IContextKeyService), HistoryNavigationWidgetContext);\n\n    if (widget) {\n      var historyInputBox = widget.historyNavigator;\n      historyInputBox.showPreviousValue();\n    }\n  }\n});\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n  id: 'history.showNext',\n  weight: 200\n  /* WorkbenchContrib */\n  ,\n  when: ContextKeyExpr.and(ContextKeyExpr.has(HistoryNavigationWidgetContext), ContextKeyExpr.equals(HistoryNavigationEnablementContext, true)),\n  primary: 18\n  /* DownArrow */\n  ,\n  secondary: [512\n  /* Alt */\n  | 18\n  /* DownArrow */\n  ],\n  handler: function (accessor, arg2) {\n    var widget = getContextScopedWidget(accessor.get(IContextKeyService), HistoryNavigationWidgetContext);\n\n    if (widget) {\n      var historyInputBox = widget.historyNavigator;\n      historyInputBox.showNextValue();\n    }\n  }\n});","map":null,"metadata":{},"sourceType":"module"}