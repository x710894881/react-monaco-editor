{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport { includes } from '../utils/arrays.js';\n\nvar Element =\n/** @class */\nfunction () {\n  function Element(text, data) {\n    this.name = text;\n    this.node = data;\n  }\n\n  return Element;\n}();\n\nexport { Element };\n\nfunction setSide(model, side, value, property) {\n  var state = model[side];\n  state.value = value;\n\n  if (value) {\n    if (!includes(state.properties, property)) {\n      state.properties.push(property);\n    }\n  }\n}\n\nfunction setAllSides(model, value, property) {\n  setSide(model, 'top', value, property);\n  setSide(model, 'right', value, property);\n  setSide(model, 'bottom', value, property);\n  setSide(model, 'left', value, property);\n}\n\nfunction updateModelWithValue(model, side, value, property) {\n  if (side === 'top' || side === 'right' || side === 'bottom' || side === 'left') {\n    setSide(model, side, value, property);\n  } else {\n    setAllSides(model, value, property);\n  }\n}\n\nfunction updateModelWithList(model, values, property) {\n  switch (values.length) {\n    case 1:\n      updateModelWithValue(model, undefined, values[0], property);\n      break;\n\n    case 2:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'bottom', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'left', values[1], property);\n      break;\n\n    case 3:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'left', values[1], property);\n      updateModelWithValue(model, 'bottom', values[2], property);\n      break;\n\n    case 4:\n      updateModelWithValue(model, 'top', values[0], property);\n      updateModelWithValue(model, 'right', values[1], property);\n      updateModelWithValue(model, 'bottom', values[2], property);\n      updateModelWithValue(model, 'left', values[3], property);\n      break;\n  }\n}\n/**\n * @param allowsKeywords whether the initial value of property is zero, so keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\n\n\nfunction checkLineWidth(value, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  if (allowsKeywords && includes(['initial', 'unset'], value)) {\n    return false;\n  } // a <length> is a value and a unit\n  // so use `parseFloat` to strip the unit\n\n\n  return parseFloat(value) !== 0;\n}\n\nfunction checkLineWidthList(nodes, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  return nodes.map(function (node) {\n    return checkLineWidth(node.getText(), allowsKeywords);\n  });\n}\n/**\n * @param allowsKeywords whether keywords `initial` and `unset` count as zero\n * @return `true` if this node represents a non-zero border; otherwise, `false`\n */\n\n\nfunction checkLineStyle(value, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  if (includes(['none', 'hidden'], value)) {\n    return false;\n  }\n\n  if (allowsKeywords && includes(['initial', 'unset'], value)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction checkLineStyleList(nodes, allowsKeywords) {\n  if (allowsKeywords === void 0) {\n    allowsKeywords = true;\n  }\n\n  return nodes.map(function (node) {\n    return checkLineStyle(node.getText(), allowsKeywords);\n  });\n}\n\nfunction checkBorderShorthand(node) {\n  var children = node.getChildren(); // the only child can be a keyword, a <line-width>, or a <line-style>\n  // if either check returns false, the result is no border\n\n  if (children.length === 1) {\n    var value = children[0].getText();\n    return checkLineWidth(value) && checkLineStyle(value);\n  } // multiple children can't contain keywords\n  // if any child means no border, the result is no border\n\n\n  for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n    var child = children_1[_i];\n    var value = child.getText();\n\n    if (!checkLineWidth(value,\n    /* allowsKeywords: */\n    false) || !checkLineStyle(value,\n    /* allowsKeywords: */\n    false)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexport default function calculateBoxModel(propertyTable) {\n  var model = {\n    top: {\n      value: false,\n      properties: []\n    },\n    right: {\n      value: false,\n      properties: []\n    },\n    bottom: {\n      value: false,\n      properties: []\n    },\n    left: {\n      value: false,\n      properties: []\n    }\n  };\n\n  for (var _i = 0, propertyTable_1 = propertyTable; _i < propertyTable_1.length; _i++) {\n    var property = propertyTable_1[_i];\n    var value = property.node.value;\n\n    if (typeof value === 'undefined') {\n      continue;\n    }\n\n    switch (property.name) {\n      case 'box-sizing':\n        // has `box-sizing`, bail out\n        return {\n          top: {\n            value: false,\n            properties: []\n          },\n          right: {\n            value: false,\n            properties: []\n          },\n          bottom: {\n            value: false,\n            properties: []\n          },\n          left: {\n            value: false,\n            properties: []\n          }\n        };\n\n      case 'width':\n        model.width = property;\n        break;\n\n      case 'height':\n        model.height = property;\n        break;\n\n      default:\n        var segments = property.name.split('-');\n\n        switch (segments[0]) {\n          case 'border':\n            switch (segments[1]) {\n              case undefined:\n              case 'top':\n              case 'right':\n              case 'bottom':\n              case 'left':\n                switch (segments[2]) {\n                  case undefined:\n                    updateModelWithValue(model, segments[1], checkBorderShorthand(value), property);\n                    break;\n\n                  case 'width':\n                    // the initial value of `border-width` is `medium`, not zero\n                    updateModelWithValue(model, segments[1], checkLineWidth(value.getText(), false), property);\n                    break;\n\n                  case 'style':\n                    // the initial value of `border-style` is `none`\n                    updateModelWithValue(model, segments[1], checkLineStyle(value.getText(), true), property);\n                    break;\n                }\n\n                break;\n\n              case 'width':\n                // the initial value of `border-width` is `medium`, not zero\n                updateModelWithList(model, checkLineWidthList(value.getChildren(), false), property);\n                break;\n\n              case 'style':\n                // the initial value of `border-style` is `none`\n                updateModelWithList(model, checkLineStyleList(value.getChildren(), true), property);\n                break;\n            }\n\n            break;\n\n          case 'padding':\n            if (segments.length === 1) {\n              // the initial value of `padding` is zero\n              updateModelWithList(model, checkLineWidthList(value.getChildren(), true), property);\n            } else {\n              // the initial value of `padding` is zero\n              updateModelWithValue(model, segments[1], checkLineWidth(value.getText(), true), property);\n            }\n\n            break;\n        }\n\n        break;\n    }\n  }\n\n  return model;\n}","map":null,"metadata":{},"sourceType":"module"}