{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as dom from '../../../base/browser/dom.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport * as strings from '../../../base/common/strings.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { AbstractCodeEditorService } from './abstractCodeEditorService.js';\nimport { isThemeColor } from '../../common/editorCommon.js';\nimport { OverviewRulerLane } from '../../common/model.js';\nimport { IThemeService } from '../../../platform/theme/common/themeService.js';\n\nvar CodeEditorServiceImpl =\n/** @class */\nfunction (_super) {\n  __extends(CodeEditorServiceImpl, _super);\n\n  function CodeEditorServiceImpl(themeService, styleSheet) {\n    if (styleSheet === void 0) {\n      styleSheet = dom.createStyleSheet();\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._decorationOptionProviders = new Map();\n    _this._styleSheet = styleSheet;\n    _this._themeService = themeService;\n    return _this;\n  }\n\n  CodeEditorServiceImpl.prototype.registerDecorationType = function (key, options, parentTypeKey) {\n    var provider = this._decorationOptionProviders.get(key);\n\n    if (!provider) {\n      var providerArgs = {\n        styleSheet: this._styleSheet,\n        key: key,\n        parentTypeKey: parentTypeKey,\n        options: options || Object.create(null)\n      };\n\n      if (!parentTypeKey) {\n        provider = new DecorationTypeOptionsProvider(this._themeService, providerArgs);\n      } else {\n        provider = new DecorationSubTypeOptionsProvider(this._themeService, providerArgs);\n      }\n\n      this._decorationOptionProviders.set(key, provider);\n    }\n\n    provider.refCount++;\n  };\n\n  CodeEditorServiceImpl.prototype.removeDecorationType = function (key) {\n    var provider = this._decorationOptionProviders.get(key);\n\n    if (provider) {\n      provider.refCount--;\n\n      if (provider.refCount <= 0) {\n        this._decorationOptionProviders.delete(key);\n\n        provider.dispose();\n        this.listCodeEditors().forEach(function (ed) {\n          return ed.removeDecorations(key);\n        });\n      }\n    }\n  };\n\n  CodeEditorServiceImpl.prototype.resolveDecorationOptions = function (decorationTypeKey, writable) {\n    var provider = this._decorationOptionProviders.get(decorationTypeKey);\n\n    if (!provider) {\n      throw new Error('Unknown decoration type key: ' + decorationTypeKey);\n    }\n\n    return provider.getOptions(this, writable);\n  };\n\n  CodeEditorServiceImpl = __decorate([__param(0, IThemeService)], CodeEditorServiceImpl);\n  return CodeEditorServiceImpl;\n}(AbstractCodeEditorService);\n\nexport { CodeEditorServiceImpl };\n\nvar DecorationSubTypeOptionsProvider =\n/** @class */\nfunction () {\n  function DecorationSubTypeOptionsProvider(themeService, providerArgs) {\n    this._parentTypeKey = providerArgs.parentTypeKey;\n    this.refCount = 0;\n    this._beforeContentRules = new DecorationCSSRules(3\n    /* BeforeContentClassName */\n    , providerArgs, themeService);\n    this._afterContentRules = new DecorationCSSRules(4\n    /* AfterContentClassName */\n    , providerArgs, themeService);\n  }\n\n  DecorationSubTypeOptionsProvider.prototype.getOptions = function (codeEditorService, writable) {\n    var options = codeEditorService.resolveDecorationOptions(this._parentTypeKey, true);\n\n    if (this._beforeContentRules) {\n      options.beforeContentClassName = this._beforeContentRules.className;\n    }\n\n    if (this._afterContentRules) {\n      options.afterContentClassName = this._afterContentRules.className;\n    }\n\n    return options;\n  };\n\n  DecorationSubTypeOptionsProvider.prototype.dispose = function () {\n    if (this._beforeContentRules) {\n      this._beforeContentRules.dispose();\n\n      this._beforeContentRules = null;\n    }\n\n    if (this._afterContentRules) {\n      this._afterContentRules.dispose();\n\n      this._afterContentRules = null;\n    }\n  };\n\n  return DecorationSubTypeOptionsProvider;\n}();\n\nvar DecorationTypeOptionsProvider =\n/** @class */\nfunction () {\n  function DecorationTypeOptionsProvider(themeService, providerArgs) {\n    var _this = this;\n\n    this._disposables = new DisposableStore();\n    this.refCount = 0;\n\n    var createCSSRules = function (type) {\n      var rules = new DecorationCSSRules(type, providerArgs, themeService);\n\n      _this._disposables.add(rules);\n\n      if (rules.hasContent) {\n        return rules.className;\n      }\n\n      return undefined;\n    };\n\n    var createInlineCSSRules = function (type) {\n      var rules = new DecorationCSSRules(type, providerArgs, themeService);\n\n      _this._disposables.add(rules);\n\n      if (rules.hasContent) {\n        return {\n          className: rules.className,\n          hasLetterSpacing: rules.hasLetterSpacing\n        };\n      }\n\n      return null;\n    };\n\n    this.className = createCSSRules(0\n    /* ClassName */\n    );\n    var inlineData = createInlineCSSRules(1\n    /* InlineClassName */\n    );\n\n    if (inlineData) {\n      this.inlineClassName = inlineData.className;\n      this.inlineClassNameAffectsLetterSpacing = inlineData.hasLetterSpacing;\n    }\n\n    this.beforeContentClassName = createCSSRules(3\n    /* BeforeContentClassName */\n    );\n    this.afterContentClassName = createCSSRules(4\n    /* AfterContentClassName */\n    );\n    this.glyphMarginClassName = createCSSRules(2\n    /* GlyphMarginClassName */\n    );\n    var options = providerArgs.options;\n    this.isWholeLine = Boolean(options.isWholeLine);\n    this.stickiness = options.rangeBehavior;\n    var lightOverviewRulerColor = options.light && options.light.overviewRulerColor || options.overviewRulerColor;\n    var darkOverviewRulerColor = options.dark && options.dark.overviewRulerColor || options.overviewRulerColor;\n\n    if (typeof lightOverviewRulerColor !== 'undefined' || typeof darkOverviewRulerColor !== 'undefined') {\n      this.overviewRuler = {\n        color: lightOverviewRulerColor || darkOverviewRulerColor,\n        darkColor: darkOverviewRulerColor || lightOverviewRulerColor,\n        position: options.overviewRulerLane || OverviewRulerLane.Center\n      };\n    }\n  }\n\n  DecorationTypeOptionsProvider.prototype.getOptions = function (codeEditorService, writable) {\n    if (!writable) {\n      return this;\n    }\n\n    return {\n      inlineClassName: this.inlineClassName,\n      beforeContentClassName: this.beforeContentClassName,\n      afterContentClassName: this.afterContentClassName,\n      className: this.className,\n      glyphMarginClassName: this.glyphMarginClassName,\n      isWholeLine: this.isWholeLine,\n      overviewRuler: this.overviewRuler,\n      stickiness: this.stickiness\n    };\n  };\n\n  DecorationTypeOptionsProvider.prototype.dispose = function () {\n    this._disposables.dispose();\n  };\n\n  return DecorationTypeOptionsProvider;\n}();\n\nvar _CSS_MAP = {\n  color: 'color:{0} !important;',\n  opacity: 'opacity:{0};',\n  backgroundColor: 'background-color:{0};',\n  outline: 'outline:{0};',\n  outlineColor: 'outline-color:{0};',\n  outlineStyle: 'outline-style:{0};',\n  outlineWidth: 'outline-width:{0};',\n  border: 'border:{0};',\n  borderColor: 'border-color:{0};',\n  borderRadius: 'border-radius:{0};',\n  borderSpacing: 'border-spacing:{0};',\n  borderStyle: 'border-style:{0};',\n  borderWidth: 'border-width:{0};',\n  fontStyle: 'font-style:{0};',\n  fontWeight: 'font-weight:{0};',\n  textDecoration: 'text-decoration:{0};',\n  cursor: 'cursor:{0};',\n  letterSpacing: 'letter-spacing:{0};',\n  gutterIconPath: 'background:{0} center center no-repeat;',\n  gutterIconSize: 'background-size:{0};',\n  contentText: 'content:\\'{0}\\';',\n  contentIconPath: 'content:{0};',\n  margin: 'margin:{0};',\n  width: 'width:{0};',\n  height: 'height:{0};'\n};\n\nvar DecorationCSSRules =\n/** @class */\nfunction () {\n  function DecorationCSSRules(ruleType, providerArgs, themeService) {\n    var _this = this;\n\n    this._theme = themeService.getTheme();\n    this._ruleType = ruleType;\n    this._providerArgs = providerArgs;\n    this._usesThemeColors = false;\n    this._hasContent = false;\n    this._hasLetterSpacing = false;\n    var className = CSSNameHelper.getClassName(this._providerArgs.key, ruleType);\n\n    if (this._providerArgs.parentTypeKey) {\n      className = className + ' ' + CSSNameHelper.getClassName(this._providerArgs.parentTypeKey, ruleType);\n    }\n\n    this._className = className;\n    this._unThemedSelector = CSSNameHelper.getSelector(this._providerArgs.key, this._providerArgs.parentTypeKey, ruleType);\n\n    this._buildCSS();\n\n    if (this._usesThemeColors) {\n      this._themeListener = themeService.onThemeChange(function (theme) {\n        _this._theme = themeService.getTheme();\n\n        _this._removeCSS();\n\n        _this._buildCSS();\n      });\n    } else {\n      this._themeListener = null;\n    }\n  }\n\n  DecorationCSSRules.prototype.dispose = function () {\n    if (this._hasContent) {\n      this._removeCSS();\n\n      this._hasContent = false;\n    }\n\n    if (this._themeListener) {\n      this._themeListener.dispose();\n\n      this._themeListener = null;\n    }\n  };\n\n  Object.defineProperty(DecorationCSSRules.prototype, \"hasContent\", {\n    get: function () {\n      return this._hasContent;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DecorationCSSRules.prototype, \"hasLetterSpacing\", {\n    get: function () {\n      return this._hasLetterSpacing;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(DecorationCSSRules.prototype, \"className\", {\n    get: function () {\n      return this._className;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DecorationCSSRules.prototype._buildCSS = function () {\n    var options = this._providerArgs.options;\n    var unthemedCSS, lightCSS, darkCSS;\n\n    switch (this._ruleType) {\n      case 0\n      /* ClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationClassName(options.dark);\n        break;\n\n      case 1\n      /* InlineClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationInlineClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationInlineClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationInlineClassName(options.dark);\n        break;\n\n      case 2\n      /* GlyphMarginClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options);\n        lightCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.light);\n        darkCSS = this.getCSSTextForModelDecorationGlyphMarginClassName(options.dark);\n        break;\n\n      case 3\n      /* BeforeContentClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.before);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.before);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.before);\n        break;\n\n      case 4\n      /* AfterContentClassName */\n      :\n        unthemedCSS = this.getCSSTextForModelDecorationContentClassName(options.after);\n        lightCSS = this.getCSSTextForModelDecorationContentClassName(options.light && options.light.after);\n        darkCSS = this.getCSSTextForModelDecorationContentClassName(options.dark && options.dark.after);\n        break;\n\n      default:\n        throw new Error('Unknown rule type: ' + this._ruleType);\n    }\n\n    var sheet = this._providerArgs.styleSheet.sheet;\n    var hasContent = false;\n\n    if (unthemedCSS.length > 0) {\n      sheet.insertRule(this._unThemedSelector + \" {\" + unthemedCSS + \"}\", 0);\n      hasContent = true;\n    }\n\n    if (lightCSS.length > 0) {\n      sheet.insertRule(\".vs\" + this._unThemedSelector + \" {\" + lightCSS + \"}\", 0);\n      hasContent = true;\n    }\n\n    if (darkCSS.length > 0) {\n      sheet.insertRule(\".vs-dark\" + this._unThemedSelector + \", .hc-black\" + this._unThemedSelector + \" {\" + darkCSS + \"}\", 0);\n      hasContent = true;\n    }\n\n    this._hasContent = hasContent;\n  };\n\n  DecorationCSSRules.prototype._removeCSS = function () {\n    dom.removeCSSRulesContainingSelector(this._unThemedSelector, this._providerArgs.styleSheet);\n  };\n  /**\n   * Build the CSS for decorations styled via `className`.\n   */\n\n\n  DecorationCSSRules.prototype.getCSSTextForModelDecorationClassName = function (opts) {\n    if (!opts) {\n      return '';\n    }\n\n    var cssTextArr = [];\n    this.collectCSSText(opts, ['backgroundColor'], cssTextArr);\n    this.collectCSSText(opts, ['outline', 'outlineColor', 'outlineStyle', 'outlineWidth'], cssTextArr);\n    this.collectBorderSettingsCSSText(opts, cssTextArr);\n    return cssTextArr.join('');\n  };\n  /**\n   * Build the CSS for decorations styled via `inlineClassName`.\n   */\n\n\n  DecorationCSSRules.prototype.getCSSTextForModelDecorationInlineClassName = function (opts) {\n    if (!opts) {\n      return '';\n    }\n\n    var cssTextArr = [];\n    this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'cursor', 'color', 'opacity', 'letterSpacing'], cssTextArr);\n\n    if (opts.letterSpacing) {\n      this._hasLetterSpacing = true;\n    }\n\n    return cssTextArr.join('');\n  };\n  /**\n   * Build the CSS for decorations styled before or after content.\n   */\n\n\n  DecorationCSSRules.prototype.getCSSTextForModelDecorationContentClassName = function (opts) {\n    if (!opts) {\n      return '';\n    }\n\n    var cssTextArr = [];\n\n    if (typeof opts !== 'undefined') {\n      this.collectBorderSettingsCSSText(opts, cssTextArr);\n\n      if (typeof opts.contentIconPath !== 'undefined') {\n        cssTextArr.push(strings.format(_CSS_MAP.contentIconPath, dom.asCSSUrl(URI.revive(opts.contentIconPath))));\n      }\n\n      if (typeof opts.contentText === 'string') {\n        var truncated = opts.contentText.match(/^.*$/m)[0]; // only take first line\n\n        var escaped = truncated.replace(/['\\\\]/g, '\\\\$&');\n        cssTextArr.push(strings.format(_CSS_MAP.contentText, escaped));\n      }\n\n      this.collectCSSText(opts, ['fontStyle', 'fontWeight', 'textDecoration', 'color', 'opacity', 'backgroundColor', 'margin'], cssTextArr);\n\n      if (this.collectCSSText(opts, ['width', 'height'], cssTextArr)) {\n        cssTextArr.push('display:inline-block;');\n      }\n    }\n\n    return cssTextArr.join('');\n  };\n  /**\n   * Build the CSS for decorations styled via `glpyhMarginClassName`.\n   */\n\n\n  DecorationCSSRules.prototype.getCSSTextForModelDecorationGlyphMarginClassName = function (opts) {\n    if (!opts) {\n      return '';\n    }\n\n    var cssTextArr = [];\n\n    if (typeof opts.gutterIconPath !== 'undefined') {\n      cssTextArr.push(strings.format(_CSS_MAP.gutterIconPath, dom.asCSSUrl(URI.revive(opts.gutterIconPath))));\n\n      if (typeof opts.gutterIconSize !== 'undefined') {\n        cssTextArr.push(strings.format(_CSS_MAP.gutterIconSize, opts.gutterIconSize));\n      }\n    }\n\n    return cssTextArr.join('');\n  };\n\n  DecorationCSSRules.prototype.collectBorderSettingsCSSText = function (opts, cssTextArr) {\n    if (this.collectCSSText(opts, ['border', 'borderColor', 'borderRadius', 'borderSpacing', 'borderStyle', 'borderWidth'], cssTextArr)) {\n      cssTextArr.push(strings.format('box-sizing: border-box;'));\n      return true;\n    }\n\n    return false;\n  };\n\n  DecorationCSSRules.prototype.collectCSSText = function (opts, properties, cssTextArr) {\n    var lenBefore = cssTextArr.length;\n\n    for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n      var property = properties_1[_i];\n      var value = this.resolveValue(opts[property]);\n\n      if (typeof value === 'string') {\n        cssTextArr.push(strings.format(_CSS_MAP[property], value));\n      }\n    }\n\n    return cssTextArr.length !== lenBefore;\n  };\n\n  DecorationCSSRules.prototype.resolveValue = function (value) {\n    if (isThemeColor(value)) {\n      this._usesThemeColors = true;\n\n      var color = this._theme.getColor(value.id);\n\n      if (color) {\n        return color.toString();\n      }\n\n      return 'transparent';\n    }\n\n    return value;\n  };\n\n  return DecorationCSSRules;\n}();\n\nvar CSSNameHelper =\n/** @class */\nfunction () {\n  function CSSNameHelper() {}\n\n  CSSNameHelper.getClassName = function (key, type) {\n    return 'ced-' + key + '-' + type;\n  };\n\n  CSSNameHelper.getSelector = function (key, parentKey, ruleType) {\n    var selector = '.monaco-editor .' + this.getClassName(key, ruleType);\n\n    if (parentKey) {\n      selector = selector + '.' + this.getClassName(parentKey, ruleType);\n    }\n\n    if (ruleType === 3\n    /* BeforeContentClassName */\n    ) {\n        selector += '::before';\n      } else if (ruleType === 4\n    /* AfterContentClassName */\n    ) {\n        selector += '::after';\n      }\n\n    return selector;\n  };\n\n  return CSSNameHelper;\n}();","map":null,"metadata":{},"sourceType":"module"}