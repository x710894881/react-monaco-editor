{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Returns an array which contains all values that reside\n * in the given set.\n */\n\nexport function values(from) {\n  var result = [];\n\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      result.push(from[key]);\n    }\n  }\n\n  return result;\n}\nexport function first(from) {\n  for (var key in from) {\n    if (hasOwnProperty.call(from, key)) {\n      return from[key];\n    }\n  }\n\n  return undefined;\n}\n/**\n * Iterates over each entry in the provided set. The iterator allows\n * to remove elements and will stop when the callback returns {{false}}.\n */\n\nexport function forEach(from, callback) {\n  var _loop_1 = function (key) {\n    if (hasOwnProperty.call(from, key)) {\n      var result = callback({\n        key: key,\n        value: from[key]\n      }, function () {\n        delete from[key];\n      });\n\n      if (result === false) {\n        return {\n          value: void 0\n        };\n      }\n    }\n  };\n\n  for (var key in from) {\n    var state_1 = _loop_1(key);\n\n    if (typeof state_1 === \"object\") return state_1.value;\n  }\n}\n\nvar SetMap =\n/** @class */\nfunction () {\n  function SetMap() {\n    this.map = new Map();\n  }\n\n  SetMap.prototype.add = function (key, value) {\n    var values = this.map.get(key);\n\n    if (!values) {\n      values = new Set();\n      this.map.set(key, values);\n    }\n\n    values.add(value);\n  };\n\n  SetMap.prototype.delete = function (key, value) {\n    var values = this.map.get(key);\n\n    if (!values) {\n      return;\n    }\n\n    values.delete(value);\n\n    if (values.size === 0) {\n      this.map.delete(key);\n    }\n  };\n\n  SetMap.prototype.forEach = function (key, fn) {\n    var values = this.map.get(key);\n\n    if (!values) {\n      return;\n    }\n\n    values.forEach(fn);\n  };\n\n  return SetMap;\n}();\n\nexport { SetMap };","map":null,"metadata":{},"sourceType":"module"}