{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { createCancelablePromise, TimeoutTimer } from '../../../base/common/async.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable, MutableDisposable } from '../../../base/common/lifecycle.js';\nimport { Range } from '../../common/core/range.js';\nimport { CodeActionProviderRegistry } from '../../common/modes.js';\nimport { RawContextKey } from '../../../platform/contextkey/common/contextkey.js';\nimport { getCodeActions } from './codeAction.js';\nexport var SUPPORTED_CODE_ACTIONS = new RawContextKey('supportedCodeAction', '');\n\nvar CodeActionOracle =\n/** @class */\nfunction (_super) {\n  __extends(CodeActionOracle, _super);\n\n  function CodeActionOracle(_editor, _markerService, _signalChange, _delay) {\n    if (_delay === void 0) {\n      _delay = 250;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._editor = _editor;\n    _this._markerService = _markerService;\n    _this._signalChange = _signalChange;\n    _this._delay = _delay;\n    _this._autoTriggerTimer = _this._register(new TimeoutTimer());\n\n    _this._register(_this._markerService.onMarkerChanged(function (e) {\n      return _this._onMarkerChanges(e);\n    }));\n\n    _this._register(_this._editor.onDidChangeCursorPosition(function () {\n      return _this._onCursorChange();\n    }));\n\n    return _this;\n  }\n\n  CodeActionOracle.prototype.trigger = function (trigger) {\n    var selection = this._getRangeOfSelectionUnlessWhitespaceEnclosed(trigger);\n\n    return this._createEventAndSignalChange(trigger, selection);\n  };\n\n  CodeActionOracle.prototype._onMarkerChanges = function (resources) {\n    var _this = this;\n\n    var model = this._editor.getModel();\n\n    if (!model) {\n      return;\n    }\n\n    if (resources.some(function (resource) {\n      return resource.toString() === model.uri.toString();\n    })) {\n      this._autoTriggerTimer.cancelAndSet(function () {\n        _this.trigger({\n          type: 'auto'\n        });\n      }, this._delay);\n    }\n  };\n\n  CodeActionOracle.prototype._onCursorChange = function () {\n    var _this = this;\n\n    this._autoTriggerTimer.cancelAndSet(function () {\n      _this.trigger({\n        type: 'auto'\n      });\n    }, this._delay);\n  };\n\n  CodeActionOracle.prototype._getRangeOfMarker = function (selection) {\n    var model = this._editor.getModel();\n\n    if (!model) {\n      return undefined;\n    }\n\n    for (var _i = 0, _a = this._markerService.read({\n      resource: model.uri\n    }); _i < _a.length; _i++) {\n      var marker = _a[_i];\n\n      if (Range.intersectRanges(marker, selection)) {\n        return Range.lift(marker);\n      }\n    }\n\n    return undefined;\n  };\n\n  CodeActionOracle.prototype._getRangeOfSelectionUnlessWhitespaceEnclosed = function (trigger) {\n    if (!this._editor.hasModel()) {\n      return undefined;\n    }\n\n    var model = this._editor.getModel();\n\n    var selection = this._editor.getSelection();\n\n    if (selection.isEmpty() && trigger.type === 'auto') {\n      var _a = selection.getPosition(),\n          lineNumber = _a.lineNumber,\n          column = _a.column;\n\n      var line = model.getLineContent(lineNumber);\n\n      if (line.length === 0) {\n        // empty line\n        return undefined;\n      } else if (column === 1) {\n        // look only right\n        if (/\\s/.test(line[0])) {\n          return undefined;\n        }\n      } else if (column === model.getLineMaxColumn(lineNumber)) {\n        // look only left\n        if (/\\s/.test(line[line.length - 1])) {\n          return undefined;\n        }\n      } else {\n        // look left and right\n        if (/\\s/.test(line[column - 2]) && /\\s/.test(line[column - 1])) {\n          return undefined;\n        }\n      }\n    }\n\n    return selection;\n  };\n\n  CodeActionOracle.prototype._createEventAndSignalChange = function (trigger, selection) {\n    var model = this._editor.getModel();\n\n    if (!selection || !model) {\n      // cancel\n      this._signalChange(undefined);\n\n      return undefined;\n    }\n\n    var markerRange = this._getRangeOfMarker(selection);\n\n    var position = markerRange ? markerRange.getStartPosition() : selection.getStartPosition();\n    var e = {\n      trigger: trigger,\n      selection: selection,\n      position: position\n    };\n\n    this._signalChange(e);\n\n    return e;\n  };\n\n  return CodeActionOracle;\n}(Disposable);\n\nexport var CodeActionsState;\n\n(function (CodeActionsState) {\n  CodeActionsState.Empty = new (\n  /** @class */\n  function () {\n    function class_1() {\n      this.type = 0\n      /* Empty */\n      ;\n    }\n\n    return class_1;\n  }())();\n\n  var Triggered =\n  /** @class */\n  function () {\n    function Triggered(trigger, rangeOrSelection, position, actions) {\n      this.trigger = trigger;\n      this.rangeOrSelection = rangeOrSelection;\n      this.position = position;\n      this.actions = actions;\n      this.type = 1\n      /* Triggered */\n      ;\n    }\n\n    return Triggered;\n  }();\n\n  CodeActionsState.Triggered = Triggered;\n})(CodeActionsState || (CodeActionsState = {}));\n\nvar CodeActionModel =\n/** @class */\nfunction (_super) {\n  __extends(CodeActionModel, _super);\n\n  function CodeActionModel(_editor, _markerService, contextKeyService, _progressService) {\n    var _this = _super.call(this) || this;\n\n    _this._editor = _editor;\n    _this._markerService = _markerService;\n    _this._progressService = _progressService;\n    _this._codeActionOracle = _this._register(new MutableDisposable());\n    _this._state = CodeActionsState.Empty;\n    _this._onDidChangeState = _this._register(new Emitter());\n    _this.onDidChangeState = _this._onDidChangeState.event;\n    _this._supportedCodeActions = SUPPORTED_CODE_ACTIONS.bindTo(contextKeyService);\n\n    _this._register(_this._editor.onDidChangeModel(function () {\n      return _this._update();\n    }));\n\n    _this._register(_this._editor.onDidChangeModelLanguage(function () {\n      return _this._update();\n    }));\n\n    _this._register(CodeActionProviderRegistry.onDidChange(function () {\n      return _this._update();\n    }));\n\n    _this._update();\n\n    return _this;\n  }\n\n  CodeActionModel.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    this.setState(CodeActionsState.Empty, true);\n  };\n\n  CodeActionModel.prototype._update = function () {\n    var _this = this;\n\n    this._codeActionOracle.value = undefined;\n    this.setState(CodeActionsState.Empty);\n\n    var model = this._editor.getModel();\n\n    if (model && CodeActionProviderRegistry.has(model) && !this._editor.getConfiguration().readOnly) {\n      var supportedActions = [];\n\n      for (var _i = 0, _a = CodeActionProviderRegistry.all(model); _i < _a.length; _i++) {\n        var provider = _a[_i];\n\n        if (Array.isArray(provider.providedCodeActionKinds)) {\n          supportedActions.push.apply(supportedActions, provider.providedCodeActionKinds);\n        }\n      }\n\n      this._supportedCodeActions.set(supportedActions.join(' '));\n\n      this._codeActionOracle.value = new CodeActionOracle(this._editor, this._markerService, function (trigger) {\n        if (!trigger) {\n          _this.setState(CodeActionsState.Empty);\n\n          return;\n        }\n\n        var actions = createCancelablePromise(function (token) {\n          return getCodeActions(model, trigger.selection, trigger.trigger, token);\n        });\n\n        if (_this._progressService && trigger.trigger.type === 'manual') {\n          _this._progressService.showWhile(actions, 250);\n        }\n\n        _this.setState(new CodeActionsState.Triggered(trigger.trigger, trigger.selection, trigger.position, actions));\n      }, undefined);\n\n      this._codeActionOracle.value.trigger({\n        type: 'auto'\n      });\n    } else {\n      this._supportedCodeActions.reset();\n    }\n  };\n\n  CodeActionModel.prototype.trigger = function (trigger) {\n    if (this._codeActionOracle.value) {\n      this._codeActionOracle.value.trigger(trigger);\n    }\n  };\n\n  CodeActionModel.prototype.setState = function (newState, skipNotify) {\n    if (newState === this._state) {\n      return;\n    } // Cancel old request\n\n\n    if (this._state.type === 1\n    /* Triggered */\n    ) {\n        this._state.actions.cancel();\n      }\n\n    this._state = newState;\n\n    if (!skipNotify) {\n      this._onDidChangeState.fire(newState);\n    }\n  };\n\n  return CodeActionModel;\n}(Disposable);\n\nexport { CodeActionModel };","map":null,"metadata":{},"sourceType":"module"}