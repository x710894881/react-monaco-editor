{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport './hover.css';\nimport * as nls from '../../../nls.js';\nimport { KeyChord } from '../../../base/common/keyCodes.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { EditorAction, registerEditorAction, registerEditorContribution } from '../../browser/editorExtensions.js';\nimport { Range } from '../../common/core/range.js';\nimport { EditorContextKeys } from '../../common/editorContextKeys.js';\nimport { IModeService } from '../../common/services/modeService.js';\nimport { ModesContentHoverWidget } from './modesContentHover.js';\nimport { ModesGlyphHoverWidget } from './modesGlyphHover.js';\nimport { IOpenerService } from '../../../platform/opener/common/opener.js';\nimport { editorHoverBackground, editorHoverBorder, editorHoverHighlight, textCodeBlockBackground, textLinkForeground, editorHoverStatusBarBackground } from '../../../platform/theme/common/colorRegistry.js';\nimport { IThemeService, registerThemingParticipant } from '../../../platform/theme/common/themeService.js';\nimport { IMarkerDecorationsService } from '../../common/services/markersDecorationService.js';\nimport { IKeybindingService } from '../../../platform/keybinding/common/keybinding.js';\n\nvar ModesHoverController =\n/** @class */\nfunction () {\n  function ModesHoverController(_editor, _openerService, _modeService, _markerDecorationsService, _keybindingService, _themeService) {\n    var _this = this;\n\n    this._editor = _editor;\n    this._openerService = _openerService;\n    this._modeService = _modeService;\n    this._markerDecorationsService = _markerDecorationsService;\n    this._keybindingService = _keybindingService;\n    this._themeService = _themeService;\n    this._toUnhook = new DisposableStore();\n    this._isMouseDown = false;\n    this._hoverClicked = false;\n    this._contentWidget = null;\n    this._glyphWidget = null;\n\n    this._hookEvents();\n\n    this._didChangeConfigurationHandler = this._editor.onDidChangeConfiguration(function (e) {\n      if (e.contribInfo) {\n        _this._hideWidgets();\n\n        _this._unhookEvents();\n\n        _this._hookEvents();\n      }\n    });\n  }\n\n  Object.defineProperty(ModesHoverController.prototype, \"contentWidget\", {\n    get: function () {\n      if (!this._contentWidget) {\n        this._createHoverWidgets();\n      }\n\n      return this._contentWidget;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(ModesHoverController.prototype, \"glyphWidget\", {\n    get: function () {\n      if (!this._glyphWidget) {\n        this._createHoverWidgets();\n      }\n\n      return this._glyphWidget;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ModesHoverController.get = function (editor) {\n    return editor.getContribution(ModesHoverController.ID);\n  };\n\n  ModesHoverController.prototype._hookEvents = function () {\n    var _this = this;\n\n    var hideWidgetsEventHandler = function () {\n      return _this._hideWidgets();\n    };\n\n    var hoverOpts = this._editor.getConfiguration().contribInfo.hover;\n\n    this._isHoverEnabled = hoverOpts.enabled;\n    this._isHoverSticky = hoverOpts.sticky;\n\n    if (this._isHoverEnabled) {\n      this._toUnhook.add(this._editor.onMouseDown(function (e) {\n        return _this._onEditorMouseDown(e);\n      }));\n\n      this._toUnhook.add(this._editor.onMouseUp(function (e) {\n        return _this._onEditorMouseUp(e);\n      }));\n\n      this._toUnhook.add(this._editor.onMouseMove(function (e) {\n        return _this._onEditorMouseMove(e);\n      }));\n\n      this._toUnhook.add(this._editor.onKeyDown(function (e) {\n        return _this._onKeyDown(e);\n      }));\n\n      this._toUnhook.add(this._editor.onDidChangeModelDecorations(function () {\n        return _this._onModelDecorationsChanged();\n      }));\n    } else {\n      this._toUnhook.add(this._editor.onMouseMove(hideWidgetsEventHandler));\n    }\n\n    this._toUnhook.add(this._editor.onMouseLeave(hideWidgetsEventHandler));\n\n    this._toUnhook.add(this._editor.onDidChangeModel(hideWidgetsEventHandler));\n\n    this._toUnhook.add(this._editor.onDidScrollChange(function (e) {\n      return _this._onEditorScrollChanged(e);\n    }));\n  };\n\n  ModesHoverController.prototype._unhookEvents = function () {\n    this._toUnhook.clear();\n  };\n\n  ModesHoverController.prototype._onModelDecorationsChanged = function () {\n    this.contentWidget.onModelDecorationsChanged();\n    this.glyphWidget.onModelDecorationsChanged();\n  };\n\n  ModesHoverController.prototype._onEditorScrollChanged = function (e) {\n    if (e.scrollTopChanged || e.scrollLeftChanged) {\n      this._hideWidgets();\n    }\n  };\n\n  ModesHoverController.prototype._onEditorMouseDown = function (mouseEvent) {\n    this._isMouseDown = true;\n    var targetType = mouseEvent.target.type;\n\n    if (targetType === 9\n    /* CONTENT_WIDGET */\n    && mouseEvent.target.detail === ModesContentHoverWidget.ID) {\n      this._hoverClicked = true; // mouse down on top of content hover widget\n\n      return;\n    }\n\n    if (targetType === 12\n    /* OVERLAY_WIDGET */\n    && mouseEvent.target.detail === ModesGlyphHoverWidget.ID) {\n      // mouse down on top of overlay hover widget\n      return;\n    }\n\n    if (targetType !== 12\n    /* OVERLAY_WIDGET */\n    && mouseEvent.target.detail !== ModesGlyphHoverWidget.ID) {\n      this._hoverClicked = false;\n    }\n\n    this._hideWidgets();\n  };\n\n  ModesHoverController.prototype._onEditorMouseUp = function (mouseEvent) {\n    this._isMouseDown = false;\n  };\n\n  ModesHoverController.prototype._onEditorMouseMove = function (mouseEvent) {\n    // const this._editor.getConfiguration().contribInfo.hover.sticky;\n    var targetType = mouseEvent.target.type;\n\n    if (this._isMouseDown && this._hoverClicked && this.contentWidget.isColorPickerVisible()) {\n      return;\n    }\n\n    if (this._isHoverSticky && targetType === 9\n    /* CONTENT_WIDGET */\n    && mouseEvent.target.detail === ModesContentHoverWidget.ID) {\n      // mouse moved on top of content hover widget\n      return;\n    }\n\n    if (this._isHoverSticky && targetType === 12\n    /* OVERLAY_WIDGET */\n    && mouseEvent.target.detail === ModesGlyphHoverWidget.ID) {\n      // mouse moved on top of overlay hover widget\n      return;\n    }\n\n    if (targetType === 7\n    /* CONTENT_EMPTY */\n    ) {\n        var epsilon = this._editor.getConfiguration().fontInfo.typicalHalfwidthCharacterWidth / 2;\n        var data = mouseEvent.target.detail;\n\n        if (data && !data.isAfterLines && typeof data.horizontalDistanceToText === 'number' && data.horizontalDistanceToText < epsilon) {\n          // Let hover kick in even when the mouse is technically in the empty area after a line, given the distance is small enough\n          targetType = 6\n          /* CONTENT_TEXT */\n          ;\n        }\n      }\n\n    if (targetType === 6\n    /* CONTENT_TEXT */\n    ) {\n        this.glyphWidget.hide();\n\n        if (this._isHoverEnabled && mouseEvent.target.range) {\n          this.contentWidget.startShowingAt(mouseEvent.target.range, 0\n          /* Delayed */\n          , false);\n        }\n      } else if (targetType === 2\n    /* GUTTER_GLYPH_MARGIN */\n    ) {\n        this.contentWidget.hide();\n\n        if (this._isHoverEnabled && mouseEvent.target.position) {\n          this.glyphWidget.startShowingAt(mouseEvent.target.position.lineNumber);\n        }\n      } else {\n      this._hideWidgets();\n    }\n  };\n\n  ModesHoverController.prototype._onKeyDown = function (e) {\n    if (e.keyCode !== 5\n    /* Ctrl */\n    && e.keyCode !== 6\n    /* Alt */\n    && e.keyCode !== 57\n    /* Meta */\n    && e.keyCode !== 4\n    /* Shift */\n    ) {\n        // Do not hide hover when a modifier key is pressed\n        this._hideWidgets();\n      }\n  };\n\n  ModesHoverController.prototype._hideWidgets = function () {\n    if (!this._glyphWidget || !this._contentWidget || this._isMouseDown && this._hoverClicked && this._contentWidget.isColorPickerVisible()) {\n      return;\n    }\n\n    this._glyphWidget.hide();\n\n    this._contentWidget.hide();\n  };\n\n  ModesHoverController.prototype._createHoverWidgets = function () {\n    this._contentWidget = new ModesContentHoverWidget(this._editor, this._markerDecorationsService, this._themeService, this._keybindingService, this._modeService, this._openerService);\n    this._glyphWidget = new ModesGlyphHoverWidget(this._editor, this._modeService, this._openerService);\n  };\n\n  ModesHoverController.prototype.showContentHover = function (range, mode, focus) {\n    this.contentWidget.startShowingAt(range, mode, focus);\n  };\n\n  ModesHoverController.prototype.getId = function () {\n    return ModesHoverController.ID;\n  };\n\n  ModesHoverController.prototype.dispose = function () {\n    this._unhookEvents();\n\n    this._toUnhook.dispose();\n\n    this._didChangeConfigurationHandler.dispose();\n\n    if (this._glyphWidget) {\n      this._glyphWidget.dispose();\n    }\n\n    if (this._contentWidget) {\n      this._contentWidget.dispose();\n    }\n  };\n\n  ModesHoverController.ID = 'editor.contrib.hover';\n  ModesHoverController = __decorate([__param(1, IOpenerService), __param(2, IModeService), __param(3, IMarkerDecorationsService), __param(4, IKeybindingService), __param(5, IThemeService)], ModesHoverController);\n  return ModesHoverController;\n}();\n\nexport { ModesHoverController };\n\nvar ShowHoverAction =\n/** @class */\nfunction (_super) {\n  __extends(ShowHoverAction, _super);\n\n  function ShowHoverAction() {\n    return _super.call(this, {\n      id: 'editor.action.showHover',\n      label: nls.localize({\n        key: 'showHover',\n        comment: ['Label for action that will trigger the showing of a hover in the editor.', 'This allows for users to show the hover without using the mouse.']\n      }, \"Show Hover\"),\n      alias: 'Show Hover',\n      precondition: undefined,\n      kbOpts: {\n        kbExpr: EditorContextKeys.editorTextFocus,\n        primary: KeyChord(2048\n        /* CtrlCmd */\n        | 41\n        /* KEY_K */\n        , 2048\n        /* CtrlCmd */\n        | 39\n        /* KEY_I */\n        ),\n        weight: 100\n        /* EditorContrib */\n\n      }\n    }) || this;\n  }\n\n  ShowHoverAction.prototype.run = function (accessor, editor) {\n    if (!editor.hasModel()) {\n      return;\n    }\n\n    var controller = ModesHoverController.get(editor);\n\n    if (!controller) {\n      return;\n    }\n\n    var position = editor.getPosition();\n    var range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n    var focus = editor.getConfiguration().accessibilitySupport === 2\n    /* Enabled */\n    ;\n    controller.showContentHover(range, 1\n    /* Immediate */\n    , focus);\n  };\n\n  return ShowHoverAction;\n}(EditorAction);\n\nregisterEditorContribution(ModesHoverController);\nregisterEditorAction(ShowHoverAction); // theming\n\nregisterThemingParticipant(function (theme, collector) {\n  var editorHoverHighlightColor = theme.getColor(editorHoverHighlight);\n\n  if (editorHoverHighlightColor) {\n    collector.addRule(\".monaco-editor .hoverHighlight { background-color: \" + editorHoverHighlightColor + \"; }\");\n  }\n\n  var hoverBackground = theme.getColor(editorHoverBackground);\n\n  if (hoverBackground) {\n    collector.addRule(\".monaco-editor .monaco-editor-hover { background-color: \" + hoverBackground + \"; }\");\n  }\n\n  var hoverBorder = theme.getColor(editorHoverBorder);\n\n  if (hoverBorder) {\n    collector.addRule(\".monaco-editor .monaco-editor-hover { border: 1px solid \" + hoverBorder + \"; }\");\n    collector.addRule(\".monaco-editor .monaco-editor-hover .hover-row:not(:first-child):not(:empty) { border-top: 1px solid \" + hoverBorder.transparent(0.5) + \"; }\");\n    collector.addRule(\".monaco-editor .monaco-editor-hover hr { border-top: 1px solid \" + hoverBorder.transparent(0.5) + \"; }\");\n    collector.addRule(\".monaco-editor .monaco-editor-hover hr { border-bottom: 0px solid \" + hoverBorder.transparent(0.5) + \"; }\");\n  }\n\n  var link = theme.getColor(textLinkForeground);\n\n  if (link) {\n    collector.addRule(\".monaco-editor .monaco-editor-hover a { color: \" + link + \"; }\");\n  }\n\n  var actionsBackground = theme.getColor(editorHoverStatusBarBackground);\n\n  if (actionsBackground) {\n    collector.addRule(\".monaco-editor .monaco-editor-hover .hover-row .actions { background-color: \" + actionsBackground + \"; }\");\n  }\n\n  var codeBackground = theme.getColor(textCodeBlockBackground);\n\n  if (codeBackground) {\n    collector.addRule(\".monaco-editor .monaco-editor-hover code { background-color: \" + codeBackground + \"; }\");\n  }\n});","map":null,"metadata":{},"sourceType":"module"}