{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport './contextMenuHandler.css';\nimport { ActionRunner } from '../../../base/common/actions.js';\nimport { combinedDisposable, DisposableStore } from '../../../base/common/lifecycle.js';\nimport { Menu } from '../../../base/browser/ui/menu/menu.js';\nimport { EventType, $, removeNode } from '../../../base/browser/dom.js';\nimport { attachMenuStyler } from '../../theme/common/styler.js';\nimport { domEvent } from '../../../base/browser/event.js';\nimport { StandardMouseEvent } from '../../../base/browser/mouseEvent.js';\n\nvar ContextMenuHandler =\n/** @class */\nfunction () {\n  function ContextMenuHandler(contextViewService, telemetryService, notificationService, keybindingService, themeService) {\n    this.contextViewService = contextViewService;\n    this.telemetryService = telemetryService;\n    this.notificationService = notificationService;\n    this.keybindingService = keybindingService;\n    this.themeService = themeService;\n    this.options = {\n      blockMouse: true\n    };\n  }\n\n  ContextMenuHandler.prototype.configure = function (options) {\n    this.options = options;\n  };\n\n  ContextMenuHandler.prototype.showContextMenu = function (delegate) {\n    var _this = this;\n\n    var actions = delegate.getActions();\n\n    if (!actions.length) {\n      return; // Don't render an empty context menu\n    }\n\n    this.focusToReturn = document.activeElement;\n    var menu;\n    this.contextViewService.showContextView({\n      getAnchor: function () {\n        return delegate.getAnchor();\n      },\n      canRelayout: false,\n      anchorAlignment: delegate.anchorAlignment,\n      render: function (container) {\n        var className = delegate.getMenuClassName ? delegate.getMenuClassName() : '';\n\n        if (className) {\n          container.className += ' ' + className;\n        } // Render invisible div to block mouse interaction in the rest of the UI\n\n\n        if (_this.options.blockMouse) {\n          _this.block = container.appendChild($('.context-view-block'));\n        }\n\n        var menuDisposables = new DisposableStore();\n        var actionRunner = delegate.actionRunner || new ActionRunner();\n        actionRunner.onDidBeforeRun(_this.onActionRun, _this, menuDisposables);\n        actionRunner.onDidRun(_this.onDidActionRun, _this, menuDisposables);\n        menu = new Menu(container, actions, {\n          actionViewItemProvider: delegate.getActionViewItem,\n          context: delegate.getActionsContext ? delegate.getActionsContext() : null,\n          actionRunner: actionRunner,\n          getKeyBinding: delegate.getKeyBinding ? delegate.getKeyBinding : function (action) {\n            return _this.keybindingService.lookupKeybinding(action.id);\n          }\n        });\n        menuDisposables.add(attachMenuStyler(menu, _this.themeService));\n        menu.onDidCancel(function () {\n          return _this.contextViewService.hideContextView(true);\n        }, null, menuDisposables);\n        menu.onDidBlur(function () {\n          return _this.contextViewService.hideContextView(true);\n        }, null, menuDisposables);\n        domEvent(window, EventType.BLUR)(function () {\n          _this.contextViewService.hideContextView(true);\n        }, null, menuDisposables);\n        domEvent(window, EventType.MOUSE_DOWN)(function (e) {\n          if (e.defaultPrevented) {\n            return;\n          }\n\n          var event = new StandardMouseEvent(e);\n          var element = event.target; // Don't do anything as we are likely creating a context menu\n\n          if (event.rightButton) {\n            return;\n          }\n\n          while (element) {\n            if (element === container) {\n              return;\n            }\n\n            element = element.parentElement;\n          }\n\n          _this.contextViewService.hideContextView(true);\n        }, null, menuDisposables);\n        return combinedDisposable(menuDisposables, menu);\n      },\n      focus: function () {\n        if (menu) {\n          menu.focus(!!delegate.autoSelectFirstItem);\n        }\n      },\n      onHide: function (didCancel) {\n        if (delegate.onHide) {\n          delegate.onHide(!!didCancel);\n        }\n\n        if (_this.block) {\n          removeNode(_this.block);\n          _this.block = null;\n        }\n\n        if (_this.focusToReturn) {\n          _this.focusToReturn.focus();\n        }\n      }\n    });\n  };\n\n  ContextMenuHandler.prototype.onActionRun = function (e) {\n    if (this.telemetryService) {\n      this.telemetryService.publicLog2('workbenchActionExecuted', {\n        id: e.action.id,\n        from: 'contextMenu'\n      });\n    }\n\n    this.contextViewService.hideContextView(false); // Restore focus here\n\n    if (this.focusToReturn) {\n      this.focusToReturn.focus();\n    }\n  };\n\n  ContextMenuHandler.prototype.onDidActionRun = function (e) {\n    if (e.error && this.notificationService) {\n      this.notificationService.error(e.error);\n    }\n  };\n\n  return ContextMenuHandler;\n}();\n\nexport { ContextMenuHandler };","map":null,"metadata":{},"sourceType":"module"}