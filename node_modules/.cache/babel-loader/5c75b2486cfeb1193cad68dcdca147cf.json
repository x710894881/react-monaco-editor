{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../nls.js';\n\nvar ModifierLabelProvider =\n/** @class */\nfunction () {\n  function ModifierLabelProvider(mac, windows, linux) {\n    if (linux === void 0) {\n      linux = windows;\n    }\n\n    this.modifierLabels = [null]; // index 0 will never me accessed.\n\n    this.modifierLabels[2\n    /* Macintosh */\n    ] = mac;\n    this.modifierLabels[1\n    /* Windows */\n    ] = windows;\n    this.modifierLabels[3\n    /* Linux */\n    ] = linux;\n  }\n\n  ModifierLabelProvider.prototype.toLabel = function (OS, parts, keyLabelProvider) {\n    if (parts.length === 0) {\n      return null;\n    }\n\n    var result = [];\n\n    for (var i = 0, len = parts.length; i < len; i++) {\n      var part = parts[i];\n      var keyLabel = keyLabelProvider(part);\n\n      if (keyLabel === null) {\n        // this keybinding cannot be expressed...\n        return null;\n      }\n\n      result[i] = _simpleAsString(part, keyLabel, this.modifierLabels[OS]);\n    }\n\n    return result.join(' ');\n  };\n\n  return ModifierLabelProvider;\n}();\n\nexport { ModifierLabelProvider };\n/**\n * A label provider that prints modifiers in a suitable format for displaying in the UI.\n */\n\nexport var UILabelProvider = new ModifierLabelProvider({\n  ctrlKey: '⌃',\n  shiftKey: '⇧',\n  altKey: '⌥',\n  metaKey: '⌘',\n  separator: ''\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey',\n    comment: ['This is the short form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey',\n    comment: ['This is the short form for the Control key on the keyboard']\n  }, \"Ctrl\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey',\n    comment: ['This is the short form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey',\n    comment: ['This is the short form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey',\n    comment: ['This is the short form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n/**\n * A label provider that prints modifiers in a suitable format for ARIA.\n */\n\nexport var AriaLabelProvider = new ModifierLabelProvider({\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'cmdKey.long',\n    comment: ['This is the long form for the Command key on the keyboard']\n  }, \"Command\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'windowsKey.long',\n    comment: ['This is the long form for the Windows key on the keyboard']\n  }, \"Windows\"),\n  separator: '+'\n}, {\n  ctrlKey: nls.localize({\n    key: 'ctrlKey.long',\n    comment: ['This is the long form for the Control key on the keyboard']\n  }, \"Control\"),\n  shiftKey: nls.localize({\n    key: 'shiftKey.long',\n    comment: ['This is the long form for the Shift key on the keyboard']\n  }, \"Shift\"),\n  altKey: nls.localize({\n    key: 'altKey.long',\n    comment: ['This is the long form for the Alt key on the keyboard']\n  }, \"Alt\"),\n  metaKey: nls.localize({\n    key: 'superKey.long',\n    comment: ['This is the long form for the Super key on the keyboard']\n  }, \"Super\"),\n  separator: '+'\n});\n\nfunction _simpleAsString(modifiers, key, labels) {\n  if (key === null) {\n    return '';\n  }\n\n  var result = []; // translate modifier keys: Ctrl-Shift-Alt-Meta\n\n  if (modifiers.ctrlKey) {\n    result.push(labels.ctrlKey);\n  }\n\n  if (modifiers.shiftKey) {\n    result.push(labels.shiftKey);\n  }\n\n  if (modifiers.altKey) {\n    result.push(labels.altKey);\n  }\n\n  if (modifiers.metaKey) {\n    result.push(labels.metaKey);\n  } // the actual key\n\n\n  result.push(key);\n  return result.join(labels.separator);\n}","map":null,"metadata":{},"sourceType":"module"}