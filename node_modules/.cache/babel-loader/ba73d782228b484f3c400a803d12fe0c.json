{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { EditOperation } from '../core/editOperation.js';\nimport { Range } from '../core/range.js';\n\nvar TrimTrailingWhitespaceCommand =\n/** @class */\nfunction () {\n  function TrimTrailingWhitespaceCommand(selection, cursors) {\n    this._selection = selection;\n    this._cursors = cursors;\n    this._selectionId = null;\n  }\n\n  TrimTrailingWhitespaceCommand.prototype.getEditOperations = function (model, builder) {\n    var ops = trimTrailingWhitespace(model, this._cursors);\n\n    for (var i = 0, len = ops.length; i < len; i++) {\n      var op = ops[i];\n      builder.addEditOperation(op.range, op.text);\n    }\n\n    this._selectionId = builder.trackSelection(this._selection);\n  };\n\n  TrimTrailingWhitespaceCommand.prototype.computeCursorState = function (model, helper) {\n    return helper.getTrackedSelection(this._selectionId);\n  };\n\n  return TrimTrailingWhitespaceCommand;\n}();\n\nexport { TrimTrailingWhitespaceCommand };\n/**\n * Generate commands for trimming trailing whitespace on a model and ignore lines on which cursors are sitting.\n */\n\nexport function trimTrailingWhitespace(model, cursors) {\n  // Sort cursors ascending\n  cursors.sort(function (a, b) {\n    if (a.lineNumber === b.lineNumber) {\n      return a.column - b.column;\n    }\n\n    return a.lineNumber - b.lineNumber;\n  }); // Reduce multiple cursors on the same line and only keep the last one on the line\n\n  for (var i = cursors.length - 2; i >= 0; i--) {\n    if (cursors[i].lineNumber === cursors[i + 1].lineNumber) {\n      // Remove cursor at `i`\n      cursors.splice(i, 1);\n    }\n  }\n\n  var r = [];\n  var rLen = 0;\n  var cursorIndex = 0;\n  var cursorLen = cursors.length;\n\n  for (var lineNumber = 1, lineCount = model.getLineCount(); lineNumber <= lineCount; lineNumber++) {\n    var lineContent = model.getLineContent(lineNumber);\n    var maxLineColumn = lineContent.length + 1;\n    var minEditColumn = 0;\n\n    if (cursorIndex < cursorLen && cursors[cursorIndex].lineNumber === lineNumber) {\n      minEditColumn = cursors[cursorIndex].column;\n      cursorIndex++;\n\n      if (minEditColumn === maxLineColumn) {\n        // The cursor is at the end of the line => no edits for sure on this line\n        continue;\n      }\n    }\n\n    if (lineContent.length === 0) {\n      continue;\n    }\n\n    var lastNonWhitespaceIndex = strings.lastNonWhitespaceIndex(lineContent);\n    var fromColumn = 0;\n\n    if (lastNonWhitespaceIndex === -1) {\n      // Entire line is whitespace\n      fromColumn = 1;\n    } else if (lastNonWhitespaceIndex !== lineContent.length - 1) {\n      // There is trailing whitespace\n      fromColumn = lastNonWhitespaceIndex + 2;\n    } else {\n      // There is no trailing whitespace\n      continue;\n    }\n\n    fromColumn = Math.max(minEditColumn, fromColumn);\n    r[rLen++] = EditOperation.delete(new Range(lineNumber, fromColumn, lineNumber, maxLineColumn));\n  }\n\n  return r;\n}","map":null,"metadata":{},"sourceType":"module"}