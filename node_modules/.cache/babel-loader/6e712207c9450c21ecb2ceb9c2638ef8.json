{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { StandardAutoClosingPairConditional } from '../languageConfiguration.js';\n\nvar CharacterPairSupport =\n/** @class */\nfunction () {\n  function CharacterPairSupport(config) {\n    if (config.autoClosingPairs) {\n      this._autoClosingPairs = config.autoClosingPairs.map(function (el) {\n        return new StandardAutoClosingPairConditional(el);\n      });\n    } else if (config.brackets) {\n      this._autoClosingPairs = config.brackets.map(function (b) {\n        return new StandardAutoClosingPairConditional({\n          open: b[0],\n          close: b[1]\n        });\n      });\n    } else {\n      this._autoClosingPairs = [];\n    }\n\n    if (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n      var docComment = config.__electricCharacterSupport.docComment; // IDocComment is legacy, only partially supported\n\n      this._autoClosingPairs.push(new StandardAutoClosingPairConditional({\n        open: docComment.open,\n        close: docComment.close || ''\n      }));\n    }\n\n    this._autoCloseBefore = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED;\n    this._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n  }\n\n  CharacterPairSupport.prototype.getAutoClosingPairs = function () {\n    return this._autoClosingPairs;\n  };\n\n  CharacterPairSupport.prototype.getAutoCloseBeforeSet = function () {\n    return this._autoCloseBefore;\n  };\n\n  CharacterPairSupport.shouldAutoClosePair = function (autoClosingPair, context, column) {\n    // Always complete on empty line\n    if (context.getTokenCount() === 0) {\n      return true;\n    }\n\n    var tokenIndex = context.findTokenIndexAtOffset(column - 2);\n    var standardTokenType = context.getStandardTokenType(tokenIndex);\n    return autoClosingPair.isOK(standardTokenType);\n  };\n\n  CharacterPairSupport.prototype.getSurroundingPairs = function () {\n    return this._surroundingPairs;\n  };\n\n  CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED = ';:.,=}])> \\n\\t';\n  return CharacterPairSupport;\n}();\n\nexport { CharacterPairSupport };","map":null,"metadata":{},"sourceType":"module"}