{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __param = this && this.__param || function (paramIndex, decorator) {\n  return function (target, key) {\n    decorator(target, key, paramIndex);\n  };\n};\n\nimport * as strings from '../../../base/common/strings.js';\nimport * as dom from '../../../base/browser/dom.js';\nimport { StandardKeyboardEvent } from '../../../base/browser/keyboardEvent.js';\nimport { Emitter, Event } from '../../../base/common/event.js';\nimport { SimpleKeybinding, createKeybinding } from '../../../base/common/keyCodes.js';\nimport { ImmortalReference, toDisposable, DisposableStore, Disposable } from '../../../base/common/lifecycle.js';\nimport { OS, isLinux, isMacintosh } from '../../../base/common/platform.js';\nimport Severity from '../../../base/common/severity.js';\nimport { URI } from '../../../base/common/uri.js';\nimport { isCodeEditor } from '../../browser/editorBrowser.js';\nimport { isDiffEditorConfigurationKey, isEditorConfigurationKey } from '../../common/config/commonEditorConfig.js';\nimport { EditOperation } from '../../common/core/editOperation.js';\nimport { Position as Pos } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\nimport { isResourceTextEdit } from '../../common/modes.js';\nimport { CommandsRegistry } from '../../../platform/commands/common/commands.js';\nimport { IConfigurationService } from '../../../platform/configuration/common/configuration.js';\nimport { Configuration, ConfigurationModel, DefaultConfigurationModel } from '../../../platform/configuration/common/configurationModels.js';\nimport { AbstractKeybindingService } from '../../../platform/keybinding/common/abstractKeybindingService.js';\nimport { KeybindingResolver } from '../../../platform/keybinding/common/keybindingResolver.js';\nimport { KeybindingsRegistry } from '../../../platform/keybinding/common/keybindingsRegistry.js';\nimport { ResolvedKeybindingItem } from '../../../platform/keybinding/common/resolvedKeybindingItem.js';\nimport { USLayoutResolvedKeybinding } from '../../../platform/keybinding/common/usLayoutResolvedKeybinding.js';\nimport { NoOpNotification } from '../../../platform/notification/common/notification.js';\nimport { WorkspaceFolder } from '../../../platform/workspace/common/workspace.js';\nimport { SimpleServicesNLS } from '../../common/standaloneStrings.js';\n\nvar SimpleModel =\n/** @class */\nfunction () {\n  function SimpleModel(model) {\n    this.model = model;\n    this._onDispose = new Emitter();\n  }\n\n  Object.defineProperty(SimpleModel.prototype, \"textEditorModel\", {\n    get: function () {\n      return this.model;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SimpleModel.prototype.dispose = function () {\n    this._onDispose.fire();\n  };\n\n  return SimpleModel;\n}();\n\nexport { SimpleModel };\n\nfunction withTypedEditor(widget, codeEditorCallback, diffEditorCallback) {\n  if (isCodeEditor(widget)) {\n    // Single Editor\n    return codeEditorCallback(widget);\n  } else {\n    // Diff Editor\n    return diffEditorCallback(widget);\n  }\n}\n\nvar SimpleEditorModelResolverService =\n/** @class */\nfunction () {\n  function SimpleEditorModelResolverService() {}\n\n  SimpleEditorModelResolverService.prototype.setEditor = function (editor) {\n    this.editor = editor;\n  };\n\n  SimpleEditorModelResolverService.prototype.createModelReference = function (resource) {\n    var _this = this;\n\n    var model = null;\n\n    if (this.editor) {\n      model = withTypedEditor(this.editor, function (editor) {\n        return _this.findModel(editor, resource);\n      }, function (diffEditor) {\n        return _this.findModel(diffEditor.getOriginalEditor(), resource) || _this.findModel(diffEditor.getModifiedEditor(), resource);\n      });\n    }\n\n    if (!model) {\n      return Promise.reject(new Error(\"Model not found\"));\n    }\n\n    return Promise.resolve(new ImmortalReference(new SimpleModel(model)));\n  };\n\n  SimpleEditorModelResolverService.prototype.findModel = function (editor, resource) {\n    var model = editor.getModel();\n\n    if (model && model.uri.toString() !== resource.toString()) {\n      return null;\n    }\n\n    return model;\n  };\n\n  return SimpleEditorModelResolverService;\n}();\n\nexport { SimpleEditorModelResolverService };\n\nvar SimpleEditorProgressService =\n/** @class */\nfunction () {\n  function SimpleEditorProgressService() {}\n\n  SimpleEditorProgressService.prototype.showWhile = function (promise, delay) {\n    return Promise.resolve(undefined);\n  };\n\n  return SimpleEditorProgressService;\n}();\n\nexport { SimpleEditorProgressService };\n\nvar SimpleDialogService =\n/** @class */\nfunction () {\n  function SimpleDialogService() {}\n\n  return SimpleDialogService;\n}();\n\nexport { SimpleDialogService };\n\nvar SimpleNotificationService =\n/** @class */\nfunction () {\n  function SimpleNotificationService() {}\n\n  SimpleNotificationService.prototype.info = function (message) {\n    return this.notify({\n      severity: Severity.Info,\n      message: message\n    });\n  };\n\n  SimpleNotificationService.prototype.warn = function (message) {\n    return this.notify({\n      severity: Severity.Warning,\n      message: message\n    });\n  };\n\n  SimpleNotificationService.prototype.error = function (error) {\n    return this.notify({\n      severity: Severity.Error,\n      message: error\n    });\n  };\n\n  SimpleNotificationService.prototype.notify = function (notification) {\n    switch (notification.severity) {\n      case Severity.Error:\n        console.error(notification.message);\n        break;\n\n      case Severity.Warning:\n        console.warn(notification.message);\n        break;\n\n      default:\n        console.log(notification.message);\n        break;\n    }\n\n    return SimpleNotificationService.NO_OP;\n  };\n\n  SimpleNotificationService.prototype.status = function (message, options) {\n    return Disposable.None;\n  };\n\n  SimpleNotificationService.NO_OP = new NoOpNotification();\n  return SimpleNotificationService;\n}();\n\nexport { SimpleNotificationService };\n\nvar StandaloneCommandService =\n/** @class */\nfunction () {\n  function StandaloneCommandService(instantiationService) {\n    this._onWillExecuteCommand = new Emitter();\n    this._onDidExecuteCommand = new Emitter();\n    this._instantiationService = instantiationService;\n    this._dynamicCommands = Object.create(null);\n  }\n\n  StandaloneCommandService.prototype.addCommand = function (command) {\n    var _this = this;\n\n    var id = command.id;\n    this._dynamicCommands[id] = command;\n    return toDisposable(function () {\n      delete _this._dynamicCommands[id];\n    });\n  };\n\n  StandaloneCommandService.prototype.executeCommand = function (id) {\n    var args = [];\n\n    for (var _i = 1; _i < arguments.length; _i++) {\n      args[_i - 1] = arguments[_i];\n    }\n\n    var command = CommandsRegistry.getCommand(id) || this._dynamicCommands[id];\n\n    if (!command) {\n      return Promise.reject(new Error(\"command '\" + id + \"' not found\"));\n    }\n\n    try {\n      this._onWillExecuteCommand.fire({\n        commandId: id,\n        args: args\n      });\n\n      var result = this._instantiationService.invokeFunction.apply(this._instantiationService, [command.handler].concat(args));\n\n      this._onDidExecuteCommand.fire({\n        commandId: id,\n        args: args\n      });\n\n      return Promise.resolve(result);\n    } catch (err) {\n      return Promise.reject(err);\n    }\n  };\n\n  return StandaloneCommandService;\n}();\n\nexport { StandaloneCommandService };\n\nvar StandaloneKeybindingService =\n/** @class */\nfunction (_super) {\n  __extends(StandaloneKeybindingService, _super);\n\n  function StandaloneKeybindingService(contextKeyService, commandService, telemetryService, notificationService, domNode) {\n    var _this = _super.call(this, contextKeyService, commandService, telemetryService, notificationService) || this;\n\n    _this._cachedResolver = null;\n    _this._dynamicKeybindings = [];\n\n    _this._register(dom.addDisposableListener(domNode, dom.EventType.KEY_DOWN, function (e) {\n      var keyEvent = new StandardKeyboardEvent(e);\n\n      var shouldPreventDefault = _this._dispatch(keyEvent, keyEvent.target);\n\n      if (shouldPreventDefault) {\n        keyEvent.preventDefault();\n      }\n    }));\n\n    return _this;\n  }\n\n  StandaloneKeybindingService.prototype.addDynamicKeybinding = function (commandId, _keybinding, handler, when) {\n    var _this = this;\n\n    var keybinding = createKeybinding(_keybinding, OS);\n\n    if (!keybinding) {\n      throw new Error(\"Invalid keybinding\");\n    }\n\n    var toDispose = new DisposableStore();\n\n    this._dynamicKeybindings.push({\n      keybinding: keybinding,\n      command: commandId,\n      when: when,\n      weight1: 1000,\n      weight2: 0\n    });\n\n    toDispose.add(toDisposable(function () {\n      for (var i = 0; i < _this._dynamicKeybindings.length; i++) {\n        var kb = _this._dynamicKeybindings[i];\n\n        if (kb.command === commandId) {\n          _this._dynamicKeybindings.splice(i, 1);\n\n          _this.updateResolver({\n            source: 1\n            /* Default */\n\n          });\n\n          return;\n        }\n      }\n    }));\n    var commandService = this._commandService;\n\n    if (commandService instanceof StandaloneCommandService) {\n      toDispose.add(commandService.addCommand({\n        id: commandId,\n        handler: handler\n      }));\n    } else {\n      throw new Error('Unknown command service!');\n    }\n\n    this.updateResolver({\n      source: 1\n      /* Default */\n\n    });\n    return toDispose;\n  };\n\n  StandaloneKeybindingService.prototype.updateResolver = function (event) {\n    this._cachedResolver = null;\n\n    this._onDidUpdateKeybindings.fire(event);\n  };\n\n  StandaloneKeybindingService.prototype._getResolver = function () {\n    if (!this._cachedResolver) {\n      var defaults = this._toNormalizedKeybindingItems(KeybindingsRegistry.getDefaultKeybindings(), true);\n\n      var overrides = this._toNormalizedKeybindingItems(this._dynamicKeybindings, false);\n\n      this._cachedResolver = new KeybindingResolver(defaults, overrides);\n    }\n\n    return this._cachedResolver;\n  };\n\n  StandaloneKeybindingService.prototype._documentHasFocus = function () {\n    return document.hasFocus();\n  };\n\n  StandaloneKeybindingService.prototype._toNormalizedKeybindingItems = function (items, isDefault) {\n    var result = [],\n        resultLen = 0;\n\n    for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n      var item = items_1[_i];\n      var when = item.when || undefined;\n      var keybinding = item.keybinding;\n\n      if (!keybinding) {\n        // This might be a removal keybinding item in user settings => accept it\n        result[resultLen++] = new ResolvedKeybindingItem(undefined, item.command, item.commandArgs, when, isDefault);\n      } else {\n        var resolvedKeybindings = this.resolveKeybinding(keybinding);\n\n        for (var _a = 0, resolvedKeybindings_1 = resolvedKeybindings; _a < resolvedKeybindings_1.length; _a++) {\n          var resolvedKeybinding = resolvedKeybindings_1[_a];\n          result[resultLen++] = new ResolvedKeybindingItem(resolvedKeybinding, item.command, item.commandArgs, when, isDefault);\n        }\n      }\n    }\n\n    return result;\n  };\n\n  StandaloneKeybindingService.prototype.resolveKeybinding = function (keybinding) {\n    return [new USLayoutResolvedKeybinding(keybinding, OS)];\n  };\n\n  StandaloneKeybindingService.prototype.resolveKeyboardEvent = function (keyboardEvent) {\n    var keybinding = new SimpleKeybinding(keyboardEvent.ctrlKey, keyboardEvent.shiftKey, keyboardEvent.altKey, keyboardEvent.metaKey, keyboardEvent.keyCode).toChord();\n    return new USLayoutResolvedKeybinding(keybinding, OS);\n  };\n\n  return StandaloneKeybindingService;\n}(AbstractKeybindingService);\n\nexport { StandaloneKeybindingService };\n\nfunction isConfigurationOverrides(thing) {\n  return thing && typeof thing === 'object' && (!thing.overrideIdentifier || typeof thing.overrideIdentifier === 'string') && (!thing.resource || thing.resource instanceof URI);\n}\n\nvar SimpleConfigurationService =\n/** @class */\nfunction () {\n  function SimpleConfigurationService() {\n    this._onDidChangeConfiguration = new Emitter();\n    this.onDidChangeConfiguration = this._onDidChangeConfiguration.event;\n    this._configuration = new Configuration(new DefaultConfigurationModel(), new ConfigurationModel());\n  }\n\n  SimpleConfigurationService.prototype.configuration = function () {\n    return this._configuration;\n  };\n\n  SimpleConfigurationService.prototype.getValue = function (arg1, arg2) {\n    var section = typeof arg1 === 'string' ? arg1 : undefined;\n    var overrides = isConfigurationOverrides(arg1) ? arg1 : isConfigurationOverrides(arg2) ? arg2 : {};\n    return this.configuration().getValue(section, overrides, undefined);\n  };\n\n  SimpleConfigurationService.prototype.updateValue = function (key, value, arg3, arg4) {\n    this.configuration().updateValue(key, value);\n    return Promise.resolve();\n  };\n\n  SimpleConfigurationService.prototype.inspect = function (key, options) {\n    if (options === void 0) {\n      options = {};\n    }\n\n    return this.configuration().inspect(key, options, undefined);\n  };\n\n  return SimpleConfigurationService;\n}();\n\nexport { SimpleConfigurationService };\n\nvar SimpleResourceConfigurationService =\n/** @class */\nfunction () {\n  function SimpleResourceConfigurationService(configurationService) {\n    var _this = this;\n\n    this.configurationService = configurationService;\n    this._onDidChangeConfiguration = new Emitter();\n    this.configurationService.onDidChangeConfiguration(function (e) {\n      _this._onDidChangeConfiguration.fire(e);\n    });\n  }\n\n  SimpleResourceConfigurationService.prototype.getValue = function (resource, arg2, arg3) {\n    var position = Pos.isIPosition(arg2) ? arg2 : null;\n    var section = position ? typeof arg3 === 'string' ? arg3 : undefined : typeof arg2 === 'string' ? arg2 : undefined;\n\n    if (typeof section === 'undefined') {\n      return this.configurationService.getValue();\n    }\n\n    return this.configurationService.getValue(section);\n  };\n\n  return SimpleResourceConfigurationService;\n}();\n\nexport { SimpleResourceConfigurationService };\n\nvar SimpleResourcePropertiesService =\n/** @class */\nfunction () {\n  function SimpleResourcePropertiesService(configurationService) {\n    this.configurationService = configurationService;\n  }\n\n  SimpleResourcePropertiesService.prototype.getEOL = function (resource) {\n    var filesConfiguration = this.configurationService.getValue('files');\n\n    if (filesConfiguration && filesConfiguration.eol) {\n      if (filesConfiguration.eol !== 'auto') {\n        return filesConfiguration.eol;\n      }\n    }\n\n    return isLinux || isMacintosh ? '\\n' : '\\r\\n';\n  };\n\n  SimpleResourcePropertiesService = __decorate([__param(0, IConfigurationService)], SimpleResourcePropertiesService);\n  return SimpleResourcePropertiesService;\n}();\n\nexport { SimpleResourcePropertiesService };\n\nvar StandaloneTelemetryService =\n/** @class */\nfunction () {\n  function StandaloneTelemetryService() {\n    this._serviceBrand = undefined;\n  }\n\n  StandaloneTelemetryService.prototype.publicLog = function (eventName, data) {\n    return Promise.resolve(undefined);\n  };\n\n  StandaloneTelemetryService.prototype.publicLog2 = function (eventName, data) {\n    return this.publicLog(eventName, data);\n  };\n\n  return StandaloneTelemetryService;\n}();\n\nexport { StandaloneTelemetryService };\n\nvar SimpleWorkspaceContextService =\n/** @class */\nfunction () {\n  function SimpleWorkspaceContextService() {\n    var resource = URI.from({\n      scheme: SimpleWorkspaceContextService.SCHEME,\n      authority: 'model',\n      path: '/'\n    });\n    this.workspace = {\n      id: '4064f6ec-cb38-4ad0-af64-ee6467e63c82',\n      folders: [new WorkspaceFolder({\n        uri: resource,\n        name: '',\n        index: 0\n      })]\n    };\n  }\n\n  SimpleWorkspaceContextService.prototype.getWorkspace = function () {\n    return this.workspace;\n  };\n\n  SimpleWorkspaceContextService.prototype.getWorkspaceFolder = function (resource) {\n    return resource && resource.scheme === SimpleWorkspaceContextService.SCHEME ? this.workspace.folders[0] : null;\n  };\n\n  SimpleWorkspaceContextService.SCHEME = 'inmemory';\n  return SimpleWorkspaceContextService;\n}();\n\nexport { SimpleWorkspaceContextService };\nexport function applyConfigurationValues(configurationService, source, isDiffEditor) {\n  if (!source) {\n    return;\n  }\n\n  if (!(configurationService instanceof SimpleConfigurationService)) {\n    return;\n  }\n\n  Object.keys(source).forEach(function (key) {\n    if (isEditorConfigurationKey(key)) {\n      configurationService.updateValue(\"editor.\" + key, source[key]);\n    }\n\n    if (isDiffEditor && isDiffEditorConfigurationKey(key)) {\n      configurationService.updateValue(\"diffEditor.\" + key, source[key]);\n    }\n  });\n}\n\nvar SimpleBulkEditService =\n/** @class */\nfunction () {\n  function SimpleBulkEditService(_modelService) {\n    this._modelService = _modelService; //\n  }\n\n  SimpleBulkEditService.prototype.apply = function (workspaceEdit, options) {\n    var edits = new Map();\n\n    if (workspaceEdit.edits) {\n      for (var _i = 0, _a = workspaceEdit.edits; _i < _a.length; _i++) {\n        var edit = _a[_i];\n\n        if (!isResourceTextEdit(edit)) {\n          return Promise.reject(new Error('bad edit - only text edits are supported'));\n        }\n\n        var model = this._modelService.getModel(edit.resource);\n\n        if (!model) {\n          return Promise.reject(new Error('bad edit - model not found'));\n        }\n\n        var array = edits.get(model);\n\n        if (!array) {\n          array = [];\n        }\n\n        edits.set(model, array.concat(edit.edits));\n      }\n    }\n\n    var totalEdits = 0;\n    var totalFiles = 0;\n    edits.forEach(function (edits, model) {\n      model.applyEdits(edits.map(function (edit) {\n        return EditOperation.replaceMove(Range.lift(edit.range), edit.text);\n      }));\n      totalFiles += 1;\n      totalEdits += edits.length;\n    });\n    return Promise.resolve({\n      selection: undefined,\n      ariaSummary: strings.format(SimpleServicesNLS.bulkEditServiceSummary, totalEdits, totalFiles)\n    });\n  };\n\n  return SimpleBulkEditService;\n}();\n\nexport { SimpleBulkEditService };\n\nvar SimpleUriLabelService =\n/** @class */\nfunction () {\n  function SimpleUriLabelService() {}\n\n  SimpleUriLabelService.prototype.getUriLabel = function (resource, options) {\n    if (resource.scheme === 'file') {\n      return resource.fsPath;\n    }\n\n    return resource.path;\n  };\n\n  return SimpleUriLabelService;\n}();\n\nexport { SimpleUriLabelService };\n\nvar SimpleLayoutService =\n/** @class */\nfunction () {\n  function SimpleLayoutService(_container) {\n    this._container = _container;\n    this.onLayout = Event.None;\n  }\n\n  Object.defineProperty(SimpleLayoutService.prototype, \"container\", {\n    get: function () {\n      return this._container;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  return SimpleLayoutService;\n}();\n\nexport { SimpleLayoutService };","map":null,"metadata":{},"sourceType":"module"}