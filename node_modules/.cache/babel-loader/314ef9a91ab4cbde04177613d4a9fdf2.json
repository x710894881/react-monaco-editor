{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar ViewEventDispatcher =\n/** @class */\nfunction () {\n  function ViewEventDispatcher(eventHandlerGateKeeper) {\n    this._eventHandlerGateKeeper = eventHandlerGateKeeper;\n    this._eventHandlers = [];\n    this._eventQueue = null;\n    this._isConsumingQueue = false;\n  }\n\n  ViewEventDispatcher.prototype.addEventHandler = function (eventHandler) {\n    for (var i = 0, len = this._eventHandlers.length; i < len; i++) {\n      if (this._eventHandlers[i] === eventHandler) {\n        console.warn('Detected duplicate listener in ViewEventDispatcher', eventHandler);\n      }\n    }\n\n    this._eventHandlers.push(eventHandler);\n  };\n\n  ViewEventDispatcher.prototype.removeEventHandler = function (eventHandler) {\n    for (var i = 0; i < this._eventHandlers.length; i++) {\n      if (this._eventHandlers[i] === eventHandler) {\n        this._eventHandlers.splice(i, 1);\n\n        break;\n      }\n    }\n  };\n\n  ViewEventDispatcher.prototype.emit = function (event) {\n    if (this._eventQueue) {\n      this._eventQueue.push(event);\n    } else {\n      this._eventQueue = [event];\n    }\n\n    if (!this._isConsumingQueue) {\n      this.consumeQueue();\n    }\n  };\n\n  ViewEventDispatcher.prototype.emitMany = function (events) {\n    if (this._eventQueue) {\n      this._eventQueue = this._eventQueue.concat(events);\n    } else {\n      this._eventQueue = events;\n    }\n\n    if (!this._isConsumingQueue) {\n      this.consumeQueue();\n    }\n  };\n\n  ViewEventDispatcher.prototype.consumeQueue = function () {\n    var _this = this;\n\n    this._eventHandlerGateKeeper(function () {\n      try {\n        _this._isConsumingQueue = true;\n\n        _this._doConsumeQueue();\n      } finally {\n        _this._isConsumingQueue = false;\n      }\n    });\n  };\n\n  ViewEventDispatcher.prototype._doConsumeQueue = function () {\n    while (this._eventQueue) {\n      // Empty event queue, as events might come in while sending these off\n      var events = this._eventQueue;\n      this._eventQueue = null; // Use a clone of the event handlers list, as they might remove themselves\n\n      var eventHandlers = this._eventHandlers.slice(0);\n\n      for (var i = 0, len = eventHandlers.length; i < len; i++) {\n        eventHandlers[i].handleEvents(events);\n      }\n    }\n  };\n\n  return ViewEventDispatcher;\n}();\n\nexport { ViewEventDispatcher };","map":null,"metadata":{},"sourceType":"module"}