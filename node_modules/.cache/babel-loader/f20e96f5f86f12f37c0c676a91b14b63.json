{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './decorations.css';\nimport { DynamicViewOverlay } from '../../view/dynamicViewOverlay.js';\nimport { Range } from '../../../common/core/range.js';\nimport { HorizontalRange } from '../../../common/view/renderingContext.js';\n\nvar DecorationsOverlay =\n/** @class */\nfunction (_super) {\n  __extends(DecorationsOverlay, _super);\n\n  function DecorationsOverlay(context) {\n    var _this = _super.call(this) || this;\n\n    _this._context = context;\n    _this._lineHeight = _this._context.configuration.editor.lineHeight;\n    _this._typicalHalfwidthCharacterWidth = _this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n    _this._renderResult = null;\n\n    _this._context.addEventHandler(_this);\n\n    return _this;\n  }\n\n  DecorationsOverlay.prototype.dispose = function () {\n    this._context.removeEventHandler(this);\n\n    this._renderResult = null;\n\n    _super.prototype.dispose.call(this);\n  }; // --- begin event handlers\n\n\n  DecorationsOverlay.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._lineHeight = this._context.configuration.editor.lineHeight;\n    }\n\n    if (e.fontInfo) {\n      this._typicalHalfwidthCharacterWidth = this._context.configuration.editor.fontInfo.typicalHalfwidthCharacterWidth;\n    }\n\n    return true;\n  };\n\n  DecorationsOverlay.prototype.onDecorationsChanged = function (e) {\n    return true;\n  };\n\n  DecorationsOverlay.prototype.onFlushed = function (e) {\n    return true;\n  };\n\n  DecorationsOverlay.prototype.onLinesChanged = function (e) {\n    return true;\n  };\n\n  DecorationsOverlay.prototype.onLinesDeleted = function (e) {\n    return true;\n  };\n\n  DecorationsOverlay.prototype.onLinesInserted = function (e) {\n    return true;\n  };\n\n  DecorationsOverlay.prototype.onScrollChanged = function (e) {\n    return e.scrollTopChanged || e.scrollWidthChanged;\n  };\n\n  DecorationsOverlay.prototype.onZonesChanged = function (e) {\n    return true;\n  }; // --- end event handlers\n\n\n  DecorationsOverlay.prototype.prepareRender = function (ctx) {\n    var _decorations = ctx.getDecorationsInViewport(); // Keep only decorations with `className`\n\n\n    var decorations = [],\n        decorationsLen = 0;\n\n    for (var i = 0, len = _decorations.length; i < len; i++) {\n      var d = _decorations[i];\n\n      if (d.options.className) {\n        decorations[decorationsLen++] = d;\n      }\n    } // Sort decorations for consistent render output\n\n\n    decorations = decorations.sort(function (a, b) {\n      if (a.options.zIndex < b.options.zIndex) {\n        return -1;\n      }\n\n      if (a.options.zIndex > b.options.zIndex) {\n        return 1;\n      }\n\n      var aClassName = a.options.className;\n      var bClassName = b.options.className;\n\n      if (aClassName < bClassName) {\n        return -1;\n      }\n\n      if (aClassName > bClassName) {\n        return 1;\n      }\n\n      return Range.compareRangesUsingStarts(a.range, b.range);\n    });\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n    var output = [];\n\n    for (var lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n      var lineIndex = lineNumber - visibleStartLineNumber;\n      output[lineIndex] = '';\n    } // Render first whole line decorations and then regular decorations\n\n\n    this._renderWholeLineDecorations(ctx, decorations, output);\n\n    this._renderNormalDecorations(ctx, decorations, output);\n\n    this._renderResult = output;\n  };\n\n  DecorationsOverlay.prototype._renderWholeLineDecorations = function (ctx, decorations, output) {\n    var lineHeight = String(this._lineHeight);\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n    for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n      var d = decorations[i];\n\n      if (!d.options.isWholeLine) {\n        continue;\n      }\n\n      var decorationOutput = '<div class=\"cdr ' + d.options.className + '\" style=\"left:0;width:100%;height:' + lineHeight + 'px;\"></div>';\n      var startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n      var endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n\n      for (var j = startLineNumber; j <= endLineNumber; j++) {\n        var lineIndex = j - visibleStartLineNumber;\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  };\n\n  DecorationsOverlay.prototype._renderNormalDecorations = function (ctx, decorations, output) {\n    var lineHeight = String(this._lineHeight);\n    var visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n    var prevClassName = null;\n    var prevShowIfCollapsed = false;\n    var prevRange = null;\n\n    for (var i = 0, lenI = decorations.length; i < lenI; i++) {\n      var d = decorations[i];\n\n      if (d.options.isWholeLine) {\n        continue;\n      }\n\n      var className = d.options.className;\n      var showIfCollapsed = Boolean(d.options.showIfCollapsed);\n      var range = d.range;\n\n      if (showIfCollapsed && range.endColumn === 1 && range.endLineNumber !== range.startLineNumber) {\n        range = new Range(range.startLineNumber, range.startColumn, range.endLineNumber - 1, this._context.model.getLineMaxColumn(range.endLineNumber - 1));\n      }\n\n      if (prevClassName === className && prevShowIfCollapsed === showIfCollapsed && Range.areIntersectingOrTouching(prevRange, range)) {\n        // merge into previous decoration\n        prevRange = Range.plusRange(prevRange, range);\n        continue;\n      } // flush previous decoration\n\n\n      if (prevClassName !== null) {\n        this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n      }\n\n      prevClassName = className;\n      prevShowIfCollapsed = showIfCollapsed;\n      prevRange = range;\n    }\n\n    if (prevClassName !== null) {\n      this._renderNormalDecoration(ctx, prevRange, prevClassName, prevShowIfCollapsed, lineHeight, visibleStartLineNumber, output);\n    }\n  };\n\n  DecorationsOverlay.prototype._renderNormalDecoration = function (ctx, range, className, showIfCollapsed, lineHeight, visibleStartLineNumber, output) {\n    var linesVisibleRanges = ctx.linesVisibleRangesForRange(range,\n    /*TODO@Alex*/\n    className === 'findMatch');\n\n    if (!linesVisibleRanges) {\n      return;\n    }\n\n    for (var j = 0, lenJ = linesVisibleRanges.length; j < lenJ; j++) {\n      var lineVisibleRanges = linesVisibleRanges[j];\n      var lineIndex = lineVisibleRanges.lineNumber - visibleStartLineNumber;\n\n      if (showIfCollapsed && lineVisibleRanges.ranges.length === 1) {\n        var singleVisibleRange = lineVisibleRanges.ranges[0];\n\n        if (singleVisibleRange.width === 0) {\n          // collapsed range case => make the decoration visible by faking its width\n          lineVisibleRanges.ranges[0] = new HorizontalRange(singleVisibleRange.left, this._typicalHalfwidthCharacterWidth);\n        }\n      }\n\n      for (var k = 0, lenK = lineVisibleRanges.ranges.length; k < lenK; k++) {\n        var visibleRange = lineVisibleRanges.ranges[k];\n        var decorationOutput = '<div class=\"cdr ' + className + '\" style=\"left:' + String(visibleRange.left) + 'px;width:' + String(visibleRange.width) + 'px;height:' + lineHeight + 'px;\"></div>';\n        output[lineIndex] += decorationOutput;\n      }\n    }\n  };\n\n  DecorationsOverlay.prototype.render = function (startLineNumber, lineNumber) {\n    if (!this._renderResult) {\n      return '';\n    }\n\n    var lineIndex = lineNumber - startLineNumber;\n\n    if (lineIndex < 0 || lineIndex >= this._renderResult.length) {\n      return '';\n    }\n\n    return this._renderResult[lineIndex];\n  };\n\n  return DecorationsOverlay;\n}(DynamicViewOverlay);\n\nexport { DecorationsOverlay };","map":null,"metadata":{},"sourceType":"module"}