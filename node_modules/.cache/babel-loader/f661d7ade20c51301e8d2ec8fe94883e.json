{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './progressbar.css';\nimport { Disposable } from '../../../common/lifecycle.js';\nimport { Color } from '../../../common/color.js';\nimport { mixin } from '../../../common/objects.js';\nimport { removeClasses, addClass, hasClass, hide, show } from '../../dom.js';\nimport { RunOnceScheduler } from '../../../common/async.js';\nvar css_done = 'done';\nvar css_active = 'active';\nvar css_infinite = 'infinite';\nvar css_discrete = 'discrete';\nvar css_progress_container = 'monaco-progress-container';\nvar css_progress_bit = 'progress-bit';\nvar defaultOpts = {\n  progressBarBackground: Color.fromHex('#0E70C0')\n};\n/**\n * A progress bar with support for infinite or discrete progress.\n */\n\nvar ProgressBar =\n/** @class */\nfunction (_super) {\n  __extends(ProgressBar, _super);\n\n  function ProgressBar(container, options) {\n    var _this = _super.call(this) || this;\n\n    _this.options = options || Object.create(null);\n    mixin(_this.options, defaultOpts, false);\n    _this.workedVal = 0;\n    _this.progressBarBackground = _this.options.progressBarBackground;\n\n    _this._register(_this.showDelayedScheduler = new RunOnceScheduler(function () {\n      return show(_this.element);\n    }, 0));\n\n    _this.create(container);\n\n    return _this;\n  }\n\n  ProgressBar.prototype.create = function (container) {\n    this.element = document.createElement('div');\n    addClass(this.element, css_progress_container);\n    container.appendChild(this.element);\n    this.bit = document.createElement('div');\n    addClass(this.bit, css_progress_bit);\n    this.element.appendChild(this.bit);\n    this.applyStyles();\n  };\n\n  ProgressBar.prototype.off = function () {\n    this.bit.style.width = 'inherit';\n    this.bit.style.opacity = '1';\n    removeClasses(this.element, css_active, css_infinite, css_discrete);\n    this.workedVal = 0;\n    this.totalWork = undefined;\n  };\n  /**\n   * Stops the progressbar from showing any progress instantly without fading out.\n   */\n\n\n  ProgressBar.prototype.stop = function () {\n    return this.doDone(false);\n  };\n\n  ProgressBar.prototype.doDone = function (delayed) {\n    var _this = this;\n\n    addClass(this.element, css_done); // let it grow to 100% width and hide afterwards\n\n    if (!hasClass(this.element, css_infinite)) {\n      this.bit.style.width = 'inherit';\n\n      if (delayed) {\n        setTimeout(function () {\n          return _this.off();\n        }, 200);\n      } else {\n        this.off();\n      }\n    } // let it fade out and hide afterwards\n    else {\n        this.bit.style.opacity = '0';\n\n        if (delayed) {\n          setTimeout(function () {\n            return _this.off();\n          }, 200);\n        } else {\n          this.off();\n        }\n      }\n\n    return this;\n  };\n\n  ProgressBar.prototype.hide = function () {\n    hide(this.element);\n    this.showDelayedScheduler.cancel();\n  };\n\n  ProgressBar.prototype.style = function (styles) {\n    this.progressBarBackground = styles.progressBarBackground;\n    this.applyStyles();\n  };\n\n  ProgressBar.prototype.applyStyles = function () {\n    if (this.bit) {\n      var background = this.progressBarBackground ? this.progressBarBackground.toString() : null;\n      this.bit.style.backgroundColor = background;\n    }\n  };\n\n  return ProgressBar;\n}(Disposable);\n\nexport { ProgressBar };","map":null,"metadata":{},"sourceType":"module"}