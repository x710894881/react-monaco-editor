{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../../base/common/errors.js';\nimport * as strings from '../../../../base/common/strings.js';\nimport { IndentAction } from '../languageConfiguration.js';\n\nvar OnEnterSupport =\n/** @class */\nfunction () {\n  function OnEnterSupport(opts) {\n    var _this = this;\n\n    opts = opts || {};\n    opts.brackets = opts.brackets || [['(', ')'], ['{', '}'], ['[', ']']];\n    this._brackets = [];\n    opts.brackets.forEach(function (bracket) {\n      var openRegExp = OnEnterSupport._createOpenBracketRegExp(bracket[0]);\n\n      var closeRegExp = OnEnterSupport._createCloseBracketRegExp(bracket[1]);\n\n      if (openRegExp && closeRegExp) {\n        _this._brackets.push({\n          open: bracket[0],\n          openRegExp: openRegExp,\n          close: bracket[1],\n          closeRegExp: closeRegExp\n        });\n      }\n    });\n    this._regExpRules = opts.regExpRules || [];\n  }\n\n  OnEnterSupport.prototype.onEnter = function (oneLineAboveText, beforeEnterText, afterEnterText) {\n    // (1): `regExpRules`\n    for (var i = 0, len = this._regExpRules.length; i < len; i++) {\n      var rule = this._regExpRules[i];\n      var regResult = [{\n        reg: rule.beforeText,\n        text: beforeEnterText\n      }, {\n        reg: rule.afterText,\n        text: afterEnterText\n      }, {\n        reg: rule.oneLineAboveText,\n        text: oneLineAboveText\n      }].every(function (obj) {\n        return obj.reg ? obj.reg.test(obj.text) : true;\n      });\n\n      if (regResult) {\n        return rule.action;\n      }\n    } // (2): Special indent-outdent\n\n\n    if (beforeEnterText.length > 0 && afterEnterText.length > 0) {\n      for (var i = 0, len = this._brackets.length; i < len; i++) {\n        var bracket = this._brackets[i];\n\n        if (bracket.openRegExp.test(beforeEnterText) && bracket.closeRegExp.test(afterEnterText)) {\n          return {\n            indentAction: IndentAction.IndentOutdent\n          };\n        }\n      }\n    } // (4): Open bracket based logic\n\n\n    if (beforeEnterText.length > 0) {\n      for (var i = 0, len = this._brackets.length; i < len; i++) {\n        var bracket = this._brackets[i];\n\n        if (bracket.openRegExp.test(beforeEnterText)) {\n          return {\n            indentAction: IndentAction.Indent\n          };\n        }\n      }\n    }\n\n    return null;\n  };\n\n  OnEnterSupport._createOpenBracketRegExp = function (bracket) {\n    var str = strings.escapeRegExpCharacters(bracket);\n\n    if (!/\\B/.test(str.charAt(0))) {\n      str = '\\\\b' + str;\n    }\n\n    str += '\\\\s*$';\n    return OnEnterSupport._safeRegExp(str);\n  };\n\n  OnEnterSupport._createCloseBracketRegExp = function (bracket) {\n    var str = strings.escapeRegExpCharacters(bracket);\n\n    if (!/\\B/.test(str.charAt(str.length - 1))) {\n      str = str + '\\\\b';\n    }\n\n    str = '^\\\\s*' + str;\n    return OnEnterSupport._safeRegExp(str);\n  };\n\n  OnEnterSupport._safeRegExp = function (def) {\n    try {\n      return new RegExp(def);\n    } catch (err) {\n      onUnexpectedError(err);\n      return null;\n    }\n  };\n\n  return OnEnterSupport;\n}();\n\nexport { OnEnterSupport };","map":null,"metadata":{},"sourceType":"module"}