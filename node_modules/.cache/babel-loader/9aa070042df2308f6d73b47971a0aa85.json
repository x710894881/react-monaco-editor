{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  wordPattern: /(#?-?\\d*\\.\\d\\w*%?)|([@$#!.:]?[\\w-?]+%?)|[@#!.]/g,\n  comments: {\n    blockComment: ['/*', '*/'],\n    lineComment: '//'\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}',\n    notIn: ['string', 'comment']\n  }, {\n    open: '[',\n    close: ']',\n    notIn: ['string', 'comment']\n  }, {\n    open: '(',\n    close: ')',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\"',\n    close: '\"',\n    notIn: ['string', 'comment']\n  }, {\n    open: '\\'',\n    close: '\\'',\n    notIn: ['string', 'comment']\n  }],\n  surroundingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '\"',\n    close: '\"'\n  }, {\n    open: '\\'',\n    close: '\\''\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#region\\\\b\\\\s*(.*?)\\\\s*\\\\*\\\\/\"),\n      end: new RegExp(\"^\\\\s*\\\\/\\\\*\\\\s*#endregion\\\\b.*\\\\*\\\\/\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.scss',\n  ws: '[ \\t\\n\\r\\f]*',\n  identifier: '-?-?([a-zA-Z]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))([\\\\w\\\\-]|(\\\\\\\\(([0-9a-fA-F]{1,6}\\\\s?)|[^[0-9a-fA-F])))*',\n  brackets: [{\n    open: '{',\n    close: '}',\n    token: 'delimiter.curly'\n  }, {\n    open: '[',\n    close: ']',\n    token: 'delimiter.bracket'\n  }, {\n    open: '(',\n    close: ')',\n    token: 'delimiter.parenthesis'\n  }, {\n    open: '<',\n    close: '>',\n    token: 'delimiter.angle'\n  }],\n  tokenizer: {\n    root: [{\n      include: '@selector'\n    }],\n    selector: [{\n      include: '@comments'\n    }, {\n      include: '@import'\n    }, {\n      include: '@variabledeclaration'\n    }, {\n      include: '@warndebug'\n    }, ['[@](include)', {\n      token: 'keyword',\n      next: '@includedeclaration'\n    }], ['[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)', {\n      token: 'keyword',\n      next: '@keyframedeclaration'\n    }], ['[@](page|content|font-face|-moz-document)', {\n      token: 'keyword'\n    }], ['[@](charset|namespace)', {\n      token: 'keyword',\n      next: '@declarationbody'\n    }], ['[@](function)', {\n      token: 'keyword',\n      next: '@functiondeclaration'\n    }], ['[@](mixin)', {\n      token: 'keyword',\n      next: '@mixindeclaration'\n    }], ['url(\\\\-prefix)?\\\\(', {\n      token: 'meta',\n      next: '@urldeclaration'\n    }], {\n      include: '@controlstatement'\n    }, {\n      include: '@selectorname'\n    }, ['[&\\\\*]', 'tag'], ['[>\\\\+,]', 'delimiter'], ['\\\\[', {\n      token: 'delimiter.bracket',\n      next: '@selectorattribute'\n    }], ['{', {\n      token: 'delimiter.curly',\n      next: '@selectorbody'\n    }]],\n    selectorbody: [['[*_]?@identifier@ws:(?=(\\\\s|\\\\d|[^{;}]*[;}]))', 'attribute.name', '@rulevalue'], {\n      include: '@selector'\n    }, ['[@](extend)', {\n      token: 'keyword',\n      next: '@extendbody'\n    }], ['[@](return)', {\n      token: 'keyword',\n      next: '@declarationbody'\n    }], ['}', {\n      token: 'delimiter.curly',\n      next: '@pop'\n    }]],\n    selectorname: [['#{', {\n      token: 'meta',\n      next: '@variableinterpolation'\n    }], ['(\\\\.|#(?=[^{])|%|(@identifier)|:)+', 'tag']],\n    selectorattribute: [{\n      include: '@term'\n    }, [']', {\n      token: 'delimiter.bracket',\n      next: '@pop'\n    }]],\n    term: [{\n      include: '@comments'\n    }, ['url(\\\\-prefix)?\\\\(', {\n      token: 'meta',\n      next: '@urldeclaration'\n    }], {\n      include: '@functioninvocation'\n    }, {\n      include: '@numbers'\n    }, {\n      include: '@strings'\n    }, {\n      include: '@variablereference'\n    }, ['(and\\\\b|or\\\\b|not\\\\b)', 'operator'], {\n      include: '@name'\n    }, ['([<>=\\\\+\\\\-\\\\*\\\\/\\\\^\\\\|\\\\~,])', 'operator'], [',', 'delimiter'], ['!default', 'literal'], ['\\\\(', {\n      token: 'delimiter.parenthesis',\n      next: '@parenthizedterm'\n    }]],\n    rulevalue: [{\n      include: '@term'\n    }, ['!important', 'literal'], [';', 'delimiter', '@pop'], ['{', {\n      token: 'delimiter.curly',\n      switchTo: '@nestedproperty'\n    }], ['(?=})', {\n      token: '',\n      next: '@pop'\n    }]],\n    nestedproperty: [['[*_]?@identifier@ws:', 'attribute.name', '@rulevalue'], {\n      include: '@comments'\n    }, ['}', {\n      token: 'delimiter.curly',\n      next: '@pop'\n    }]],\n    warndebug: [['[@](warn|debug)', {\n      token: 'keyword',\n      next: '@declarationbody'\n    }]],\n    import: [['[@](import)', {\n      token: 'keyword',\n      next: '@declarationbody'\n    }]],\n    variabledeclaration: [['\\\\$@identifier@ws:', 'variable.decl', '@declarationbody']],\n    urldeclaration: [{\n      include: '@strings'\n    }, ['[^)\\r\\n]+', 'string'], ['\\\\)', {\n      token: 'meta',\n      next: '@pop'\n    }]],\n    parenthizedterm: [{\n      include: '@term'\n    }, ['\\\\)', {\n      token: 'delimiter.parenthesis',\n      next: '@pop'\n    }]],\n    declarationbody: [{\n      include: '@term'\n    }, [';', 'delimiter', '@pop'], ['(?=})', {\n      token: '',\n      next: '@pop'\n    }]],\n    extendbody: [{\n      include: '@selectorname'\n    }, ['!optional', 'literal'], [';', 'delimiter', '@pop'], ['(?=})', {\n      token: '',\n      next: '@pop'\n    }]],\n    variablereference: [['\\\\$@identifier', 'variable.ref'], ['\\\\.\\\\.\\\\.', 'operator'], ['#{', {\n      token: 'meta',\n      next: '@variableinterpolation'\n    }]],\n    variableinterpolation: [{\n      include: '@variablereference'\n    }, ['}', {\n      token: 'meta',\n      next: '@pop'\n    }]],\n    comments: [['\\\\/\\\\*', 'comment', '@comment'], ['\\\\/\\\\/+.*', 'comment']],\n    comment: [['\\\\*\\\\/', 'comment', '@pop'], ['.', 'comment']],\n    name: [['@identifier', 'attribute.value']],\n    numbers: [['(\\\\d*\\\\.)?\\\\d+([eE][\\\\-+]?\\\\d+)?', {\n      token: 'number',\n      next: '@units'\n    }], ['#[0-9a-fA-F_]+(?!\\\\w)', 'number.hex']],\n    units: [['(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?', 'number', '@pop']],\n    functiondeclaration: [['@identifier@ws\\\\(', {\n      token: 'meta',\n      next: '@parameterdeclaration'\n    }], ['{', {\n      token: 'delimiter.curly',\n      switchTo: '@functionbody'\n    }]],\n    mixindeclaration: [// mixin with parameters\n    ['@identifier@ws\\\\(', {\n      token: 'meta',\n      next: '@parameterdeclaration'\n    }], // mixin without parameters\n    ['@identifier', 'meta'], ['{', {\n      token: 'delimiter.curly',\n      switchTo: '@selectorbody'\n    }]],\n    parameterdeclaration: [['\\\\$@identifier@ws:', 'variable.decl'], ['\\\\.\\\\.\\\\.', 'operator'], [',', 'delimiter'], {\n      include: '@term'\n    }, ['\\\\)', {\n      token: 'meta',\n      next: '@pop'\n    }]],\n    includedeclaration: [{\n      include: '@functioninvocation'\n    }, ['@identifier', 'meta'], [';', 'delimiter', '@pop'], ['(?=})', {\n      token: '',\n      next: '@pop'\n    }], ['{', {\n      token: 'delimiter.curly',\n      switchTo: '@selectorbody'\n    }]],\n    keyframedeclaration: [['@identifier', 'meta'], ['{', {\n      token: 'delimiter.curly',\n      switchTo: '@keyframebody'\n    }]],\n    keyframebody: [{\n      include: '@term'\n    }, ['{', {\n      token: 'delimiter.curly',\n      next: '@selectorbody'\n    }], ['}', {\n      token: 'delimiter.curly',\n      next: '@pop'\n    }]],\n    controlstatement: [['[@](if|else|for|while|each|media)', {\n      token: 'keyword.flow',\n      next: '@controlstatementdeclaration'\n    }]],\n    controlstatementdeclaration: [['(in|from|through|if|to)\\\\b', {\n      token: 'keyword.flow'\n    }], {\n      include: '@term'\n    }, ['{', {\n      token: 'delimiter.curly',\n      switchTo: '@selectorbody'\n    }]],\n    functionbody: [['[@](return)', {\n      token: 'keyword'\n    }], {\n      include: '@variabledeclaration'\n    }, {\n      include: '@term'\n    }, {\n      include: '@controlstatement'\n    }, [';', 'delimiter'], ['}', {\n      token: 'delimiter.curly',\n      next: '@pop'\n    }]],\n    functioninvocation: [['@identifier\\\\(', {\n      token: 'meta',\n      next: '@functionarguments'\n    }]],\n    functionarguments: [['\\\\$@identifier@ws:', 'attribute.name'], ['[,]', 'delimiter'], {\n      include: '@term'\n    }, ['\\\\)', {\n      token: 'meta',\n      next: '@pop'\n    }]],\n    strings: [['~?\"', {\n      token: 'string.delimiter',\n      next: '@stringenddoublequote'\n    }], ['~?\\'', {\n      token: 'string.delimiter',\n      next: '@stringendquote'\n    }]],\n    stringenddoublequote: [['\\\\\\\\.', 'string'], ['\"', {\n      token: 'string.delimiter',\n      next: '@pop'\n    }], ['.', 'string']],\n    stringendquote: [['\\\\\\\\.', 'string'], ['\\'', {\n      token: 'string.delimiter',\n      next: '@pop'\n    }], ['.', 'string']]\n  }\n};","map":null,"metadata":{},"sourceType":"module"}