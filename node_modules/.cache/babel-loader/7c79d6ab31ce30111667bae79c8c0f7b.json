{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { $ } from '../../../base/browser/dom.js';\nimport { isEmptyMarkdownString } from '../../../base/common/htmlContent.js';\nimport { DisposableStore } from '../../../base/common/lifecycle.js';\nimport { HoverOperation } from './hoverOperation.js';\nimport { GlyphHoverWidget } from './hoverWidgets.js';\nimport { MarkdownRenderer } from '../markdown/markdownRenderer.js';\nimport { NullOpenerService } from '../../../platform/opener/common/opener.js';\nimport { asArray } from '../../../base/common/arrays.js';\n\nvar MarginComputer =\n/** @class */\nfunction () {\n  function MarginComputer(editor) {\n    this._editor = editor;\n    this._lineNumber = -1;\n    this._result = [];\n  }\n\n  MarginComputer.prototype.setLineNumber = function (lineNumber) {\n    this._lineNumber = lineNumber;\n    this._result = [];\n  };\n\n  MarginComputer.prototype.clearResult = function () {\n    this._result = [];\n  };\n\n  MarginComputer.prototype.computeSync = function () {\n    var toHoverMessage = function (contents) {\n      return {\n        value: contents\n      };\n    };\n\n    var lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n\n    var result = [];\n\n    if (!lineDecorations) {\n      return result;\n    }\n\n    for (var _i = 0, lineDecorations_1 = lineDecorations; _i < lineDecorations_1.length; _i++) {\n      var d = lineDecorations_1[_i];\n\n      if (!d.options.glyphMarginClassName) {\n        continue;\n      }\n\n      var hoverMessage = d.options.glyphMarginHoverMessage;\n\n      if (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n        continue;\n      }\n\n      result.push.apply(result, asArray(hoverMessage).map(toHoverMessage));\n    }\n\n    return result;\n  };\n\n  MarginComputer.prototype.onResult = function (result, isFromSynchronousComputation) {\n    this._result = this._result.concat(result);\n  };\n\n  MarginComputer.prototype.getResult = function () {\n    return this._result;\n  };\n\n  MarginComputer.prototype.getResultWithLoadingMessage = function () {\n    return this.getResult();\n  };\n\n  return MarginComputer;\n}();\n\nvar ModesGlyphHoverWidget =\n/** @class */\nfunction (_super) {\n  __extends(ModesGlyphHoverWidget, _super);\n\n  function ModesGlyphHoverWidget(editor, modeService, openerService) {\n    if (openerService === void 0) {\n      openerService = NullOpenerService;\n    }\n\n    var _this = _super.call(this, ModesGlyphHoverWidget.ID, editor) || this;\n\n    _this._renderDisposeables = _this._register(new DisposableStore());\n    _this._messages = [];\n    _this._lastLineNumber = -1;\n    _this._markdownRenderer = _this._register(new MarkdownRenderer(_this._editor, modeService, openerService));\n    _this._computer = new MarginComputer(_this._editor);\n    _this._hoverOperation = new HoverOperation(_this._computer, function (result) {\n      return _this._withResult(result);\n    }, undefined, function (result) {\n      return _this._withResult(result);\n    }, 300);\n    return _this;\n  }\n\n  ModesGlyphHoverWidget.prototype.dispose = function () {\n    this._hoverOperation.cancel();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  ModesGlyphHoverWidget.prototype.onModelDecorationsChanged = function () {\n    if (this.isVisible) {\n      // The decorations have changed and the hover is visible,\n      // we need to recompute the displayed text\n      this._hoverOperation.cancel();\n\n      this._computer.clearResult();\n\n      this._hoverOperation.start(0\n      /* Delayed */\n      );\n    }\n  };\n\n  ModesGlyphHoverWidget.prototype.startShowingAt = function (lineNumber) {\n    if (this._lastLineNumber === lineNumber) {\n      // We have to show the widget at the exact same line number as before, so no work is needed\n      return;\n    }\n\n    this._hoverOperation.cancel();\n\n    this.hide();\n    this._lastLineNumber = lineNumber;\n\n    this._computer.setLineNumber(lineNumber);\n\n    this._hoverOperation.start(0\n    /* Delayed */\n    );\n  };\n\n  ModesGlyphHoverWidget.prototype.hide = function () {\n    this._lastLineNumber = -1;\n\n    this._hoverOperation.cancel();\n\n    _super.prototype.hide.call(this);\n  };\n\n  ModesGlyphHoverWidget.prototype._withResult = function (result) {\n    this._messages = result;\n\n    if (this._messages.length > 0) {\n      this._renderMessages(this._lastLineNumber, this._messages);\n    } else {\n      this.hide();\n    }\n  };\n\n  ModesGlyphHoverWidget.prototype._renderMessages = function (lineNumber, messages) {\n    this._renderDisposeables.clear();\n\n    var fragment = document.createDocumentFragment();\n\n    for (var _i = 0, messages_1 = messages; _i < messages_1.length; _i++) {\n      var msg = messages_1[_i];\n\n      var renderedContents = this._markdownRenderer.render(msg.value);\n\n      this._renderDisposeables.add(renderedContents);\n\n      fragment.appendChild($('div.hover-row', undefined, renderedContents.element));\n    }\n\n    this.updateContents(fragment);\n    this.showAt(lineNumber);\n  };\n\n  ModesGlyphHoverWidget.ID = 'editor.contrib.modesGlyphHoverWidget';\n  return ModesGlyphHoverWidget;\n}(GlyphHoverWidget);\n\nexport { ModesGlyphHoverWidget };","map":null,"metadata":{},"sourceType":"module"}