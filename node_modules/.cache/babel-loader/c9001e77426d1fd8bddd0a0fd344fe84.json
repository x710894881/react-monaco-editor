{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../common/event.js';\n\nvar WindowManager =\n/** @class */\nfunction () {\n  function WindowManager() {\n    // --- Zoom Level\n    this._zoomLevel = 0;\n    this._lastZoomLevelChangeTime = 0;\n    this._onDidChangeZoomLevel = new Emitter();\n    this.onDidChangeZoomLevel = this._onDidChangeZoomLevel.event;\n  }\n\n  WindowManager.prototype.getZoomLevel = function () {\n    return this._zoomLevel;\n  };\n\n  WindowManager.prototype.getTimeSinceLastZoomLevelChanged = function () {\n    return Date.now() - this._lastZoomLevelChangeTime;\n  }; // --- Pixel Ratio\n\n\n  WindowManager.prototype.getPixelRatio = function () {\n    var ctx = document.createElement('canvas').getContext('2d');\n    var dpr = window.devicePixelRatio || 1;\n    var bsr = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n    return dpr / bsr;\n  };\n\n  WindowManager.INSTANCE = new WindowManager();\n  return WindowManager;\n}();\n\nexport function getZoomLevel() {\n  return WindowManager.INSTANCE.getZoomLevel();\n}\n/** Returns the time (in ms) since the zoom level was changed */\n\nexport function getTimeSinceLastZoomLevelChanged() {\n  return WindowManager.INSTANCE.getTimeSinceLastZoomLevelChanged();\n}\nexport function onDidChangeZoomLevel(callback) {\n  return WindowManager.INSTANCE.onDidChangeZoomLevel(callback);\n}\nexport function getPixelRatio() {\n  return WindowManager.INSTANCE.getPixelRatio();\n}\nvar userAgent = navigator.userAgent;\nexport var isIE = userAgent.indexOf('Trident') >= 0;\nexport var isEdge = userAgent.indexOf('Edge/') >= 0;\nexport var isEdgeOrIE = isIE || isEdge;\nexport var isFirefox = userAgent.indexOf('Firefox') >= 0;\nexport var isWebKit = userAgent.indexOf('AppleWebKit') >= 0;\nexport var isChrome = userAgent.indexOf('Chrome') >= 0;\nexport var isSafari = !isChrome && userAgent.indexOf('Safari') >= 0;\nexport var isWebkitWebView = !isChrome && !isSafari && isWebKit;\nexport var isIPad = userAgent.indexOf('iPad') >= 0;\nexport var isEdgeWebView = isEdge && userAgent.indexOf('WebView/') >= 0;\nexport function hasClipboardSupport() {\n  if (isIE) {\n    return false;\n  }\n\n  if (isEdge) {\n    var index = userAgent.indexOf('Edge/');\n    var version = parseInt(userAgent.substring(index + 5, userAgent.indexOf('.', index)), 10);\n\n    if (!version || version >= 12 && version <= 16) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}