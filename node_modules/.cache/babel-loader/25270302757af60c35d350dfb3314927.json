{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as browser from '../../../base/browser/browser.js';\nimport { Emitter } from '../../../base/common/event.js';\nimport { Disposable } from '../../../base/common/lifecycle.js';\nimport * as platform from '../../../base/common/platform.js';\nimport { CharWidthRequest, readCharWidths } from './charWidthReader.js';\nimport { ElementSizeObserver } from './elementSizeObserver.js';\nimport { CommonEditorConfiguration } from '../../common/config/commonEditorConfig.js';\nimport { FontInfo } from '../../common/config/fontInfo.js';\n\nvar CSSBasedConfigurationCache =\n/** @class */\nfunction () {\n  function CSSBasedConfigurationCache() {\n    this._keys = Object.create(null);\n    this._values = Object.create(null);\n  }\n\n  CSSBasedConfigurationCache.prototype.has = function (item) {\n    var itemId = item.getId();\n    return !!this._values[itemId];\n  };\n\n  CSSBasedConfigurationCache.prototype.get = function (item) {\n    var itemId = item.getId();\n    return this._values[itemId];\n  };\n\n  CSSBasedConfigurationCache.prototype.put = function (item, value) {\n    var itemId = item.getId();\n    this._keys[itemId] = item;\n    this._values[itemId] = value;\n  };\n\n  CSSBasedConfigurationCache.prototype.remove = function (item) {\n    var itemId = item.getId();\n    delete this._keys[itemId];\n    delete this._values[itemId];\n  };\n\n  CSSBasedConfigurationCache.prototype.getValues = function () {\n    var _this = this;\n\n    return Object.keys(this._keys).map(function (id) {\n      return _this._values[id];\n    });\n  };\n\n  return CSSBasedConfigurationCache;\n}();\n\nexport function clearAllFontInfos() {\n  CSSBasedConfiguration.INSTANCE.clearCache();\n}\n\nvar CSSBasedConfiguration =\n/** @class */\nfunction (_super) {\n  __extends(CSSBasedConfiguration, _super);\n\n  function CSSBasedConfiguration() {\n    var _this = _super.call(this) || this;\n\n    _this._onDidChange = _this._register(new Emitter());\n    _this.onDidChange = _this._onDidChange.event;\n    _this._cache = new CSSBasedConfigurationCache();\n    _this._evictUntrustedReadingsTimeout = -1;\n    return _this;\n  }\n\n  CSSBasedConfiguration.prototype.dispose = function () {\n    if (this._evictUntrustedReadingsTimeout !== -1) {\n      clearTimeout(this._evictUntrustedReadingsTimeout);\n      this._evictUntrustedReadingsTimeout = -1;\n    }\n\n    _super.prototype.dispose.call(this);\n  };\n\n  CSSBasedConfiguration.prototype.clearCache = function () {\n    this._cache = new CSSBasedConfigurationCache();\n\n    this._onDidChange.fire();\n  };\n\n  CSSBasedConfiguration.prototype._writeToCache = function (item, value) {\n    var _this = this;\n\n    this._cache.put(item, value);\n\n    if (!value.isTrusted && this._evictUntrustedReadingsTimeout === -1) {\n      // Try reading again after some time\n      this._evictUntrustedReadingsTimeout = setTimeout(function () {\n        _this._evictUntrustedReadingsTimeout = -1;\n\n        _this._evictUntrustedReadings();\n      }, 5000);\n    }\n  };\n\n  CSSBasedConfiguration.prototype._evictUntrustedReadings = function () {\n    var values = this._cache.getValues();\n\n    var somethingRemoved = false;\n\n    for (var i = 0, len = values.length; i < len; i++) {\n      var item = values[i];\n\n      if (!item.isTrusted) {\n        somethingRemoved = true;\n\n        this._cache.remove(item);\n      }\n    }\n\n    if (somethingRemoved) {\n      this._onDidChange.fire();\n    }\n  };\n\n  CSSBasedConfiguration.prototype.readConfiguration = function (bareFontInfo) {\n    if (!this._cache.has(bareFontInfo)) {\n      var readConfig = CSSBasedConfiguration._actualReadConfiguration(bareFontInfo);\n\n      if (readConfig.typicalHalfwidthCharacterWidth <= 2 || readConfig.typicalFullwidthCharacterWidth <= 2 || readConfig.spaceWidth <= 2 || readConfig.maxDigitWidth <= 2) {\n        // Hey, it's Bug 14341 ... we couldn't read\n        readConfig = new FontInfo({\n          zoomLevel: browser.getZoomLevel(),\n          fontFamily: readConfig.fontFamily,\n          fontWeight: readConfig.fontWeight,\n          fontSize: readConfig.fontSize,\n          lineHeight: readConfig.lineHeight,\n          letterSpacing: readConfig.letterSpacing,\n          isMonospace: readConfig.isMonospace,\n          typicalHalfwidthCharacterWidth: Math.max(readConfig.typicalHalfwidthCharacterWidth, 5),\n          typicalFullwidthCharacterWidth: Math.max(readConfig.typicalFullwidthCharacterWidth, 5),\n          canUseHalfwidthRightwardsArrow: readConfig.canUseHalfwidthRightwardsArrow,\n          spaceWidth: Math.max(readConfig.spaceWidth, 5),\n          maxDigitWidth: Math.max(readConfig.maxDigitWidth, 5)\n        }, false);\n      }\n\n      this._writeToCache(bareFontInfo, readConfig);\n    }\n\n    return this._cache.get(bareFontInfo);\n  };\n\n  CSSBasedConfiguration.createRequest = function (chr, type, all, monospace) {\n    var result = new CharWidthRequest(chr, type);\n    all.push(result);\n\n    if (monospace) {\n      monospace.push(result);\n    }\n\n    return result;\n  };\n\n  CSSBasedConfiguration._actualReadConfiguration = function (bareFontInfo) {\n    var all = [];\n    var monospace = [];\n    var typicalHalfwidthCharacter = this.createRequest('n', 0\n    /* Regular */\n    , all, monospace);\n    var typicalFullwidthCharacter = this.createRequest('\\uff4d', 0\n    /* Regular */\n    , all, null);\n    var space = this.createRequest(' ', 0\n    /* Regular */\n    , all, monospace);\n    var digit0 = this.createRequest('0', 0\n    /* Regular */\n    , all, monospace);\n    var digit1 = this.createRequest('1', 0\n    /* Regular */\n    , all, monospace);\n    var digit2 = this.createRequest('2', 0\n    /* Regular */\n    , all, monospace);\n    var digit3 = this.createRequest('3', 0\n    /* Regular */\n    , all, monospace);\n    var digit4 = this.createRequest('4', 0\n    /* Regular */\n    , all, monospace);\n    var digit5 = this.createRequest('5', 0\n    /* Regular */\n    , all, monospace);\n    var digit6 = this.createRequest('6', 0\n    /* Regular */\n    , all, monospace);\n    var digit7 = this.createRequest('7', 0\n    /* Regular */\n    , all, monospace);\n    var digit8 = this.createRequest('8', 0\n    /* Regular */\n    , all, monospace);\n    var digit9 = this.createRequest('9', 0\n    /* Regular */\n    , all, monospace); // monospace test: used for whitespace rendering\n\n    var rightwardsArrow = this.createRequest('→', 0\n    /* Regular */\n    , all, monospace);\n    var halfwidthRightwardsArrow = this.createRequest('￫', 0\n    /* Regular */\n    , all, null);\n    this.createRequest('·', 0\n    /* Regular */\n    , all, monospace); // monospace test: some characters\n\n    this.createRequest('|', 0\n    /* Regular */\n    , all, monospace);\n    this.createRequest('/', 0\n    /* Regular */\n    , all, monospace);\n    this.createRequest('-', 0\n    /* Regular */\n    , all, monospace);\n    this.createRequest('_', 0\n    /* Regular */\n    , all, monospace);\n    this.createRequest('i', 0\n    /* Regular */\n    , all, monospace);\n    this.createRequest('l', 0\n    /* Regular */\n    , all, monospace);\n    this.createRequest('m', 0\n    /* Regular */\n    , all, monospace); // monospace italic test\n\n    this.createRequest('|', 1\n    /* Italic */\n    , all, monospace);\n    this.createRequest('_', 1\n    /* Italic */\n    , all, monospace);\n    this.createRequest('i', 1\n    /* Italic */\n    , all, monospace);\n    this.createRequest('l', 1\n    /* Italic */\n    , all, monospace);\n    this.createRequest('m', 1\n    /* Italic */\n    , all, monospace);\n    this.createRequest('n', 1\n    /* Italic */\n    , all, monospace); // monospace bold test\n\n    this.createRequest('|', 2\n    /* Bold */\n    , all, monospace);\n    this.createRequest('_', 2\n    /* Bold */\n    , all, monospace);\n    this.createRequest('i', 2\n    /* Bold */\n    , all, monospace);\n    this.createRequest('l', 2\n    /* Bold */\n    , all, monospace);\n    this.createRequest('m', 2\n    /* Bold */\n    , all, monospace);\n    this.createRequest('n', 2\n    /* Bold */\n    , all, monospace);\n    readCharWidths(bareFontInfo, all);\n    var maxDigitWidth = Math.max(digit0.width, digit1.width, digit2.width, digit3.width, digit4.width, digit5.width, digit6.width, digit7.width, digit8.width, digit9.width);\n    var isMonospace = true;\n    var referenceWidth = monospace[0].width;\n\n    for (var i = 1, len = monospace.length; i < len; i++) {\n      var diff = referenceWidth - monospace[i].width;\n\n      if (diff < -0.001 || diff > 0.001) {\n        isMonospace = false;\n        break;\n      }\n    }\n\n    var canUseHalfwidthRightwardsArrow = true;\n\n    if (isMonospace && halfwidthRightwardsArrow.width !== referenceWidth) {\n      // using a halfwidth rightwards arrow would break monospace...\n      canUseHalfwidthRightwardsArrow = false;\n    }\n\n    if (halfwidthRightwardsArrow.width > rightwardsArrow.width) {\n      // using a halfwidth rightwards arrow would paint a larger arrow than a regular rightwards arrow\n      canUseHalfwidthRightwardsArrow = false;\n    } // let's trust the zoom level only 2s after it was changed.\n\n\n    var canTrustBrowserZoomLevel = browser.getTimeSinceLastZoomLevelChanged() > 2000;\n    return new FontInfo({\n      zoomLevel: browser.getZoomLevel(),\n      fontFamily: bareFontInfo.fontFamily,\n      fontWeight: bareFontInfo.fontWeight,\n      fontSize: bareFontInfo.fontSize,\n      lineHeight: bareFontInfo.lineHeight,\n      letterSpacing: bareFontInfo.letterSpacing,\n      isMonospace: isMonospace,\n      typicalHalfwidthCharacterWidth: typicalHalfwidthCharacter.width,\n      typicalFullwidthCharacterWidth: typicalFullwidthCharacter.width,\n      canUseHalfwidthRightwardsArrow: canUseHalfwidthRightwardsArrow,\n      spaceWidth: space.width,\n      maxDigitWidth: maxDigitWidth\n    }, canTrustBrowserZoomLevel);\n  };\n\n  CSSBasedConfiguration.INSTANCE = new CSSBasedConfiguration();\n  return CSSBasedConfiguration;\n}(Disposable);\n\nvar Configuration =\n/** @class */\nfunction (_super) {\n  __extends(Configuration, _super);\n\n  function Configuration(isSimpleWidget, options, referenceDomElement, accessibilityService) {\n    if (referenceDomElement === void 0) {\n      referenceDomElement = null;\n    }\n\n    var _this = _super.call(this, isSimpleWidget, options) || this;\n\n    _this.accessibilityService = accessibilityService;\n    _this._elementSizeObserver = _this._register(new ElementSizeObserver(referenceDomElement, function () {\n      return _this._onReferenceDomElementSizeChanged();\n    }));\n\n    _this._register(CSSBasedConfiguration.INSTANCE.onDidChange(function () {\n      return _this._onCSSBasedConfigurationChanged();\n    }));\n\n    if (_this._validatedOptions.automaticLayout) {\n      _this._elementSizeObserver.startObserving();\n    }\n\n    _this._register(browser.onDidChangeZoomLevel(function (_) {\n      return _this._recomputeOptions();\n    }));\n\n    _this._register(_this.accessibilityService.onDidChangeAccessibilitySupport(function () {\n      return _this._recomputeOptions();\n    }));\n\n    _this._recomputeOptions();\n\n    return _this;\n  }\n\n  Configuration.applyFontInfoSlow = function (domNode, fontInfo) {\n    domNode.style.fontFamily = fontInfo.getMassagedFontFamily();\n    domNode.style.fontWeight = fontInfo.fontWeight;\n    domNode.style.fontSize = fontInfo.fontSize + 'px';\n    domNode.style.lineHeight = fontInfo.lineHeight + 'px';\n    domNode.style.letterSpacing = fontInfo.letterSpacing + 'px';\n  };\n\n  Configuration.applyFontInfo = function (domNode, fontInfo) {\n    domNode.setFontFamily(fontInfo.getMassagedFontFamily());\n    domNode.setFontWeight(fontInfo.fontWeight);\n    domNode.setFontSize(fontInfo.fontSize);\n    domNode.setLineHeight(fontInfo.lineHeight);\n    domNode.setLetterSpacing(fontInfo.letterSpacing);\n  };\n\n  Configuration.prototype._onReferenceDomElementSizeChanged = function () {\n    this._recomputeOptions();\n  };\n\n  Configuration.prototype._onCSSBasedConfigurationChanged = function () {\n    this._recomputeOptions();\n  };\n\n  Configuration.prototype.observeReferenceElement = function (dimension) {\n    this._elementSizeObserver.observe(dimension);\n  };\n\n  Configuration.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n  };\n\n  Configuration.prototype._getExtraEditorClassName = function () {\n    var extra = '';\n\n    if (!browser.isSafari && !browser.isWebkitWebView) {\n      // Use user-select: none in all browsers except Safari and native macOS WebView\n      extra += 'no-user-select ';\n    }\n\n    if (platform.isMacintosh) {\n      extra += 'mac ';\n    }\n\n    return extra;\n  };\n\n  Configuration.prototype._getEnvConfiguration = function () {\n    return {\n      extraEditorClassName: this._getExtraEditorClassName(),\n      outerWidth: this._elementSizeObserver.getWidth(),\n      outerHeight: this._elementSizeObserver.getHeight(),\n      emptySelectionClipboard: browser.isWebKit || browser.isFirefox,\n      pixelRatio: browser.getPixelRatio(),\n      zoomLevel: browser.getZoomLevel(),\n      accessibilitySupport: this.accessibilityService.getAccessibilitySupport()\n    };\n  };\n\n  Configuration.prototype.readConfiguration = function (bareFontInfo) {\n    return CSSBasedConfiguration.INSTANCE.readConfiguration(bareFontInfo);\n  };\n\n  return Configuration;\n}(CommonEditorConfiguration);\n\nexport { Configuration };","map":null,"metadata":{},"sourceType":"module"}