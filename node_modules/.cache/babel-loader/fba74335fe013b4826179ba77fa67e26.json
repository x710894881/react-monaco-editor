{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\nvar Uri = monaco.Uri;\nvar Range = monaco.Range; // --- diagnostics --- ---\n\nvar DiagnosticsAdapter =\n/** @class */\nfunction () {\n  function DiagnosticsAdapter(_languageId, _worker, defaults) {\n    var _this = this;\n\n    this._languageId = _languageId;\n    this._worker = _worker;\n    this._disposables = [];\n    this._listener = Object.create(null);\n\n    var onModelAdd = function (model) {\n      var modeId = model.getModeId();\n\n      if (modeId !== _this._languageId) {\n        return;\n      }\n\n      var handle;\n      _this._listener[model.uri.toString()] = model.onDidChangeContent(function () {\n        clearTimeout(handle);\n        handle = setTimeout(function () {\n          return _this._doValidate(model.uri, modeId);\n        }, 500);\n      });\n\n      _this._doValidate(model.uri, modeId);\n    };\n\n    var onModelRemoved = function (model) {\n      monaco.editor.setModelMarkers(model, _this._languageId, []);\n      var uriStr = model.uri.toString();\n      var listener = _this._listener[uriStr];\n\n      if (listener) {\n        listener.dispose();\n        delete _this._listener[uriStr];\n      }\n    };\n\n    this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n\n    this._disposables.push(monaco.editor.onWillDisposeModel(onModelRemoved));\n\n    this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n      onModelRemoved(event.model);\n      onModelAdd(event.model);\n    }));\n\n    defaults.onDidChange(function (_) {\n      monaco.editor.getModels().forEach(function (model) {\n        if (model.getModeId() === _this._languageId) {\n          onModelRemoved(model);\n          onModelAdd(model);\n        }\n      });\n    });\n\n    this._disposables.push({\n      dispose: function () {\n        for (var key in _this._listener) {\n          _this._listener[key].dispose();\n        }\n      }\n    });\n\n    monaco.editor.getModels().forEach(onModelAdd);\n  }\n\n  DiagnosticsAdapter.prototype.dispose = function () {\n    this._disposables.forEach(function (d) {\n      return d && d.dispose();\n    });\n\n    this._disposables = [];\n  };\n\n  DiagnosticsAdapter.prototype._doValidate = function (resource, languageId) {\n    this._worker(resource).then(function (worker) {\n      return worker.doValidation(resource.toString());\n    }).then(function (diagnostics) {\n      var markers = diagnostics.map(function (d) {\n        return toDiagnostics(resource, d);\n      });\n      var model = monaco.editor.getModel(resource);\n\n      if (model.getModeId() === languageId) {\n        monaco.editor.setModelMarkers(model, languageId, markers);\n      }\n    }).then(undefined, function (err) {\n      console.error(err);\n    });\n  };\n\n  return DiagnosticsAdapter;\n}();\n\nexport { DiagnosticsAdapter };\n\nfunction toSeverity(lsSeverity) {\n  switch (lsSeverity) {\n    case ls.DiagnosticSeverity.Error:\n      return monaco.MarkerSeverity.Error;\n\n    case ls.DiagnosticSeverity.Warning:\n      return monaco.MarkerSeverity.Warning;\n\n    case ls.DiagnosticSeverity.Information:\n      return monaco.MarkerSeverity.Info;\n\n    case ls.DiagnosticSeverity.Hint:\n      return monaco.MarkerSeverity.Hint;\n\n    default:\n      return monaco.MarkerSeverity.Info;\n  }\n}\n\nfunction toDiagnostics(resource, diag) {\n  var code = typeof diag.code === 'number' ? String(diag.code) : diag.code;\n  return {\n    severity: toSeverity(diag.severity),\n    startLineNumber: diag.range.start.line + 1,\n    startColumn: diag.range.start.character + 1,\n    endLineNumber: diag.range.end.line + 1,\n    endColumn: diag.range.end.character + 1,\n    message: diag.message,\n    code: code,\n    source: diag.source\n  };\n} // --- completion ------\n\n\nfunction fromPosition(position) {\n  if (!position) {\n    return void 0;\n  }\n\n  return {\n    character: position.column - 1,\n    line: position.lineNumber - 1\n  };\n}\n\nfunction fromRange(range) {\n  if (!range) {\n    return void 0;\n  }\n\n  return {\n    start: {\n      line: range.startLineNumber - 1,\n      character: range.startColumn - 1\n    },\n    end: {\n      line: range.endLineNumber - 1,\n      character: range.endColumn - 1\n    }\n  };\n}\n\nfunction toRange(range) {\n  if (!range) {\n    return void 0;\n  }\n\n  return new monaco.Range(range.start.line + 1, range.start.character + 1, range.end.line + 1, range.end.character + 1);\n}\n\nfunction toCompletionItemKind(kind) {\n  var mItemKind = monaco.languages.CompletionItemKind;\n\n  switch (kind) {\n    case ls.CompletionItemKind.Text:\n      return mItemKind.Text;\n\n    case ls.CompletionItemKind.Method:\n      return mItemKind.Method;\n\n    case ls.CompletionItemKind.Function:\n      return mItemKind.Function;\n\n    case ls.CompletionItemKind.Constructor:\n      return mItemKind.Constructor;\n\n    case ls.CompletionItemKind.Field:\n      return mItemKind.Field;\n\n    case ls.CompletionItemKind.Variable:\n      return mItemKind.Variable;\n\n    case ls.CompletionItemKind.Class:\n      return mItemKind.Class;\n\n    case ls.CompletionItemKind.Interface:\n      return mItemKind.Interface;\n\n    case ls.CompletionItemKind.Module:\n      return mItemKind.Module;\n\n    case ls.CompletionItemKind.Property:\n      return mItemKind.Property;\n\n    case ls.CompletionItemKind.Unit:\n      return mItemKind.Unit;\n\n    case ls.CompletionItemKind.Value:\n      return mItemKind.Value;\n\n    case ls.CompletionItemKind.Enum:\n      return mItemKind.Enum;\n\n    case ls.CompletionItemKind.Keyword:\n      return mItemKind.Keyword;\n\n    case ls.CompletionItemKind.Snippet:\n      return mItemKind.Snippet;\n\n    case ls.CompletionItemKind.Color:\n      return mItemKind.Color;\n\n    case ls.CompletionItemKind.File:\n      return mItemKind.File;\n\n    case ls.CompletionItemKind.Reference:\n      return mItemKind.Reference;\n  }\n\n  return mItemKind.Property;\n}\n\nfunction toTextEdit(textEdit) {\n  if (!textEdit) {\n    return void 0;\n  }\n\n  return {\n    range: toRange(textEdit.range),\n    text: textEdit.newText\n  };\n}\n\nvar CompletionAdapter =\n/** @class */\nfunction () {\n  function CompletionAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  Object.defineProperty(CompletionAdapter.prototype, \"triggerCharacters\", {\n    get: function () {\n      return [' ', ':'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  CompletionAdapter.prototype.provideCompletionItems = function (model, position, context, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.doComplete(resource.toString(), fromPosition(position));\n    }).then(function (info) {\n      if (!info) {\n        return;\n      }\n\n      var wordInfo = model.getWordUntilPosition(position);\n      var wordRange = new Range(position.lineNumber, wordInfo.startColumn, position.lineNumber, wordInfo.endColumn);\n      var items = info.items.map(function (entry) {\n        var item = {\n          label: entry.label,\n          insertText: entry.insertText || entry.label,\n          sortText: entry.sortText,\n          filterText: entry.filterText,\n          documentation: entry.documentation,\n          detail: entry.detail,\n          range: wordRange,\n          kind: toCompletionItemKind(entry.kind)\n        };\n\n        if (entry.textEdit) {\n          item.range = toRange(entry.textEdit.range);\n          item.insertText = entry.textEdit.newText;\n        }\n\n        if (entry.additionalTextEdits) {\n          item.additionalTextEdits = entry.additionalTextEdits.map(toTextEdit);\n        }\n\n        if (entry.insertTextFormat === ls.InsertTextFormat.Snippet) {\n          item.insertTextRules = monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet;\n        }\n\n        return item;\n      });\n      return {\n        isIncomplete: info.isIncomplete,\n        suggestions: items\n      };\n    });\n  };\n\n  return CompletionAdapter;\n}();\n\nexport { CompletionAdapter };\n\nfunction isMarkupContent(thing) {\n  return thing && typeof thing === 'object' && typeof thing.kind === 'string';\n}\n\nfunction toMarkdownString(entry) {\n  if (typeof entry === 'string') {\n    return {\n      value: entry\n    };\n  }\n\n  if (isMarkupContent(entry)) {\n    if (entry.kind === 'plaintext') {\n      return {\n        value: entry.value.replace(/[\\\\`*_{}[\\]()#+\\-.!]/g, '\\\\$&')\n      };\n    }\n\n    return {\n      value: entry.value\n    };\n  }\n\n  return {\n    value: '```' + entry.language + '\\n' + entry.value + '\\n```\\n'\n  };\n}\n\nfunction toMarkedStringArray(contents) {\n  if (!contents) {\n    return void 0;\n  }\n\n  if (Array.isArray(contents)) {\n    return contents.map(toMarkdownString);\n  }\n\n  return [toMarkdownString(contents)];\n} // --- hover ------\n\n\nvar HoverAdapter =\n/** @class */\nfunction () {\n  function HoverAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  HoverAdapter.prototype.provideHover = function (model, position, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.doHover(resource.toString(), fromPosition(position));\n    }).then(function (info) {\n      if (!info) {\n        return;\n      }\n\n      return {\n        range: toRange(info.range),\n        contents: toMarkedStringArray(info.contents)\n      };\n    });\n  };\n\n  return HoverAdapter;\n}();\n\nexport { HoverAdapter }; // --- document highlights ------\n\nfunction toDocumentHighlightKind(kind) {\n  switch (kind) {\n    case ls.DocumentHighlightKind.Read:\n      return monaco.languages.DocumentHighlightKind.Read;\n\n    case ls.DocumentHighlightKind.Write:\n      return monaco.languages.DocumentHighlightKind.Write;\n\n    case ls.DocumentHighlightKind.Text:\n      return monaco.languages.DocumentHighlightKind.Text;\n  }\n\n  return monaco.languages.DocumentHighlightKind.Text;\n}\n\nvar DocumentHighlightAdapter =\n/** @class */\nfunction () {\n  function DocumentHighlightAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  DocumentHighlightAdapter.prototype.provideDocumentHighlights = function (model, position, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.findDocumentHighlights(resource.toString(), fromPosition(position));\n    }).then(function (entries) {\n      if (!entries) {\n        return;\n      }\n\n      return entries.map(function (entry) {\n        return {\n          range: toRange(entry.range),\n          kind: toDocumentHighlightKind(entry.kind)\n        };\n      });\n    });\n  };\n\n  return DocumentHighlightAdapter;\n}();\n\nexport { DocumentHighlightAdapter }; // --- definition ------\n\nfunction toLocation(location) {\n  return {\n    uri: Uri.parse(location.uri),\n    range: toRange(location.range)\n  };\n}\n\nvar DefinitionAdapter =\n/** @class */\nfunction () {\n  function DefinitionAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  DefinitionAdapter.prototype.provideDefinition = function (model, position, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.findDefinition(resource.toString(), fromPosition(position));\n    }).then(function (definition) {\n      if (!definition) {\n        return;\n      }\n\n      return [toLocation(definition)];\n    });\n  };\n\n  return DefinitionAdapter;\n}();\n\nexport { DefinitionAdapter }; // --- references ------\n\nvar ReferenceAdapter =\n/** @class */\nfunction () {\n  function ReferenceAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  ReferenceAdapter.prototype.provideReferences = function (model, position, context, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.findReferences(resource.toString(), fromPosition(position));\n    }).then(function (entries) {\n      if (!entries) {\n        return;\n      }\n\n      return entries.map(toLocation);\n    });\n  };\n\n  return ReferenceAdapter;\n}();\n\nexport { ReferenceAdapter }; // --- rename ------\n\nfunction toWorkspaceEdit(edit) {\n  if (!edit || !edit.changes) {\n    return void 0;\n  }\n\n  var resourceEdits = [];\n\n  for (var uri in edit.changes) {\n    var edits = [];\n\n    for (var _i = 0, _a = edit.changes[uri]; _i < _a.length; _i++) {\n      var e = _a[_i];\n      edits.push({\n        range: toRange(e.range),\n        text: e.newText\n      });\n    }\n\n    resourceEdits.push({\n      resource: Uri.parse(uri),\n      edits: edits\n    });\n  }\n\n  return {\n    edits: resourceEdits\n  };\n}\n\nvar RenameAdapter =\n/** @class */\nfunction () {\n  function RenameAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  RenameAdapter.prototype.provideRenameEdits = function (model, position, newName, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.doRename(resource.toString(), fromPosition(position), newName);\n    }).then(function (edit) {\n      return toWorkspaceEdit(edit);\n    });\n  };\n\n  return RenameAdapter;\n}();\n\nexport { RenameAdapter }; // --- document symbols ------\n\nfunction toSymbolKind(kind) {\n  var mKind = monaco.languages.SymbolKind;\n\n  switch (kind) {\n    case ls.SymbolKind.File:\n      return mKind.Array;\n\n    case ls.SymbolKind.Module:\n      return mKind.Module;\n\n    case ls.SymbolKind.Namespace:\n      return mKind.Namespace;\n\n    case ls.SymbolKind.Package:\n      return mKind.Package;\n\n    case ls.SymbolKind.Class:\n      return mKind.Class;\n\n    case ls.SymbolKind.Method:\n      return mKind.Method;\n\n    case ls.SymbolKind.Property:\n      return mKind.Property;\n\n    case ls.SymbolKind.Field:\n      return mKind.Field;\n\n    case ls.SymbolKind.Constructor:\n      return mKind.Constructor;\n\n    case ls.SymbolKind.Enum:\n      return mKind.Enum;\n\n    case ls.SymbolKind.Interface:\n      return mKind.Interface;\n\n    case ls.SymbolKind.Function:\n      return mKind.Function;\n\n    case ls.SymbolKind.Variable:\n      return mKind.Variable;\n\n    case ls.SymbolKind.Constant:\n      return mKind.Constant;\n\n    case ls.SymbolKind.String:\n      return mKind.String;\n\n    case ls.SymbolKind.Number:\n      return mKind.Number;\n\n    case ls.SymbolKind.Boolean:\n      return mKind.Boolean;\n\n    case ls.SymbolKind.Array:\n      return mKind.Array;\n  }\n\n  return mKind.Function;\n}\n\nvar DocumentSymbolAdapter =\n/** @class */\nfunction () {\n  function DocumentSymbolAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  DocumentSymbolAdapter.prototype.provideDocumentSymbols = function (model, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.findDocumentSymbols(resource.toString());\n    }).then(function (items) {\n      if (!items) {\n        return;\n      }\n\n      return items.map(function (item) {\n        return {\n          name: item.name,\n          detail: '',\n          containerName: item.containerName,\n          kind: toSymbolKind(item.kind),\n          tags: [],\n          range: toRange(item.location.range),\n          selectionRange: toRange(item.location.range)\n        };\n      });\n    });\n  };\n\n  return DocumentSymbolAdapter;\n}();\n\nexport { DocumentSymbolAdapter };\n\nvar DocumentColorAdapter =\n/** @class */\nfunction () {\n  function DocumentColorAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  DocumentColorAdapter.prototype.provideDocumentColors = function (model, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.findDocumentColors(resource.toString());\n    }).then(function (infos) {\n      if (!infos) {\n        return;\n      }\n\n      return infos.map(function (item) {\n        return {\n          color: item.color,\n          range: toRange(item.range)\n        };\n      });\n    });\n  };\n\n  DocumentColorAdapter.prototype.provideColorPresentations = function (model, info, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getColorPresentations(resource.toString(), info.color, fromRange(info.range));\n    }).then(function (presentations) {\n      if (!presentations) {\n        return;\n      }\n\n      return presentations.map(function (presentation) {\n        var item = {\n          label: presentation.label\n        };\n\n        if (presentation.textEdit) {\n          item.textEdit = toTextEdit(presentation.textEdit);\n        }\n\n        if (presentation.additionalTextEdits) {\n          item.additionalTextEdits = presentation.additionalTextEdits.map(toTextEdit);\n        }\n\n        return item;\n      });\n    });\n  };\n\n  return DocumentColorAdapter;\n}();\n\nexport { DocumentColorAdapter };\n\nvar FoldingRangeAdapter =\n/** @class */\nfunction () {\n  function FoldingRangeAdapter(_worker) {\n    this._worker = _worker;\n  }\n\n  FoldingRangeAdapter.prototype.provideFoldingRanges = function (model, context, token) {\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.provideFoldingRanges(resource.toString(), context);\n    }).then(function (ranges) {\n      if (!ranges) {\n        return;\n      }\n\n      return ranges.map(function (range) {\n        var result = {\n          start: range.startLine + 1,\n          end: range.endLine + 1\n        };\n\n        if (typeof range.kind !== 'undefined') {\n          result.kind = toFoldingRangeKind(range.kind);\n        }\n\n        return result;\n      });\n    });\n  };\n\n  return FoldingRangeAdapter;\n}();\n\nexport { FoldingRangeAdapter };\n\nfunction toFoldingRangeKind(kind) {\n  switch (kind) {\n    case ls.FoldingRangeKind.Comment:\n      return monaco.languages.FoldingRangeKind.Comment;\n\n    case ls.FoldingRangeKind.Imports:\n      return monaco.languages.FoldingRangeKind.Imports;\n\n    case ls.FoldingRangeKind.Region:\n      return monaco.languages.FoldingRangeKind.Region;\n  }\n\n  return void 0;\n}","map":null,"metadata":{},"sourceType":"module"}