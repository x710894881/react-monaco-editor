{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as strings from '../../../base/common/strings.js';\nimport { Position } from '../../common/core/position.js';\nimport { Range } from '../../common/core/range.js';\n\nvar TextAreaState =\n/** @class */\nfunction () {\n  function TextAreaState(value, selectionStart, selectionEnd, selectionStartPosition, selectionEndPosition) {\n    this.value = value;\n    this.selectionStart = selectionStart;\n    this.selectionEnd = selectionEnd;\n    this.selectionStartPosition = selectionStartPosition;\n    this.selectionEndPosition = selectionEndPosition;\n  }\n\n  TextAreaState.prototype.toString = function () {\n    return '[ <' + this.value + '>, selectionStart: ' + this.selectionStart + ', selectionEnd: ' + this.selectionEnd + ']';\n  };\n\n  TextAreaState.readFromTextArea = function (textArea) {\n    return new TextAreaState(textArea.getValue(), textArea.getSelectionStart(), textArea.getSelectionEnd(), null, null);\n  };\n\n  TextAreaState.prototype.collapseSelection = function () {\n    return new TextAreaState(this.value, this.value.length, this.value.length, null, null);\n  };\n\n  TextAreaState.prototype.writeToTextArea = function (reason, textArea, select) {\n    // console.log(Date.now() + ': writeToTextArea ' + reason + ': ' + this.toString());\n    textArea.setValue(reason, this.value);\n\n    if (select) {\n      textArea.setSelectionRange(reason, this.selectionStart, this.selectionEnd);\n    }\n  };\n\n  TextAreaState.prototype.deduceEditorPosition = function (offset) {\n    if (offset <= this.selectionStart) {\n      var str = this.value.substring(offset, this.selectionStart);\n      return this._finishDeduceEditorPosition(this.selectionStartPosition, str, -1);\n    }\n\n    if (offset >= this.selectionEnd) {\n      var str = this.value.substring(this.selectionEnd, offset);\n      return this._finishDeduceEditorPosition(this.selectionEndPosition, str, 1);\n    }\n\n    var str1 = this.value.substring(this.selectionStart, offset);\n\n    if (str1.indexOf(String.fromCharCode(8230)) === -1) {\n      return this._finishDeduceEditorPosition(this.selectionStartPosition, str1, 1);\n    }\n\n    var str2 = this.value.substring(offset, this.selectionEnd);\n    return this._finishDeduceEditorPosition(this.selectionEndPosition, str2, -1);\n  };\n\n  TextAreaState.prototype._finishDeduceEditorPosition = function (anchor, deltaText, signum) {\n    var lineFeedCnt = 0;\n    var lastLineFeedIndex = -1;\n\n    while ((lastLineFeedIndex = deltaText.indexOf('\\n', lastLineFeedIndex + 1)) !== -1) {\n      lineFeedCnt++;\n    }\n\n    return [anchor, signum * deltaText.length, lineFeedCnt];\n  };\n\n  TextAreaState.selectedText = function (text) {\n    return new TextAreaState(text, 0, text.length, null, null);\n  };\n\n  TextAreaState.deduceInput = function (previousState, currentState, couldBeEmojiInput, couldBeTypingAtOffset0) {\n    if (!previousState) {\n      // This is the EMPTY state\n      return {\n        text: '',\n        replaceCharCnt: 0\n      };\n    } // console.log('------------------------deduceInput');\n    // console.log('PREVIOUS STATE: ' + previousState.toString());\n    // console.log('CURRENT STATE: ' + currentState.toString());\n\n\n    var previousValue = previousState.value;\n    var previousSelectionStart = previousState.selectionStart;\n    var previousSelectionEnd = previousState.selectionEnd;\n    var currentValue = currentState.value;\n    var currentSelectionStart = currentState.selectionStart;\n    var currentSelectionEnd = currentState.selectionEnd;\n\n    if (couldBeTypingAtOffset0 && previousValue.length > 0 && previousSelectionStart === previousSelectionEnd && currentSelectionStart === currentSelectionEnd) {\n      // See https://github.com/Microsoft/vscode/issues/42251\n      // where typing always happens at offset 0 in the textarea\n      // when using a custom title area in OSX and moving the window\n      if (!strings.startsWith(currentValue, previousValue) && strings.endsWith(currentValue, previousValue)) {\n        // Looks like something was typed at offset 0\n        // ==> pretend we placed the cursor at offset 0 to begin with...\n        previousSelectionStart = 0;\n        previousSelectionEnd = 0;\n      }\n    } // Strip the previous suffix from the value (without interfering with the current selection)\n\n\n    var previousSuffix = previousValue.substring(previousSelectionEnd);\n    var currentSuffix = currentValue.substring(currentSelectionEnd);\n    var suffixLength = strings.commonSuffixLength(previousSuffix, currentSuffix);\n    currentValue = currentValue.substring(0, currentValue.length - suffixLength);\n    previousValue = previousValue.substring(0, previousValue.length - suffixLength);\n    var previousPrefix = previousValue.substring(0, previousSelectionStart);\n    var currentPrefix = currentValue.substring(0, currentSelectionStart);\n    var prefixLength = strings.commonPrefixLength(previousPrefix, currentPrefix);\n    currentValue = currentValue.substring(prefixLength);\n    previousValue = previousValue.substring(prefixLength);\n    currentSelectionStart -= prefixLength;\n    previousSelectionStart -= prefixLength;\n    currentSelectionEnd -= prefixLength;\n    previousSelectionEnd -= prefixLength; // console.log('AFTER DIFFING PREVIOUS STATE: <' + previousValue + '>, selectionStart: ' + previousSelectionStart + ', selectionEnd: ' + previousSelectionEnd);\n    // console.log('AFTER DIFFING CURRENT STATE: <' + currentValue + '>, selectionStart: ' + currentSelectionStart + ', selectionEnd: ' + currentSelectionEnd);\n\n    if (couldBeEmojiInput && currentSelectionStart === currentSelectionEnd && previousValue.length > 0) {\n      // on OSX, emojis from the emoji picker are inserted at random locations\n      // the only hints we can use is that the selection is immediately after the inserted emoji\n      // and that none of the old text has been deleted\n      var potentialEmojiInput = null;\n\n      if (currentSelectionStart === currentValue.length) {\n        // emoji potentially inserted \"somewhere\" after the previous selection => it should appear at the end of `currentValue`\n        if (strings.startsWith(currentValue, previousValue)) {\n          // only if all of the old text is accounted for\n          potentialEmojiInput = currentValue.substring(previousValue.length);\n        }\n      } else {\n        // emoji potentially inserted \"somewhere\" before the previous selection => it should appear at the start of `currentValue`\n        if (strings.endsWith(currentValue, previousValue)) {\n          // only if all of the old text is accounted for\n          potentialEmojiInput = currentValue.substring(0, currentValue.length - previousValue.length);\n        }\n      }\n\n      if (potentialEmojiInput !== null && potentialEmojiInput.length > 0) {\n        // now we check that this is indeed an emoji\n        // emojis can grow quite long, so a length check is of no help\n        // e.g. 1F3F4 E0067 E0062 E0065 E006E E0067 E007F  ; fully-qualified     # 🏴󠁧󠁢󠁥󠁮󠁧󠁿 England\n        // Oftentimes, emojis use Variation Selector-16 (U+FE0F), so that is a good hint\n        // http://emojipedia.org/variation-selector-16/\n        // > An invisible codepoint which specifies that the preceding character\n        // > should be displayed with emoji presentation. Only required if the\n        // > preceding character defaults to text presentation.\n        if (/\\uFE0F/.test(potentialEmojiInput) || strings.containsEmoji(potentialEmojiInput)) {\n          return {\n            text: potentialEmojiInput,\n            replaceCharCnt: 0\n          };\n        }\n      }\n    }\n\n    if (currentSelectionStart === currentSelectionEnd) {\n      // composition accept case (noticed in FF + Japanese)\n      // [blahblah] => blahblah|\n      if (previousValue === currentValue && previousSelectionStart === 0 && previousSelectionEnd === previousValue.length && currentSelectionStart === currentValue.length && currentValue.indexOf('\\n') === -1) {\n        if (strings.containsFullWidthCharacter(currentValue)) {\n          return {\n            text: '',\n            replaceCharCnt: 0\n          };\n        }\n      } // no current selection\n\n\n      var replacePreviousCharacters_1 = previousPrefix.length - prefixLength; // console.log('REMOVE PREVIOUS: ' + (previousPrefix.length - prefixLength) + ' chars');\n\n      return {\n        text: currentValue,\n        replaceCharCnt: replacePreviousCharacters_1\n      };\n    } // there is a current selection => composition case\n\n\n    var replacePreviousCharacters = previousSelectionEnd - previousSelectionStart;\n    return {\n      text: currentValue,\n      replaceCharCnt: replacePreviousCharacters\n    };\n  };\n\n  TextAreaState.EMPTY = new TextAreaState('', 0, 0, null, null);\n  return TextAreaState;\n}();\n\nexport { TextAreaState };\n\nvar PagedScreenReaderStrategy =\n/** @class */\nfunction () {\n  function PagedScreenReaderStrategy() {}\n\n  PagedScreenReaderStrategy._getPageOfLine = function (lineNumber) {\n    return Math.floor((lineNumber - 1) / PagedScreenReaderStrategy._LINES_PER_PAGE);\n  };\n\n  PagedScreenReaderStrategy._getRangeForPage = function (page) {\n    var offset = page * PagedScreenReaderStrategy._LINES_PER_PAGE;\n    var startLineNumber = offset + 1;\n    var endLineNumber = offset + PagedScreenReaderStrategy._LINES_PER_PAGE;\n    return new Range(startLineNumber, 1, endLineNumber + 1, 1);\n  };\n\n  PagedScreenReaderStrategy.fromEditorSelection = function (previousState, model, selection, trimLongText) {\n    var selectionStartPage = PagedScreenReaderStrategy._getPageOfLine(selection.startLineNumber);\n\n    var selectionStartPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionStartPage);\n\n    var selectionEndPage = PagedScreenReaderStrategy._getPageOfLine(selection.endLineNumber);\n\n    var selectionEndPageRange = PagedScreenReaderStrategy._getRangeForPage(selectionEndPage);\n\n    var pretextRange = selectionStartPageRange.intersectRanges(new Range(1, 1, selection.startLineNumber, selection.startColumn));\n    var pretext = model.getValueInRange(pretextRange, 1\n    /* LF */\n    );\n    var lastLine = model.getLineCount();\n    var lastLineMaxColumn = model.getLineMaxColumn(lastLine);\n    var posttextRange = selectionEndPageRange.intersectRanges(new Range(selection.endLineNumber, selection.endColumn, lastLine, lastLineMaxColumn));\n    var posttext = model.getValueInRange(posttextRange, 1\n    /* LF */\n    );\n    var text;\n\n    if (selectionStartPage === selectionEndPage || selectionStartPage + 1 === selectionEndPage) {\n      // take full selection\n      text = model.getValueInRange(selection, 1\n      /* LF */\n      );\n    } else {\n      var selectionRange1 = selectionStartPageRange.intersectRanges(selection);\n      var selectionRange2 = selectionEndPageRange.intersectRanges(selection);\n      text = model.getValueInRange(selectionRange1, 1\n      /* LF */\n      ) + String.fromCharCode(8230) + model.getValueInRange(selectionRange2, 1\n      /* LF */\n      );\n    } // Chromium handles very poorly text even of a few thousand chars\n    // Cut text to avoid stalling the entire UI\n\n\n    if (trimLongText) {\n      var LIMIT_CHARS = 500;\n\n      if (pretext.length > LIMIT_CHARS) {\n        pretext = pretext.substring(pretext.length - LIMIT_CHARS, pretext.length);\n      }\n\n      if (posttext.length > LIMIT_CHARS) {\n        posttext = posttext.substring(0, LIMIT_CHARS);\n      }\n\n      if (text.length > 2 * LIMIT_CHARS) {\n        text = text.substring(0, LIMIT_CHARS) + String.fromCharCode(8230) + text.substring(text.length - LIMIT_CHARS, text.length);\n      }\n    }\n\n    return new TextAreaState(pretext + text + posttext, pretext.length, pretext.length + text.length, new Position(selection.startLineNumber, selection.startColumn), new Position(selection.endLineNumber, selection.endColumn));\n  };\n\n  PagedScreenReaderStrategy._LINES_PER_PAGE = 10;\n  return PagedScreenReaderStrategy;\n}();\n\nexport { PagedScreenReaderStrategy };","map":null,"metadata":{},"sourceType":"module"}