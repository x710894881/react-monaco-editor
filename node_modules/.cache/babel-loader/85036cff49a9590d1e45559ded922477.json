{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nexport var Range;\n\n(function (Range) {\n  /**\n   * Returns the intersection between two ranges as a range itself.\n   * Returns `{ start: 0, end: 0 }` if the intersection is empty.\n   */\n  function intersect(one, other) {\n    if (one.start >= other.end || other.start >= one.end) {\n      return {\n        start: 0,\n        end: 0\n      };\n    }\n\n    var start = Math.max(one.start, other.start);\n    var end = Math.min(one.end, other.end);\n\n    if (end - start <= 0) {\n      return {\n        start: 0,\n        end: 0\n      };\n    }\n\n    return {\n      start: start,\n      end: end\n    };\n  }\n\n  Range.intersect = intersect;\n\n  function isEmpty(range) {\n    return range.end - range.start <= 0;\n  }\n\n  Range.isEmpty = isEmpty;\n\n  function intersects(one, other) {\n    return !isEmpty(intersect(one, other));\n  }\n\n  Range.intersects = intersects;\n\n  function relativeComplement(one, other) {\n    var result = [];\n    var first = {\n      start: one.start,\n      end: Math.min(other.start, one.end)\n    };\n    var second = {\n      start: Math.max(other.end, one.start),\n      end: one.end\n    };\n\n    if (!isEmpty(first)) {\n      result.push(first);\n    }\n\n    if (!isEmpty(second)) {\n      result.push(second);\n    }\n\n    return result;\n  }\n\n  Range.relativeComplement = relativeComplement;\n})(Range || (Range = {}));","map":null,"metadata":{},"sourceType":"module"}