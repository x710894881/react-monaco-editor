{"ast":null,"code":"import * as platform from '../../../common/platform.js';\nimport * as errors from '../../../common/errors.js';\nimport * as dom from '../../../browser/dom.js';\nimport { createKeybinding } from '../../../common/keyCodes.js';\n\nvar KeybindingDispatcher =\n/** @class */\nfunction () {\n  function KeybindingDispatcher() {\n    this._arr = [];\n  }\n\n  KeybindingDispatcher.prototype.set = function (keybinding, callback) {\n    this._arr.push({\n      keybinding: createKeybinding(keybinding, platform.OS),\n      callback: callback\n    });\n  };\n\n  KeybindingDispatcher.prototype.dispatch = function (keybinding) {\n    // Loop from the last to the first to handle overwrites\n    for (var i = this._arr.length - 1; i >= 0; i--) {\n      var item = this._arr[i];\n\n      if (keybinding.toChord().equals(item.keybinding)) {\n        return item.callback;\n      }\n    }\n\n    return null;\n  };\n\n  return KeybindingDispatcher;\n}();\n\nexport { KeybindingDispatcher };\n\nvar DefaultController =\n/** @class */\nfunction () {\n  function DefaultController(options) {\n    var _this = this;\n\n    if (options === void 0) {\n      options = {\n        clickBehavior: 0\n        /* ON_MOUSE_DOWN */\n        ,\n        keyboardSupport: true,\n        openMode: 0\n        /* SINGLE_CLICK */\n\n      };\n    }\n\n    this.options = options;\n    this.downKeyBindingDispatcher = new KeybindingDispatcher();\n    this.upKeyBindingDispatcher = new KeybindingDispatcher();\n\n    if (typeof options.keyboardSupport !== 'boolean' || options.keyboardSupport) {\n      this.downKeyBindingDispatcher.set(16\n      /* UpArrow */\n      , function (t, e) {\n        return _this.onUp(t, e);\n      });\n      this.downKeyBindingDispatcher.set(18\n      /* DownArrow */\n      , function (t, e) {\n        return _this.onDown(t, e);\n      });\n      this.downKeyBindingDispatcher.set(15\n      /* LeftArrow */\n      , function (t, e) {\n        return _this.onLeft(t, e);\n      });\n      this.downKeyBindingDispatcher.set(17\n      /* RightArrow */\n      , function (t, e) {\n        return _this.onRight(t, e);\n      });\n\n      if (platform.isMacintosh) {\n        this.downKeyBindingDispatcher.set(2048\n        /* CtrlCmd */\n        | 16\n        /* UpArrow */\n        , function (t, e) {\n          return _this.onLeft(t, e);\n        });\n        this.downKeyBindingDispatcher.set(256\n        /* WinCtrl */\n        | 44\n        /* KEY_N */\n        , function (t, e) {\n          return _this.onDown(t, e);\n        });\n        this.downKeyBindingDispatcher.set(256\n        /* WinCtrl */\n        | 46\n        /* KEY_P */\n        , function (t, e) {\n          return _this.onUp(t, e);\n        });\n      }\n\n      this.downKeyBindingDispatcher.set(11\n      /* PageUp */\n      , function (t, e) {\n        return _this.onPageUp(t, e);\n      });\n      this.downKeyBindingDispatcher.set(12\n      /* PageDown */\n      , function (t, e) {\n        return _this.onPageDown(t, e);\n      });\n      this.downKeyBindingDispatcher.set(14\n      /* Home */\n      , function (t, e) {\n        return _this.onHome(t, e);\n      });\n      this.downKeyBindingDispatcher.set(13\n      /* End */\n      , function (t, e) {\n        return _this.onEnd(t, e);\n      });\n      this.downKeyBindingDispatcher.set(10\n      /* Space */\n      , function (t, e) {\n        return _this.onSpace(t, e);\n      });\n      this.downKeyBindingDispatcher.set(9\n      /* Escape */\n      , function (t, e) {\n        return _this.onEscape(t, e);\n      });\n      this.upKeyBindingDispatcher.set(3\n      /* Enter */\n      , this.onEnter.bind(this));\n      this.upKeyBindingDispatcher.set(2048\n      /* CtrlCmd */\n      | 3\n      /* Enter */\n      , this.onEnter.bind(this));\n    }\n  }\n\n  DefaultController.prototype.onMouseDown = function (tree, element, event, origin) {\n    if (origin === void 0) {\n      origin = 'mouse';\n    }\n\n    if (this.options.clickBehavior === 0\n    /* ON_MOUSE_DOWN */\n    && (event.leftButton || event.middleButton)) {\n      if (event.target) {\n        if (event.target.tagName && event.target.tagName.toLowerCase() === 'input') {\n          return false; // Ignore event if target is a form input field (avoids browser specific issues)\n        }\n\n        if (dom.findParentWithClass(event.target, 'scrollbar', 'monaco-tree')) {\n          return false;\n        }\n\n        if (dom.findParentWithClass(event.target, 'monaco-action-bar', 'row')) {\n          // TODO@Joao not very nice way of checking for the action bar (implicit knowledge)\n          return false; // Ignore event if target is over an action bar of the row\n        }\n      } // Propagate to onLeftClick now\n\n\n      return this.onLeftClick(tree, element, event, origin);\n    }\n\n    return false;\n  };\n\n  DefaultController.prototype.onClick = function (tree, element, event) {\n    var isMac = platform.isMacintosh; // A Ctrl click on the Mac is a context menu event\n\n    if (isMac && event.ctrlKey) {\n      event.preventDefault();\n      event.stopPropagation();\n      return false;\n    }\n\n    if (event.target && event.target.tagName && event.target.tagName.toLowerCase() === 'input') {\n      return false; // Ignore event if target is a form input field (avoids browser specific issues)\n    }\n\n    if (this.options.clickBehavior === 0\n    /* ON_MOUSE_DOWN */\n    && (event.leftButton || event.middleButton)) {\n      return false; // Already handled by onMouseDown\n    }\n\n    return this.onLeftClick(tree, element, event);\n  };\n\n  DefaultController.prototype.onLeftClick = function (tree, element, eventish, origin) {\n    if (origin === void 0) {\n      origin = 'mouse';\n    }\n\n    var event = eventish;\n    var payload = {\n      origin: origin,\n      originalEvent: eventish,\n      didClickOnTwistie: this.isClickOnTwistie(event)\n    };\n\n    if (tree.getInput() === element) {\n      tree.clearFocus(payload);\n      tree.clearSelection(payload);\n    } else {\n      var isSingleMouseDown = eventish && event.browserEvent && event.browserEvent.type === 'mousedown' && event.browserEvent.detail === 1;\n\n      if (!isSingleMouseDown) {\n        eventish.preventDefault(); // we cannot preventDefault onMouseDown with single click because this would break DND otherwise\n      }\n\n      eventish.stopPropagation();\n      tree.domFocus();\n      tree.setSelection([element], payload);\n      tree.setFocus(element, payload);\n\n      if (this.shouldToggleExpansion(element, event, origin)) {\n        if (tree.isExpanded(element)) {\n          tree.collapse(element).then(undefined, errors.onUnexpectedError);\n        } else {\n          tree.expand(element).then(undefined, errors.onUnexpectedError);\n        }\n      }\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.shouldToggleExpansion = function (element, event, origin) {\n    var isDoubleClick = origin === 'mouse' && event.detail === 2;\n    return this.openOnSingleClick || isDoubleClick || this.isClickOnTwistie(event);\n  };\n\n  Object.defineProperty(DefaultController.prototype, \"openOnSingleClick\", {\n    get: function () {\n      return this.options.openMode === 0\n      /* SINGLE_CLICK */\n      ;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  DefaultController.prototype.isClickOnTwistie = function (event) {\n    var element = event.target;\n\n    if (!dom.hasClass(element, 'content')) {\n      return false;\n    }\n\n    var twistieStyle = window.getComputedStyle(element, ':before');\n\n    if (twistieStyle.backgroundImage === 'none' || twistieStyle.display === 'none') {\n      return false;\n    }\n\n    var twistieWidth = parseInt(twistieStyle.width) + parseInt(twistieStyle.paddingRight);\n    return event.browserEvent.offsetX <= twistieWidth;\n  };\n\n  DefaultController.prototype.onContextMenu = function (tree, element, event) {\n    if (event.target && event.target.tagName && event.target.tagName.toLowerCase() === 'input') {\n      return false; // allow context menu on input fields\n    } // Prevent native context menu from showing up\n\n\n    if (event) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    return false;\n  };\n\n  DefaultController.prototype.onTap = function (tree, element, event) {\n    var target = event.initialTarget;\n\n    if (target && target.tagName && target.tagName.toLowerCase() === 'input') {\n      return false; // Ignore event if target is a form input field (avoids browser specific issues)\n    }\n\n    return this.onLeftClick(tree, element, event, 'touch');\n  };\n\n  DefaultController.prototype.onKeyDown = function (tree, event) {\n    return this.onKey(this.downKeyBindingDispatcher, tree, event);\n  };\n\n  DefaultController.prototype.onKeyUp = function (tree, event) {\n    return this.onKey(this.upKeyBindingDispatcher, tree, event);\n  };\n\n  DefaultController.prototype.onKey = function (bindings, tree, event) {\n    var handler = bindings.dispatch(event.toKeybinding());\n\n    if (handler) {\n      // TODO: TS 3.1 upgrade. Why are we checking against void?\n      if (handler(tree, event)) {\n        event.preventDefault();\n        event.stopPropagation();\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  DefaultController.prototype.onUp = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      tree.focusPrevious(1, payload);\n      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onPageUp = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      tree.focusPreviousPage(payload);\n      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onDown = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      tree.focusNext(1, payload);\n      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onPageDown = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      tree.focusNextPage(payload);\n      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onHome = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      tree.focusFirst(payload);\n      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onEnd = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      tree.focusLast(payload);\n      tree.reveal(tree.getFocus()).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onLeft = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      var focus_1 = tree.getFocus();\n      tree.collapse(focus_1).then(function (didCollapse) {\n        if (focus_1 && !didCollapse) {\n          tree.focusParent(payload);\n          return tree.reveal(tree.getFocus());\n        }\n\n        return undefined;\n      }).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onRight = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n    } else {\n      var focus_2 = tree.getFocus();\n      tree.expand(focus_2).then(function (didExpand) {\n        if (focus_2 && !didExpand) {\n          tree.focusFirstChild(payload);\n          return tree.reveal(tree.getFocus());\n        }\n\n        return undefined;\n      }).then(undefined, errors.onUnexpectedError);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onEnter = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      return false;\n    }\n\n    var focus = tree.getFocus();\n\n    if (focus) {\n      tree.setSelection([focus], payload);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onSpace = function (tree, event) {\n    if (tree.getHighlight()) {\n      return false;\n    }\n\n    var focus = tree.getFocus();\n\n    if (focus) {\n      tree.toggleExpansion(focus);\n    }\n\n    return true;\n  };\n\n  DefaultController.prototype.onEscape = function (tree, event) {\n    var payload = {\n      origin: 'keyboard',\n      originalEvent: event\n    };\n\n    if (tree.getHighlight()) {\n      tree.clearHighlight(payload);\n      return true;\n    }\n\n    if (tree.getSelection().length) {\n      tree.clearSelection(payload);\n      return true;\n    }\n\n    if (tree.getFocus()) {\n      tree.clearFocus(payload);\n      return true;\n    }\n\n    return false;\n  };\n\n  return DefaultController;\n}();\n\nexport { DefaultController };\n\nvar DefaultDragAndDrop =\n/** @class */\nfunction () {\n  function DefaultDragAndDrop() {}\n\n  DefaultDragAndDrop.prototype.getDragURI = function (tree, element) {\n    return null;\n  };\n\n  DefaultDragAndDrop.prototype.onDragStart = function (tree, data, originalEvent) {\n    return;\n  };\n\n  DefaultDragAndDrop.prototype.onDragOver = function (tree, data, targetElement, originalEvent) {\n    return null;\n  };\n\n  DefaultDragAndDrop.prototype.drop = function (tree, data, targetElement, originalEvent) {\n    return;\n  };\n\n  return DefaultDragAndDrop;\n}();\n\nexport { DefaultDragAndDrop };\n\nvar DefaultFilter =\n/** @class */\nfunction () {\n  function DefaultFilter() {}\n\n  DefaultFilter.prototype.isVisible = function (tree, element) {\n    return true;\n  };\n\n  return DefaultFilter;\n}();\n\nexport { DefaultFilter };\n\nvar DefaultAccessibilityProvider =\n/** @class */\nfunction () {\n  function DefaultAccessibilityProvider() {}\n\n  DefaultAccessibilityProvider.prototype.getAriaLabel = function (tree, element) {\n    return null;\n  };\n\n  return DefaultAccessibilityProvider;\n}();\n\nexport { DefaultAccessibilityProvider };\n\nvar DefaultTreestyler =\n/** @class */\nfunction () {\n  function DefaultTreestyler(styleElement, selectorSuffix) {\n    this.styleElement = styleElement;\n    this.selectorSuffix = selectorSuffix;\n  }\n\n  DefaultTreestyler.prototype.style = function (styles) {\n    var suffix = this.selectorSuffix ? \".\" + this.selectorSuffix : '';\n    var content = [];\n\n    if (styles.listFocusBackground) {\n      content.push(\".monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.focused:not(.highlighted) { background-color: \" + styles.listFocusBackground + \"; }\");\n    }\n\n    if (styles.listFocusForeground) {\n      content.push(\".monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.focused:not(.highlighted) { color: \" + styles.listFocusForeground + \"; }\");\n    }\n\n    if (styles.listActiveSelectionBackground) {\n      content.push(\".monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { background-color: \" + styles.listActiveSelectionBackground + \"; }\");\n    }\n\n    if (styles.listActiveSelectionForeground) {\n      content.push(\".monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { color: \" + styles.listActiveSelectionForeground + \"; }\");\n    }\n\n    if (styles.listFocusAndSelectionBackground) {\n      content.push(\"\\n\\t\\t\\t\\t.monaco-tree-drag-image,\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.focused.selected:not(.highlighted) { background-color: \" + styles.listFocusAndSelectionBackground + \"; }\\n\\t\\t\\t\");\n    }\n\n    if (styles.listFocusAndSelectionForeground) {\n      content.push(\"\\n\\t\\t\\t\\t.monaco-tree-drag-image,\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.focused.selected:not(.highlighted) { color: \" + styles.listFocusAndSelectionForeground + \"; }\\n\\t\\t\\t\");\n    }\n\n    if (styles.listInactiveSelectionBackground) {\n      content.push(\".monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { background-color: \" + styles.listInactiveSelectionBackground + \"; }\");\n    }\n\n    if (styles.listInactiveSelectionForeground) {\n      content.push(\".monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) { color: \" + styles.listInactiveSelectionForeground + \"; }\");\n    }\n\n    if (styles.listHoverBackground) {\n      content.push(\".monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row:hover:not(.highlighted):not(.selected):not(.focused) { background-color: \" + styles.listHoverBackground + \"; }\");\n    }\n\n    if (styles.listHoverForeground) {\n      content.push(\".monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row:hover:not(.highlighted):not(.selected):not(.focused) { color: \" + styles.listHoverForeground + \"; }\");\n    }\n\n    if (styles.listDropBackground) {\n      content.push(\"\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \" .monaco-tree-wrapper.drop-target,\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row.drop-target { background-color: \" + styles.listDropBackground + \" !important; color: inherit !important; }\\n\\t\\t\\t\");\n    }\n\n    if (styles.listFocusOutline) {\n      content.push(\"\\n\\t\\t\\t\\t.monaco-tree-drag-image\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{ border: 1px solid \" + styles.listFocusOutline + \"; background: #000; }\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row \\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{ border: 1px solid transparent; }\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.focused:not(.highlighted) \\t\\t\\t\\t\\t\\t{ border: 1px dotted \" + styles.listFocusOutline + \"; }\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \".focused .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted) \\t\\t\\t\\t\\t\\t{ border: 1px solid \" + styles.listFocusOutline + \"; }\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row.selected:not(.highlighted)  \\t\\t\\t\\t\\t\\t\\t{ border: 1px solid \" + styles.listFocusOutline + \"; }\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row:hover:not(.highlighted):not(.selected):not(.focused)  \\t{ border: 1px dashed \" + styles.listFocusOutline + \"; }\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \" .monaco-tree-wrapper.drop-target,\\n\\t\\t\\t\\t.monaco-tree\" + suffix + \" .monaco-tree-rows > .monaco-tree-row.drop-target\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t{ border: 1px dashed \" + styles.listFocusOutline + \"; }\\n\\t\\t\\t\");\n    }\n\n    var newStyles = content.join('\\n');\n\n    if (newStyles !== this.styleElement.innerHTML) {\n      this.styleElement.innerHTML = newStyles;\n    }\n  };\n\n  return DefaultTreestyler;\n}();\n\nexport { DefaultTreestyler };","map":null,"metadata":{},"sourceType":"module"}