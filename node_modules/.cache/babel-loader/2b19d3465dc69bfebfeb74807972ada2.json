{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from '../../../nls.js';\nimport * as path from '../../../base/common/path.js';\nimport { dirname } from '../../../base/common/resources.js';\nimport { Text } from './snippetParser.js';\nimport { LanguageConfigurationRegistry } from '../../common/modes/languageConfigurationRegistry.js';\nimport { getLeadingWhitespace, commonPrefixLength, isFalsyOrWhitespace, pad, endsWith } from '../../../base/common/strings.js';\nimport { isSingleFolderWorkspaceIdentifier, toWorkspaceIdentifier, WORKSPACE_EXTENSION } from '../../../platform/workspaces/common/workspaces.js';\n\nvar CompositeSnippetVariableResolver =\n/** @class */\nfunction () {\n  function CompositeSnippetVariableResolver(_delegates) {\n    this._delegates = _delegates; //\n  }\n\n  CompositeSnippetVariableResolver.prototype.resolve = function (variable) {\n    for (var _i = 0, _a = this._delegates; _i < _a.length; _i++) {\n      var delegate = _a[_i];\n      var value = delegate.resolve(variable);\n\n      if (value !== undefined) {\n        return value;\n      }\n    }\n\n    return undefined;\n  };\n\n  return CompositeSnippetVariableResolver;\n}();\n\nexport { CompositeSnippetVariableResolver };\n\nvar SelectionBasedVariableResolver =\n/** @class */\nfunction () {\n  function SelectionBasedVariableResolver(_model, _selection) {\n    this._model = _model;\n    this._selection = _selection; //\n  }\n\n  SelectionBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    if (name === 'SELECTION' || name === 'TM_SELECTED_TEXT') {\n      var value = this._model.getValueInRange(this._selection) || undefined;\n\n      if (value && this._selection.startLineNumber !== this._selection.endLineNumber && variable.snippet) {\n        // Selection is a multiline string which we indentation we now\n        // need to adjust. We compare the indentation of this variable\n        // with the indentation at the editor position and add potential\n        // extra indentation to the value\n        var line = this._model.getLineContent(this._selection.startLineNumber);\n\n        var lineLeadingWhitespace = getLeadingWhitespace(line, 0, this._selection.startColumn - 1);\n        var varLeadingWhitespace_1 = lineLeadingWhitespace;\n        variable.snippet.walk(function (marker) {\n          if (marker === variable) {\n            return false;\n          }\n\n          if (marker instanceof Text) {\n            varLeadingWhitespace_1 = getLeadingWhitespace(marker.value.split(/\\r\\n|\\r|\\n/).pop());\n          }\n\n          return true;\n        });\n        var whitespaceCommonLength_1 = commonPrefixLength(varLeadingWhitespace_1, lineLeadingWhitespace);\n        value = value.replace(/(\\r\\n|\\r|\\n)(.*)/g, function (m, newline, rest) {\n          return \"\" + newline + varLeadingWhitespace_1.substr(whitespaceCommonLength_1) + rest;\n        });\n      }\n\n      return value;\n    } else if (name === 'TM_CURRENT_LINE') {\n      return this._model.getLineContent(this._selection.positionLineNumber);\n    } else if (name === 'TM_CURRENT_WORD') {\n      var info = this._model.getWordAtPosition({\n        lineNumber: this._selection.positionLineNumber,\n        column: this._selection.positionColumn\n      });\n\n      return info && info.word || undefined;\n    } else if (name === 'TM_LINE_INDEX') {\n      return String(this._selection.positionLineNumber - 1);\n    } else if (name === 'TM_LINE_NUMBER') {\n      return String(this._selection.positionLineNumber);\n    }\n\n    return undefined;\n  };\n\n  return SelectionBasedVariableResolver;\n}();\n\nexport { SelectionBasedVariableResolver };\n\nvar ModelBasedVariableResolver =\n/** @class */\nfunction () {\n  function ModelBasedVariableResolver(_labelService, _model) {\n    this._labelService = _labelService;\n    this._model = _model; //\n  }\n\n  ModelBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    if (name === 'TM_FILENAME') {\n      return path.basename(this._model.uri.fsPath);\n    } else if (name === 'TM_FILENAME_BASE') {\n      var name_1 = path.basename(this._model.uri.fsPath);\n      var idx = name_1.lastIndexOf('.');\n\n      if (idx <= 0) {\n        return name_1;\n      } else {\n        return name_1.slice(0, idx);\n      }\n    } else if (name === 'TM_DIRECTORY' && this._labelService) {\n      if (path.dirname(this._model.uri.fsPath) === '.') {\n        return '';\n      }\n\n      return this._labelService.getUriLabel(dirname(this._model.uri));\n    } else if (name === 'TM_FILEPATH' && this._labelService) {\n      return this._labelService.getUriLabel(this._model.uri);\n    }\n\n    return undefined;\n  };\n\n  return ModelBasedVariableResolver;\n}();\n\nexport { ModelBasedVariableResolver };\n\nvar ClipboardBasedVariableResolver =\n/** @class */\nfunction () {\n  function ClipboardBasedVariableResolver(_clipboardText, _selectionIdx, _selectionCount) {\n    this._clipboardText = _clipboardText;\n    this._selectionIdx = _selectionIdx;\n    this._selectionCount = _selectionCount; //\n  }\n\n  ClipboardBasedVariableResolver.prototype.resolve = function (variable) {\n    if (variable.name !== 'CLIPBOARD') {\n      return undefined;\n    }\n\n    if (!this._clipboardText) {\n      return undefined;\n    }\n\n    var lines = this._clipboardText.split(/\\r\\n|\\n|\\r/).filter(function (s) {\n      return !isFalsyOrWhitespace(s);\n    });\n\n    if (lines.length === this._selectionCount) {\n      return lines[this._selectionIdx];\n    } else {\n      return this._clipboardText;\n    }\n  };\n\n  return ClipboardBasedVariableResolver;\n}();\n\nexport { ClipboardBasedVariableResolver };\n\nvar CommentBasedVariableResolver =\n/** @class */\nfunction () {\n  function CommentBasedVariableResolver(_model) {\n    this._model = _model; //\n  }\n\n  CommentBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    var language = this._model.getLanguageIdentifier();\n\n    var config = LanguageConfigurationRegistry.getComments(language.id);\n\n    if (!config) {\n      return undefined;\n    }\n\n    if (name === 'LINE_COMMENT') {\n      return config.lineCommentToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_START') {\n      return config.blockCommentStartToken || undefined;\n    } else if (name === 'BLOCK_COMMENT_END') {\n      return config.blockCommentEndToken || undefined;\n    }\n\n    return undefined;\n  };\n\n  return CommentBasedVariableResolver;\n}();\n\nexport { CommentBasedVariableResolver };\n\nvar TimeBasedVariableResolver =\n/** @class */\nfunction () {\n  function TimeBasedVariableResolver() {}\n\n  TimeBasedVariableResolver.prototype.resolve = function (variable) {\n    var name = variable.name;\n\n    if (name === 'CURRENT_YEAR') {\n      return String(new Date().getFullYear());\n    } else if (name === 'CURRENT_YEAR_SHORT') {\n      return String(new Date().getFullYear()).slice(-2);\n    } else if (name === 'CURRENT_MONTH') {\n      return pad(new Date().getMonth().valueOf() + 1, 2);\n    } else if (name === 'CURRENT_DATE') {\n      return pad(new Date().getDate().valueOf(), 2);\n    } else if (name === 'CURRENT_HOUR') {\n      return pad(new Date().getHours().valueOf(), 2);\n    } else if (name === 'CURRENT_MINUTE') {\n      return pad(new Date().getMinutes().valueOf(), 2);\n    } else if (name === 'CURRENT_SECOND') {\n      return pad(new Date().getSeconds().valueOf(), 2);\n    } else if (name === 'CURRENT_DAY_NAME') {\n      return TimeBasedVariableResolver.dayNames[new Date().getDay()];\n    } else if (name === 'CURRENT_DAY_NAME_SHORT') {\n      return TimeBasedVariableResolver.dayNamesShort[new Date().getDay()];\n    } else if (name === 'CURRENT_MONTH_NAME') {\n      return TimeBasedVariableResolver.monthNames[new Date().getMonth()];\n    } else if (name === 'CURRENT_MONTH_NAME_SHORT') {\n      return TimeBasedVariableResolver.monthNamesShort[new Date().getMonth()];\n    } else if (name === 'CURRENT_SECONDS_UNIX') {\n      return String(Math.floor(Date.now() / 1000));\n    }\n\n    return undefined;\n  };\n\n  TimeBasedVariableResolver.dayNames = [nls.localize('Sunday', \"Sunday\"), nls.localize('Monday', \"Monday\"), nls.localize('Tuesday', \"Tuesday\"), nls.localize('Wednesday', \"Wednesday\"), nls.localize('Thursday', \"Thursday\"), nls.localize('Friday', \"Friday\"), nls.localize('Saturday', \"Saturday\")];\n  TimeBasedVariableResolver.dayNamesShort = [nls.localize('SundayShort', \"Sun\"), nls.localize('MondayShort', \"Mon\"), nls.localize('TuesdayShort', \"Tue\"), nls.localize('WednesdayShort', \"Wed\"), nls.localize('ThursdayShort', \"Thu\"), nls.localize('FridayShort', \"Fri\"), nls.localize('SaturdayShort', \"Sat\")];\n  TimeBasedVariableResolver.monthNames = [nls.localize('January', \"January\"), nls.localize('February', \"February\"), nls.localize('March', \"March\"), nls.localize('April', \"April\"), nls.localize('May', \"May\"), nls.localize('June', \"June\"), nls.localize('July', \"July\"), nls.localize('August', \"August\"), nls.localize('September', \"September\"), nls.localize('October', \"October\"), nls.localize('November', \"November\"), nls.localize('December', \"December\")];\n  TimeBasedVariableResolver.monthNamesShort = [nls.localize('JanuaryShort', \"Jan\"), nls.localize('FebruaryShort', \"Feb\"), nls.localize('MarchShort', \"Mar\"), nls.localize('AprilShort', \"Apr\"), nls.localize('MayShort', \"May\"), nls.localize('JuneShort', \"Jun\"), nls.localize('JulyShort', \"Jul\"), nls.localize('AugustShort', \"Aug\"), nls.localize('SeptemberShort', \"Sep\"), nls.localize('OctoberShort', \"Oct\"), nls.localize('NovemberShort', \"Nov\"), nls.localize('DecemberShort', \"Dec\")];\n  return TimeBasedVariableResolver;\n}();\n\nexport { TimeBasedVariableResolver };\n\nvar WorkspaceBasedVariableResolver =\n/** @class */\nfunction () {\n  function WorkspaceBasedVariableResolver(_workspaceService) {\n    this._workspaceService = _workspaceService; //\n  }\n\n  WorkspaceBasedVariableResolver.prototype.resolve = function (variable) {\n    if (variable.name !== 'WORKSPACE_NAME' || !this._workspaceService) {\n      return undefined;\n    }\n\n    var workspaceIdentifier = toWorkspaceIdentifier(this._workspaceService.getWorkspace());\n\n    if (!workspaceIdentifier) {\n      return undefined;\n    }\n\n    if (isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n      return path.basename(workspaceIdentifier.path);\n    }\n\n    var filename = path.basename(workspaceIdentifier.configPath.path);\n\n    if (endsWith(filename, WORKSPACE_EXTENSION)) {\n      filename = filename.substr(0, filename.length - WORKSPACE_EXTENSION.length - 1);\n    }\n\n    return filename;\n  };\n\n  return WorkspaceBasedVariableResolver;\n}();\n\nexport { WorkspaceBasedVariableResolver };","map":null,"metadata":{},"sourceType":"module"}