{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as browser from './browser.js';\nimport { IframeUtils } from './iframe.js';\nimport * as platform from '../common/platform.js';\n\nvar StandardMouseEvent =\n/** @class */\nfunction () {\n  function StandardMouseEvent(e) {\n    this.timestamp = Date.now();\n    this.browserEvent = e;\n    this.leftButton = e.button === 0;\n    this.middleButton = e.button === 1;\n    this.rightButton = e.button === 2;\n    this.target = e.target;\n    this.detail = e.detail || 1;\n\n    if (e.type === 'dblclick') {\n      this.detail = 2;\n    }\n\n    this.ctrlKey = e.ctrlKey;\n    this.shiftKey = e.shiftKey;\n    this.altKey = e.altKey;\n    this.metaKey = e.metaKey;\n\n    if (typeof e.pageX === 'number') {\n      this.posx = e.pageX;\n      this.posy = e.pageY;\n    } else {\n      // Probably hit by MSGestureEvent\n      this.posx = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;\n      this.posy = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;\n    } // Find the position of the iframe this code is executing in relative to the iframe where the event was captured.\n\n\n    var iframeOffsets = IframeUtils.getPositionOfChildWindowRelativeToAncestorWindow(self, e.view);\n    this.posx -= iframeOffsets.left;\n    this.posy -= iframeOffsets.top;\n  }\n\n  StandardMouseEvent.prototype.preventDefault = function () {\n    if (this.browserEvent.preventDefault) {\n      this.browserEvent.preventDefault();\n    }\n  };\n\n  StandardMouseEvent.prototype.stopPropagation = function () {\n    if (this.browserEvent.stopPropagation) {\n      this.browserEvent.stopPropagation();\n    }\n  };\n\n  return StandardMouseEvent;\n}();\n\nexport { StandardMouseEvent };\n\nvar DragMouseEvent =\n/** @class */\nfunction (_super) {\n  __extends(DragMouseEvent, _super);\n\n  function DragMouseEvent(e) {\n    var _this = _super.call(this, e) || this;\n\n    _this.dataTransfer = e.dataTransfer;\n    return _this;\n  }\n\n  return DragMouseEvent;\n}(StandardMouseEvent);\n\nexport { DragMouseEvent };\n\nvar StandardWheelEvent =\n/** @class */\nfunction () {\n  function StandardWheelEvent(e, deltaX, deltaY) {\n    if (deltaX === void 0) {\n      deltaX = 0;\n    }\n\n    if (deltaY === void 0) {\n      deltaY = 0;\n    }\n\n    this.browserEvent = e || null;\n    this.target = e ? e.target || e.targetNode || e.srcElement : null;\n    this.deltaY = deltaY;\n    this.deltaX = deltaX;\n\n    if (e) {\n      if (e.type === 'wheel') {\n        // Modern wheel event\n        // https://developer.mozilla.org/en-US/docs/Web/API/WheelEvent\n        var ev = e;\n\n        if (ev.deltaMode === ev.DOM_DELTA_LINE) {\n          // the deltas are expressed in lines\n          this.deltaY = -e.deltaY;\n          this.deltaX = -e.deltaX;\n        } else {\n          this.deltaY = -e.deltaY / 40;\n          this.deltaX = -e.deltaX / 40;\n        }\n      } else {\n        // Old (deprecated) wheel events\n        var e1 = e;\n        var e2 = e; // vertical delta scroll\n\n        if (typeof e1.wheelDeltaY !== 'undefined') {\n          this.deltaY = e1.wheelDeltaY / 120;\n        } else if (typeof e2.VERTICAL_AXIS !== 'undefined' && e2.axis === e2.VERTICAL_AXIS) {\n          this.deltaY = -e2.detail / 3;\n        } // horizontal delta scroll\n\n\n        if (typeof e1.wheelDeltaX !== 'undefined') {\n          if (browser.isSafari && platform.isWindows) {\n            this.deltaX = -(e1.wheelDeltaX / 120);\n          } else {\n            this.deltaX = e1.wheelDeltaX / 120;\n          }\n        } else if (typeof e2.HORIZONTAL_AXIS !== 'undefined' && e2.axis === e2.HORIZONTAL_AXIS) {\n          this.deltaX = -e.detail / 3;\n        } // Assume a vertical scroll if nothing else worked\n\n\n        if (this.deltaY === 0 && this.deltaX === 0 && e.wheelDelta) {\n          this.deltaY = e.wheelDelta / 120;\n        }\n      }\n    }\n  }\n\n  StandardWheelEvent.prototype.preventDefault = function () {\n    if (this.browserEvent) {\n      if (this.browserEvent.preventDefault) {\n        this.browserEvent.preventDefault();\n      }\n    }\n  };\n\n  StandardWheelEvent.prototype.stopPropagation = function () {\n    if (this.browserEvent) {\n      if (this.browserEvent.stopPropagation) {\n        this.browserEvent.stopPropagation();\n      }\n    }\n  };\n\n  return StandardWheelEvent;\n}();\n\nexport { StandardWheelEvent };","map":null,"metadata":{},"sourceType":"module"}