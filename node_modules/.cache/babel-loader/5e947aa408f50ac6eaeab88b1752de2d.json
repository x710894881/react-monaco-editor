{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './contextview.css';\nimport * as DOM from '../../dom.js';\nimport { toDisposable, Disposable, DisposableStore } from '../../../common/lifecycle.js';\nimport { Range } from '../../../common/range.js';\n/**\n * Lays out a one dimensional view next to an anchor in a viewport.\n *\n * @returns The view offset within the viewport.\n */\n\nexport function layout(viewportSize, viewSize, anchor) {\n  var anchorEnd = anchor.offset + anchor.size;\n\n  if (anchor.position === 0\n  /* Before */\n  ) {\n      if (viewSize <= viewportSize - anchorEnd) {\n        return anchorEnd; // happy case, lay it out after the anchor\n      }\n\n      if (viewSize <= anchor.offset) {\n        return anchor.offset - viewSize; // ok case, lay it out before the anchor\n      }\n\n      return Math.max(viewportSize - viewSize, 0); // sad case, lay it over the anchor\n    } else {\n    if (viewSize <= anchor.offset) {\n      return anchor.offset - viewSize; // happy case, lay it out before the anchor\n    }\n\n    if (viewSize <= viewportSize - anchorEnd) {\n      return anchorEnd; // ok case, lay it out after the anchor\n    }\n\n    return 0; // sad case, lay it over the anchor\n  }\n}\n\nvar ContextView =\n/** @class */\nfunction (_super) {\n  __extends(ContextView, _super);\n\n  function ContextView(container) {\n    var _this = _super.call(this) || this;\n\n    _this.container = null;\n    _this.delegate = null;\n    _this.toDisposeOnClean = Disposable.None;\n    _this.toDisposeOnSetContainer = Disposable.None;\n    _this.view = DOM.$('.context-view');\n    DOM.hide(_this.view);\n\n    _this.setContainer(container);\n\n    _this._register(toDisposable(function () {\n      return _this.setContainer(null);\n    }));\n\n    return _this;\n  }\n\n  ContextView.prototype.setContainer = function (container) {\n    var _this = this;\n\n    if (this.container) {\n      this.toDisposeOnSetContainer.dispose();\n      this.container.removeChild(this.view);\n      this.container = null;\n    }\n\n    if (container) {\n      this.container = container;\n      this.container.appendChild(this.view);\n      var toDisposeOnSetContainer_1 = new DisposableStore();\n      ContextView.BUBBLE_UP_EVENTS.forEach(function (event) {\n        toDisposeOnSetContainer_1.add(DOM.addStandardDisposableListener(_this.container, event, function (e) {\n          _this.onDOMEvent(e, false);\n        }));\n      });\n      ContextView.BUBBLE_DOWN_EVENTS.forEach(function (event) {\n        toDisposeOnSetContainer_1.add(DOM.addStandardDisposableListener(_this.container, event, function (e) {\n          _this.onDOMEvent(e, true);\n        }, true));\n      });\n      this.toDisposeOnSetContainer = toDisposeOnSetContainer_1;\n    }\n  };\n\n  ContextView.prototype.show = function (delegate) {\n    if (this.isVisible()) {\n      this.hide();\n    } // Show static box\n\n\n    DOM.clearNode(this.view);\n    this.view.className = 'context-view';\n    this.view.style.top = '0px';\n    this.view.style.left = '0px';\n    DOM.show(this.view); // Render content\n\n    this.toDisposeOnClean = delegate.render(this.view) || Disposable.None; // Set active delegate\n\n    this.delegate = delegate; // Layout\n\n    this.doLayout(); // Focus\n\n    if (this.delegate.focus) {\n      this.delegate.focus();\n    }\n  };\n\n  ContextView.prototype.layout = function () {\n    if (!this.isVisible()) {\n      return;\n    }\n\n    if (this.delegate.canRelayout === false) {\n      this.hide();\n      return;\n    }\n\n    if (this.delegate.layout) {\n      this.delegate.layout();\n    }\n\n    this.doLayout();\n  };\n\n  ContextView.prototype.doLayout = function () {\n    // Check that we still have a delegate - this.delegate.layout may have hidden\n    if (!this.isVisible()) {\n      return;\n    } // Get anchor\n\n\n    var anchor = this.delegate.getAnchor(); // Compute around\n\n    var around; // Get the element's position and size (to anchor the view)\n\n    if (DOM.isHTMLElement(anchor)) {\n      var elementPosition = DOM.getDomNodePagePosition(anchor);\n      around = {\n        top: elementPosition.top,\n        left: elementPosition.left,\n        width: elementPosition.width,\n        height: elementPosition.height\n      };\n    } else {\n      around = {\n        top: anchor.y,\n        left: anchor.x,\n        width: anchor.width || 1,\n        height: anchor.height || 2\n      };\n    }\n\n    var viewSizeWidth = DOM.getTotalWidth(this.view);\n    var viewSizeHeight = DOM.getTotalHeight(this.view);\n    var anchorPosition = this.delegate.anchorPosition || 0\n    /* BELOW */\n    ;\n    var anchorAlignment = this.delegate.anchorAlignment || 0\n    /* LEFT */\n    ;\n    var verticalAnchor = {\n      offset: around.top - window.pageYOffset,\n      size: around.height,\n      position: anchorPosition === 0\n      /* BELOW */\n      ? 0\n      /* Before */\n      : 1\n      /* After */\n\n    };\n    var horizontalAnchor;\n\n    if (anchorAlignment === 0\n    /* LEFT */\n    ) {\n        horizontalAnchor = {\n          offset: around.left,\n          size: 0,\n          position: 0\n          /* Before */\n\n        };\n      } else {\n      horizontalAnchor = {\n        offset: around.left + around.width,\n        size: 0,\n        position: 1\n        /* After */\n\n      };\n    }\n\n    var top = layout(window.innerHeight, viewSizeHeight, verticalAnchor) + window.pageYOffset; // if view intersects vertically with anchor, shift it horizontally\n\n    if (Range.intersects({\n      start: top,\n      end: top + viewSizeHeight\n    }, {\n      start: verticalAnchor.offset,\n      end: verticalAnchor.offset + verticalAnchor.size\n    })) {\n      horizontalAnchor.size = around.width;\n\n      if (anchorAlignment === 1\n      /* RIGHT */\n      ) {\n          horizontalAnchor.offset = around.left;\n        }\n    }\n\n    var left = layout(window.innerWidth, viewSizeWidth, horizontalAnchor);\n    DOM.removeClasses(this.view, 'top', 'bottom', 'left', 'right');\n    DOM.addClass(this.view, anchorPosition === 0\n    /* BELOW */\n    ? 'bottom' : 'top');\n    DOM.addClass(this.view, anchorAlignment === 0\n    /* LEFT */\n    ? 'left' : 'right');\n    var containerPosition = DOM.getDomNodePagePosition(this.container);\n    this.view.style.top = top - containerPosition.top + \"px\";\n    this.view.style.left = left - containerPosition.left + \"px\";\n    this.view.style.width = 'initial';\n  };\n\n  ContextView.prototype.hide = function (data) {\n    var delegate = this.delegate;\n    this.delegate = null;\n\n    if (delegate && delegate.onHide) {\n      delegate.onHide(data);\n    }\n\n    this.toDisposeOnClean.dispose();\n    DOM.hide(this.view);\n  };\n\n  ContextView.prototype.isVisible = function () {\n    return !!this.delegate;\n  };\n\n  ContextView.prototype.onDOMEvent = function (e, onCapture) {\n    if (this.delegate) {\n      if (this.delegate.onDOMEvent) {\n        this.delegate.onDOMEvent(e, document.activeElement);\n      } else if (onCapture && !DOM.isAncestor(e.target, this.container)) {\n        this.hide();\n      }\n    }\n  };\n\n  ContextView.prototype.dispose = function () {\n    this.hide();\n\n    _super.prototype.dispose.call(this);\n  };\n\n  ContextView.BUBBLE_UP_EVENTS = ['click', 'keydown', 'focus', 'blur'];\n  ContextView.BUBBLE_DOWN_EVENTS = ['click'];\n  return ContextView;\n}(Disposable);\n\nexport { ContextView };","map":null,"metadata":{},"sourceType":"module"}