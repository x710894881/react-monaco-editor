{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as cssService from './_deps/vscode-css-languageservice/cssLanguageService.js';\nimport * as ls from './_deps/vscode-languageserver-types/main.js';\n\nvar CSSWorker =\n/** @class */\nfunction () {\n  function CSSWorker(ctx, createData) {\n    this._ctx = ctx;\n    this._languageSettings = createData.languageSettings;\n    this._languageId = createData.languageId;\n\n    switch (this._languageId) {\n      case 'css':\n        this._languageService = cssService.getCSSLanguageService();\n        break;\n\n      case 'less':\n        this._languageService = cssService.getLESSLanguageService();\n        break;\n\n      case 'scss':\n        this._languageService = cssService.getSCSSLanguageService();\n        break;\n\n      default:\n        throw new Error('Invalid language id: ' + this._languageId);\n    }\n\n    this._languageService.configure(this._languageSettings);\n  } // --- language service host ---------------\n\n\n  CSSWorker.prototype.doValidation = function (uri) {\n    var document = this._getTextDocument(uri);\n\n    if (document) {\n      var stylesheet = this._languageService.parseStylesheet(document);\n\n      var diagnostics = this._languageService.doValidation(document, stylesheet);\n\n      return Promise.resolve(diagnostics);\n    }\n\n    return Promise.resolve([]);\n  };\n\n  CSSWorker.prototype.doComplete = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var completions = this._languageService.doComplete(document, position, stylesheet);\n\n    return Promise.resolve(completions);\n  };\n\n  CSSWorker.prototype.doHover = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var hover = this._languageService.doHover(document, position, stylesheet);\n\n    return Promise.resolve(hover);\n  };\n\n  CSSWorker.prototype.findDefinition = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var definition = this._languageService.findDefinition(document, position, stylesheet);\n\n    return Promise.resolve(definition);\n  };\n\n  CSSWorker.prototype.findReferences = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var references = this._languageService.findReferences(document, position, stylesheet);\n\n    return Promise.resolve(references);\n  };\n\n  CSSWorker.prototype.findDocumentHighlights = function (uri, position) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var highlights = this._languageService.findDocumentHighlights(document, position, stylesheet);\n\n    return Promise.resolve(highlights);\n  };\n\n  CSSWorker.prototype.findDocumentSymbols = function (uri) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var symbols = this._languageService.findDocumentSymbols(document, stylesheet);\n\n    return Promise.resolve(symbols);\n  };\n\n  CSSWorker.prototype.doCodeActions = function (uri, range, context) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var actions = this._languageService.doCodeActions(document, range, context, stylesheet);\n\n    return Promise.resolve(actions);\n  };\n\n  CSSWorker.prototype.findDocumentColors = function (uri) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var colorSymbols = this._languageService.findDocumentColors(document, stylesheet);\n\n    return Promise.resolve(colorSymbols);\n  };\n\n  CSSWorker.prototype.getColorPresentations = function (uri, color, range) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var colorPresentations = this._languageService.getColorPresentations(document, stylesheet, color, range);\n\n    return Promise.resolve(colorPresentations);\n  };\n\n  CSSWorker.prototype.provideFoldingRanges = function (uri, context) {\n    var document = this._getTextDocument(uri);\n\n    var ranges = this._languageService.getFoldingRanges(document, context);\n\n    return Promise.resolve(ranges);\n  };\n\n  CSSWorker.prototype.doRename = function (uri, position, newName) {\n    var document = this._getTextDocument(uri);\n\n    var stylesheet = this._languageService.parseStylesheet(document);\n\n    var renames = this._languageService.doRename(document, position, newName, stylesheet);\n\n    return Promise.resolve(renames);\n  };\n\n  CSSWorker.prototype._getTextDocument = function (uri) {\n    var models = this._ctx.getMirrorModels();\n\n    for (var _i = 0, models_1 = models; _i < models_1.length; _i++) {\n      var model = models_1[_i];\n\n      if (model.uri.toString() === uri) {\n        return ls.TextDocument.create(uri, this._languageId, model.version, model.getValue());\n      }\n    }\n\n    return null;\n  };\n\n  return CSSWorker;\n}();\n\nexport { CSSWorker };\nexport function create(ctx, createData) {\n  return new CSSWorker(ctx, createData);\n}","map":null,"metadata":{},"sourceType":"module"}