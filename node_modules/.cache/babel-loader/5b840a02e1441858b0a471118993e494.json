{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport './iconlabel.css';\nimport * as dom from '../../dom.js';\nimport { HighlightedLabel } from '../highlightedlabel/highlightedLabel.js';\nimport { Disposable } from '../../../common/lifecycle.js';\n\nvar FastLabelNode =\n/** @class */\nfunction () {\n  function FastLabelNode(_element) {\n    this._element = _element;\n  }\n\n  Object.defineProperty(FastLabelNode.prototype, \"element\", {\n    get: function () {\n      return this._element;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FastLabelNode.prototype, \"textContent\", {\n    set: function (content) {\n      if (this.disposed || content === this._textContent) {\n        return;\n      }\n\n      this._textContent = content;\n      this._element.textContent = content;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FastLabelNode.prototype, \"className\", {\n    set: function (className) {\n      if (this.disposed || className === this._className) {\n        return;\n      }\n\n      this._className = className;\n      this._element.className = className;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FastLabelNode.prototype, \"title\", {\n    set: function (title) {\n      if (this.disposed || title === this._title) {\n        return;\n      }\n\n      this._title = title;\n\n      if (this._title) {\n        this._element.title = title;\n      } else {\n        this._element.removeAttribute('title');\n      }\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(FastLabelNode.prototype, \"empty\", {\n    set: function (empty) {\n      if (this.disposed || empty === this._empty) {\n        return;\n      }\n\n      this._empty = empty;\n      this._element.style.marginLeft = empty ? '0' : null;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FastLabelNode.prototype.dispose = function () {\n    this.disposed = true;\n  };\n\n  return FastLabelNode;\n}();\n\nvar IconLabel =\n/** @class */\nfunction (_super) {\n  __extends(IconLabel, _super);\n\n  function IconLabel(container, options) {\n    var _this = _super.call(this) || this;\n\n    _this.domNode = _this._register(new FastLabelNode(dom.append(container, dom.$('.monaco-icon-label'))));\n    _this.labelDescriptionContainer = _this._register(new FastLabelNode(dom.append(_this.domNode.element, dom.$('.monaco-icon-label-description-container'))));\n\n    if (options && options.supportHighlights) {\n      _this.labelNode = new HighlightedLabel(dom.append(_this.labelDescriptionContainer.element, dom.$('a.label-name')), !!options.supportOcticons);\n    } else {\n      _this.labelNode = _this._register(new FastLabelNode(dom.append(_this.labelDescriptionContainer.element, dom.$('a.label-name'))));\n    }\n\n    if (options && options.supportDescriptionHighlights) {\n      _this.descriptionNodeFactory = function () {\n        return new HighlightedLabel(dom.append(_this.labelDescriptionContainer.element, dom.$('span.label-description')), !!options.supportOcticons);\n      };\n    } else {\n      _this.descriptionNodeFactory = function () {\n        return _this._register(new FastLabelNode(dom.append(_this.labelDescriptionContainer.element, dom.$('span.label-description'))));\n      };\n    }\n\n    return _this;\n  }\n\n  IconLabel.prototype.setLabel = function (label, description, options) {\n    var classes = ['monaco-icon-label'];\n\n    if (options) {\n      if (options.extraClasses) {\n        classes.push.apply(classes, options.extraClasses);\n      }\n\n      if (options.italic) {\n        classes.push('italic');\n      }\n    }\n\n    this.domNode.className = classes.join(' ');\n    this.domNode.title = options && options.title ? options.title : '';\n\n    if (this.labelNode instanceof HighlightedLabel) {\n      this.labelNode.set(label || '', options ? options.matches : undefined, options && options.title ? options.title : undefined, options && options.labelEscapeNewLines);\n    } else {\n      this.labelNode.textContent = label || '';\n    }\n\n    if (description || this.descriptionNode) {\n      if (!this.descriptionNode) {\n        this.descriptionNode = this.descriptionNodeFactory(); // description node is created lazily on demand\n      }\n\n      if (this.descriptionNode instanceof HighlightedLabel) {\n        this.descriptionNode.set(description || '', options ? options.descriptionMatches : undefined);\n\n        if (options && options.descriptionTitle) {\n          this.descriptionNode.element.title = options.descriptionTitle;\n        } else {\n          this.descriptionNode.element.removeAttribute('title');\n        }\n      } else {\n        this.descriptionNode.textContent = description || '';\n        this.descriptionNode.title = options && options.descriptionTitle ? options.descriptionTitle : '';\n        this.descriptionNode.empty = !description;\n      }\n    }\n  };\n\n  return IconLabel;\n}(Disposable);\n\nexport { IconLabel };","map":null,"metadata":{},"sourceType":"module"}