{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { onUnexpectedError } from '../../../base/common/errors.js';\n\nvar EditStackElement =\n/** @class */\nfunction () {\n  function EditStackElement(beforeVersionId, beforeCursorState) {\n    this.beforeVersionId = beforeVersionId;\n    this.beforeCursorState = beforeCursorState;\n    this.afterCursorState = null;\n    this.afterVersionId = -1;\n    this.editOperations = [];\n  }\n\n  EditStackElement.prototype.undo = function (model) {\n    // Apply all operations in reverse order\n    for (var i = this.editOperations.length - 1; i >= 0; i--) {\n      this.editOperations[i] = {\n        operations: model.applyEdits(this.editOperations[i].operations)\n      };\n    }\n  };\n\n  EditStackElement.prototype.redo = function (model) {\n    // Apply all operations\n    for (var i = 0; i < this.editOperations.length; i++) {\n      this.editOperations[i] = {\n        operations: model.applyEdits(this.editOperations[i].operations)\n      };\n    }\n  };\n\n  return EditStackElement;\n}();\n\nfunction getModelEOL(model) {\n  var eol = model.getEOL();\n\n  if (eol === '\\n') {\n    return 0\n    /* LF */\n    ;\n  } else {\n      return 1\n      /* CRLF */\n      ;\n    }\n}\n\nvar EOLStackElement =\n/** @class */\nfunction () {\n  function EOLStackElement(beforeVersionId, setEOL) {\n    this.beforeVersionId = beforeVersionId;\n    this.beforeCursorState = null;\n    this.afterCursorState = null;\n    this.afterVersionId = -1;\n    this.eol = setEOL;\n  }\n\n  EOLStackElement.prototype.undo = function (model) {\n    var redoEOL = getModelEOL(model);\n    model.setEOL(this.eol);\n    this.eol = redoEOL;\n  };\n\n  EOLStackElement.prototype.redo = function (model) {\n    var undoEOL = getModelEOL(model);\n    model.setEOL(this.eol);\n    this.eol = undoEOL;\n  };\n\n  return EOLStackElement;\n}();\n\nvar EditStack =\n/** @class */\nfunction () {\n  function EditStack(model) {\n    this.model = model;\n    this.currentOpenStackElement = null;\n    this.past = [];\n    this.future = [];\n  }\n\n  EditStack.prototype.pushStackElement = function () {\n    if (this.currentOpenStackElement !== null) {\n      this.past.push(this.currentOpenStackElement);\n      this.currentOpenStackElement = null;\n    }\n  };\n\n  EditStack.prototype.clear = function () {\n    this.currentOpenStackElement = null;\n    this.past = [];\n    this.future = [];\n  };\n\n  EditStack.prototype.pushEOL = function (eol) {\n    // No support for parallel universes :(\n    this.future = [];\n\n    if (this.currentOpenStackElement) {\n      this.pushStackElement();\n    }\n\n    var prevEOL = getModelEOL(this.model);\n    var stackElement = new EOLStackElement(this.model.getAlternativeVersionId(), prevEOL);\n    this.model.setEOL(eol);\n    stackElement.afterVersionId = this.model.getVersionId();\n    this.currentOpenStackElement = stackElement;\n    this.pushStackElement();\n  };\n\n  EditStack.prototype.pushEditOperation = function (beforeCursorState, editOperations, cursorStateComputer) {\n    // No support for parallel universes :(\n    this.future = [];\n    var stackElement = null;\n\n    if (this.currentOpenStackElement) {\n      if (this.currentOpenStackElement instanceof EditStackElement) {\n        stackElement = this.currentOpenStackElement;\n      } else {\n        this.pushStackElement();\n      }\n    }\n\n    if (!this.currentOpenStackElement) {\n      stackElement = new EditStackElement(this.model.getAlternativeVersionId(), beforeCursorState);\n      this.currentOpenStackElement = stackElement;\n    }\n\n    var inverseEditOperation = {\n      operations: this.model.applyEdits(editOperations)\n    };\n    stackElement.editOperations.push(inverseEditOperation);\n    stackElement.afterCursorState = EditStack._computeCursorState(cursorStateComputer, inverseEditOperation.operations);\n    stackElement.afterVersionId = this.model.getVersionId();\n    return stackElement.afterCursorState;\n  };\n\n  EditStack._computeCursorState = function (cursorStateComputer, inverseEditOperations) {\n    try {\n      return cursorStateComputer ? cursorStateComputer(inverseEditOperations) : null;\n    } catch (e) {\n      onUnexpectedError(e);\n      return null;\n    }\n  };\n\n  EditStack.prototype.undo = function () {\n    this.pushStackElement();\n\n    if (this.past.length > 0) {\n      var pastStackElement = this.past.pop();\n\n      try {\n        pastStackElement.undo(this.model);\n      } catch (e) {\n        onUnexpectedError(e);\n        this.clear();\n        return null;\n      }\n\n      this.future.push(pastStackElement);\n      return {\n        selections: pastStackElement.beforeCursorState,\n        recordedVersionId: pastStackElement.beforeVersionId\n      };\n    }\n\n    return null;\n  };\n\n  EditStack.prototype.canUndo = function () {\n    return this.past.length > 0 || this.currentOpenStackElement !== null;\n  };\n\n  EditStack.prototype.redo = function () {\n    if (this.future.length > 0) {\n      var futureStackElement = this.future.pop();\n\n      try {\n        futureStackElement.redo(this.model);\n      } catch (e) {\n        onUnexpectedError(e);\n        this.clear();\n        return null;\n      }\n\n      this.past.push(futureStackElement);\n      return {\n        selections: futureStackElement.afterCursorState,\n        recordedVersionId: futureStackElement.afterVersionId\n      };\n    }\n\n    return null;\n  };\n\n  EditStack.prototype.canRedo = function () {\n    return this.future.length > 0;\n  };\n\n  return EditStack;\n}();\n\nexport { EditStack };","map":null,"metadata":{},"sourceType":"module"}