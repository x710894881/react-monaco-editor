{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { createFastDomNode } from '../../../base/browser/fastDomNode.js';\nimport { Configuration } from '../config/configuration.js';\nimport { VisibleLinesCollection } from './viewLayer.js';\nimport { ViewPart } from './viewPart.js';\n\nvar ViewOverlays =\n/** @class */\nfunction (_super) {\n  __extends(ViewOverlays, _super);\n\n  function ViewOverlays(context) {\n    var _this = _super.call(this, context) || this;\n\n    _this._visibleLines = new VisibleLinesCollection(_this);\n    _this.domNode = _this._visibleLines.domNode;\n    _this._dynamicOverlays = [];\n    _this._isFocused = false;\n\n    _this.domNode.setClassName('view-overlays');\n\n    return _this;\n  }\n\n  ViewOverlays.prototype.shouldRender = function () {\n    if (_super.prototype.shouldRender.call(this)) {\n      return true;\n    }\n\n    for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      var dynamicOverlay = this._dynamicOverlays[i];\n\n      if (dynamicOverlay.shouldRender()) {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  ViewOverlays.prototype.dispose = function () {\n    _super.prototype.dispose.call(this);\n\n    for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      var dynamicOverlay = this._dynamicOverlays[i];\n      dynamicOverlay.dispose();\n    }\n\n    this._dynamicOverlays = [];\n  };\n\n  ViewOverlays.prototype.getDomNode = function () {\n    return this.domNode;\n  }; // ---- begin IVisibleLinesHost\n\n\n  ViewOverlays.prototype.createVisibleLine = function () {\n    return new ViewOverlayLine(this._context.configuration, this._dynamicOverlays);\n  }; // ---- end IVisibleLinesHost\n\n\n  ViewOverlays.prototype.addDynamicOverlay = function (overlay) {\n    this._dynamicOverlays.push(overlay);\n  }; // ----- event handlers\n\n\n  ViewOverlays.prototype.onConfigurationChanged = function (e) {\n    this._visibleLines.onConfigurationChanged(e);\n\n    var startLineNumber = this._visibleLines.getStartLineNumber();\n\n    var endLineNumber = this._visibleLines.getEndLineNumber();\n\n    for (var lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n      var line = this._visibleLines.getVisibleLine(lineNumber);\n\n      line.onConfigurationChanged(e);\n    }\n\n    return true;\n  };\n\n  ViewOverlays.prototype.onFlushed = function (e) {\n    return this._visibleLines.onFlushed(e);\n  };\n\n  ViewOverlays.prototype.onFocusChanged = function (e) {\n    this._isFocused = e.isFocused;\n    return true;\n  };\n\n  ViewOverlays.prototype.onLinesChanged = function (e) {\n    return this._visibleLines.onLinesChanged(e);\n  };\n\n  ViewOverlays.prototype.onLinesDeleted = function (e) {\n    return this._visibleLines.onLinesDeleted(e);\n  };\n\n  ViewOverlays.prototype.onLinesInserted = function (e) {\n    return this._visibleLines.onLinesInserted(e);\n  };\n\n  ViewOverlays.prototype.onScrollChanged = function (e) {\n    return this._visibleLines.onScrollChanged(e) || true;\n  };\n\n  ViewOverlays.prototype.onTokensChanged = function (e) {\n    return this._visibleLines.onTokensChanged(e);\n  };\n\n  ViewOverlays.prototype.onZonesChanged = function (e) {\n    return this._visibleLines.onZonesChanged(e);\n  }; // ----- end event handlers\n\n\n  ViewOverlays.prototype.prepareRender = function (ctx) {\n    var toRender = this._dynamicOverlays.filter(function (overlay) {\n      return overlay.shouldRender();\n    });\n\n    for (var i = 0, len = toRender.length; i < len; i++) {\n      var dynamicOverlay = toRender[i];\n      dynamicOverlay.prepareRender(ctx);\n      dynamicOverlay.onDidRender();\n    }\n  };\n\n  ViewOverlays.prototype.render = function (ctx) {\n    // Overwriting to bypass `shouldRender` flag\n    this._viewOverlaysRender(ctx);\n\n    this.domNode.toggleClassName('focused', this._isFocused);\n  };\n\n  ViewOverlays.prototype._viewOverlaysRender = function (ctx) {\n    this._visibleLines.renderLines(ctx.viewportData);\n  };\n\n  return ViewOverlays;\n}(ViewPart);\n\nexport { ViewOverlays };\n\nvar ViewOverlayLine =\n/** @class */\nfunction () {\n  function ViewOverlayLine(configuration, dynamicOverlays) {\n    this._configuration = configuration;\n    this._lineHeight = this._configuration.editor.lineHeight;\n    this._dynamicOverlays = dynamicOverlays;\n    this._domNode = null;\n    this._renderedContent = null;\n  }\n\n  ViewOverlayLine.prototype.getDomNode = function () {\n    if (!this._domNode) {\n      return null;\n    }\n\n    return this._domNode.domNode;\n  };\n\n  ViewOverlayLine.prototype.setDomNode = function (domNode) {\n    this._domNode = createFastDomNode(domNode);\n  };\n\n  ViewOverlayLine.prototype.onContentChanged = function () {// Nothing\n  };\n\n  ViewOverlayLine.prototype.onTokensChanged = function () {// Nothing\n  };\n\n  ViewOverlayLine.prototype.onConfigurationChanged = function (e) {\n    if (e.lineHeight) {\n      this._lineHeight = this._configuration.editor.lineHeight;\n    }\n  };\n\n  ViewOverlayLine.prototype.renderLine = function (lineNumber, deltaTop, viewportData, sb) {\n    var result = '';\n\n    for (var i = 0, len = this._dynamicOverlays.length; i < len; i++) {\n      var dynamicOverlay = this._dynamicOverlays[i];\n      result += dynamicOverlay.render(viewportData.startLineNumber, lineNumber);\n    }\n\n    if (this._renderedContent === result) {\n      // No rendering needed\n      return false;\n    }\n\n    this._renderedContent = result;\n    sb.appendASCIIString('<div style=\"position:absolute;top:');\n    sb.appendASCIIString(String(deltaTop));\n    sb.appendASCIIString('px;width:100%;height:');\n    sb.appendASCIIString(String(this._lineHeight));\n    sb.appendASCIIString('px;\">');\n    sb.appendASCIIString(result);\n    sb.appendASCIIString('</div>');\n    return true;\n  };\n\n  ViewOverlayLine.prototype.layoutLine = function (lineNumber, deltaTop) {\n    if (this._domNode) {\n      this._domNode.setTop(deltaTop);\n\n      this._domNode.setHeight(this._lineHeight);\n    }\n  };\n\n  return ViewOverlayLine;\n}();\n\nexport { ViewOverlayLine };\n\nvar ContentViewOverlays =\n/** @class */\nfunction (_super) {\n  __extends(ContentViewOverlays, _super);\n\n  function ContentViewOverlays(context) {\n    var _this = _super.call(this, context) || this;\n\n    _this._contentWidth = _this._context.configuration.editor.layoutInfo.contentWidth;\n\n    _this.domNode.setHeight(0);\n\n    return _this;\n  } // --- begin event handlers\n\n\n  ContentViewOverlays.prototype.onConfigurationChanged = function (e) {\n    if (e.layoutInfo) {\n      this._contentWidth = this._context.configuration.editor.layoutInfo.contentWidth;\n    }\n\n    return _super.prototype.onConfigurationChanged.call(this, e);\n  };\n\n  ContentViewOverlays.prototype.onScrollChanged = function (e) {\n    return _super.prototype.onScrollChanged.call(this, e) || e.scrollWidthChanged;\n  }; // --- end event handlers\n\n\n  ContentViewOverlays.prototype._viewOverlaysRender = function (ctx) {\n    _super.prototype._viewOverlaysRender.call(this, ctx);\n\n    this.domNode.setWidth(Math.max(ctx.scrollWidth, this._contentWidth));\n  };\n\n  return ContentViewOverlays;\n}(ViewOverlays);\n\nexport { ContentViewOverlays };\n\nvar MarginViewOverlays =\n/** @class */\nfunction (_super) {\n  __extends(MarginViewOverlays, _super);\n\n  function MarginViewOverlays(context) {\n    var _this = _super.call(this, context) || this;\n\n    _this._contentLeft = _this._context.configuration.editor.layoutInfo.contentLeft;\n\n    _this.domNode.setClassName('margin-view-overlays');\n\n    _this.domNode.setWidth(1);\n\n    Configuration.applyFontInfo(_this.domNode, _this._context.configuration.editor.fontInfo);\n    return _this;\n  }\n\n  MarginViewOverlays.prototype.onConfigurationChanged = function (e) {\n    var shouldRender = false;\n\n    if (e.fontInfo) {\n      Configuration.applyFontInfo(this.domNode, this._context.configuration.editor.fontInfo);\n      shouldRender = true;\n    }\n\n    if (e.layoutInfo) {\n      this._contentLeft = this._context.configuration.editor.layoutInfo.contentLeft;\n      shouldRender = true;\n    }\n\n    return _super.prototype.onConfigurationChanged.call(this, e) || shouldRender;\n  };\n\n  MarginViewOverlays.prototype.onScrollChanged = function (e) {\n    return _super.prototype.onScrollChanged.call(this, e) || e.scrollHeightChanged;\n  };\n\n  MarginViewOverlays.prototype._viewOverlaysRender = function (ctx) {\n    _super.prototype._viewOverlaysRender.call(this, ctx);\n\n    var height = Math.min(ctx.scrollHeight, 1000000);\n    this.domNode.setHeight(height);\n    this.domNode.setWidth(this._contentLeft);\n  };\n\n  return MarginViewOverlays;\n}(ViewOverlays);\n\nexport { MarginViewOverlays };","map":null,"metadata":{},"sourceType":"module"}