{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nvar Uri = monaco.Uri;\nvar Range = monaco.Range; //#region utils copied from typescript to prevent loading the entire typescriptServices ---\n\nvar IndentStyle;\n\n(function (IndentStyle) {\n  IndentStyle[IndentStyle[\"None\"] = 0] = \"None\";\n  IndentStyle[IndentStyle[\"Block\"] = 1] = \"Block\";\n  IndentStyle[IndentStyle[\"Smart\"] = 2] = \"Smart\";\n})(IndentStyle || (IndentStyle = {}));\n\nexport function flattenDiagnosticMessageText(diag, newLine, indent) {\n  if (indent === void 0) {\n    indent = 0;\n  }\n\n  if (typeof diag === \"string\") {\n    return diag;\n  } else if (diag === undefined) {\n    return \"\";\n  }\n\n  var result = \"\";\n\n  if (indent) {\n    result += newLine;\n\n    for (var i = 0; i < indent; i++) {\n      result += \"  \";\n    }\n  }\n\n  result += diag.messageText;\n  indent++;\n\n  if (diag.next) {\n    for (var _i = 0, _a = diag.next; _i < _a.length; _i++) {\n      var kid = _a[_i];\n      result += flattenDiagnosticMessageText(kid, newLine, indent);\n    }\n  }\n\n  return result;\n}\n\nfunction displayPartsToString(displayParts) {\n  if (displayParts) {\n    return displayParts.map(function (displayPart) {\n      return displayPart.text;\n    }).join(\"\");\n  }\n\n  return \"\";\n} //#endregion\n\n\nvar Adapter =\n/** @class */\nfunction () {\n  function Adapter(_worker) {\n    this._worker = _worker;\n  }\n\n  Adapter.prototype._positionToOffset = function (uri, position) {\n    var model = monaco.editor.getModel(uri);\n    return model.getOffsetAt(position);\n  };\n\n  Adapter.prototype._offsetToPosition = function (uri, offset) {\n    var model = monaco.editor.getModel(uri);\n    return model.getPositionAt(offset);\n  };\n\n  Adapter.prototype._textSpanToRange = function (uri, span) {\n    var p1 = this._offsetToPosition(uri, span.start);\n\n    var p2 = this._offsetToPosition(uri, span.start + span.length);\n\n    var startLineNumber = p1.lineNumber,\n        startColumn = p1.column;\n    var endLineNumber = p2.lineNumber,\n        endColumn = p2.column;\n    return {\n      startLineNumber: startLineNumber,\n      startColumn: startColumn,\n      endLineNumber: endLineNumber,\n      endColumn: endColumn\n    };\n  };\n\n  return Adapter;\n}();\n\nexport { Adapter }; // --- diagnostics --- ---\n\nvar DiagnostcsAdapter =\n/** @class */\nfunction (_super) {\n  __extends(DiagnostcsAdapter, _super);\n\n  function DiagnostcsAdapter(_defaults, _selector, worker) {\n    var _this = _super.call(this, worker) || this;\n\n    _this._defaults = _defaults;\n    _this._selector = _selector;\n    _this._disposables = [];\n    _this._listener = Object.create(null);\n\n    var onModelAdd = function (model) {\n      if (model.getModeId() !== _selector) {\n        return;\n      }\n\n      var handle;\n      var changeSubscription = model.onDidChangeContent(function () {\n        clearTimeout(handle);\n        handle = setTimeout(function () {\n          return _this._doValidate(model.uri);\n        }, 500);\n      });\n      _this._listener[model.uri.toString()] = {\n        dispose: function () {\n          changeSubscription.dispose();\n          clearTimeout(handle);\n        }\n      };\n\n      _this._doValidate(model.uri);\n    };\n\n    var onModelRemoved = function (model) {\n      monaco.editor.setModelMarkers(model, _this._selector, []);\n      var key = model.uri.toString();\n\n      if (_this._listener[key]) {\n        _this._listener[key].dispose();\n\n        delete _this._listener[key];\n      }\n    };\n\n    _this._disposables.push(monaco.editor.onDidCreateModel(onModelAdd));\n\n    _this._disposables.push(monaco.editor.onWillDisposeModel(onModelRemoved));\n\n    _this._disposables.push(monaco.editor.onDidChangeModelLanguage(function (event) {\n      onModelRemoved(event.model);\n      onModelAdd(event.model);\n    }));\n\n    _this._disposables.push({\n      dispose: function () {\n        for (var _i = 0, _a = monaco.editor.getModels(); _i < _a.length; _i++) {\n          var model = _a[_i];\n          onModelRemoved(model);\n        }\n      }\n    });\n\n    var recomputeDiagostics = function () {\n      // redo diagnostics when options change\n      for (var _i = 0, _a = monaco.editor.getModels(); _i < _a.length; _i++) {\n        var model = _a[_i];\n        onModelRemoved(model);\n        onModelAdd(model);\n      }\n    };\n\n    _this._disposables.push(_this._defaults.onDidChange(recomputeDiagostics));\n\n    _this._disposables.push(_this._defaults.onDidExtraLibsChange(recomputeDiagostics));\n\n    monaco.editor.getModels().forEach(onModelAdd);\n    return _this;\n  }\n\n  DiagnostcsAdapter.prototype.dispose = function () {\n    this._disposables.forEach(function (d) {\n      return d && d.dispose();\n    });\n\n    this._disposables = [];\n  };\n\n  DiagnostcsAdapter.prototype._doValidate = function (resource) {\n    var _this = this;\n\n    this._worker(resource).then(function (worker) {\n      if (!monaco.editor.getModel(resource)) {\n        // model was disposed in the meantime\n        return null;\n      }\n\n      var promises = [];\n\n      var _a = _this._defaults.getDiagnosticsOptions(),\n          noSyntaxValidation = _a.noSyntaxValidation,\n          noSemanticValidation = _a.noSemanticValidation;\n\n      if (!noSyntaxValidation) {\n        promises.push(worker.getSyntacticDiagnostics(resource.toString()));\n      }\n\n      if (!noSemanticValidation) {\n        promises.push(worker.getSemanticDiagnostics(resource.toString()));\n      }\n\n      return Promise.all(promises);\n    }).then(function (diagnostics) {\n      if (!diagnostics || !monaco.editor.getModel(resource)) {\n        // model was disposed in the meantime\n        return null;\n      }\n\n      var markers = diagnostics.reduce(function (p, c) {\n        return c.concat(p);\n      }, []).map(function (d) {\n        return _this._convertDiagnostics(resource, d);\n      });\n      monaco.editor.setModelMarkers(monaco.editor.getModel(resource), _this._selector, markers);\n    }).then(undefined, function (err) {\n      console.error(err);\n    });\n  };\n\n  DiagnostcsAdapter.prototype._convertDiagnostics = function (resource, diag) {\n    var _a = this._offsetToPosition(resource, diag.start),\n        startLineNumber = _a.lineNumber,\n        startColumn = _a.column;\n\n    var _b = this._offsetToPosition(resource, diag.start + diag.length),\n        endLineNumber = _b.lineNumber,\n        endColumn = _b.column;\n\n    return {\n      severity: monaco.MarkerSeverity.Error,\n      startLineNumber: startLineNumber,\n      startColumn: startColumn,\n      endLineNumber: endLineNumber,\n      endColumn: endColumn,\n      message: flattenDiagnosticMessageText(diag.messageText, '\\n')\n    };\n  };\n\n  return DiagnostcsAdapter;\n}(Adapter);\n\nexport { DiagnostcsAdapter };\n\nvar SuggestAdapter =\n/** @class */\nfunction (_super) {\n  __extends(SuggestAdapter, _super);\n\n  function SuggestAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(SuggestAdapter.prototype, \"triggerCharacters\", {\n    get: function () {\n      return ['.'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  SuggestAdapter.prototype.provideCompletionItems = function (model, position, _context, token) {\n    var wordInfo = model.getWordUntilPosition(position);\n    var wordRange = new Range(position.lineNumber, wordInfo.startColumn, position.lineNumber, wordInfo.endColumn);\n    var resource = model.uri;\n\n    var offset = this._positionToOffset(resource, position);\n\n    return this._worker(resource).then(function (worker) {\n      return worker.getCompletionsAtPosition(resource.toString(), offset);\n    }).then(function (info) {\n      if (!info) {\n        return;\n      }\n\n      var suggestions = info.entries.map(function (entry) {\n        var range = wordRange;\n\n        if (entry.replacementSpan) {\n          var p1 = model.getPositionAt(entry.replacementSpan.start);\n          var p2 = model.getPositionAt(entry.replacementSpan.start + entry.replacementSpan.length);\n          range = new Range(p1.lineNumber, p1.column, p2.lineNumber, p2.column);\n        }\n\n        return {\n          uri: resource,\n          position: position,\n          range: range,\n          label: entry.name,\n          insertText: entry.name,\n          sortText: entry.sortText,\n          kind: SuggestAdapter.convertKind(entry.kind)\n        };\n      });\n      return {\n        suggestions: suggestions\n      };\n    });\n  };\n\n  SuggestAdapter.prototype.resolveCompletionItem = function (_model, _position, item, token) {\n    var _this = this;\n\n    var myItem = item;\n    var resource = myItem.uri;\n    var position = myItem.position;\n    return this._worker(resource).then(function (worker) {\n      return worker.getCompletionEntryDetails(resource.toString(), _this._positionToOffset(resource, position), myItem.label);\n    }).then(function (details) {\n      if (!details) {\n        return myItem;\n      }\n\n      return {\n        uri: resource,\n        position: position,\n        label: details.name,\n        kind: SuggestAdapter.convertKind(details.kind),\n        detail: displayPartsToString(details.displayParts),\n        documentation: {\n          value: displayPartsToString(details.documentation)\n        }\n      };\n    });\n  };\n\n  SuggestAdapter.convertKind = function (kind) {\n    switch (kind) {\n      case Kind.primitiveType:\n      case Kind.keyword:\n        return monaco.languages.CompletionItemKind.Keyword;\n\n      case Kind.variable:\n      case Kind.localVariable:\n        return monaco.languages.CompletionItemKind.Variable;\n\n      case Kind.memberVariable:\n      case Kind.memberGetAccessor:\n      case Kind.memberSetAccessor:\n        return monaco.languages.CompletionItemKind.Field;\n\n      case Kind.function:\n      case Kind.memberFunction:\n      case Kind.constructSignature:\n      case Kind.callSignature:\n      case Kind.indexSignature:\n        return monaco.languages.CompletionItemKind.Function;\n\n      case Kind.enum:\n        return monaco.languages.CompletionItemKind.Enum;\n\n      case Kind.module:\n        return monaco.languages.CompletionItemKind.Module;\n\n      case Kind.class:\n        return monaco.languages.CompletionItemKind.Class;\n\n      case Kind.interface:\n        return monaco.languages.CompletionItemKind.Interface;\n\n      case Kind.warning:\n        return monaco.languages.CompletionItemKind.File;\n    }\n\n    return monaco.languages.CompletionItemKind.Property;\n  };\n\n  return SuggestAdapter;\n}(Adapter);\n\nexport { SuggestAdapter };\n\nvar SignatureHelpAdapter =\n/** @class */\nfunction (_super) {\n  __extends(SignatureHelpAdapter, _super);\n\n  function SignatureHelpAdapter() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.signatureHelpTriggerCharacters = ['(', ','];\n    return _this;\n  }\n\n  SignatureHelpAdapter.prototype.provideSignatureHelp = function (model, position, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getSignatureHelpItems(resource.toString(), _this._positionToOffset(resource, position));\n    }).then(function (info) {\n      if (!info) {\n        return;\n      }\n\n      var ret = {\n        activeSignature: info.selectedItemIndex,\n        activeParameter: info.argumentIndex,\n        signatures: []\n      };\n      info.items.forEach(function (item) {\n        var signature = {\n          label: '',\n          parameters: []\n        };\n        signature.label += displayPartsToString(item.prefixDisplayParts);\n        item.parameters.forEach(function (p, i, a) {\n          var label = displayPartsToString(p.displayParts);\n          var parameter = {\n            label: label,\n            documentation: displayPartsToString(p.documentation)\n          };\n          signature.label += label;\n          signature.parameters.push(parameter);\n\n          if (i < a.length - 1) {\n            signature.label += displayPartsToString(item.separatorDisplayParts);\n          }\n        });\n        signature.label += displayPartsToString(item.suffixDisplayParts);\n        ret.signatures.push(signature);\n      });\n      return {\n        value: ret,\n        dispose: function () {}\n      };\n    });\n  };\n\n  return SignatureHelpAdapter;\n}(Adapter);\n\nexport { SignatureHelpAdapter }; // --- hover ------\n\nvar QuickInfoAdapter =\n/** @class */\nfunction (_super) {\n  __extends(QuickInfoAdapter, _super);\n\n  function QuickInfoAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  QuickInfoAdapter.prototype.provideHover = function (model, position, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getQuickInfoAtPosition(resource.toString(), _this._positionToOffset(resource, position));\n    }).then(function (info) {\n      if (!info) {\n        return;\n      }\n\n      var documentation = displayPartsToString(info.documentation);\n      var tags = info.tags ? info.tags.map(function (tag) {\n        var label = \"*@\" + tag.name + \"*\";\n\n        if (!tag.text) {\n          return label;\n        }\n\n        return label + (tag.text.match(/\\r\\n|\\n/g) ? ' \\n' + tag.text : \" - \" + tag.text);\n      }).join('  \\n\\n') : '';\n      var contents = displayPartsToString(info.displayParts);\n      return {\n        range: _this._textSpanToRange(resource, info.textSpan),\n        contents: [{\n          value: '```js\\n' + contents + '\\n```\\n'\n        }, {\n          value: documentation + (tags ? '\\n\\n' + tags : '')\n        }]\n      };\n    });\n  };\n\n  return QuickInfoAdapter;\n}(Adapter);\n\nexport { QuickInfoAdapter }; // --- occurrences ------\n\nvar OccurrencesAdapter =\n/** @class */\nfunction (_super) {\n  __extends(OccurrencesAdapter, _super);\n\n  function OccurrencesAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  OccurrencesAdapter.prototype.provideDocumentHighlights = function (model, position, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getOccurrencesAtPosition(resource.toString(), _this._positionToOffset(resource, position));\n    }).then(function (entries) {\n      if (!entries) {\n        return;\n      }\n\n      return entries.map(function (entry) {\n        return {\n          range: _this._textSpanToRange(resource, entry.textSpan),\n          kind: entry.isWriteAccess ? monaco.languages.DocumentHighlightKind.Write : monaco.languages.DocumentHighlightKind.Text\n        };\n      });\n    });\n  };\n\n  return OccurrencesAdapter;\n}(Adapter);\n\nexport { OccurrencesAdapter }; // --- definition ------\n\nvar DefinitionAdapter =\n/** @class */\nfunction (_super) {\n  __extends(DefinitionAdapter, _super);\n\n  function DefinitionAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  DefinitionAdapter.prototype.provideDefinition = function (model, position, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getDefinitionAtPosition(resource.toString(), _this._positionToOffset(resource, position));\n    }).then(function (entries) {\n      if (!entries) {\n        return;\n      }\n\n      var result = [];\n\n      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {\n        var entry = entries_1[_i];\n        var uri = Uri.parse(entry.fileName);\n\n        if (monaco.editor.getModel(uri)) {\n          result.push({\n            uri: uri,\n            range: _this._textSpanToRange(uri, entry.textSpan)\n          });\n        }\n      }\n\n      return result;\n    });\n  };\n\n  return DefinitionAdapter;\n}(Adapter);\n\nexport { DefinitionAdapter }; // --- references ------\n\nvar ReferenceAdapter =\n/** @class */\nfunction (_super) {\n  __extends(ReferenceAdapter, _super);\n\n  function ReferenceAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  ReferenceAdapter.prototype.provideReferences = function (model, position, context, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getReferencesAtPosition(resource.toString(), _this._positionToOffset(resource, position));\n    }).then(function (entries) {\n      if (!entries) {\n        return;\n      }\n\n      var result = [];\n\n      for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {\n        var entry = entries_2[_i];\n        var uri = Uri.parse(entry.fileName);\n\n        if (monaco.editor.getModel(uri)) {\n          result.push({\n            uri: uri,\n            range: _this._textSpanToRange(uri, entry.textSpan)\n          });\n        }\n      }\n\n      return result;\n    });\n  };\n\n  return ReferenceAdapter;\n}(Adapter);\n\nexport { ReferenceAdapter }; // --- outline ------\n\nvar OutlineAdapter =\n/** @class */\nfunction (_super) {\n  __extends(OutlineAdapter, _super);\n\n  function OutlineAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  OutlineAdapter.prototype.provideDocumentSymbols = function (model, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getNavigationBarItems(resource.toString());\n    }).then(function (items) {\n      if (!items) {\n        return;\n      }\n\n      var convert = function (bucket, item, containerLabel) {\n        var result = {\n          name: item.text,\n          detail: '',\n          kind: outlineTypeTable[item.kind] || monaco.languages.SymbolKind.Variable,\n          range: _this._textSpanToRange(resource, item.spans[0]),\n          selectionRange: _this._textSpanToRange(resource, item.spans[0]),\n          tags: [],\n          containerName: containerLabel\n        };\n\n        if (item.childItems && item.childItems.length > 0) {\n          for (var _i = 0, _a = item.childItems; _i < _a.length; _i++) {\n            var child = _a[_i];\n            convert(bucket, child, result.name);\n          }\n        }\n\n        bucket.push(result);\n      };\n\n      var result = [];\n      items.forEach(function (item) {\n        return convert(result, item);\n      });\n      return result;\n    });\n  };\n\n  return OutlineAdapter;\n}(Adapter);\n\nexport { OutlineAdapter };\n\nvar Kind =\n/** @class */\nfunction () {\n  function Kind() {}\n\n  Kind.unknown = '';\n  Kind.keyword = 'keyword';\n  Kind.script = 'script';\n  Kind.module = 'module';\n  Kind.class = 'class';\n  Kind.interface = 'interface';\n  Kind.type = 'type';\n  Kind.enum = 'enum';\n  Kind.variable = 'var';\n  Kind.localVariable = 'local var';\n  Kind.function = 'function';\n  Kind.localFunction = 'local function';\n  Kind.memberFunction = 'method';\n  Kind.memberGetAccessor = 'getter';\n  Kind.memberSetAccessor = 'setter';\n  Kind.memberVariable = 'property';\n  Kind.constructorImplementation = 'constructor';\n  Kind.callSignature = 'call';\n  Kind.indexSignature = 'index';\n  Kind.constructSignature = 'construct';\n  Kind.parameter = 'parameter';\n  Kind.typeParameter = 'type parameter';\n  Kind.primitiveType = 'primitive type';\n  Kind.label = 'label';\n  Kind.alias = 'alias';\n  Kind.const = 'const';\n  Kind.let = 'let';\n  Kind.warning = 'warning';\n  return Kind;\n}();\n\nexport { Kind };\nvar outlineTypeTable = Object.create(null);\noutlineTypeTable[Kind.module] = monaco.languages.SymbolKind.Module;\noutlineTypeTable[Kind.class] = monaco.languages.SymbolKind.Class;\noutlineTypeTable[Kind.enum] = monaco.languages.SymbolKind.Enum;\noutlineTypeTable[Kind.interface] = monaco.languages.SymbolKind.Interface;\noutlineTypeTable[Kind.memberFunction] = monaco.languages.SymbolKind.Method;\noutlineTypeTable[Kind.memberVariable] = monaco.languages.SymbolKind.Property;\noutlineTypeTable[Kind.memberGetAccessor] = monaco.languages.SymbolKind.Property;\noutlineTypeTable[Kind.memberSetAccessor] = monaco.languages.SymbolKind.Property;\noutlineTypeTable[Kind.variable] = monaco.languages.SymbolKind.Variable;\noutlineTypeTable[Kind.const] = monaco.languages.SymbolKind.Variable;\noutlineTypeTable[Kind.localVariable] = monaco.languages.SymbolKind.Variable;\noutlineTypeTable[Kind.variable] = monaco.languages.SymbolKind.Variable;\noutlineTypeTable[Kind.function] = monaco.languages.SymbolKind.Function;\noutlineTypeTable[Kind.localFunction] = monaco.languages.SymbolKind.Function; // --- formatting ----\n\nvar FormatHelper =\n/** @class */\nfunction (_super) {\n  __extends(FormatHelper, _super);\n\n  function FormatHelper() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FormatHelper._convertOptions = function (options) {\n    return {\n      ConvertTabsToSpaces: options.insertSpaces,\n      TabSize: options.tabSize,\n      IndentSize: options.tabSize,\n      IndentStyle: IndentStyle.Smart,\n      NewLineCharacter: '\\n',\n      InsertSpaceAfterCommaDelimiter: true,\n      InsertSpaceAfterSemicolonInForStatements: true,\n      InsertSpaceBeforeAndAfterBinaryOperators: true,\n      InsertSpaceAfterKeywordsInControlFlowStatements: true,\n      InsertSpaceAfterFunctionKeywordForAnonymousFunctions: true,\n      InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,\n      InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets: false,\n      InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces: false,\n      PlaceOpenBraceOnNewLineForControlBlocks: false,\n      PlaceOpenBraceOnNewLineForFunctions: false\n    };\n  };\n\n  FormatHelper.prototype._convertTextChanges = function (uri, change) {\n    return {\n      text: change.newText,\n      range: this._textSpanToRange(uri, change.span)\n    };\n  };\n\n  return FormatHelper;\n}(Adapter);\n\nexport { FormatHelper };\n\nvar FormatAdapter =\n/** @class */\nfunction (_super) {\n  __extends(FormatAdapter, _super);\n\n  function FormatAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FormatAdapter.prototype.provideDocumentRangeFormattingEdits = function (model, range, options, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getFormattingEditsForRange(resource.toString(), _this._positionToOffset(resource, {\n        lineNumber: range.startLineNumber,\n        column: range.startColumn\n      }), _this._positionToOffset(resource, {\n        lineNumber: range.endLineNumber,\n        column: range.endColumn\n      }), FormatHelper._convertOptions(options));\n    }).then(function (edits) {\n      if (edits) {\n        return edits.map(function (edit) {\n          return _this._convertTextChanges(resource, edit);\n        });\n      }\n    });\n  };\n\n  return FormatAdapter;\n}(FormatHelper);\n\nexport { FormatAdapter };\n\nvar FormatOnTypeAdapter =\n/** @class */\nfunction (_super) {\n  __extends(FormatOnTypeAdapter, _super);\n\n  function FormatOnTypeAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Object.defineProperty(FormatOnTypeAdapter.prototype, \"autoFormatTriggerCharacters\", {\n    get: function () {\n      return [';', '}', '\\n'];\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  FormatOnTypeAdapter.prototype.provideOnTypeFormattingEdits = function (model, position, ch, options, token) {\n    var _this = this;\n\n    var resource = model.uri;\n    return this._worker(resource).then(function (worker) {\n      return worker.getFormattingEditsAfterKeystroke(resource.toString(), _this._positionToOffset(resource, position), ch, FormatHelper._convertOptions(options));\n    }).then(function (edits) {\n      if (edits) {\n        return edits.map(function (edit) {\n          return _this._convertTextChanges(resource, edit);\n        });\n      }\n    });\n  };\n\n  return FormatOnTypeAdapter;\n}(FormatHelper);\n\nexport { FormatOnTypeAdapter }; // --- rename ----\n\nvar RenameAdapter =\n/** @class */\nfunction (_super) {\n  __extends(RenameAdapter, _super);\n\n  function RenameAdapter() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  RenameAdapter.prototype.provideRenameEdits = function (model, position, newName, token) {\n    return __awaiter(this, void 0, void 0, function () {\n      var resource, fileName, offset, worker, renameInfo, renameLocations, fileNameToResourceTextEditMap, edits, _i, renameLocations_1, renameLocation, resourceTextEdit;\n\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            resource = model.uri;\n            fileName = resource.toString();\n            offset = this._positionToOffset(resource, position);\n            return [4\n            /*yield*/\n            , this._worker(resource)];\n\n          case 1:\n            worker = _a.sent();\n            return [4\n            /*yield*/\n            , worker.getRenameInfo(fileName, offset, {\n              allowRenameOfImportPath: false\n            })];\n\n          case 2:\n            renameInfo = _a.sent();\n\n            if (renameInfo.canRename === false) {\n              // use explicit comparison so that the discriminated union gets resolved properly\n              return [2\n              /*return*/\n              , {\n                edits: [],\n                rejectReason: renameInfo.localizedErrorMessage\n              }];\n            }\n\n            if (renameInfo.fileToRename !== undefined) {\n              throw new Error(\"Renaming files is not supported.\");\n            }\n\n            return [4\n            /*yield*/\n            , worker.findRenameLocations(fileName, offset,\n            /*strings*/\n            false,\n            /*comments*/\n            false,\n            /*prefixAndSuffix*/\n            false)];\n\n          case 3:\n            renameLocations = _a.sent();\n            fileNameToResourceTextEditMap = {};\n            edits = [];\n\n            for (_i = 0, renameLocations_1 = renameLocations; _i < renameLocations_1.length; _i++) {\n              renameLocation = renameLocations_1[_i];\n\n              if (!(renameLocation.fileName in fileNameToResourceTextEditMap)) {\n                resourceTextEdit = {\n                  edits: [],\n                  resource: monaco.Uri.parse(renameLocation.fileName)\n                };\n                fileNameToResourceTextEditMap[renameLocation.fileName] = resourceTextEdit;\n                edits.push(resourceTextEdit);\n              }\n\n              fileNameToResourceTextEditMap[renameLocation.fileName].edits.push({\n                range: this._textSpanToRange(resource, renameLocation.textSpan),\n                text: newName\n              });\n            }\n\n            return [2\n            /*return*/\n            , {\n              edits: edits\n            }];\n        }\n      });\n    });\n  };\n\n  return RenameAdapter;\n}(Adapter);\n\nexport { RenameAdapter };","map":null,"metadata":{},"sourceType":"module"}