{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { buildReplaceStringWithCasePreserved } from '../../../base/common/search.js';\n/**\n * Assigned when the replace pattern is entirely static.\n */\n\nvar StaticValueReplacePattern =\n/** @class */\nfunction () {\n  function StaticValueReplacePattern(staticValue) {\n    this.staticValue = staticValue;\n    this.kind = 0\n    /* StaticValue */\n    ;\n  }\n\n  return StaticValueReplacePattern;\n}();\n/**\n * Assigned when the replace pattern has replacemend patterns.\n */\n\n\nvar DynamicPiecesReplacePattern =\n/** @class */\nfunction () {\n  function DynamicPiecesReplacePattern(pieces) {\n    this.pieces = pieces;\n    this.kind = 1\n    /* DynamicPieces */\n    ;\n  }\n\n  return DynamicPiecesReplacePattern;\n}();\n\nvar ReplacePattern =\n/** @class */\nfunction () {\n  function ReplacePattern(pieces) {\n    if (!pieces || pieces.length === 0) {\n      this._state = new StaticValueReplacePattern('');\n    } else if (pieces.length === 1 && pieces[0].staticValue !== null) {\n      this._state = new StaticValueReplacePattern(pieces[0].staticValue);\n    } else {\n      this._state = new DynamicPiecesReplacePattern(pieces);\n    }\n  }\n\n  ReplacePattern.fromStaticValue = function (value) {\n    return new ReplacePattern([ReplacePiece.staticValue(value)]);\n  };\n\n  Object.defineProperty(ReplacePattern.prototype, \"hasReplacementPatterns\", {\n    get: function () {\n      return this._state.kind === 1\n      /* DynamicPieces */\n      ;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ReplacePattern.prototype.buildReplaceString = function (matches, preserveCase) {\n    if (this._state.kind === 0\n    /* StaticValue */\n    ) {\n        if (preserveCase) {\n          return buildReplaceStringWithCasePreserved(matches, this._state.staticValue);\n        } else {\n          return this._state.staticValue;\n        }\n      }\n\n    var result = '';\n\n    for (var i = 0, len = this._state.pieces.length; i < len; i++) {\n      var piece = this._state.pieces[i];\n\n      if (piece.staticValue !== null) {\n        // static value ReplacePiece\n        result += piece.staticValue;\n        continue;\n      } // match index ReplacePiece\n\n\n      result += ReplacePattern._substitute(piece.matchIndex, matches);\n    }\n\n    return result;\n  };\n\n  ReplacePattern._substitute = function (matchIndex, matches) {\n    if (matches === null) {\n      return '';\n    }\n\n    if (matchIndex === 0) {\n      return matches[0];\n    }\n\n    var remainder = '';\n\n    while (matchIndex > 0) {\n      if (matchIndex < matches.length) {\n        // A match can be undefined\n        var match = matches[matchIndex] || '';\n        return match + remainder;\n      }\n\n      remainder = String(matchIndex % 10) + remainder;\n      matchIndex = Math.floor(matchIndex / 10);\n    }\n\n    return '$' + remainder;\n  };\n\n  return ReplacePattern;\n}();\n\nexport { ReplacePattern };\n/**\n * A replace piece can either be a static string or an index to a specific match.\n */\n\nvar ReplacePiece =\n/** @class */\nfunction () {\n  function ReplacePiece(staticValue, matchIndex) {\n    this.staticValue = staticValue;\n    this.matchIndex = matchIndex;\n  }\n\n  ReplacePiece.staticValue = function (value) {\n    return new ReplacePiece(value, -1);\n  };\n\n  ReplacePiece.matchIndex = function (index) {\n    return new ReplacePiece(null, index);\n  };\n\n  return ReplacePiece;\n}();\n\nexport { ReplacePiece };\n\nvar ReplacePieceBuilder =\n/** @class */\nfunction () {\n  function ReplacePieceBuilder(source) {\n    this._source = source;\n    this._lastCharIndex = 0;\n    this._result = [];\n    this._resultLen = 0;\n    this._currentStaticPiece = '';\n  }\n\n  ReplacePieceBuilder.prototype.emitUnchanged = function (toCharIndex) {\n    this._emitStatic(this._source.substring(this._lastCharIndex, toCharIndex));\n\n    this._lastCharIndex = toCharIndex;\n  };\n\n  ReplacePieceBuilder.prototype.emitStatic = function (value, toCharIndex) {\n    this._emitStatic(value);\n\n    this._lastCharIndex = toCharIndex;\n  };\n\n  ReplacePieceBuilder.prototype._emitStatic = function (value) {\n    if (value.length === 0) {\n      return;\n    }\n\n    this._currentStaticPiece += value;\n  };\n\n  ReplacePieceBuilder.prototype.emitMatchIndex = function (index, toCharIndex) {\n    if (this._currentStaticPiece.length !== 0) {\n      this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n      this._currentStaticPiece = '';\n    }\n\n    this._result[this._resultLen++] = ReplacePiece.matchIndex(index);\n    this._lastCharIndex = toCharIndex;\n  };\n\n  ReplacePieceBuilder.prototype.finalize = function () {\n    this.emitUnchanged(this._source.length);\n\n    if (this._currentStaticPiece.length !== 0) {\n      this._result[this._resultLen++] = ReplacePiece.staticValue(this._currentStaticPiece);\n      this._currentStaticPiece = '';\n    }\n\n    return new ReplacePattern(this._result);\n  };\n\n  return ReplacePieceBuilder;\n}();\n/**\n * \\n\t\t\t=> inserts a LF\n * \\t\t\t\t=> inserts a TAB\n * \\\\\t\t\t=> inserts a \"\\\".\n * $$\t\t\t=> inserts a \"$\".\n * $& and $0\t=> inserts the matched substring.\n * $n\t\t\t=> Where n is a non-negative integer lesser than 100, inserts the nth parenthesized submatch string\n * everything else stays untouched\n *\n * Also see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#Specifying_a_string_as_a_parameter\n */\n\n\nexport function parseReplaceString(replaceString) {\n  if (!replaceString || replaceString.length === 0) {\n    return new ReplacePattern(null);\n  }\n\n  var result = new ReplacePieceBuilder(replaceString);\n\n  for (var i = 0, len = replaceString.length; i < len; i++) {\n    var chCode = replaceString.charCodeAt(i);\n\n    if (chCode === 92\n    /* Backslash */\n    ) {\n        // move to next char\n        i++;\n\n        if (i >= len) {\n          // string ends with a \\\n          break;\n        }\n\n        var nextChCode = replaceString.charCodeAt(i); // let replaceWithCharacter: string | null = null;\n\n        switch (nextChCode) {\n          case 92\n          /* Backslash */\n          :\n            // \\\\ => inserts a \"\\\"\n            result.emitUnchanged(i - 1);\n            result.emitStatic('\\\\', i + 1);\n            break;\n\n          case 110\n          /* n */\n          :\n            // \\n => inserts a LF\n            result.emitUnchanged(i - 1);\n            result.emitStatic('\\n', i + 1);\n            break;\n\n          case 116\n          /* t */\n          :\n            // \\t => inserts a TAB\n            result.emitUnchanged(i - 1);\n            result.emitStatic('\\t', i + 1);\n            break;\n        }\n\n        continue;\n      }\n\n    if (chCode === 36\n    /* DollarSign */\n    ) {\n        // move to next char\n        i++;\n\n        if (i >= len) {\n          // string ends with a $\n          break;\n        }\n\n        var nextChCode = replaceString.charCodeAt(i);\n\n        if (nextChCode === 36\n        /* DollarSign */\n        ) {\n            // $$ => inserts a \"$\"\n            result.emitUnchanged(i - 1);\n            result.emitStatic('$', i + 1);\n            continue;\n          }\n\n        if (nextChCode === 48\n        /* Digit0 */\n        || nextChCode === 38\n        /* Ampersand */\n        ) {\n            // $& and $0 => inserts the matched substring.\n            result.emitUnchanged(i - 1);\n            result.emitMatchIndex(0, i + 1);\n            continue;\n          }\n\n        if (49\n        /* Digit1 */\n        <= nextChCode && nextChCode <= 57\n        /* Digit9 */\n        ) {\n            // $n\n            var matchIndex = nextChCode - 48\n            /* Digit0 */\n            ; // peek next char to probe for $nn\n\n            if (i + 1 < len) {\n              var nextNextChCode = replaceString.charCodeAt(i + 1);\n\n              if (48\n              /* Digit0 */\n              <= nextNextChCode && nextNextChCode <= 57\n              /* Digit9 */\n              ) {\n                  // $nn\n                  // move to next char\n                  i++;\n                  matchIndex = matchIndex * 10 + (nextNextChCode - 48\n                  /* Digit0 */\n                  );\n                  result.emitUnchanged(i - 2);\n                  result.emitMatchIndex(matchIndex, i + 1);\n                  continue;\n                }\n            }\n\n            result.emitUnchanged(i - 1);\n            result.emitMatchIndex(matchIndex, i + 1);\n            continue;\n          }\n      }\n  }\n\n  return result.finalize();\n}","map":null,"metadata":{},"sourceType":"module"}