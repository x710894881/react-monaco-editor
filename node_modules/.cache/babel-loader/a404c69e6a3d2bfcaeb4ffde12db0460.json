{"ast":null,"code":"/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from '../../../base/common/event.js';\nimport { toDisposable } from '../../../base/common/lifecycle.js';\nimport { score } from './languageSelector.js';\nimport { shouldSynchronizeModel } from '../services/modelService.js';\n\nfunction isExclusive(selector) {\n  if (typeof selector === 'string') {\n    return false;\n  } else if (Array.isArray(selector)) {\n    return selector.every(isExclusive);\n  } else {\n    return !!selector.exclusive;\n  }\n}\n\nvar LanguageFeatureRegistry =\n/** @class */\nfunction () {\n  function LanguageFeatureRegistry() {\n    this._clock = 0;\n    this._entries = [];\n    this._onDidChange = new Emitter();\n  }\n\n  Object.defineProperty(LanguageFeatureRegistry.prototype, \"onDidChange\", {\n    get: function () {\n      return this._onDidChange.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LanguageFeatureRegistry.prototype.register = function (selector, provider) {\n    var _this = this;\n\n    var entry = {\n      selector: selector,\n      provider: provider,\n      _score: -1,\n      _time: this._clock++\n    };\n\n    this._entries.push(entry);\n\n    this._lastCandidate = undefined;\n\n    this._onDidChange.fire(this._entries.length);\n\n    return toDisposable(function () {\n      if (entry) {\n        var idx = _this._entries.indexOf(entry);\n\n        if (idx >= 0) {\n          _this._entries.splice(idx, 1);\n\n          _this._lastCandidate = undefined;\n\n          _this._onDidChange.fire(_this._entries.length);\n\n          entry = undefined;\n        }\n      }\n    });\n  };\n\n  LanguageFeatureRegistry.prototype.has = function (model) {\n    return this.all(model).length > 0;\n  };\n\n  LanguageFeatureRegistry.prototype.all = function (model) {\n    if (!model) {\n      return [];\n    }\n\n    this._updateScores(model);\n\n    var result = []; // from registry\n\n    for (var _i = 0, _a = this._entries; _i < _a.length; _i++) {\n      var entry = _a[_i];\n\n      if (entry._score > 0) {\n        result.push(entry.provider);\n      }\n    }\n\n    return result;\n  };\n\n  LanguageFeatureRegistry.prototype.ordered = function (model) {\n    var result = [];\n\n    this._orderedForEach(model, function (entry) {\n      return result.push(entry.provider);\n    });\n\n    return result;\n  };\n\n  LanguageFeatureRegistry.prototype.orderedGroups = function (model) {\n    var result = [];\n    var lastBucket;\n    var lastBucketScore;\n\n    this._orderedForEach(model, function (entry) {\n      if (lastBucket && lastBucketScore === entry._score) {\n        lastBucket.push(entry.provider);\n      } else {\n        lastBucketScore = entry._score;\n        lastBucket = [entry.provider];\n        result.push(lastBucket);\n      }\n    });\n\n    return result;\n  };\n\n  LanguageFeatureRegistry.prototype._orderedForEach = function (model, callback) {\n    if (!model) {\n      return;\n    }\n\n    this._updateScores(model);\n\n    for (var _i = 0, _a = this._entries; _i < _a.length; _i++) {\n      var entry = _a[_i];\n\n      if (entry._score > 0) {\n        callback(entry);\n      }\n    }\n  };\n\n  LanguageFeatureRegistry.prototype._updateScores = function (model) {\n    var candidate = {\n      uri: model.uri.toString(),\n      language: model.getLanguageIdentifier().language\n    };\n\n    if (this._lastCandidate && this._lastCandidate.language === candidate.language && this._lastCandidate.uri === candidate.uri) {\n      // nothing has changed\n      return;\n    }\n\n    this._lastCandidate = candidate;\n\n    for (var _i = 0, _a = this._entries; _i < _a.length; _i++) {\n      var entry = _a[_i];\n      entry._score = score(entry.selector, model.uri, model.getLanguageIdentifier().language, shouldSynchronizeModel(model));\n\n      if (isExclusive(entry.selector) && entry._score > 0) {\n        // support for one exclusive selector that overwrites\n        // any other selector\n        for (var _b = 0, _c = this._entries; _b < _c.length; _b++) {\n          var entry_1 = _c[_b];\n          entry_1._score = 0;\n        }\n\n        entry._score = 1000;\n        break;\n      }\n    } // needs sorting\n\n\n    this._entries.sort(LanguageFeatureRegistry._compareByScoreAndTime);\n  };\n\n  LanguageFeatureRegistry._compareByScoreAndTime = function (a, b) {\n    if (a._score < b._score) {\n      return 1;\n    } else if (a._score > b._score) {\n      return -1;\n    } else if (a._time < b._time) {\n      return 1;\n    } else if (a._time > b._time) {\n      return -1;\n    } else {\n      return 0;\n    }\n  };\n\n  return LanguageFeatureRegistry;\n}();\n\nexport { LanguageFeatureRegistry };","map":null,"metadata":{},"sourceType":"module"}